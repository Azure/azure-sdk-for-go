package keyvault

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// ActionType enumerates the values for action type.
type ActionType string

const (
	// AutoRenew ...
	AutoRenew ActionType = "AutoRenew"
	// EmailContacts ...
	EmailContacts ActionType = "EmailContacts"
)

// PossibleActionTypeValues returns an array of possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{AutoRenew, EmailContacts}
}

// DataAction enumerates the values for data action.
type DataAction string

const (
	// BackupHsmKeys Backup HSM keys.
	BackupHsmKeys DataAction = "Microsoft.KeyVault/managedHsm/keys/backup/action"
	// CreateHsmKey Create an HSM key.
	CreateHsmKey DataAction = "Microsoft.KeyVault/managedHsm/keys/create"
	// DecryptHsmKey Decrypt using an HSM key.
	DecryptHsmKey DataAction = "Microsoft.KeyVault/managedHsm/keys/decrypt/action"
	// DeleteHsmKey Delete an HSM key.
	DeleteHsmKey DataAction = "Microsoft.KeyVault/managedHsm/keys/delete"
	// DeleteRoleAssignment Delete role assignment.
	DeleteRoleAssignment DataAction = "Microsoft.KeyVault/managedHsm/roleAssignments/delete/action"
	// DownloadHsmSecurityDomain Download an HSM security domain.
	DownloadHsmSecurityDomain DataAction = "Microsoft.KeyVault/managedHsm/securitydomain/download/action"
	// EncryptHsmKey Encrypt using an HSM key.
	EncryptHsmKey DataAction = "Microsoft.KeyVault/managedHsm/keys/encrypt/action"
	// ExportHsmKey Export an HSM key.
	ExportHsmKey DataAction = "Microsoft.KeyVault/managedHsm/keys/export/action"
	// GetRoleAssignment Get role assignment.
	GetRoleAssignment DataAction = "Microsoft.KeyVault/managedHsm/roleAssignments/read/action"
	// ImportHsmKey Import an HSM key.
	ImportHsmKey DataAction = "Microsoft.KeyVault/managedHsm/keys/import/action"
	// PurgeDeletedHsmKey Purge a deleted HSM key.
	PurgeDeletedHsmKey DataAction = "Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete"
	// ReadDeletedHsmKey Read deleted HSM key.
	ReadDeletedHsmKey DataAction = "Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action"
	// ReadHsmBackupStatus Read an HSM backup status.
	ReadHsmBackupStatus DataAction = "Microsoft.KeyVault/managedHsm/backup/status/action"
	// ReadHsmKey Read HSM key metadata.
	ReadHsmKey DataAction = "Microsoft.KeyVault/managedHsm/keys/read/action"
	// ReadHsmRestoreStatus Read an HSM restore status.
	ReadHsmRestoreStatus DataAction = "Microsoft.KeyVault/managedHsm/restore/status/action"
	// ReadHsmSecurityDomainStatus Check the status of the HSM security domain exchange file.
	ReadHsmSecurityDomainStatus DataAction = "Microsoft.KeyVault/managedHsm/securitydomain/upload/read"
	// ReadHsmSecurityDomainTransferKey Download an HSM security domain transfer key.
	ReadHsmSecurityDomainTransferKey DataAction = "Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read"
	// ReadRoleDefinition Get role definition.
	ReadRoleDefinition DataAction = "Microsoft.KeyVault/managedHsm/roleDefinitions/read/action"
	// RecoverDeletedHsmKey Recover deleted HSM key.
	RecoverDeletedHsmKey DataAction = "Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action"
	// RestoreHsmKeys Restore HSM keys.
	RestoreHsmKeys DataAction = "Microsoft.KeyVault/managedHsm/keys/restore/action"
	// SignHsmKey Sign using an HSM key.
	SignHsmKey DataAction = "Microsoft.KeyVault/managedHsm/keys/sign/action"
	// StartHsmBackup Start an HSM backup.
	StartHsmBackup DataAction = "Microsoft.KeyVault/managedHsm/backup/start/action"
	// StartHsmRestore Start an HSM restore.
	StartHsmRestore DataAction = "Microsoft.KeyVault/managedHsm/restore/start/action"
	// UnwrapHsmKey Unwrap using an HSM key.
	UnwrapHsmKey DataAction = "Microsoft.KeyVault/managedHsm/keys/unwrap/action"
	// UploadHsmSecurityDomain Upload an HSM security domain.
	UploadHsmSecurityDomain DataAction = "Microsoft.KeyVault/managedHsm/securitydomain/upload/action"
	// VerifyHsmKey Verify using an HSM key.
	VerifyHsmKey DataAction = "Microsoft.KeyVault/managedHsm/keys/verify/action"
	// WrapHsmKey Wrap using an HSM key.
	WrapHsmKey DataAction = "Microsoft.KeyVault/managedHsm/keys/wrap/action"
	// WriteHsmKey Update an HSM key.
	WriteHsmKey DataAction = "Microsoft.KeyVault/managedHsm/keys/write/action"
	// WriteRoleAssignment Create or update role assignment.
	WriteRoleAssignment DataAction = "Microsoft.KeyVault/managedHsm/roleAssignments/write/action"
)

// PossibleDataActionValues returns an array of possible values for the DataAction const type.
func PossibleDataActionValues() []DataAction {
	return []DataAction{BackupHsmKeys, CreateHsmKey, DecryptHsmKey, DeleteHsmKey, DeleteRoleAssignment, DownloadHsmSecurityDomain, EncryptHsmKey, ExportHsmKey, GetRoleAssignment, ImportHsmKey, PurgeDeletedHsmKey, ReadDeletedHsmKey, ReadHsmBackupStatus, ReadHsmKey, ReadHsmRestoreStatus, ReadHsmSecurityDomainStatus, ReadHsmSecurityDomainTransferKey, ReadRoleDefinition, RecoverDeletedHsmKey, RestoreHsmKeys, SignHsmKey, StartHsmBackup, StartHsmRestore, UnwrapHsmKey, UploadHsmSecurityDomain, VerifyHsmKey, WrapHsmKey, WriteHsmKey, WriteRoleAssignment}
}

// DeletionRecoveryLevel enumerates the values for deletion recovery level.
type DeletionRecoveryLevel string

const (
	// CustomizedRecoverable Denotes a vault state in which deletion is recoverable without the possibility for
	// immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90).This level
	// guarantees the recoverability of the deleted entity during the retention interval and while the
	// subscription is still available.
	CustomizedRecoverable DeletionRecoveryLevel = "CustomizedRecoverable"
	// CustomizedRecoverableProtectedSubscription Denotes a vault and subscription state in which deletion is
	// recoverable, immediate and permanent deletion (i.e. purge) is not permitted, and in which the
	// subscription itself cannot be permanently canceled when 7<= SoftDeleteRetentionInDays < 90. This level
	// guarantees the recoverability of the deleted entity during the retention interval, and also reflects the
	// fact that the subscription itself cannot be cancelled.
	CustomizedRecoverableProtectedSubscription DeletionRecoveryLevel = "CustomizedRecoverable+ProtectedSubscription"
	// CustomizedRecoverablePurgeable Denotes a vault state in which deletion is recoverable, and which also
	// permits immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90). This
	// level guarantees the recoverability of the deleted entity during the retention interval, unless a Purge
	// operation is requested, or the subscription is cancelled.
	CustomizedRecoverablePurgeable DeletionRecoveryLevel = "CustomizedRecoverable+Purgeable"
	// Purgeable Denotes a vault state in which deletion is an irreversible operation, without the possibility
	// for recovery. This level corresponds to no protection being available against a Delete operation; the
	// data is irretrievably lost upon accepting a Delete operation at the entity level or higher (vault,
	// resource group, subscription etc.)
	Purgeable DeletionRecoveryLevel = "Purgeable"
	// Recoverable Denotes a vault state in which deletion is recoverable without the possibility for immediate
	// and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted entity
	// during the retention interval(90 days) and while the subscription is still available. System wil
	// permanently delete it after 90 days, if not recovered
	Recoverable DeletionRecoveryLevel = "Recoverable"
	// RecoverableProtectedSubscription Denotes a vault and subscription state in which deletion is recoverable
	// within retention interval (90 days), immediate and permanent deletion (i.e. purge) is not permitted, and
	// in which the subscription itself  cannot be permanently canceled. System wil permanently delete it after
	// 90 days, if not recovered
	RecoverableProtectedSubscription DeletionRecoveryLevel = "Recoverable+ProtectedSubscription"
	// RecoverablePurgeable Denotes a vault state in which deletion is recoverable, and which also permits
	// immediate and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted
	// entity during the retention interval (90 days), unless a Purge operation is requested, or the
	// subscription is cancelled. System wil permanently delete it after 90 days, if not recovered
	RecoverablePurgeable DeletionRecoveryLevel = "Recoverable+Purgeable"
)

// PossibleDeletionRecoveryLevelValues returns an array of possible values for the DeletionRecoveryLevel const type.
func PossibleDeletionRecoveryLevelValues() []DeletionRecoveryLevel {
	return []DeletionRecoveryLevel{CustomizedRecoverable, CustomizedRecoverableProtectedSubscription, CustomizedRecoverablePurgeable, Purgeable, Recoverable, RecoverableProtectedSubscription, RecoverablePurgeable}
}

// JSONWebKeyCurveName enumerates the values for json web key curve name.
type JSONWebKeyCurveName string

const (
	// P256 ...
	P256 JSONWebKeyCurveName = "P-256"
	// P256K ...
	P256K JSONWebKeyCurveName = "P-256K"
	// P384 ...
	P384 JSONWebKeyCurveName = "P-384"
	// P521 ...
	P521 JSONWebKeyCurveName = "P-521"
)

// PossibleJSONWebKeyCurveNameValues returns an array of possible values for the JSONWebKeyCurveName const type.
func PossibleJSONWebKeyCurveNameValues() []JSONWebKeyCurveName {
	return []JSONWebKeyCurveName{P256, P256K, P384, P521}
}

// JSONWebKeyEncryptionAlgorithm enumerates the values for json web key encryption algorithm.
type JSONWebKeyEncryptionAlgorithm string

const (
	// A128CBC ...
	A128CBC JSONWebKeyEncryptionAlgorithm = "A128CBC"
	// A128CBCPAD ...
	A128CBCPAD JSONWebKeyEncryptionAlgorithm = "A128CBCPAD"
	// A128GCM ...
	A128GCM JSONWebKeyEncryptionAlgorithm = "A128GCM"
	// A128KW ...
	A128KW JSONWebKeyEncryptionAlgorithm = "A128KW"
	// A192CBC ...
	A192CBC JSONWebKeyEncryptionAlgorithm = "A192CBC"
	// A192CBCPAD ...
	A192CBCPAD JSONWebKeyEncryptionAlgorithm = "A192CBCPAD"
	// A192GCM ...
	A192GCM JSONWebKeyEncryptionAlgorithm = "A192GCM"
	// A192KW ...
	A192KW JSONWebKeyEncryptionAlgorithm = "A192KW"
	// A256CBC ...
	A256CBC JSONWebKeyEncryptionAlgorithm = "A256CBC"
	// A256CBCPAD ...
	A256CBCPAD JSONWebKeyEncryptionAlgorithm = "A256CBCPAD"
	// A256GCM ...
	A256GCM JSONWebKeyEncryptionAlgorithm = "A256GCM"
	// A256KW ...
	A256KW JSONWebKeyEncryptionAlgorithm = "A256KW"
	// RSA15 ...
	RSA15 JSONWebKeyEncryptionAlgorithm = "RSA1_5"
	// RSAOAEP ...
	RSAOAEP JSONWebKeyEncryptionAlgorithm = "RSA-OAEP"
	// RSAOAEP256 ...
	RSAOAEP256 JSONWebKeyEncryptionAlgorithm = "RSA-OAEP-256"
)

// PossibleJSONWebKeyEncryptionAlgorithmValues returns an array of possible values for the JSONWebKeyEncryptionAlgorithm const type.
func PossibleJSONWebKeyEncryptionAlgorithmValues() []JSONWebKeyEncryptionAlgorithm {
	return []JSONWebKeyEncryptionAlgorithm{A128CBC, A128CBCPAD, A128GCM, A128KW, A192CBC, A192CBCPAD, A192GCM, A192KW, A256CBC, A256CBCPAD, A256GCM, A256KW, RSA15, RSAOAEP, RSAOAEP256}
}

// JSONWebKeyOperation enumerates the values for json web key operation.
type JSONWebKeyOperation string

const (
	// Decrypt ...
	Decrypt JSONWebKeyOperation = "decrypt"
	// Encrypt ...
	Encrypt JSONWebKeyOperation = "encrypt"
	// Import ...
	Import JSONWebKeyOperation = "import"
	// Sign ...
	Sign JSONWebKeyOperation = "sign"
	// UnwrapKey ...
	UnwrapKey JSONWebKeyOperation = "unwrapKey"
	// Verify ...
	Verify JSONWebKeyOperation = "verify"
	// WrapKey ...
	WrapKey JSONWebKeyOperation = "wrapKey"
)

// PossibleJSONWebKeyOperationValues returns an array of possible values for the JSONWebKeyOperation const type.
func PossibleJSONWebKeyOperationValues() []JSONWebKeyOperation {
	return []JSONWebKeyOperation{Decrypt, Encrypt, Import, Sign, UnwrapKey, Verify, WrapKey}
}

// JSONWebKeySignatureAlgorithm enumerates the values for json web key signature algorithm.
type JSONWebKeySignatureAlgorithm string

const (
	// ES256 ECDSA using P-256 and SHA-256, as described in https://tools.ietf.org/html/rfc7518.
	ES256 JSONWebKeySignatureAlgorithm = "ES256"
	// ES256K ECDSA using P-256K and SHA-256, as described in https://tools.ietf.org/html/rfc7518
	ES256K JSONWebKeySignatureAlgorithm = "ES256K"
	// ES384 ECDSA using P-384 and SHA-384, as described in https://tools.ietf.org/html/rfc7518
	ES384 JSONWebKeySignatureAlgorithm = "ES384"
	// ES512 ECDSA using P-521 and SHA-512, as described in https://tools.ietf.org/html/rfc7518
	ES512 JSONWebKeySignatureAlgorithm = "ES512"
	// PS256 RSASSA-PSS using SHA-256 and MGF1 with SHA-256, as described in
	// https://tools.ietf.org/html/rfc7518
	PS256 JSONWebKeySignatureAlgorithm = "PS256"
	// PS384 RSASSA-PSS using SHA-384 and MGF1 with SHA-384, as described in
	// https://tools.ietf.org/html/rfc7518
	PS384 JSONWebKeySignatureAlgorithm = "PS384"
	// PS512 RSASSA-PSS using SHA-512 and MGF1 with SHA-512, as described in
	// https://tools.ietf.org/html/rfc7518
	PS512 JSONWebKeySignatureAlgorithm = "PS512"
	// RS256 RSASSA-PKCS1-v1_5 using SHA-256, as described in https://tools.ietf.org/html/rfc7518
	RS256 JSONWebKeySignatureAlgorithm = "RS256"
	// RS384 RSASSA-PKCS1-v1_5 using SHA-384, as described in https://tools.ietf.org/html/rfc7518
	RS384 JSONWebKeySignatureAlgorithm = "RS384"
	// RS512 RSASSA-PKCS1-v1_5 using SHA-512, as described in https://tools.ietf.org/html/rfc7518
	RS512 JSONWebKeySignatureAlgorithm = "RS512"
	// RSNULL Reserved
	RSNULL JSONWebKeySignatureAlgorithm = "RSNULL"
)

// PossibleJSONWebKeySignatureAlgorithmValues returns an array of possible values for the JSONWebKeySignatureAlgorithm const type.
func PossibleJSONWebKeySignatureAlgorithmValues() []JSONWebKeySignatureAlgorithm {
	return []JSONWebKeySignatureAlgorithm{ES256, ES256K, ES384, ES512, PS256, PS384, PS512, RS256, RS384, RS512, RSNULL}
}

// JSONWebKeyType enumerates the values for json web key type.
type JSONWebKeyType string

const (
	// EC ...
	EC JSONWebKeyType = "EC"
	// ECHSM ...
	ECHSM JSONWebKeyType = "EC-HSM"
	// Oct ...
	Oct JSONWebKeyType = "oct"
	// OctHSM ...
	OctHSM JSONWebKeyType = "oct-HSM"
	// RSA ...
	RSA JSONWebKeyType = "RSA"
	// RSAHSM ...
	RSAHSM JSONWebKeyType = "RSA-HSM"
)

// PossibleJSONWebKeyTypeValues returns an array of possible values for the JSONWebKeyType const type.
func PossibleJSONWebKeyTypeValues() []JSONWebKeyType {
	return []JSONWebKeyType{EC, ECHSM, Oct, OctHSM, RSA, RSAHSM}
}

// KeyUsageType enumerates the values for key usage type.
type KeyUsageType string

const (
	// CRLSign ...
	CRLSign KeyUsageType = "cRLSign"
	// DataEncipherment ...
	DataEncipherment KeyUsageType = "dataEncipherment"
	// DecipherOnly ...
	DecipherOnly KeyUsageType = "decipherOnly"
	// DigitalSignature ...
	DigitalSignature KeyUsageType = "digitalSignature"
	// EncipherOnly ...
	EncipherOnly KeyUsageType = "encipherOnly"
	// KeyAgreement ...
	KeyAgreement KeyUsageType = "keyAgreement"
	// KeyCertSign ...
	KeyCertSign KeyUsageType = "keyCertSign"
	// KeyEncipherment ...
	KeyEncipherment KeyUsageType = "keyEncipherment"
	// NonRepudiation ...
	NonRepudiation KeyUsageType = "nonRepudiation"
)

// PossibleKeyUsageTypeValues returns an array of possible values for the KeyUsageType const type.
func PossibleKeyUsageTypeValues() []KeyUsageType {
	return []KeyUsageType{CRLSign, DataEncipherment, DecipherOnly, DigitalSignature, EncipherOnly, KeyAgreement, KeyCertSign, KeyEncipherment, NonRepudiation}
}

// OperationStatus enumerates the values for operation status.
type OperationStatus string

const (
	// Failed ...
	Failed OperationStatus = "Failed"
	// InProgress ...
	InProgress OperationStatus = "InProgress"
	// Success ...
	Success OperationStatus = "Success"
)

// PossibleOperationStatusValues returns an array of possible values for the OperationStatus const type.
func PossibleOperationStatusValues() []OperationStatus {
	return []OperationStatus{Failed, InProgress, Success}
}

// RoleDefinitionType enumerates the values for role definition type.
type RoleDefinitionType string

const (
	// MicrosoftAuthorizationroleDefinitions ...
	MicrosoftAuthorizationroleDefinitions RoleDefinitionType = "Microsoft.Authorization/roleDefinitions"
)

// PossibleRoleDefinitionTypeValues returns an array of possible values for the RoleDefinitionType const type.
func PossibleRoleDefinitionTypeValues() []RoleDefinitionType {
	return []RoleDefinitionType{MicrosoftAuthorizationroleDefinitions}
}

// RoleScope enumerates the values for role scope.
type RoleScope string

const (
	// Global Global scope
	Global RoleScope = "/"
	// Keys Keys scope
	Keys RoleScope = "/keys"
)

// PossibleRoleScopeValues returns an array of possible values for the RoleScope const type.
func PossibleRoleScopeValues() []RoleScope {
	return []RoleScope{Global, Keys}
}

// RoleType enumerates the values for role type.
type RoleType string

const (
	// BuiltInRole Built in role.
	BuiltInRole RoleType = "AKVBuiltInRole"
	// CustomRole Custom role.
	CustomRole RoleType = "CustomRole"
)

// PossibleRoleTypeValues returns an array of possible values for the RoleType const type.
func PossibleRoleTypeValues() []RoleType {
	return []RoleType{BuiltInRole, CustomRole}
}

// SasTokenType enumerates the values for sas token type.
type SasTokenType string

const (
	// Account ...
	Account SasTokenType = "account"
	// Service ...
	Service SasTokenType = "service"
)

// PossibleSasTokenTypeValues returns an array of possible values for the SasTokenType const type.
func PossibleSasTokenTypeValues() []SasTokenType {
	return []SasTokenType{Account, Service}
}
