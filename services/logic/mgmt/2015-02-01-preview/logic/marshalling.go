package logic

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/xml"
	"reflect"
	"time"
	"unsafe"
)

const (
	rfc3339Format = "2006-01-02T15:04:05.0000000Z07:00"
)

// used to convert times from UTC to GMT before sending across the wire
var gmt = time.FixedZone("GMT", 0)

// internal type used for marshalling time in RFC1123 format
type timeRFC1123 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC1123.
func (t timeRFC1123) MarshalText() ([]byte, error) {
	return []byte(t.Format(time.RFC1123)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC1123.
func (t *timeRFC1123) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(time.RFC1123, string(data))
	return
}

// internal type used for marshalling time in RFC3339 format
type timeRFC3339 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC3339.
func (t timeRFC3339) MarshalText() ([]byte, error) {
	return []byte(t.Format(rfc3339Format)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC3339.
func (t *timeRFC3339) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(rfc3339Format, string(data))
	return
}

// internal type used for marshalling
type workflowProperties struct {
	ProvisioningState WorkflowProvisioningStateType `json:"provisioningState,omitempty"`
	CreatedTime       *timeRFC3339                  `json:"createdTime,omitempty"`
	ChangedTime       *timeRFC3339                  `json:"changedTime,omitempty"`
	State             WorkflowStateType             `json:"state,omitempty"`
	Version           *string                       `json:"version,omitempty"`
	AccessEndpoint    *string                       `json:"accessEndpoint,omitempty"`
	Sku               *Sku                          `json:"sku,omitempty"`
	DefinitionLink    *ContentLink                  `json:"definitionLink,omitempty"`
	Definition        map[string]interface{}        `json:"definition,omitempty"`
	ParametersLink    *ContentLink                  `json:"parametersLink,omitempty"`
	Parameters        map[string]WorkflowParameter  `json:"parameters,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for WorkflowProperties.
func (wp WorkflowProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowProperties)(nil)).Elem().Size() != reflect.TypeOf((*workflowProperties)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowProperties and workflowProperties")
	}
	wp2 := (*workflowProperties)(unsafe.Pointer(&wp))
	return e.EncodeElement(*wp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for WorkflowProperties.
func (wp *WorkflowProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowProperties)(nil)).Elem().Size() != reflect.TypeOf((*workflowProperties)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowProperties and workflowProperties")
	}
	wp2 := (*workflowProperties)(unsafe.Pointer(wp))
	return d.DecodeElement(wp2, &start)
}

// internal type used for marshalling
type workflowVersionProperties struct {
	CreatedTime    *timeRFC3339                 `json:"createdTime,omitempty"`
	ChangedTime    *timeRFC3339                 `json:"changedTime,omitempty"`
	State          WorkflowStateType            `json:"state,omitempty"`
	Version        *string                      `json:"version,omitempty"`
	AccessEndpoint *string                      `json:"accessEndpoint,omitempty"`
	Sku            *Sku                         `json:"sku,omitempty"`
	DefinitionLink *ContentLink                 `json:"definitionLink,omitempty"`
	Definition     map[string]interface{}       `json:"definition,omitempty"`
	ParametersLink *ContentLink                 `json:"parametersLink,omitempty"`
	Parameters     map[string]WorkflowParameter `json:"parameters,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for WorkflowVersionProperties.
func (wvp WorkflowVersionProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowVersionProperties)(nil)).Elem().Size() != reflect.TypeOf((*workflowVersionProperties)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowVersionProperties and workflowVersionProperties")
	}
	wvp2 := (*workflowVersionProperties)(unsafe.Pointer(&wvp))
	return e.EncodeElement(*wvp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for WorkflowVersionProperties.
func (wvp *WorkflowVersionProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowVersionProperties)(nil)).Elem().Size() != reflect.TypeOf((*workflowVersionProperties)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowVersionProperties and workflowVersionProperties")
	}
	wvp2 := (*workflowVersionProperties)(unsafe.Pointer(wvp))
	return d.DecodeElement(wvp2, &start)
}

// internal type used for marshalling
type workflowAccessKeyProperties struct {
	NotBefore *timeRFC3339 `json:"notBefore,omitempty"`
	NotAfter  *timeRFC3339 `json:"notAfter,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for WorkflowAccessKeyProperties.
func (wakp WorkflowAccessKeyProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowAccessKeyProperties)(nil)).Elem().Size() != reflect.TypeOf((*workflowAccessKeyProperties)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowAccessKeyProperties and workflowAccessKeyProperties")
	}
	wakp2 := (*workflowAccessKeyProperties)(unsafe.Pointer(&wakp))
	return e.EncodeElement(*wakp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for WorkflowAccessKeyProperties.
func (wakp *WorkflowAccessKeyProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowAccessKeyProperties)(nil)).Elem().Size() != reflect.TypeOf((*workflowAccessKeyProperties)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowAccessKeyProperties and workflowAccessKeyProperties")
	}
	wakp2 := (*workflowAccessKeyProperties)(unsafe.Pointer(wakp))
	return d.DecodeElement(wakp2, &start)
}

// internal type used for marshalling
type workflowTriggerRecurrence struct {
	Frequency RecurrenceFrequencyType `json:"frequency,omitempty"`
	Interval  *int32                  `json:"interval,omitempty"`
	StartTime *timeRFC3339            `json:"startTime,omitempty"`
	TimeZone  *string                 `json:"timeZone,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for WorkflowTriggerRecurrence.
func (wtr WorkflowTriggerRecurrence) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowTriggerRecurrence)(nil)).Elem().Size() != reflect.TypeOf((*workflowTriggerRecurrence)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowTriggerRecurrence and workflowTriggerRecurrence")
	}
	wtr2 := (*workflowTriggerRecurrence)(unsafe.Pointer(&wtr))
	return e.EncodeElement(*wtr2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for WorkflowTriggerRecurrence.
func (wtr *WorkflowTriggerRecurrence) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowTriggerRecurrence)(nil)).Elem().Size() != reflect.TypeOf((*workflowTriggerRecurrence)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowTriggerRecurrence and workflowTriggerRecurrence")
	}
	wtr2 := (*workflowTriggerRecurrence)(unsafe.Pointer(wtr))
	return d.DecodeElement(wtr2, &start)
}

// internal type used for marshalling
type workflowTriggerProperties struct {
	ProvisioningState WorkflowTriggerProvisioningStateType `json:"provisioningState,omitempty"`
	CreatedTime       *timeRFC3339                         `json:"createdTime,omitempty"`
	ChangedTime       *timeRFC3339                         `json:"changedTime,omitempty"`
	State             WorkflowStateType                    `json:"state,omitempty"`
	Status            WorkflowStatusType                   `json:"status,omitempty"`
	LastExecutionTime *timeRFC3339                         `json:"lastExecutionTime,omitempty"`
	NextExecutionTime *timeRFC3339                         `json:"nextExecutionTime,omitempty"`
	Recurrence        *WorkflowTriggerRecurrence           `json:"recurrence,omitempty"`
	Workflow          *ResourceReference                   `json:"workflow,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for WorkflowTriggerProperties.
func (wtp WorkflowTriggerProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowTriggerProperties)(nil)).Elem().Size() != reflect.TypeOf((*workflowTriggerProperties)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowTriggerProperties and workflowTriggerProperties")
	}
	wtp2 := (*workflowTriggerProperties)(unsafe.Pointer(&wtp))
	return e.EncodeElement(*wtp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for WorkflowTriggerProperties.
func (wtp *WorkflowTriggerProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowTriggerProperties)(nil)).Elem().Size() != reflect.TypeOf((*workflowTriggerProperties)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowTriggerProperties and workflowTriggerProperties")
	}
	wtp2 := (*workflowTriggerProperties)(unsafe.Pointer(wtp))
	return d.DecodeElement(wtp2, &start)
}

// internal type used for marshalling
type workflowTriggerHistoryProperties struct {
	StartTime   *timeRFC3339           `json:"startTime,omitempty"`
	EndTime     *timeRFC3339           `json:"endTime,omitempty"`
	Status      WorkflowStatusType     `json:"status,omitempty"`
	Code        *string                `json:"code,omitempty"`
	Error       map[string]interface{} `json:"error,omitempty"`
	TrackingID  *string                `json:"trackingId,omitempty"`
	InputsLink  *ContentLink           `json:"inputsLink,omitempty"`
	OutputsLink *ContentLink           `json:"outputsLink,omitempty"`
	Fired       *bool                  `json:"fired,omitempty"`
	Run         *ResourceReference     `json:"run,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for WorkflowTriggerHistoryProperties.
func (wthp WorkflowTriggerHistoryProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowTriggerHistoryProperties)(nil)).Elem().Size() != reflect.TypeOf((*workflowTriggerHistoryProperties)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowTriggerHistoryProperties and workflowTriggerHistoryProperties")
	}
	wthp2 := (*workflowTriggerHistoryProperties)(unsafe.Pointer(&wthp))
	return e.EncodeElement(*wthp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for WorkflowTriggerHistoryProperties.
func (wthp *WorkflowTriggerHistoryProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowTriggerHistoryProperties)(nil)).Elem().Size() != reflect.TypeOf((*workflowTriggerHistoryProperties)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowTriggerHistoryProperties and workflowTriggerHistoryProperties")
	}
	wthp2 := (*workflowTriggerHistoryProperties)(unsafe.Pointer(wthp))
	return d.DecodeElement(wthp2, &start)
}

// internal type used for marshalling
type workflowRunTrigger struct {
	Name        *string                `json:"name,omitempty"`
	Inputs      map[string]interface{} `json:"inputs,omitempty"`
	InputsLink  *ContentLink           `json:"inputsLink,omitempty"`
	Outputs     map[string]interface{} `json:"outputs,omitempty"`
	OutputsLink *ContentLink           `json:"outputsLink,omitempty"`
	StartTime   *timeRFC3339           `json:"startTime,omitempty"`
	EndTime     *timeRFC3339           `json:"endTime,omitempty"`
	TrackingID  *string                `json:"trackingId,omitempty"`
	Code        *string                `json:"code,omitempty"`
	Status      WorkflowStatusType     `json:"status,omitempty"`
	Error       map[string]interface{} `json:"error,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for WorkflowRunTrigger.
func (wrt WorkflowRunTrigger) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowRunTrigger)(nil)).Elem().Size() != reflect.TypeOf((*workflowRunTrigger)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowRunTrigger and workflowRunTrigger")
	}
	wrt2 := (*workflowRunTrigger)(unsafe.Pointer(&wrt))
	return e.EncodeElement(*wrt2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for WorkflowRunTrigger.
func (wrt *WorkflowRunTrigger) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowRunTrigger)(nil)).Elem().Size() != reflect.TypeOf((*workflowRunTrigger)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowRunTrigger and workflowRunTrigger")
	}
	wrt2 := (*workflowRunTrigger)(unsafe.Pointer(wrt))
	return d.DecodeElement(wrt2, &start)
}

// internal type used for marshalling
type workflowRunProperties struct {
	StartTime     *timeRFC3339                       `json:"startTime,omitempty"`
	EndTime       *timeRFC3339                       `json:"endTime,omitempty"`
	Status        WorkflowStatusType                 `json:"status,omitempty"`
	Code          *string                            `json:"code,omitempty"`
	Error         map[string]interface{}             `json:"error,omitempty"`
	CorrelationID *string                            `json:"correlationId,omitempty"`
	Workflow      *ResourceReference                 `json:"workflow,omitempty"`
	Trigger       *WorkflowRunTrigger                `json:"trigger,omitempty"`
	Outputs       map[string]WorkflowOutputParameter `json:"outputs,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for WorkflowRunProperties.
func (wrp WorkflowRunProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowRunProperties)(nil)).Elem().Size() != reflect.TypeOf((*workflowRunProperties)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowRunProperties and workflowRunProperties")
	}
	wrp2 := (*workflowRunProperties)(unsafe.Pointer(&wrp))
	return e.EncodeElement(*wrp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for WorkflowRunProperties.
func (wrp *WorkflowRunProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowRunProperties)(nil)).Elem().Size() != reflect.TypeOf((*workflowRunProperties)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowRunProperties and workflowRunProperties")
	}
	wrp2 := (*workflowRunProperties)(unsafe.Pointer(wrp))
	return d.DecodeElement(wrp2, &start)
}

// internal type used for marshalling
type workflowRunActionProperties struct {
	StartTime   *timeRFC3339           `json:"startTime,omitempty"`
	EndTime     *timeRFC3339           `json:"endTime,omitempty"`
	Status      WorkflowStatusType     `json:"status,omitempty"`
	Code        *string                `json:"code,omitempty"`
	Error       map[string]interface{} `json:"error,omitempty"`
	TrackingID  *string                `json:"trackingId,omitempty"`
	InputsLink  *ContentLink           `json:"inputsLink,omitempty"`
	OutputsLink *ContentLink           `json:"outputsLink,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for WorkflowRunActionProperties.
func (wrap WorkflowRunActionProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowRunActionProperties)(nil)).Elem().Size() != reflect.TypeOf((*workflowRunActionProperties)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowRunActionProperties and workflowRunActionProperties")
	}
	wrap2 := (*workflowRunActionProperties)(unsafe.Pointer(&wrap))
	return e.EncodeElement(*wrap2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for WorkflowRunActionProperties.
func (wrap *WorkflowRunActionProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*WorkflowRunActionProperties)(nil)).Elem().Size() != reflect.TypeOf((*workflowRunActionProperties)(nil)).Elem().Size() {
		panic("size mismatch between WorkflowRunActionProperties and workflowRunActionProperties")
	}
	wrap2 := (*workflowRunActionProperties)(unsafe.Pointer(wrap))
	return d.DecodeElement(wrap2, &start)
}
