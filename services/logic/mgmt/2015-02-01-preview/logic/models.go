package logic

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"net/http"
	"time"
)

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// KeyType enumerates the values for key type.
type KeyType string

const (
	// KeyNone represents an empty KeyType.
	KeyNone KeyType = ""
	// KeyNotSpecified ...
	KeyNotSpecified KeyType = "NotSpecified"
	// KeyPrimary ...
	KeyPrimary KeyType = "Primary"
	// KeySecondary ...
	KeySecondary KeyType = "Secondary"
)

// ParameterType enumerates the values for parameter type.
type ParameterType string

const (
	// ParameterArray ...
	ParameterArray ParameterType = "Array"
	// ParameterBool ...
	ParameterBool ParameterType = "Bool"
	// ParameterFloat ...
	ParameterFloat ParameterType = "Float"
	// ParameterInt ...
	ParameterInt ParameterType = "Int"
	// ParameterNone represents an empty ParameterType.
	ParameterNone ParameterType = ""
	// ParameterNotSpecified ...
	ParameterNotSpecified ParameterType = "NotSpecified"
	// ParameterObject ...
	ParameterObject ParameterType = "Object"
	// ParameterSecureObject ...
	ParameterSecureObject ParameterType = "SecureObject"
	// ParameterSecureString ...
	ParameterSecureString ParameterType = "SecureString"
	// ParameterString ...
	ParameterString ParameterType = "String"
)

// RecurrenceFrequencyType enumerates the values for recurrence frequency.
type RecurrenceFrequencyType string

const (
	// RecurrenceFrequencyDay ...
	RecurrenceFrequencyDay RecurrenceFrequencyType = "Day"
	// RecurrenceFrequencyHour ...
	RecurrenceFrequencyHour RecurrenceFrequencyType = "Hour"
	// RecurrenceFrequencyMinute ...
	RecurrenceFrequencyMinute RecurrenceFrequencyType = "Minute"
	// RecurrenceFrequencyMonth ...
	RecurrenceFrequencyMonth RecurrenceFrequencyType = "Month"
	// RecurrenceFrequencyNone represents an empty RecurrenceFrequencyType.
	RecurrenceFrequencyNone RecurrenceFrequencyType = ""
	// RecurrenceFrequencySecond ...
	RecurrenceFrequencySecond RecurrenceFrequencyType = "Second"
	// RecurrenceFrequencyWeek ...
	RecurrenceFrequencyWeek RecurrenceFrequencyType = "Week"
	// RecurrenceFrequencyYear ...
	RecurrenceFrequencyYear RecurrenceFrequencyType = "Year"
)

// SkuNameType enumerates the values for sku name.
type SkuNameType string

const (
	// SkuNameBasic ...
	SkuNameBasic SkuNameType = "Basic"
	// SkuNameFree ...
	SkuNameFree SkuNameType = "Free"
	// SkuNameNone represents an empty SkuNameType.
	SkuNameNone SkuNameType = ""
	// SkuNameNotSpecified ...
	SkuNameNotSpecified SkuNameType = "NotSpecified"
	// SkuNamePremium ...
	SkuNamePremium SkuNameType = "Premium"
	// SkuNameShared ...
	SkuNameShared SkuNameType = "Shared"
	// SkuNameStandard ...
	SkuNameStandard SkuNameType = "Standard"
)

// WorkflowProvisioningStateType enumerates the values for workflow provisioning state.
type WorkflowProvisioningStateType string

const (
	// WorkflowProvisioningStateMoving ...
	WorkflowProvisioningStateMoving WorkflowProvisioningStateType = "Moving"
	// WorkflowProvisioningStateNone represents an empty WorkflowProvisioningStateType.
	WorkflowProvisioningStateNone WorkflowProvisioningStateType = ""
	// WorkflowProvisioningStateNotSpecified ...
	WorkflowProvisioningStateNotSpecified WorkflowProvisioningStateType = "NotSpecified"
	// WorkflowProvisioningStateSucceeded ...
	WorkflowProvisioningStateSucceeded WorkflowProvisioningStateType = "Succeeded"
)

// WorkflowStateType enumerates the values for workflow state.
type WorkflowStateType string

const (
	// WorkflowStateDeleted ...
	WorkflowStateDeleted WorkflowStateType = "Deleted"
	// WorkflowStateDisabled ...
	WorkflowStateDisabled WorkflowStateType = "Disabled"
	// WorkflowStateEnabled ...
	WorkflowStateEnabled WorkflowStateType = "Enabled"
	// WorkflowStateNone represents an empty WorkflowStateType.
	WorkflowStateNone WorkflowStateType = ""
	// WorkflowStateNotSpecified ...
	WorkflowStateNotSpecified WorkflowStateType = "NotSpecified"
	// WorkflowStateSuspended ...
	WorkflowStateSuspended WorkflowStateType = "Suspended"
)

// WorkflowStatusType enumerates the values for workflow status.
type WorkflowStatusType string

const (
	// WorkflowStatusAborted ...
	WorkflowStatusAborted WorkflowStatusType = "Aborted"
	// WorkflowStatusCancelled ...
	WorkflowStatusCancelled WorkflowStatusType = "Cancelled"
	// WorkflowStatusFailed ...
	WorkflowStatusFailed WorkflowStatusType = "Failed"
	// WorkflowStatusFaulted ...
	WorkflowStatusFaulted WorkflowStatusType = "Faulted"
	// WorkflowStatusNone represents an empty WorkflowStatusType.
	WorkflowStatusNone WorkflowStatusType = ""
	// WorkflowStatusNotSpecified ...
	WorkflowStatusNotSpecified WorkflowStatusType = "NotSpecified"
	// WorkflowStatusPaused ...
	WorkflowStatusPaused WorkflowStatusType = "Paused"
	// WorkflowStatusRunning ...
	WorkflowStatusRunning WorkflowStatusType = "Running"
	// WorkflowStatusSkipped ...
	WorkflowStatusSkipped WorkflowStatusType = "Skipped"
	// WorkflowStatusSucceeded ...
	WorkflowStatusSucceeded WorkflowStatusType = "Succeeded"
	// WorkflowStatusSuspended ...
	WorkflowStatusSuspended WorkflowStatusType = "Suspended"
	// WorkflowStatusTimedOut ...
	WorkflowStatusTimedOut WorkflowStatusType = "TimedOut"
	// WorkflowStatusWaiting ...
	WorkflowStatusWaiting WorkflowStatusType = "Waiting"
)

// WorkflowTriggerProvisioningStateType enumerates the values for workflow trigger provisioning state.
type WorkflowTriggerProvisioningStateType string

const (
	// WorkflowTriggerProvisioningStateCreating ...
	WorkflowTriggerProvisioningStateCreating WorkflowTriggerProvisioningStateType = "Creating"
	// WorkflowTriggerProvisioningStateNone represents an empty WorkflowTriggerProvisioningStateType.
	WorkflowTriggerProvisioningStateNone WorkflowTriggerProvisioningStateType = ""
	// WorkflowTriggerProvisioningStateNotSpecified ...
	WorkflowTriggerProvisioningStateNotSpecified WorkflowTriggerProvisioningStateType = "NotSpecified"
	// WorkflowTriggerProvisioningStateSucceeded ...
	WorkflowTriggerProvisioningStateSucceeded WorkflowTriggerProvisioningStateType = "Succeeded"
	// WorkflowTriggerProvisioningStateUpdating ...
	WorkflowTriggerProvisioningStateUpdating WorkflowTriggerProvisioningStateType = "Updating"
)

// ContentHash ...
type ContentHash struct {
	// Algorithm - Gets or sets the algorithm.
	Algorithm *string `json:"algorithm,omitempty"`
	// Value - Gets or sets the value.
	Value *string `json:"value,omitempty"`
}

// ContentLink ...
type ContentLink struct {
	// URI - Gets or sets the content link URI.
	URI *string `json:"uri,omitempty"`
	// ContentVersion - Gets or sets the content version.
	ContentVersion *string `json:"contentVersion,omitempty"`
	// ContentSize - Gets or sets the content size.
	ContentSize *int64 `json:"contentSize,omitempty"`
	// ContentHash - Gets or sets the content hash.
	ContentHash *ContentHash `json:"contentHash,omitempty"`
	// Metadata - Gets or sets the metadata.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// RegenerateSecretKeyParameters ...
type RegenerateSecretKeyParameters struct {
	// KeyType - Gets or sets the key type. Possible values include: 'NotSpecified', 'Primary', 'Secondary', 'None'
	KeyType KeyType `json:"keyType,omitempty"`
}

// Resource ...
type Resource struct {
	// ID - Gets or sets the resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
	// Location - Gets or sets the resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Gets or sets the resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

// ResourceReference ...
type ResourceReference struct {
	// ID - Gets or sets the resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
}

// RunWorkflowParameters ...
type RunWorkflowParameters struct {
	// Name - Gets or sets the name of workflow run trigger.
	Name *string `json:"name,omitempty"`
	// Outputs - Gets or sets the outputs of workflow run trigger.
	Outputs map[string]interface{} `json:"outputs,omitempty"`
}

// Sku ...
type Sku struct {
	// Name - Gets or sets the name. Possible values include: 'NotSpecified', 'Free', 'Shared', 'Basic', 'Standard', 'Premium', 'None'
	Name SkuNameType `json:"name,omitempty"`
	// Plan - Gets or sets the reference to plan.
	Plan *ResourceReference `json:"plan,omitempty"`
}

// SubResource ...
type SubResource struct {
	// ID - Gets or sets the resource id.
	ID *string `json:"id,omitempty"`
}

// Workflow ...
type Workflow struct {
	rawResponse *http.Response
	// ID - Gets or sets the resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
	// Location - Gets or sets the resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Gets or sets the resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - Gets or sets the workflow properties.
	*WorkflowProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (w Workflow) Response() *http.Response {
	return w.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (w Workflow) StatusCode() int {
	return w.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (w Workflow) Status() string {
	return w.rawResponse.Status
}

// WorkflowAccessKey ...
type WorkflowAccessKey struct {
	rawResponse *http.Response
	// ID - Gets or sets the resource id.
	ID *string `json:"id,omitempty"`
	// Properties - Gets or sets the workflow access key properties.
	*WorkflowAccessKeyProperties `json:"properties,omitempty"`
	// Name - Gets the workflow access key name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the workflow access key type.
	Type *string `json:"type,omitempty"`
}

// Response returns the raw HTTP response object.
func (wak WorkflowAccessKey) Response() *http.Response {
	return wak.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wak WorkflowAccessKey) StatusCode() int {
	return wak.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wak WorkflowAccessKey) Status() string {
	return wak.rawResponse.Status
}

// WorkflowAccessKeyListResult ...
type WorkflowAccessKeyListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of workflow access keys.
	Value []WorkflowAccessKey `json:"value,omitempty"`
	// NextLink - Gets or sets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (waklr WorkflowAccessKeyListResult) Response() *http.Response {
	return waklr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (waklr WorkflowAccessKeyListResult) StatusCode() int {
	return waklr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (waklr WorkflowAccessKeyListResult) Status() string {
	return waklr.rawResponse.Status
}

// WorkflowAccessKeyProperties ...
type WorkflowAccessKeyProperties struct {
	// NotBefore - Gets or sets the not-before time.
	NotBefore *time.Time `json:"notBefore,omitempty"`
	// NotAfter - Gets or sets the not-after time.
	NotAfter *time.Time `json:"notAfter,omitempty"`
}

// WorkflowFilter ...
type WorkflowFilter struct {
	// State - Gets or sets the state of workflows. Possible values include: 'NotSpecified', 'Enabled', 'Disabled', 'Deleted', 'Suspended', 'None'
	State WorkflowStateType `json:"state,omitempty"`
}

// WorkflowListResult ...
type WorkflowListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets the list of workflows.
	Value []Workflow `json:"value,omitempty"`
	// NextLink - Gets or sets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (wlr WorkflowListResult) Response() *http.Response {
	return wlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wlr WorkflowListResult) StatusCode() int {
	return wlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wlr WorkflowListResult) Status() string {
	return wlr.rawResponse.Status
}

// WorkflowOutputParameter ...
type WorkflowOutputParameter struct {
	// Type - Gets or sets the type. Possible values include: 'NotSpecified', 'String', 'SecureString', 'Int', 'Float', 'Bool', 'Array', 'Object', 'SecureObject', 'None'
	Type ParameterType `json:"type,omitempty"`
	// Value - Gets or sets the value.
	Value map[string]interface{} `json:"value,omitempty"`
	// Metadata - Gets or sets the metadata.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Error - Gets the error.
	Error map[string]interface{} `json:"error,omitempty"`
}

// WorkflowParameter ...
type WorkflowParameter struct {
	// Type - Gets or sets the type. Possible values include: 'NotSpecified', 'String', 'SecureString', 'Int', 'Float', 'Bool', 'Array', 'Object', 'SecureObject', 'None'
	Type ParameterType `json:"type,omitempty"`
	// Value - Gets or sets the value.
	Value map[string]interface{} `json:"value,omitempty"`
	// Metadata - Gets or sets the metadata.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// WorkflowProperties ...
type WorkflowProperties struct {
	// ProvisioningState - Gets the provisioning state. Possible values include: 'NotSpecified', 'Moving', 'Succeeded', 'None'
	ProvisioningState WorkflowProvisioningStateType `json:"provisioningState,omitempty"`
	// CreatedTime - Gets the created time.
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// ChangedTime - Gets the changed time.
	ChangedTime *time.Time `json:"changedTime,omitempty"`
	// State - Gets or sets the state. Possible values include: 'NotSpecified', 'Enabled', 'Disabled', 'Deleted', 'Suspended', 'None'
	State WorkflowStateType `json:"state,omitempty"`
	// Version - Gets the version.
	Version *string `json:"version,omitempty"`
	// AccessEndpoint - Gets the access endpoint.
	AccessEndpoint *string `json:"accessEndpoint,omitempty"`
	// Sku - Gets or sets the sku.
	Sku *Sku `json:"sku,omitempty"`
	// DefinitionLink - Gets or sets the link to definition.
	DefinitionLink *ContentLink `json:"definitionLink,omitempty"`
	// Definition - Gets or sets the definition.
	Definition map[string]interface{} `json:"definition,omitempty"`
	// ParametersLink - Gets or sets the link to parameters.
	ParametersLink *ContentLink `json:"parametersLink,omitempty"`
	// Parameters - Gets or sets the parameters.
	Parameters map[string]WorkflowParameter `json:"parameters,omitempty"`
}

// WorkflowRun ...
type WorkflowRun struct {
	rawResponse *http.Response
	// ID - Gets or sets the resource id.
	ID *string `json:"id,omitempty"`
	// Properties - Gets or sets the workflow run properties.
	*WorkflowRunProperties `json:"properties,omitempty"`
	// Name - Gets the workflow run name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the workflow run type.
	Type *string `json:"type,omitempty"`
}

// Response returns the raw HTTP response object.
func (wr WorkflowRun) Response() *http.Response {
	return wr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wr WorkflowRun) StatusCode() int {
	return wr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wr WorkflowRun) Status() string {
	return wr.rawResponse.Status
}

// WorkflowRunAction ...
type WorkflowRunAction struct {
	rawResponse *http.Response
	// ID - Gets or sets the resource id.
	ID *string `json:"id,omitempty"`
	// Properties - Gets or sets the workflow run action properties.
	*WorkflowRunActionProperties `json:"properties,omitempty"`
	// Name - Gets the workflow run action name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the workflow run action type.
	Type *string `json:"type,omitempty"`
}

// Response returns the raw HTTP response object.
func (wra WorkflowRunAction) Response() *http.Response {
	return wra.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wra WorkflowRunAction) StatusCode() int {
	return wra.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wra WorkflowRunAction) Status() string {
	return wra.rawResponse.Status
}

// WorkflowRunActionFilter ...
type WorkflowRunActionFilter struct {
	// Status - Gets or sets the status of workflow run action. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
}

// WorkflowRunActionListResult ...
type WorkflowRunActionListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of workflow run actions.
	Value []WorkflowRunAction `json:"value,omitempty"`
	// NextLink - Gets or sets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (wralr WorkflowRunActionListResult) Response() *http.Response {
	return wralr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wralr WorkflowRunActionListResult) StatusCode() int {
	return wralr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wralr WorkflowRunActionListResult) Status() string {
	return wralr.rawResponse.Status
}

// WorkflowRunActionProperties ...
type WorkflowRunActionProperties struct {
	// StartTime - Gets the start time.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - Gets the end time.
	EndTime *time.Time `json:"endTime,omitempty"`
	// Status - Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
	// Code - Gets the code.
	Code *string `json:"code,omitempty"`
	// Error - Gets the error.
	Error map[string]interface{} `json:"error,omitempty"`
	// TrackingID - Gets the trackingId.
	TrackingID *string `json:"trackingId,omitempty"`
	// InputsLink - Gets the link to inputs.
	InputsLink *ContentLink `json:"inputsLink,omitempty"`
	// OutputsLink - Gets the link to outputs.
	OutputsLink *ContentLink `json:"outputsLink,omitempty"`
}

// WorkflowRunFilter ...
type WorkflowRunFilter struct {
	// Status - Gets or sets the status of workflow run. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
}

// WorkflowRunListResult ...
type WorkflowRunListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of workflow runs.
	Value []WorkflowRun `json:"value,omitempty"`
	// NextLink - Gets or sets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (wrlr WorkflowRunListResult) Response() *http.Response {
	return wrlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wrlr WorkflowRunListResult) StatusCode() int {
	return wrlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wrlr WorkflowRunListResult) Status() string {
	return wrlr.rawResponse.Status
}

// WorkflowRunProperties ...
type WorkflowRunProperties struct {
	// StartTime - Gets the start time.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - Gets the end time.
	EndTime *time.Time `json:"endTime,omitempty"`
	// Status - Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
	// Code - Gets the code.
	Code *string `json:"code,omitempty"`
	// Error - Gets the error.
	Error map[string]interface{} `json:"error,omitempty"`
	// CorrelationID - Gets the correlation id.
	CorrelationID *string `json:"correlationId,omitempty"`
	// Workflow - Gets the reference to workflow version.
	Workflow *ResourceReference `json:"workflow,omitempty"`
	// Trigger - Gets the fired trigger.
	Trigger *WorkflowRunTrigger `json:"trigger,omitempty"`
	// Outputs - Gets the outputs.
	Outputs map[string]WorkflowOutputParameter `json:"outputs,omitempty"`
}

// WorkflowRunTrigger ...
type WorkflowRunTrigger struct {
	// Name - Gets the name.
	Name *string `json:"name,omitempty"`
	// Inputs - Gets the inputs.
	Inputs map[string]interface{} `json:"inputs,omitempty"`
	// InputsLink - Gets the link to inputs.
	InputsLink *ContentLink `json:"inputsLink,omitempty"`
	// Outputs - Gets the outputs.
	Outputs map[string]interface{} `json:"outputs,omitempty"`
	// OutputsLink - Gets the link to outputs.
	OutputsLink *ContentLink `json:"outputsLink,omitempty"`
	// StartTime - Gets the start time.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - Gets the end time.
	EndTime *time.Time `json:"endTime,omitempty"`
	// TrackingID - Gets the trackingId.
	TrackingID *string `json:"trackingId,omitempty"`
	// Code - Gets the code.
	Code *string `json:"code,omitempty"`
	// Status - Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
	// Error - Gets the error.
	Error map[string]interface{} `json:"error,omitempty"`
}

// WorkflowSecretKeys ...
type WorkflowSecretKeys struct {
	rawResponse *http.Response
	// PrimarySecretKey - Gets the primary secret key.
	PrimarySecretKey *string `json:"primarySecretKey,omitempty"`
	// SecondarySecretKey - Gets the secondary secret key.
	SecondarySecretKey *string `json:"secondarySecretKey,omitempty"`
}

// Response returns the raw HTTP response object.
func (wsk WorkflowSecretKeys) Response() *http.Response {
	return wsk.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wsk WorkflowSecretKeys) StatusCode() int {
	return wsk.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wsk WorkflowSecretKeys) Status() string {
	return wsk.rawResponse.Status
}

// WorkflowTrigger ...
type WorkflowTrigger struct {
	rawResponse *http.Response
	// ID - Gets or sets the resource id.
	ID *string `json:"id,omitempty"`
	// Properties - Gets or sets the workflow trigger properties.
	*WorkflowTriggerProperties `json:"properties,omitempty"`
	// Name - Gets the workflow trigger name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the workflow trigger type.
	Type *string `json:"type,omitempty"`
}

// Response returns the raw HTTP response object.
func (wt WorkflowTrigger) Response() *http.Response {
	return wt.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wt WorkflowTrigger) StatusCode() int {
	return wt.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wt WorkflowTrigger) Status() string {
	return wt.rawResponse.Status
}

// WorkflowTriggerFilter ...
type WorkflowTriggerFilter struct {
	// State - Gets or sets the state of workflow trigger. Possible values include: 'NotSpecified', 'Enabled', 'Disabled', 'Deleted', 'Suspended', 'None'
	State WorkflowStateType `json:"state,omitempty"`
}

// WorkflowTriggerHistory ...
type WorkflowTriggerHistory struct {
	rawResponse *http.Response
	// ID - Gets or sets the resource id.
	ID *string `json:"id,omitempty"`
	// Properties - Gets the workflow trigger history properties.
	*WorkflowTriggerHistoryProperties `json:"properties,omitempty"`
	// Name - Gets the workflow trigger history name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the workflow trigger history type.
	Type *string `json:"type,omitempty"`
}

// Response returns the raw HTTP response object.
func (wth WorkflowTriggerHistory) Response() *http.Response {
	return wth.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wth WorkflowTriggerHistory) StatusCode() int {
	return wth.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wth WorkflowTriggerHistory) Status() string {
	return wth.rawResponse.Status
}

// WorkflowTriggerHistoryFilter ...
type WorkflowTriggerHistoryFilter struct {
	// Status - Gets or sets the status of workflow trigger history. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
}

// WorkflowTriggerHistoryListResult ...
type WorkflowTriggerHistoryListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of workflow trigger histories.
	Value []WorkflowTriggerHistory `json:"value,omitempty"`
	// NextLink - Gets or sets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (wthlr WorkflowTriggerHistoryListResult) Response() *http.Response {
	return wthlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wthlr WorkflowTriggerHistoryListResult) StatusCode() int {
	return wthlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wthlr WorkflowTriggerHistoryListResult) Status() string {
	return wthlr.rawResponse.Status
}

// WorkflowTriggerHistoryProperties ...
type WorkflowTriggerHistoryProperties struct {
	// StartTime - Gets the start time.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - Gets the end time.
	EndTime *time.Time `json:"endTime,omitempty"`
	// Status - Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
	// Code - Gets the code.
	Code *string `json:"code,omitempty"`
	// Error - Gets the error.
	Error map[string]interface{} `json:"error,omitempty"`
	// TrackingID - Gets the tracking id.
	TrackingID *string `json:"trackingId,omitempty"`
	// InputsLink - Gets the link to input parameters.
	InputsLink *ContentLink `json:"inputsLink,omitempty"`
	// OutputsLink - Gets the link to output parameters.
	OutputsLink *ContentLink `json:"outputsLink,omitempty"`
	// Fired - Gets a value indicating whether trigger was fired.
	Fired *bool `json:"fired,omitempty"`
	// Run - Gets the reference to workflow run.
	Run *ResourceReference `json:"run,omitempty"`
}

// WorkflowTriggerListResult ...
type WorkflowTriggerListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets a list of workflow triggers.
	Value []WorkflowTrigger `json:"value,omitempty"`
	// NextLink - Gets or sets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (wtlr WorkflowTriggerListResult) Response() *http.Response {
	return wtlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wtlr WorkflowTriggerListResult) StatusCode() int {
	return wtlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wtlr WorkflowTriggerListResult) Status() string {
	return wtlr.rawResponse.Status
}

// WorkflowTriggerProperties ...
type WorkflowTriggerProperties struct {
	// ProvisioningState - Gets the provisioning state. Possible values include: 'NotSpecified', 'Creating', 'Succeeded', 'Updating', 'None'
	ProvisioningState WorkflowTriggerProvisioningStateType `json:"provisioningState,omitempty"`
	// CreatedTime - Gets the created time.
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// ChangedTime - Gets the changed time.
	ChangedTime *time.Time `json:"changedTime,omitempty"`
	// State - Gets the state. Possible values include: 'NotSpecified', 'Enabled', 'Disabled', 'Deleted', 'Suspended', 'None'
	State WorkflowStateType `json:"state,omitempty"`
	// Status - Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
	// LastExecutionTime - Gets the last execution time.
	LastExecutionTime *time.Time `json:"lastExecutionTime,omitempty"`
	// NextExecutionTime - Gets the next execution time.
	NextExecutionTime *time.Time `json:"nextExecutionTime,omitempty"`
	// Recurrence - Gets the workflow trigger recurrence.
	Recurrence *WorkflowTriggerRecurrence `json:"recurrence,omitempty"`
	// Workflow - Gets the reference to workflow.
	Workflow *ResourceReference `json:"workflow,omitempty"`
}

// WorkflowTriggerRecurrence ...
type WorkflowTriggerRecurrence struct {
	// Frequency - Gets or sets the frequency. Possible values include: 'Second', 'Minute', 'Hour', 'Day', 'Week', 'Month', 'Year', 'None'
	Frequency RecurrenceFrequencyType `json:"frequency,omitempty"`
	// Interval - Gets or sets the interval.
	Interval *int32 `json:"interval,omitempty"`
	// StartTime - Gets or sets the start time.
	StartTime *time.Time `json:"startTime,omitempty"`
	// TimeZone - Gets or sets the time zone.
	TimeZone *string `json:"timeZone,omitempty"`
}

// WorkflowVersion ...
type WorkflowVersion struct {
	rawResponse *http.Response
	// ID - Gets or sets the resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
	// Location - Gets or sets the resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Gets or sets the resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - Gets or sets the workflow version properties.
	*WorkflowVersionProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (wv WorkflowVersion) Response() *http.Response {
	return wv.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wv WorkflowVersion) StatusCode() int {
	return wv.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wv WorkflowVersion) Status() string {
	return wv.rawResponse.Status
}

// WorkflowVersionProperties ...
type WorkflowVersionProperties struct {
	// CreatedTime - Gets the created time.
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// ChangedTime - Gets the changed time.
	ChangedTime *time.Time `json:"changedTime,omitempty"`
	// State - Gets or sets the state. Possible values include: 'NotSpecified', 'Enabled', 'Disabled', 'Deleted', 'Suspended', 'None'
	State WorkflowStateType `json:"state,omitempty"`
	// Version - Gets the version.
	Version *string `json:"version,omitempty"`
	// AccessEndpoint - Gets the access endpoint.
	AccessEndpoint *string `json:"accessEndpoint,omitempty"`
	// Sku - Gets or sets the sku.
	Sku *Sku `json:"sku,omitempty"`
	// DefinitionLink - Gets or sets the link to definition.
	DefinitionLink *ContentLink `json:"definitionLink,omitempty"`
	// Definition - Gets or sets the definition.
	Definition map[string]interface{} `json:"definition,omitempty"`
	// ParametersLink - Gets or sets the link to parameters.
	ParametersLink *ContentLink `json:"parametersLink,omitempty"`
	// Parameters - Gets or sets the parameters.
	Parameters map[string]WorkflowParameter `json:"parameters,omitempty"`
}
