package logic

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"encoding/json"
	"github.com/Azure/azure-pipeline-go/pipeline"
	"io/ioutil"
	"net/http"
	"net/url"
)

const (
	// ServiceVersion specifies the version of the operations used in this package.
	ServiceVersion = "2016-06-01"
	// DefaultBaseURL is the default URL used for the service Logic
	DefaultBaseURL = "https://management.azure.com"
)

// ManagementClient is the base client for Logic.
type ManagementClient struct {
	url url.URL
	p   pipeline.Pipeline
}

// NewManagementClient creates an instance of the ManagementClient client.
func NewManagementClient(p pipeline.Pipeline) ManagementClient {
	u, err := url.Parse(DefaultBaseURL)
	if err != nil {
		panic(err)
	}
	return NewManagementClientWithURL(*u, p)
}

// NewManagementClientWithURL creates an instance of the ManagementClient client.
func NewManagementClientWithURL(url url.URL, p pipeline.Pipeline) ManagementClient {
	return ManagementClient{
		url: url,
		p:   p,
	}
}

// URL returns a copy of the URL for this client.
func (mc ManagementClient) URL() url.URL {
	return mc.url
}

// Pipeline returns the pipeline for this client.
func (mc ManagementClient) Pipeline() pipeline.Pipeline {
	return mc.p
}

// ListOperations lists all of the available Logic REST API operations.
func (client ManagementClient) ListOperations(ctx context.Context) (*OperationListResult, error) {
	req, err := client.listOperationsPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listOperationsResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*OperationListResult), err
}

// listOperationsPreparer prepares the ListOperations request.
func (client ManagementClient) listOperationsPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/providers/Microsoft.Logic/operations"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listOperationsResponder handles the response to the ListOperations request.
func (client ManagementClient) listOperationsResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &OperationListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}
