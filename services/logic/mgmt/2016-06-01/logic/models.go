package logic

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"net/http"
	"time"
)

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// AgreementType enumerates the values for agreement type.
type AgreementType string

const (
	// AgreementAS2 ...
	AgreementAS2 AgreementType = "AS2"
	// AgreementEdifact ...
	AgreementEdifact AgreementType = "Edifact"
	// AgreementNone represents an empty AgreementType.
	AgreementNone AgreementType = ""
	// AgreementNotSpecified ...
	AgreementNotSpecified AgreementType = "NotSpecified"
	// AgreementX12 ...
	AgreementX12 AgreementType = "X12"
)

// DayOfWeekType enumerates the values for day of week.
type DayOfWeekType string

const (
	// DayOfWeekFriday ...
	DayOfWeekFriday DayOfWeekType = "Friday"
	// DayOfWeekMonday ...
	DayOfWeekMonday DayOfWeekType = "Monday"
	// DayOfWeekNone represents an empty DayOfWeekType.
	DayOfWeekNone DayOfWeekType = ""
	// DayOfWeekSaturday ...
	DayOfWeekSaturday DayOfWeekType = "Saturday"
	// DayOfWeekSunday ...
	DayOfWeekSunday DayOfWeekType = "Sunday"
	// DayOfWeekThursday ...
	DayOfWeekThursday DayOfWeekType = "Thursday"
	// DayOfWeekTuesday ...
	DayOfWeekTuesday DayOfWeekType = "Tuesday"
	// DayOfWeekWednesday ...
	DayOfWeekWednesday DayOfWeekType = "Wednesday"
)

// DaysOfWeekType enumerates the values for days of week.
type DaysOfWeekType string

const (
	// DaysOfWeekFriday ...
	DaysOfWeekFriday DaysOfWeekType = "Friday"
	// DaysOfWeekMonday ...
	DaysOfWeekMonday DaysOfWeekType = "Monday"
	// DaysOfWeekNone represents an empty DaysOfWeekType.
	DaysOfWeekNone DaysOfWeekType = ""
	// DaysOfWeekSaturday ...
	DaysOfWeekSaturday DaysOfWeekType = "Saturday"
	// DaysOfWeekSunday ...
	DaysOfWeekSunday DaysOfWeekType = "Sunday"
	// DaysOfWeekThursday ...
	DaysOfWeekThursday DaysOfWeekType = "Thursday"
	// DaysOfWeekTuesday ...
	DaysOfWeekTuesday DaysOfWeekType = "Tuesday"
	// DaysOfWeekWednesday ...
	DaysOfWeekWednesday DaysOfWeekType = "Wednesday"
)

// EdifactCharacterSetType enumerates the values for edifact character set.
type EdifactCharacterSetType string

const (
	// EdifactCharacterSetKECA ...
	EdifactCharacterSetKECA EdifactCharacterSetType = "KECA"
	// EdifactCharacterSetNone represents an empty EdifactCharacterSetType.
	EdifactCharacterSetNone EdifactCharacterSetType = ""
	// EdifactCharacterSetNotSpecified ...
	EdifactCharacterSetNotSpecified EdifactCharacterSetType = "NotSpecified"
	// EdifactCharacterSetUNOA ...
	EdifactCharacterSetUNOA EdifactCharacterSetType = "UNOA"
	// EdifactCharacterSetUNOB ...
	EdifactCharacterSetUNOB EdifactCharacterSetType = "UNOB"
	// EdifactCharacterSetUNOC ...
	EdifactCharacterSetUNOC EdifactCharacterSetType = "UNOC"
	// EdifactCharacterSetUNOD ...
	EdifactCharacterSetUNOD EdifactCharacterSetType = "UNOD"
	// EdifactCharacterSetUNOE ...
	EdifactCharacterSetUNOE EdifactCharacterSetType = "UNOE"
	// EdifactCharacterSetUNOF ...
	EdifactCharacterSetUNOF EdifactCharacterSetType = "UNOF"
	// EdifactCharacterSetUNOG ...
	EdifactCharacterSetUNOG EdifactCharacterSetType = "UNOG"
	// EdifactCharacterSetUNOH ...
	EdifactCharacterSetUNOH EdifactCharacterSetType = "UNOH"
	// EdifactCharacterSetUNOI ...
	EdifactCharacterSetUNOI EdifactCharacterSetType = "UNOI"
	// EdifactCharacterSetUNOJ ...
	EdifactCharacterSetUNOJ EdifactCharacterSetType = "UNOJ"
	// EdifactCharacterSetUNOK ...
	EdifactCharacterSetUNOK EdifactCharacterSetType = "UNOK"
	// EdifactCharacterSetUNOX ...
	EdifactCharacterSetUNOX EdifactCharacterSetType = "UNOX"
	// EdifactCharacterSetUNOY ...
	EdifactCharacterSetUNOY EdifactCharacterSetType = "UNOY"
)

// EdifactDecimalIndicatorType enumerates the values for edifact decimal indicator.
type EdifactDecimalIndicatorType string

const (
	// EdifactDecimalIndicatorComma ...
	EdifactDecimalIndicatorComma EdifactDecimalIndicatorType = "Comma"
	// EdifactDecimalIndicatorDecimal ...
	EdifactDecimalIndicatorDecimal EdifactDecimalIndicatorType = "Decimal"
	// EdifactDecimalIndicatorNone represents an empty EdifactDecimalIndicatorType.
	EdifactDecimalIndicatorNone EdifactDecimalIndicatorType = ""
	// EdifactDecimalIndicatorNotSpecified ...
	EdifactDecimalIndicatorNotSpecified EdifactDecimalIndicatorType = "NotSpecified"
)

// EncryptionAlgorithmType enumerates the values for encryption algorithm.
type EncryptionAlgorithmType string

const (
	// EncryptionAlgorithmAES128 ...
	EncryptionAlgorithmAES128 EncryptionAlgorithmType = "AES128"
	// EncryptionAlgorithmAES192 ...
	EncryptionAlgorithmAES192 EncryptionAlgorithmType = "AES192"
	// EncryptionAlgorithmAES256 ...
	EncryptionAlgorithmAES256 EncryptionAlgorithmType = "AES256"
	// EncryptionAlgorithmDES3 ...
	EncryptionAlgorithmDES3 EncryptionAlgorithmType = "DES3"
	// EncryptionAlgorithmNone ...
	EncryptionAlgorithmNone EncryptionAlgorithmType = "None"
	// EncryptionAlgorithmNone represents an empty EncryptionAlgorithmType.
	EncryptionAlgorithmNone EncryptionAlgorithmType = ""
	// EncryptionAlgorithmNotSpecified ...
	EncryptionAlgorithmNotSpecified EncryptionAlgorithmType = "NotSpecified"
	// EncryptionAlgorithmRC2 ...
	EncryptionAlgorithmRC2 EncryptionAlgorithmType = "RC2"
)

// HashingAlgorithmType enumerates the values for hashing algorithm.
type HashingAlgorithmType string

const (
	// HashingAlgorithmMD5 ...
	HashingAlgorithmMD5 HashingAlgorithmType = "MD5"
	// HashingAlgorithmNone ...
	HashingAlgorithmNone HashingAlgorithmType = "None"
	// HashingAlgorithmNone represents an empty HashingAlgorithmType.
	HashingAlgorithmNone HashingAlgorithmType = ""
	// HashingAlgorithmNotSpecified ...
	HashingAlgorithmNotSpecified HashingAlgorithmType = "NotSpecified"
	// HashingAlgorithmSHA1 ...
	HashingAlgorithmSHA1 HashingAlgorithmType = "SHA1"
	// HashingAlgorithmSHA2256 ...
	HashingAlgorithmSHA2256 HashingAlgorithmType = "SHA2256"
	// HashingAlgorithmSHA2384 ...
	HashingAlgorithmSHA2384 HashingAlgorithmType = "SHA2384"
	// HashingAlgorithmSHA2512 ...
	HashingAlgorithmSHA2512 HashingAlgorithmType = "SHA2512"
)

// IntegrationAccountSkuNameType enumerates the values for integration account sku name.
type IntegrationAccountSkuNameType string

const (
	// IntegrationAccountSkuNameFree ...
	IntegrationAccountSkuNameFree IntegrationAccountSkuNameType = "Free"
	// IntegrationAccountSkuNameNone represents an empty IntegrationAccountSkuNameType.
	IntegrationAccountSkuNameNone IntegrationAccountSkuNameType = ""
	// IntegrationAccountSkuNameNotSpecified ...
	IntegrationAccountSkuNameNotSpecified IntegrationAccountSkuNameType = "NotSpecified"
	// IntegrationAccountSkuNameStandard ...
	IntegrationAccountSkuNameStandard IntegrationAccountSkuNameType = "Standard"
)

// KeyType enumerates the values for key type.
type KeyType string

const (
	// KeyNone represents an empty KeyType.
	KeyNone KeyType = ""
	// KeyNotSpecified ...
	KeyNotSpecified KeyType = "NotSpecified"
	// KeyPrimary ...
	KeyPrimary KeyType = "Primary"
	// KeySecondary ...
	KeySecondary KeyType = "Secondary"
)

// MapType enumerates the values for map type.
type MapType string

const (
	// MapNone represents an empty MapType.
	MapNone MapType = ""
	// MapNotSpecified ...
	MapNotSpecified MapType = "NotSpecified"
	// MapXslt ...
	MapXslt MapType = "Xslt"
)

// MessageFilterType enumerates the values for message filter type.
type MessageFilterType string

const (
	// MessageFilterExclude ...
	MessageFilterExclude MessageFilterType = "Exclude"
	// MessageFilterInclude ...
	MessageFilterInclude MessageFilterType = "Include"
	// MessageFilterNone represents an empty MessageFilterType.
	MessageFilterNone MessageFilterType = ""
	// MessageFilterNotSpecified ...
	MessageFilterNotSpecified MessageFilterType = "NotSpecified"
)

// ParameterType enumerates the values for parameter type.
type ParameterType string

const (
	// ParameterArray ...
	ParameterArray ParameterType = "Array"
	// ParameterBool ...
	ParameterBool ParameterType = "Bool"
	// ParameterFloat ...
	ParameterFloat ParameterType = "Float"
	// ParameterInt ...
	ParameterInt ParameterType = "Int"
	// ParameterNone represents an empty ParameterType.
	ParameterNone ParameterType = ""
	// ParameterNotSpecified ...
	ParameterNotSpecified ParameterType = "NotSpecified"
	// ParameterObject ...
	ParameterObject ParameterType = "Object"
	// ParameterSecureObject ...
	ParameterSecureObject ParameterType = "SecureObject"
	// ParameterSecureString ...
	ParameterSecureString ParameterType = "SecureString"
	// ParameterString ...
	ParameterString ParameterType = "String"
)

// PartnerType enumerates the values for partner type.
type PartnerType string

const (
	// PartnerB2B ...
	PartnerB2B PartnerType = "B2B"
	// PartnerNone represents an empty PartnerType.
	PartnerNone PartnerType = ""
	// PartnerNotSpecified ...
	PartnerNotSpecified PartnerType = "NotSpecified"
)

// RecurrenceFrequencyType enumerates the values for recurrence frequency.
type RecurrenceFrequencyType string

const (
	// RecurrenceFrequencyDay ...
	RecurrenceFrequencyDay RecurrenceFrequencyType = "Day"
	// RecurrenceFrequencyHour ...
	RecurrenceFrequencyHour RecurrenceFrequencyType = "Hour"
	// RecurrenceFrequencyMinute ...
	RecurrenceFrequencyMinute RecurrenceFrequencyType = "Minute"
	// RecurrenceFrequencyMonth ...
	RecurrenceFrequencyMonth RecurrenceFrequencyType = "Month"
	// RecurrenceFrequencyNone represents an empty RecurrenceFrequencyType.
	RecurrenceFrequencyNone RecurrenceFrequencyType = ""
	// RecurrenceFrequencyNotSpecified ...
	RecurrenceFrequencyNotSpecified RecurrenceFrequencyType = "NotSpecified"
	// RecurrenceFrequencySecond ...
	RecurrenceFrequencySecond RecurrenceFrequencyType = "Second"
	// RecurrenceFrequencyWeek ...
	RecurrenceFrequencyWeek RecurrenceFrequencyType = "Week"
	// RecurrenceFrequencyYear ...
	RecurrenceFrequencyYear RecurrenceFrequencyType = "Year"
)

// SchemaType enumerates the values for schema type.
type SchemaType string

const (
	// SchemaNone represents an empty SchemaType.
	SchemaNone SchemaType = ""
	// SchemaNotSpecified ...
	SchemaNotSpecified SchemaType = "NotSpecified"
	// SchemaXML ...
	SchemaXML SchemaType = "Xml"
)

// SegmentTerminatorSuffixType enumerates the values for segment terminator suffix.
type SegmentTerminatorSuffixType string

const (
	// SegmentTerminatorSuffixCR ...
	SegmentTerminatorSuffixCR SegmentTerminatorSuffixType = "CR"
	// SegmentTerminatorSuffixCRLF ...
	SegmentTerminatorSuffixCRLF SegmentTerminatorSuffixType = "CRLF"
	// SegmentTerminatorSuffixLF ...
	SegmentTerminatorSuffixLF SegmentTerminatorSuffixType = "LF"
	// SegmentTerminatorSuffixNone ...
	SegmentTerminatorSuffixNone SegmentTerminatorSuffixType = "None"
	// SegmentTerminatorSuffixNone represents an empty SegmentTerminatorSuffixType.
	SegmentTerminatorSuffixNone SegmentTerminatorSuffixType = ""
	// SegmentTerminatorSuffixNotSpecified ...
	SegmentTerminatorSuffixNotSpecified SegmentTerminatorSuffixType = "NotSpecified"
)

// SigningAlgorithmType enumerates the values for signing algorithm.
type SigningAlgorithmType string

const (
	// SigningAlgorithmDefault ...
	SigningAlgorithmDefault SigningAlgorithmType = "Default"
	// SigningAlgorithmNone represents an empty SigningAlgorithmType.
	SigningAlgorithmNone SigningAlgorithmType = ""
	// SigningAlgorithmNotSpecified ...
	SigningAlgorithmNotSpecified SigningAlgorithmType = "NotSpecified"
	// SigningAlgorithmSHA1 ...
	SigningAlgorithmSHA1 SigningAlgorithmType = "SHA1"
	// SigningAlgorithmSHA2256 ...
	SigningAlgorithmSHA2256 SigningAlgorithmType = "SHA2256"
	// SigningAlgorithmSHA2384 ...
	SigningAlgorithmSHA2384 SigningAlgorithmType = "SHA2384"
	// SigningAlgorithmSHA2512 ...
	SigningAlgorithmSHA2512 SigningAlgorithmType = "SHA2512"
)

// SkuNameType enumerates the values for sku name.
type SkuNameType string

const (
	// SkuNameBasic ...
	SkuNameBasic SkuNameType = "Basic"
	// SkuNameFree ...
	SkuNameFree SkuNameType = "Free"
	// SkuNameNone represents an empty SkuNameType.
	SkuNameNone SkuNameType = ""
	// SkuNameNotSpecified ...
	SkuNameNotSpecified SkuNameType = "NotSpecified"
	// SkuNamePremium ...
	SkuNamePremium SkuNameType = "Premium"
	// SkuNameShared ...
	SkuNameShared SkuNameType = "Shared"
	// SkuNameStandard ...
	SkuNameStandard SkuNameType = "Standard"
)

// TrailingSeparatorPolicyType enumerates the values for trailing separator policy.
type TrailingSeparatorPolicyType string

const (
	// TrailingSeparatorPolicyMandatory ...
	TrailingSeparatorPolicyMandatory TrailingSeparatorPolicyType = "Mandatory"
	// TrailingSeparatorPolicyNone represents an empty TrailingSeparatorPolicyType.
	TrailingSeparatorPolicyNone TrailingSeparatorPolicyType = ""
	// TrailingSeparatorPolicyNotAllowed ...
	TrailingSeparatorPolicyNotAllowed TrailingSeparatorPolicyType = "NotAllowed"
	// TrailingSeparatorPolicyNotSpecified ...
	TrailingSeparatorPolicyNotSpecified TrailingSeparatorPolicyType = "NotSpecified"
	// TrailingSeparatorPolicyOptional ...
	TrailingSeparatorPolicyOptional TrailingSeparatorPolicyType = "Optional"
)

// UsageIndicatorType enumerates the values for usage indicator.
type UsageIndicatorType string

const (
	// UsageIndicatorInformation ...
	UsageIndicatorInformation UsageIndicatorType = "Information"
	// UsageIndicatorNone represents an empty UsageIndicatorType.
	UsageIndicatorNone UsageIndicatorType = ""
	// UsageIndicatorNotSpecified ...
	UsageIndicatorNotSpecified UsageIndicatorType = "NotSpecified"
	// UsageIndicatorProduction ...
	UsageIndicatorProduction UsageIndicatorType = "Production"
	// UsageIndicatorTest ...
	UsageIndicatorTest UsageIndicatorType = "Test"
)

// WorkflowProvisioningStateType enumerates the values for workflow provisioning state.
type WorkflowProvisioningStateType string

const (
	// WorkflowProvisioningStateAccepted ...
	WorkflowProvisioningStateAccepted WorkflowProvisioningStateType = "Accepted"
	// WorkflowProvisioningStateCanceled ...
	WorkflowProvisioningStateCanceled WorkflowProvisioningStateType = "Canceled"
	// WorkflowProvisioningStateCompleted ...
	WorkflowProvisioningStateCompleted WorkflowProvisioningStateType = "Completed"
	// WorkflowProvisioningStateCreated ...
	WorkflowProvisioningStateCreated WorkflowProvisioningStateType = "Created"
	// WorkflowProvisioningStateCreating ...
	WorkflowProvisioningStateCreating WorkflowProvisioningStateType = "Creating"
	// WorkflowProvisioningStateDeleted ...
	WorkflowProvisioningStateDeleted WorkflowProvisioningStateType = "Deleted"
	// WorkflowProvisioningStateDeleting ...
	WorkflowProvisioningStateDeleting WorkflowProvisioningStateType = "Deleting"
	// WorkflowProvisioningStateFailed ...
	WorkflowProvisioningStateFailed WorkflowProvisioningStateType = "Failed"
	// WorkflowProvisioningStateMoving ...
	WorkflowProvisioningStateMoving WorkflowProvisioningStateType = "Moving"
	// WorkflowProvisioningStateNone represents an empty WorkflowProvisioningStateType.
	WorkflowProvisioningStateNone WorkflowProvisioningStateType = ""
	// WorkflowProvisioningStateNotSpecified ...
	WorkflowProvisioningStateNotSpecified WorkflowProvisioningStateType = "NotSpecified"
	// WorkflowProvisioningStateReady ...
	WorkflowProvisioningStateReady WorkflowProvisioningStateType = "Ready"
	// WorkflowProvisioningStateRegistered ...
	WorkflowProvisioningStateRegistered WorkflowProvisioningStateType = "Registered"
	// WorkflowProvisioningStateRegistering ...
	WorkflowProvisioningStateRegistering WorkflowProvisioningStateType = "Registering"
	// WorkflowProvisioningStateRunning ...
	WorkflowProvisioningStateRunning WorkflowProvisioningStateType = "Running"
	// WorkflowProvisioningStateSucceeded ...
	WorkflowProvisioningStateSucceeded WorkflowProvisioningStateType = "Succeeded"
	// WorkflowProvisioningStateUnregistered ...
	WorkflowProvisioningStateUnregistered WorkflowProvisioningStateType = "Unregistered"
	// WorkflowProvisioningStateUnregistering ...
	WorkflowProvisioningStateUnregistering WorkflowProvisioningStateType = "Unregistering"
	// WorkflowProvisioningStateUpdating ...
	WorkflowProvisioningStateUpdating WorkflowProvisioningStateType = "Updating"
)

// WorkflowStateType enumerates the values for workflow state.
type WorkflowStateType string

const (
	// WorkflowStateCompleted ...
	WorkflowStateCompleted WorkflowStateType = "Completed"
	// WorkflowStateDeleted ...
	WorkflowStateDeleted WorkflowStateType = "Deleted"
	// WorkflowStateDisabled ...
	WorkflowStateDisabled WorkflowStateType = "Disabled"
	// WorkflowStateEnabled ...
	WorkflowStateEnabled WorkflowStateType = "Enabled"
	// WorkflowStateNone represents an empty WorkflowStateType.
	WorkflowStateNone WorkflowStateType = ""
	// WorkflowStateNotSpecified ...
	WorkflowStateNotSpecified WorkflowStateType = "NotSpecified"
	// WorkflowStateSuspended ...
	WorkflowStateSuspended WorkflowStateType = "Suspended"
)

// WorkflowStatusType enumerates the values for workflow status.
type WorkflowStatusType string

const (
	// WorkflowStatusAborted ...
	WorkflowStatusAborted WorkflowStatusType = "Aborted"
	// WorkflowStatusCancelled ...
	WorkflowStatusCancelled WorkflowStatusType = "Cancelled"
	// WorkflowStatusFailed ...
	WorkflowStatusFailed WorkflowStatusType = "Failed"
	// WorkflowStatusFaulted ...
	WorkflowStatusFaulted WorkflowStatusType = "Faulted"
	// WorkflowStatusIgnored ...
	WorkflowStatusIgnored WorkflowStatusType = "Ignored"
	// WorkflowStatusNone represents an empty WorkflowStatusType.
	WorkflowStatusNone WorkflowStatusType = ""
	// WorkflowStatusNotSpecified ...
	WorkflowStatusNotSpecified WorkflowStatusType = "NotSpecified"
	// WorkflowStatusPaused ...
	WorkflowStatusPaused WorkflowStatusType = "Paused"
	// WorkflowStatusRunning ...
	WorkflowStatusRunning WorkflowStatusType = "Running"
	// WorkflowStatusSkipped ...
	WorkflowStatusSkipped WorkflowStatusType = "Skipped"
	// WorkflowStatusSucceeded ...
	WorkflowStatusSucceeded WorkflowStatusType = "Succeeded"
	// WorkflowStatusSuspended ...
	WorkflowStatusSuspended WorkflowStatusType = "Suspended"
	// WorkflowStatusTimedOut ...
	WorkflowStatusTimedOut WorkflowStatusType = "TimedOut"
	// WorkflowStatusWaiting ...
	WorkflowStatusWaiting WorkflowStatusType = "Waiting"
)

// WorkflowTriggerProvisioningStateType enumerates the values for workflow trigger provisioning state.
type WorkflowTriggerProvisioningStateType string

const (
	// WorkflowTriggerProvisioningStateAccepted ...
	WorkflowTriggerProvisioningStateAccepted WorkflowTriggerProvisioningStateType = "Accepted"
	// WorkflowTriggerProvisioningStateCanceled ...
	WorkflowTriggerProvisioningStateCanceled WorkflowTriggerProvisioningStateType = "Canceled"
	// WorkflowTriggerProvisioningStateCompleted ...
	WorkflowTriggerProvisioningStateCompleted WorkflowTriggerProvisioningStateType = "Completed"
	// WorkflowTriggerProvisioningStateCreated ...
	WorkflowTriggerProvisioningStateCreated WorkflowTriggerProvisioningStateType = "Created"
	// WorkflowTriggerProvisioningStateCreating ...
	WorkflowTriggerProvisioningStateCreating WorkflowTriggerProvisioningStateType = "Creating"
	// WorkflowTriggerProvisioningStateDeleted ...
	WorkflowTriggerProvisioningStateDeleted WorkflowTriggerProvisioningStateType = "Deleted"
	// WorkflowTriggerProvisioningStateDeleting ...
	WorkflowTriggerProvisioningStateDeleting WorkflowTriggerProvisioningStateType = "Deleting"
	// WorkflowTriggerProvisioningStateFailed ...
	WorkflowTriggerProvisioningStateFailed WorkflowTriggerProvisioningStateType = "Failed"
	// WorkflowTriggerProvisioningStateMoving ...
	WorkflowTriggerProvisioningStateMoving WorkflowTriggerProvisioningStateType = "Moving"
	// WorkflowTriggerProvisioningStateNone represents an empty WorkflowTriggerProvisioningStateType.
	WorkflowTriggerProvisioningStateNone WorkflowTriggerProvisioningStateType = ""
	// WorkflowTriggerProvisioningStateNotSpecified ...
	WorkflowTriggerProvisioningStateNotSpecified WorkflowTriggerProvisioningStateType = "NotSpecified"
	// WorkflowTriggerProvisioningStateReady ...
	WorkflowTriggerProvisioningStateReady WorkflowTriggerProvisioningStateType = "Ready"
	// WorkflowTriggerProvisioningStateRegistered ...
	WorkflowTriggerProvisioningStateRegistered WorkflowTriggerProvisioningStateType = "Registered"
	// WorkflowTriggerProvisioningStateRegistering ...
	WorkflowTriggerProvisioningStateRegistering WorkflowTriggerProvisioningStateType = "Registering"
	// WorkflowTriggerProvisioningStateRunning ...
	WorkflowTriggerProvisioningStateRunning WorkflowTriggerProvisioningStateType = "Running"
	// WorkflowTriggerProvisioningStateSucceeded ...
	WorkflowTriggerProvisioningStateSucceeded WorkflowTriggerProvisioningStateType = "Succeeded"
	// WorkflowTriggerProvisioningStateUnregistered ...
	WorkflowTriggerProvisioningStateUnregistered WorkflowTriggerProvisioningStateType = "Unregistered"
	// WorkflowTriggerProvisioningStateUnregistering ...
	WorkflowTriggerProvisioningStateUnregistering WorkflowTriggerProvisioningStateType = "Unregistering"
	// WorkflowTriggerProvisioningStateUpdating ...
	WorkflowTriggerProvisioningStateUpdating WorkflowTriggerProvisioningStateType = "Updating"
)

// X12CharacterSetType enumerates the values for x12 character set.
type X12CharacterSetType string

const (
	// X12CharacterSetBasic ...
	X12CharacterSetBasic X12CharacterSetType = "Basic"
	// X12CharacterSetExtended ...
	X12CharacterSetExtended X12CharacterSetType = "Extended"
	// X12CharacterSetNone represents an empty X12CharacterSetType.
	X12CharacterSetNone X12CharacterSetType = ""
	// X12CharacterSetNotSpecified ...
	X12CharacterSetNotSpecified X12CharacterSetType = "NotSpecified"
	// X12CharacterSetUTF8 ...
	X12CharacterSetUTF8 X12CharacterSetType = "UTF8"
)

// X12DateFormatType enumerates the values for x12 date format.
type X12DateFormatType string

const (
	// X12DateFormatCCYYMMDD ...
	X12DateFormatCCYYMMDD X12DateFormatType = "CCYYMMDD"
	// X12DateFormatNone represents an empty X12DateFormatType.
	X12DateFormatNone X12DateFormatType = ""
	// X12DateFormatNotSpecified ...
	X12DateFormatNotSpecified X12DateFormatType = "NotSpecified"
	// X12DateFormatYYMMDD ...
	X12DateFormatYYMMDD X12DateFormatType = "YYMMDD"
)

// X12TimeFormatType enumerates the values for x12 time format.
type X12TimeFormatType string

const (
	// X12TimeFormatHHMM ...
	X12TimeFormatHHMM X12TimeFormatType = "HHMM"
	// X12TimeFormatHHMMSS ...
	X12TimeFormatHHMMSS X12TimeFormatType = "HHMMSS"
	// X12TimeFormatHHMMSSd ...
	X12TimeFormatHHMMSSd X12TimeFormatType = "HHMMSSd"
	// X12TimeFormatHHMMSSdd ...
	X12TimeFormatHHMMSSdd X12TimeFormatType = "HHMMSSdd"
	// X12TimeFormatNone represents an empty X12TimeFormatType.
	X12TimeFormatNone X12TimeFormatType = ""
	// X12TimeFormatNotSpecified ...
	X12TimeFormatNotSpecified X12TimeFormatType = "NotSpecified"
)

// AgreementContent - The integration account agreement content.
type AgreementContent struct {
	// AS2 - The AS2 agreement content.
	AS2 *AS2AgreementContent `json:"aS2,omitempty"`
	// X12 - The X12 agreement content.
	X12 *X12AgreementContent `json:"x12,omitempty"`
	// Edifact - The EDIFACT agreement content.
	Edifact *EdifactAgreementContent `json:"edifact,omitempty"`
}

// AS2AcknowledgementConnectionSettings - The AS2 agreement acknowledegment connection settings.
type AS2AcknowledgementConnectionSettings struct {
	// IgnoreCertificateNameMismatch - The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch bool `json:"ignoreCertificateNameMismatch,omitempty"`
	// SupportHTTPStatusCodeContinue - The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHTTPStatusCodeContinue bool `json:"supportHttpStatusCodeContinue,omitempty"`
	// KeepHTTPConnectionAlive - The value indicating whether to keep the connection alive.
	KeepHTTPConnectionAlive bool `json:"keepHttpConnectionAlive,omitempty"`
	// UnfoldHTTPHeaders - The value indicating whether to unfold the HTTP headers.
	UnfoldHTTPHeaders bool `json:"unfoldHttpHeaders,omitempty"`
}

// AS2AgreementContent - The integration account AS2 agreement content.
type AS2AgreementContent struct {
	// ReceiveAgreement - The AS2 one-way receive agreement.
	ReceiveAgreement AS2OneWayAgreement `json:"receiveAgreement,omitempty"`
	// SendAgreement - The AS2 one-way send agreement.
	SendAgreement AS2OneWayAgreement `json:"sendAgreement,omitempty"`
}

// AS2EnvelopeSettings - The AS2 agreement envelope settings.
type AS2EnvelopeSettings struct {
	// MessageContentType - The message content type.
	MessageContentType string `json:"messageContentType,omitempty"`
	// TransmitFileNameInMimeHeader - The value indicating whether to transmit file name in mime header.
	TransmitFileNameInMimeHeader bool `json:"transmitFileNameInMimeHeader,omitempty"`
	// FileNameTemplate - The template for file name.
	FileNameTemplate string `json:"fileNameTemplate,omitempty"`
	// SuspendMessageOnFileNameGenerationError - The value indicating whether to suspend message on file name generation error.
	SuspendMessageOnFileNameGenerationError bool `json:"suspendMessageOnFileNameGenerationError,omitempty"`
	// AutogenerateFileName - The value indicating whether to auto generate file name.
	AutogenerateFileName bool `json:"autogenerateFileName,omitempty"`
}

// AS2ErrorSettings - The AS2 agreement error settings.
type AS2ErrorSettings struct {
	// SuspendDuplicateMessage - The value indicating whether to suspend duplicate message.
	SuspendDuplicateMessage bool `json:"suspendDuplicateMessage,omitempty"`
	// ResendIfMdnNotReceived - The value indicating whether to resend message If MDN is not received.
	ResendIfMdnNotReceived bool `json:"resendIfMdnNotReceived,omitempty"`
}

// AS2MdnSettings - The AS2 agreement mdn settings.
type AS2MdnSettings struct {
	// NeedMdn - The value indicating whether to send or request a MDN.
	NeedMdn bool `json:"needMdn,omitempty"`
	// SignMdn - The value indicating whether the MDN needs to be signed or not.
	SignMdn bool `json:"signMdn,omitempty"`
	// SendMdnAsynchronously - The value indicating whether to send the asynchronous MDN.
	SendMdnAsynchronously bool `json:"sendMdnAsynchronously,omitempty"`
	// ReceiptDeliveryURL - The receipt delivery URL.
	ReceiptDeliveryURL *string `json:"receiptDeliveryUrl,omitempty"`
	// DispositionNotificationTo - The disposition notification to header value.
	DispositionNotificationTo *string `json:"dispositionNotificationTo,omitempty"`
	// SignOutboundMdnIfOptional - The value indicating whether to sign the outbound MDN if optional.
	SignOutboundMdnIfOptional bool `json:"signOutboundMdnIfOptional,omitempty"`
	// MdnText - The MDN text.
	MdnText *string `json:"mdnText,omitempty"`
	// SendInboundMdnToMessageBox - The value indicating whether to send inbound MDN to message box.
	SendInboundMdnToMessageBox bool `json:"sendInboundMdnToMessageBox,omitempty"`
	// MicHashingAlgorithm - The signing or hashing algorithm. Possible values include: 'NotSpecified', 'None', 'MD5', 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512', 'None'
	MicHashingAlgorithm HashingAlgorithmType `json:"micHashingAlgorithm,omitempty"`
}

// AS2MessageConnectionSettings - The AS2 agreement message connection settings.
type AS2MessageConnectionSettings struct {
	// IgnoreCertificateNameMismatch - The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch bool `json:"ignoreCertificateNameMismatch,omitempty"`
	// SupportHTTPStatusCodeContinue - The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHTTPStatusCodeContinue bool `json:"supportHttpStatusCodeContinue,omitempty"`
	// KeepHTTPConnectionAlive - The value indicating whether to keep the connection alive.
	KeepHTTPConnectionAlive bool `json:"keepHttpConnectionAlive,omitempty"`
	// UnfoldHTTPHeaders - The value indicating whether to unfold the HTTP headers.
	UnfoldHTTPHeaders bool `json:"unfoldHttpHeaders,omitempty"`
}

// AS2OneWayAgreement - The integration account AS2 oneway agreement.
type AS2OneWayAgreement struct {
	// SenderBusinessIdentity - The sender business identity
	SenderBusinessIdentity BusinessIdentity `json:"senderBusinessIdentity,omitempty"`
	// ReceiverBusinessIdentity - The receiver business identity
	ReceiverBusinessIdentity BusinessIdentity `json:"receiverBusinessIdentity,omitempty"`
	// ProtocolSettings - The AS2 protocol settings.
	ProtocolSettings AS2ProtocolSettings `json:"protocolSettings,omitempty"`
}

// AS2ProtocolSettings - The AS2 agreement protocol settings.
type AS2ProtocolSettings struct {
	// MessageConnectionSettings - The message connection settings.
	MessageConnectionSettings AS2MessageConnectionSettings `json:"messageConnectionSettings,omitempty"`
	// AcknowledgementConnectionSettings - The acknowledgement connection settings.
	AcknowledgementConnectionSettings AS2AcknowledgementConnectionSettings `json:"acknowledgementConnectionSettings,omitempty"`
	// MdnSettings - The MDN settings.
	MdnSettings AS2MdnSettings `json:"mdnSettings,omitempty"`
	// SecuritySettings - The security settings.
	SecuritySettings AS2SecuritySettings `json:"securitySettings,omitempty"`
	// ValidationSettings - The validation settings.
	ValidationSettings AS2ValidationSettings `json:"validationSettings,omitempty"`
	// EnvelopeSettings - The envelope settings.
	EnvelopeSettings AS2EnvelopeSettings `json:"envelopeSettings,omitempty"`
	// ErrorSettings - The error settings.
	ErrorSettings AS2ErrorSettings `json:"errorSettings,omitempty"`
}

// AS2SecuritySettings - The AS2 agreement security settings.
type AS2SecuritySettings struct {
	// OverrideGroupSigningCertificate - The value indicating whether to send or request a MDN.
	OverrideGroupSigningCertificate bool `json:"overrideGroupSigningCertificate,omitempty"`
	// SigningCertificateName - The name of the signing certificate.
	SigningCertificateName *string `json:"signingCertificateName,omitempty"`
	// EncryptionCertificateName - The name of the encryption certificate.
	EncryptionCertificateName *string `json:"encryptionCertificateName,omitempty"`
	// EnableNrrForInboundEncodedMessages - The value indicating whether to enable NRR for inbound encoded messages.
	EnableNrrForInboundEncodedMessages bool `json:"enableNrrForInboundEncodedMessages,omitempty"`
	// EnableNrrForInboundDecodedMessages - The value indicating whether to enable NRR for inbound decoded messages.
	EnableNrrForInboundDecodedMessages bool `json:"enableNrrForInboundDecodedMessages,omitempty"`
	// EnableNrrForOutboundMdn - The value indicating whether to enable NRR for outbound MDN.
	EnableNrrForOutboundMdn bool `json:"enableNrrForOutboundMdn,omitempty"`
	// EnableNrrForOutboundEncodedMessages - The value indicating whether to enable NRR for outbound encoded messages.
	EnableNrrForOutboundEncodedMessages bool `json:"enableNrrForOutboundEncodedMessages,omitempty"`
	// EnableNrrForOutboundDecodedMessages - The value indicating whether to enable NRR for outbound decoded messages.
	EnableNrrForOutboundDecodedMessages bool `json:"enableNrrForOutboundDecodedMessages,omitempty"`
	// EnableNrrForInboundMdn - The value indicating whether to enable NRR for inbound MDN.
	EnableNrrForInboundMdn bool `json:"enableNrrForInboundMdn,omitempty"`
	// Sha2AlgorithmFormat - The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
	Sha2AlgorithmFormat *string `json:"sha2AlgorithmFormat,omitempty"`
}

// AS2ValidationSettings - The AS2 agreement validation settings.
type AS2ValidationSettings struct {
	// OverrideMessageProperties - The value indicating whether to override incoming message properties with those in agreement.
	OverrideMessageProperties bool `json:"overrideMessageProperties,omitempty"`
	// EncryptMessage - The value indicating whether the message has to be encrypted.
	EncryptMessage bool `json:"encryptMessage,omitempty"`
	// SignMessage - The value indicating whether the message has to be signed.
	SignMessage bool `json:"signMessage,omitempty"`
	// CompressMessage - The value indicating whether the message has to be compressed.
	CompressMessage bool `json:"compressMessage,omitempty"`
	// CheckDuplicateMessage - The value indicating whether to check for duplicate message.
	CheckDuplicateMessage bool `json:"checkDuplicateMessage,omitempty"`
	// InterchangeDuplicatesValidityDays - The number of days to look back for duplicate interchange.
	InterchangeDuplicatesValidityDays int32 `json:"interchangeDuplicatesValidityDays,omitempty"`
	// CheckCertificateRevocationListOnSend - The value indicating whether to check for certificate revocation list on send.
	CheckCertificateRevocationListOnSend bool `json:"checkCertificateRevocationListOnSend,omitempty"`
	// CheckCertificateRevocationListOnReceive - The value indicating whether to check for certificate revocation list on receive.
	CheckCertificateRevocationListOnReceive bool `json:"checkCertificateRevocationListOnReceive,omitempty"`
	// EncryptionAlgorithm - The encryption algorithm. Possible values include: 'NotSpecified', 'None', 'DES3', 'RC2', 'AES128', 'AES192', 'AES256', 'None'
	EncryptionAlgorithm EncryptionAlgorithmType `json:"encryptionAlgorithm,omitempty"`
	// SigningAlgorithm - The signing algorithm. Possible values include: 'NotSpecified', 'Default', 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512', 'None'
	SigningAlgorithm SigningAlgorithmType `json:"signingAlgorithm,omitempty"`
}

// B2BPartnerContent - The B2B partner content.
type B2BPartnerContent struct {
	// BusinessIdentities - The list of partner business identities.
	BusinessIdentities []BusinessIdentity `json:"businessIdentities,omitempty"`
}

// BusinessIdentity - The integration account partner's business identity.
type BusinessIdentity struct {
	// Qualifier - The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
	Qualifier string `json:"qualifier,omitempty"`
	// Value - The user defined business identity value.
	Value string `json:"value,omitempty"`
}

// CallbackURL - The callback url.
type CallbackURL struct {
	rawResponse *http.Response
	// Value - The URL value.
	Value *string `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (cu CallbackURL) Response() *http.Response {
	return cu.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (cu CallbackURL) StatusCode() int {
	return cu.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (cu CallbackURL) Status() string {
	return cu.rawResponse.Status
}

// ContentHash - The content hash.
type ContentHash struct {
	// Algorithm - The algorithm of the content hash.
	Algorithm *string `json:"algorithm,omitempty"`
	// Value - The value of the content hash.
	Value *string `json:"value,omitempty"`
}

// ContentLink - The content link.
type ContentLink struct {
	// URI - The content link URI.
	URI *string `json:"uri,omitempty"`
	// ContentVersion - The content version.
	ContentVersion *string `json:"contentVersion,omitempty"`
	// ContentSize - The content size.
	ContentSize *int64 `json:"contentSize,omitempty"`
	// ContentHash - The content hash.
	ContentHash *ContentHash `json:"contentHash,omitempty"`
	// Metadata - The metadata.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// Correlation - The correlation property.
type Correlation struct {
	// ClientTrackingID - The client tracking id.
	ClientTrackingID *string `json:"clientTrackingId,omitempty"`
}

// EdifactAcknowledgementSettings - The Edifact agreement acknowledgement settings.
type EdifactAcknowledgementSettings struct {
	// NeedTechnicalAcknowledgement - The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement bool `json:"needTechnicalAcknowledgement,omitempty"`
	// BatchTechnicalAcknowledgements - The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements bool `json:"batchTechnicalAcknowledgements,omitempty"`
	// NeedFunctionalAcknowledgement - The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement bool `json:"needFunctionalAcknowledgement,omitempty"`
	// BatchFunctionalAcknowledgements - The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements bool `json:"batchFunctionalAcknowledgements,omitempty"`
	// NeedLoopForValidMessages - The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages bool `json:"needLoopForValidMessages,omitempty"`
	// SendSynchronousAcknowledgement - The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement bool `json:"sendSynchronousAcknowledgement,omitempty"`
	// AcknowledgementControlNumberPrefix - The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix *string `json:"acknowledgementControlNumberPrefix,omitempty"`
	// AcknowledgementControlNumberSuffix - The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix *string `json:"acknowledgementControlNumberSuffix,omitempty"`
	// AcknowledgementControlNumberLowerBound - The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound int32 `json:"acknowledgementControlNumberLowerBound,omitempty"`
	// AcknowledgementControlNumberUpperBound - The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound int32 `json:"acknowledgementControlNumberUpperBound,omitempty"`
	// RolloverAcknowledgementControlNumber - The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber bool `json:"rolloverAcknowledgementControlNumber,omitempty"`
}

// EdifactAgreementContent - The Edifact agreement content.
type EdifactAgreementContent struct {
	// ReceiveAgreement - The EDIFACT one-way receive agreement.
	ReceiveAgreement EdifactOneWayAgreement `json:"receiveAgreement,omitempty"`
	// SendAgreement - The EDIFACT one-way send agreement.
	SendAgreement EdifactOneWayAgreement `json:"sendAgreement,omitempty"`
}

// EdifactDelimiterOverride - The Edifact delimiter override settings.
type EdifactDelimiterOverride struct {
	// MessageID - The message id.
	MessageID *string `json:"messageId,omitempty"`
	// MessageVersion - The message version.
	MessageVersion *string `json:"messageVersion,omitempty"`
	// MessageRelease - The message releaseversion.
	MessageRelease *string `json:"messageRelease,omitempty"`
	// DataElementSeparator - The data element separator.
	DataElementSeparator int32 `json:"dataElementSeparator,omitempty"`
	// ComponentSeparator - The component separator.
	ComponentSeparator int32 `json:"componentSeparator,omitempty"`
	// SegmentTerminator - The segment terminator.
	SegmentTerminator int32 `json:"segmentTerminator,omitempty"`
	// RepetitionSeparator - The repetition separator.
	RepetitionSeparator int32 `json:"repetitionSeparator,omitempty"`
	// SegmentTerminatorSuffix - The segment terminator suffix. Possible values include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF', 'None'
	SegmentTerminatorSuffix SegmentTerminatorSuffixType `json:"segmentTerminatorSuffix,omitempty"`
	// DecimalPointIndicator - The decimal point indicator. Possible values include: 'NotSpecified', 'Comma', 'Decimal', 'None'
	DecimalPointIndicator EdifactDecimalIndicatorType `json:"decimalPointIndicator,omitempty"`
	// ReleaseIndicator - The release indicator.
	ReleaseIndicator int32 `json:"releaseIndicator,omitempty"`
	// MessageAssociationAssignedCode - The message association assigned code.
	MessageAssociationAssignedCode *string `json:"messageAssociationAssignedCode,omitempty"`
	// TargetNamespace - The target namespace on which this delimiter settings has to be applied.
	TargetNamespace *string `json:"targetNamespace,omitempty"`
}

// EdifactEnvelopeOverride - The Edifact enevlope override settings.
type EdifactEnvelopeOverride struct {
	// MessageID - The message id on which this envelope settings has to be applied.
	MessageID *string `json:"messageId,omitempty"`
	// MessageVersion - The message version on which this envelope settings has to be applied.
	MessageVersion *string `json:"messageVersion,omitempty"`
	// MessageRelease - The message release version on which this envelope settings has to be applied.
	MessageRelease *string `json:"messageRelease,omitempty"`
	// MessageAssociationAssignedCode - The message association assigned code.
	MessageAssociationAssignedCode *string `json:"messageAssociationAssignedCode,omitempty"`
	// TargetNamespace - The target namespace on which this envelope settings has to be applied.
	TargetNamespace *string `json:"targetNamespace,omitempty"`
	// FunctionalGroupID - The functional group id.
	FunctionalGroupID *string `json:"functionalGroupId,omitempty"`
	// SenderApplicationQualifier - The sender application qualifier.
	SenderApplicationQualifier *string `json:"senderApplicationQualifier,omitempty"`
	// SenderApplicationID - The sender application id.
	SenderApplicationID *string `json:"senderApplicationId,omitempty"`
	// ReceiverApplicationQualifier - The receiver application qualifier.
	ReceiverApplicationQualifier *string `json:"receiverApplicationQualifier,omitempty"`
	// ReceiverApplicationID - The receiver application id.
	ReceiverApplicationID *string `json:"receiverApplicationId,omitempty"`
	// ControllingAgencyCode - The controlling agency code.
	ControllingAgencyCode *string `json:"controllingAgencyCode,omitempty"`
	// GroupHeaderMessageVersion - The group header message version.
	GroupHeaderMessageVersion *string `json:"groupHeaderMessageVersion,omitempty"`
	// GroupHeaderMessageRelease - The group header message release.
	GroupHeaderMessageRelease *string `json:"groupHeaderMessageRelease,omitempty"`
	// AssociationAssignedCode - The association assigned code.
	AssociationAssignedCode *string `json:"associationAssignedCode,omitempty"`
	// ApplicationPassword - The application password.
	ApplicationPassword *string `json:"applicationPassword,omitempty"`
}

// EdifactEnvelopeSettings - The Edifact agreement envelope settings.
type EdifactEnvelopeSettings struct {
	// GroupAssociationAssignedCode - The group association assigned code.
	GroupAssociationAssignedCode *string `json:"groupAssociationAssignedCode,omitempty"`
	// CommunicationAgreementID - The communication agreement id.
	CommunicationAgreementID *string `json:"communicationAgreementId,omitempty"`
	// ApplyDelimiterStringAdvice - The value indicating whether to apply delimiter string advice.
	ApplyDelimiterStringAdvice bool `json:"applyDelimiterStringAdvice,omitempty"`
	// CreateGroupingSegments - The value indicating whether to create grouping segments.
	CreateGroupingSegments bool `json:"createGroupingSegments,omitempty"`
	// EnableDefaultGroupHeaders - The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders bool `json:"enableDefaultGroupHeaders,omitempty"`
	// RecipientReferencePasswordValue - The recipient reference password value.
	RecipientReferencePasswordValue *string `json:"recipientReferencePasswordValue,omitempty"`
	// RecipientReferencePasswordQualifier - The recipient reference password qualifier.
	RecipientReferencePasswordQualifier *string `json:"recipientReferencePasswordQualifier,omitempty"`
	// ApplicationReferenceID - The application reference id.
	ApplicationReferenceID *string `json:"applicationReferenceId,omitempty"`
	// ProcessingPriorityCode - The processing priority code.
	ProcessingPriorityCode *string `json:"processingPriorityCode,omitempty"`
	// InterchangeControlNumberLowerBound - The interchange control number lower bound.
	InterchangeControlNumberLowerBound int64 `json:"interchangeControlNumberLowerBound,omitempty"`
	// InterchangeControlNumberUpperBound - The interchange control number upper bound.
	InterchangeControlNumberUpperBound int64 `json:"interchangeControlNumberUpperBound,omitempty"`
	// RolloverInterchangeControlNumber - The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber bool `json:"rolloverInterchangeControlNumber,omitempty"`
	// InterchangeControlNumberPrefix - The interchange control number prefix.
	InterchangeControlNumberPrefix *string `json:"interchangeControlNumberPrefix,omitempty"`
	// InterchangeControlNumberSuffix - The interchange control number suffix.
	InterchangeControlNumberSuffix *string `json:"interchangeControlNumberSuffix,omitempty"`
	// SenderReverseRoutingAddress - The sender reverse routing address.
	SenderReverseRoutingAddress *string `json:"senderReverseRoutingAddress,omitempty"`
	// ReceiverReverseRoutingAddress - The receiver reverse routing address.
	ReceiverReverseRoutingAddress *string `json:"receiverReverseRoutingAddress,omitempty"`
	// FunctionalGroupID - The functional group id.
	FunctionalGroupID *string `json:"functionalGroupId,omitempty"`
	// GroupControllingAgencyCode - The group controlling agency code.
	GroupControllingAgencyCode *string `json:"groupControllingAgencyCode,omitempty"`
	// GroupMessageVersion - The group message version.
	GroupMessageVersion *string `json:"groupMessageVersion,omitempty"`
	// GroupMessageRelease - The group message release.
	GroupMessageRelease *string `json:"groupMessageRelease,omitempty"`
	// GroupControlNumberLowerBound - The group control number lower bound.
	GroupControlNumberLowerBound int64 `json:"groupControlNumberLowerBound,omitempty"`
	// GroupControlNumberUpperBound - The group control number upper bound.
	GroupControlNumberUpperBound int64 `json:"groupControlNumberUpperBound,omitempty"`
	// RolloverGroupControlNumber - The value indicating whether to rollover group control number.
	RolloverGroupControlNumber bool `json:"rolloverGroupControlNumber,omitempty"`
	// GroupControlNumberPrefix - The group control number prefix.
	GroupControlNumberPrefix *string `json:"groupControlNumberPrefix,omitempty"`
	// GroupControlNumberSuffix - The group control number suffix.
	GroupControlNumberSuffix *string `json:"groupControlNumberSuffix,omitempty"`
	// GroupApplicationReceiverQualifier - The group application receiver qualifier.
	GroupApplicationReceiverQualifier *string `json:"groupApplicationReceiverQualifier,omitempty"`
	// GroupApplicationReceiverID - The group application receiver id.
	GroupApplicationReceiverID *string `json:"groupApplicationReceiverId,omitempty"`
	// GroupApplicationSenderQualifier - The group application sender qualifier.
	GroupApplicationSenderQualifier *string `json:"groupApplicationSenderQualifier,omitempty"`
	// GroupApplicationSenderID - The group application sender id.
	GroupApplicationSenderID *string `json:"groupApplicationSenderId,omitempty"`
	// GroupApplicationPassword - The group application password.
	GroupApplicationPassword *string `json:"groupApplicationPassword,omitempty"`
	// OverwriteExistingTransactionSetControlNumber - The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber bool `json:"overwriteExistingTransactionSetControlNumber,omitempty"`
	// TransactionSetControlNumberPrefix - The transaction set control number prefix.
	TransactionSetControlNumberPrefix *string `json:"transactionSetControlNumberPrefix,omitempty"`
	// TransactionSetControlNumberSuffix - The transaction set control number suffix.
	TransactionSetControlNumberSuffix *string `json:"transactionSetControlNumberSuffix,omitempty"`
	// TransactionSetControlNumberLowerBound - The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound int64 `json:"transactionSetControlNumberLowerBound,omitempty"`
	// TransactionSetControlNumberUpperBound - The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound int64 `json:"transactionSetControlNumberUpperBound,omitempty"`
	// RolloverTransactionSetControlNumber - The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber bool `json:"rolloverTransactionSetControlNumber,omitempty"`
	// IsTestInterchange - The value indicating whether the message is a test interchange.
	IsTestInterchange bool `json:"isTestInterchange,omitempty"`
	// SenderInternalIdentification - The sender internal identification.
	SenderInternalIdentification *string `json:"senderInternalIdentification,omitempty"`
	// SenderInternalSubIdentification - The sender internal sub identification.
	SenderInternalSubIdentification *string `json:"senderInternalSubIdentification,omitempty"`
	// ReceiverInternalIdentification - The receiver internal identification.
	ReceiverInternalIdentification *string `json:"receiverInternalIdentification,omitempty"`
	// ReceiverInternalSubIdentification - The receiver internal sub identification.
	ReceiverInternalSubIdentification *string `json:"receiverInternalSubIdentification,omitempty"`
}

// EdifactFramingSettings - The Edifact agreement framing settings.
type EdifactFramingSettings struct {
	// ServiceCodeListDirectoryVersion - The service code list directory version.
	ServiceCodeListDirectoryVersion *string `json:"serviceCodeListDirectoryVersion,omitempty"`
	// CharacterEncoding - The character encoding.
	CharacterEncoding *string `json:"characterEncoding,omitempty"`
	// ProtocolVersion - The protocol version.
	ProtocolVersion int32 `json:"protocolVersion,omitempty"`
	// DataElementSeparator - The data element separator.
	DataElementSeparator int32 `json:"dataElementSeparator,omitempty"`
	// ComponentSeparator - The component separator.
	ComponentSeparator int32 `json:"componentSeparator,omitempty"`
	// SegmentTerminator - The segment terminator.
	SegmentTerminator int32 `json:"segmentTerminator,omitempty"`
	// ReleaseIndicator - The release indicator.
	ReleaseIndicator int32 `json:"releaseIndicator,omitempty"`
	// RepetitionSeparator - The repetition separator.
	RepetitionSeparator int32 `json:"repetitionSeparator,omitempty"`
	// CharacterSet - The EDIFACT frame setting characterSet. Possible values include: 'NotSpecified', 'UNOB', 'UNOA', 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG', 'UNOH', 'UNOI', 'UNOJ', 'UNOK', 'UNOX', 'UNOY', 'KECA', 'None'
	CharacterSet EdifactCharacterSetType `json:"characterSet,omitempty"`
	// DecimalPointIndicator - The EDIFACT frame setting decimal indicator. Possible values include: 'NotSpecified', 'Comma', 'Decimal', 'None'
	DecimalPointIndicator EdifactDecimalIndicatorType `json:"decimalPointIndicator,omitempty"`
	// SegmentTerminatorSuffix - The EDIFACT frame setting segment terminator suffix. Possible values include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF', 'None'
	SegmentTerminatorSuffix SegmentTerminatorSuffixType `json:"segmentTerminatorSuffix,omitempty"`
}

// EdifactMessageFilter - The Edifact message filter for odata query.
type EdifactMessageFilter struct {
	// MessageFilterType - The message filter type. Possible values include: 'NotSpecified', 'Include', 'Exclude', 'None'
	MessageFilterType MessageFilterType `json:"messageFilterType,omitempty"`
}

// EdifactMessageIdentifier - The Edifact message identifier.
type EdifactMessageIdentifier struct {
	// MessageID - The message id on which this envelope settings has to be applied.
	MessageID string `json:"messageId,omitempty"`
}

// EdifactOneWayAgreement - The Edifact one way agreement.
type EdifactOneWayAgreement struct {
	// SenderBusinessIdentity - The sender business identity
	SenderBusinessIdentity BusinessIdentity `json:"senderBusinessIdentity,omitempty"`
	// ReceiverBusinessIdentity - The receiver business identity
	ReceiverBusinessIdentity BusinessIdentity `json:"receiverBusinessIdentity,omitempty"`
	// ProtocolSettings - The EDIFACT protocol settings.
	ProtocolSettings EdifactProtocolSettings `json:"protocolSettings,omitempty"`
}

// EdifactProcessingSettings - The Edifact agreement protocol settings.
type EdifactProcessingSettings struct {
	// MaskSecurityInfo - The value indicating whether to mask security information.
	MaskSecurityInfo bool `json:"maskSecurityInfo,omitempty"`
	// PreserveInterchange - The value indicating whether to preserve interchange.
	PreserveInterchange bool `json:"preserveInterchange,omitempty"`
	// SuspendInterchangeOnError - The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError bool `json:"suspendInterchangeOnError,omitempty"`
	// CreateEmptyXMLTagsForTrailingSeparators - The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXMLTagsForTrailingSeparators bool `json:"createEmptyXmlTagsForTrailingSeparators,omitempty"`
	// UseDotAsDecimalSeparator - The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator bool `json:"useDotAsDecimalSeparator,omitempty"`
}

// EdifactProtocolSettings - The Edifact agreement protocol settings.
type EdifactProtocolSettings struct {
	// ValidationSettings - The EDIFACT validation settings.
	ValidationSettings EdifactValidationSettings `json:"validationSettings,omitempty"`
	// FramingSettings - The EDIFACT framing settings.
	FramingSettings EdifactFramingSettings `json:"framingSettings,omitempty"`
	// EnvelopeSettings - The EDIFACT envelope settings.
	EnvelopeSettings EdifactEnvelopeSettings `json:"envelopeSettings,omitempty"`
	// AcknowledgementSettings - The EDIFACT acknowledgement settings.
	AcknowledgementSettings EdifactAcknowledgementSettings `json:"acknowledgementSettings,omitempty"`
	// MessageFilter - The EDIFACT message filter.
	MessageFilter EdifactMessageFilter `json:"messageFilter,omitempty"`
	// ProcessingSettings - The EDIFACT processing Settings.
	ProcessingSettings EdifactProcessingSettings `json:"processingSettings,omitempty"`
	// EnvelopeOverrides - The EDIFACT envelope override settings.
	EnvelopeOverrides []EdifactEnvelopeOverride `json:"envelopeOverrides,omitempty"`
	// MessageFilterList - The EDIFACT message filter list.
	MessageFilterList []EdifactMessageIdentifier `json:"messageFilterList,omitempty"`
	// SchemaReferences - The EDIFACT schema references.
	SchemaReferences []EdifactSchemaReference `json:"schemaReferences,omitempty"`
	// ValidationOverrides - The EDIFACT validation override settings.
	ValidationOverrides []EdifactValidationOverride `json:"validationOverrides,omitempty"`
	// EdifactDelimiterOverrides - The EDIFACT delimiter override settings.
	EdifactDelimiterOverrides []EdifactDelimiterOverride `json:"edifactDelimiterOverrides,omitempty"`
}

// EdifactSchemaReference - The Edifact schema reference.
type EdifactSchemaReference struct {
	// MessageID - The message id.
	MessageID string `json:"messageId,omitempty"`
	// MessageVersion - The message version.
	MessageVersion string `json:"messageVersion,omitempty"`
	// MessageRelease - The message release version.
	MessageRelease string `json:"messageRelease,omitempty"`
	// SenderApplicationID - The sender application id.
	SenderApplicationID *string `json:"senderApplicationId,omitempty"`
	// SenderApplicationQualifier - The sender application qualifier.
	SenderApplicationQualifier *string `json:"senderApplicationQualifier,omitempty"`
	// AssociationAssignedCode - The association assigned code.
	AssociationAssignedCode *string `json:"associationAssignedCode,omitempty"`
	// SchemaName - The schema name.
	SchemaName string `json:"schemaName,omitempty"`
}

// EdifactValidationOverride - The Edifact validation override settings.
type EdifactValidationOverride struct {
	// MessageID - The message id on which the validation settings has to be applied.
	MessageID string `json:"messageId,omitempty"`
	// EnforceCharacterSet - The value indicating whether to validate character Set.
	EnforceCharacterSet bool `json:"enforceCharacterSet,omitempty"`
	// ValidateEdiTypes - The value indicating whether to validate EDI types.
	ValidateEdiTypes bool `json:"validateEdiTypes,omitempty"`
	// ValidateXsdTypes - The value indicating whether to validate XSD types.
	ValidateXsdTypes bool `json:"validateXsdTypes,omitempty"`
	// AllowLeadingAndTrailingSpacesAndZeroes - The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes bool `json:"allowLeadingAndTrailingSpacesAndZeroes,omitempty"`
	// TrailingSeparatorPolicy - The trailing separator policy. Possible values include: 'NotSpecified', 'NotAllowed', 'Optional', 'Mandatory', 'None'
	TrailingSeparatorPolicy TrailingSeparatorPolicyType `json:"trailingSeparatorPolicy,omitempty"`
	// TrimLeadingAndTrailingSpacesAndZeroes - The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes bool `json:"trimLeadingAndTrailingSpacesAndZeroes,omitempty"`
}

// EdifactValidationSettings - The Edifact agreement validation settings.
type EdifactValidationSettings struct {
	// ValidateCharacterSet - The value indicating whether to validate character set in the message.
	ValidateCharacterSet bool `json:"validateCharacterSet,omitempty"`
	// CheckDuplicateInterchangeControlNumber - The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber bool `json:"checkDuplicateInterchangeControlNumber,omitempty"`
	// InterchangeControlNumberValidityDays - The validity period of interchange control number.
	InterchangeControlNumberValidityDays int32 `json:"interchangeControlNumberValidityDays,omitempty"`
	// CheckDuplicateGroupControlNumber - The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber bool `json:"checkDuplicateGroupControlNumber,omitempty"`
	// CheckDuplicateTransactionSetControlNumber - The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber bool `json:"checkDuplicateTransactionSetControlNumber,omitempty"`
	// ValidateEdiTypes - The value indicating whether to Whether to validate EDI types.
	ValidateEdiTypes bool `json:"validateEdiTypes,omitempty"`
	// ValidateXsdTypes - The value indicating whether to Whether to validate XSD types.
	ValidateXsdTypes bool `json:"validateXsdTypes,omitempty"`
	// AllowLeadingAndTrailingSpacesAndZeroes - The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes bool `json:"allowLeadingAndTrailingSpacesAndZeroes,omitempty"`
	// TrimLeadingAndTrailingSpacesAndZeroes - The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes bool `json:"trimLeadingAndTrailingSpacesAndZeroes,omitempty"`
	// TrailingSeparatorPolicy - The trailing separator policy. Possible values include: 'NotSpecified', 'NotAllowed', 'Optional', 'Mandatory', 'None'
	TrailingSeparatorPolicy TrailingSeparatorPolicyType `json:"trailingSeparatorPolicy,omitempty"`
}

// ErrorProperties - Error properties indicate why the Logic service was not able to process the incoming request. The
// reason is provided in the error message.
type ErrorProperties struct {
	// Code - Error code.
	Code *string `json:"code,omitempty"`
	// Message - Error message indicating why the operation failed.
	Message *string `json:"message,omitempty"`
}

// ErrorResponse - Error reponse indicates Logic service is not able to process the incoming request. The error
// property contains the error details.
type ErrorResponse struct {
	// Error - The error properties.
	Error *ErrorProperties `json:"error,omitempty"`
}

// GenerateUpgradedDefinitionParameters - The parameters to generate upgraded definition.
type GenerateUpgradedDefinitionParameters struct {
	// TargetSchemaVersion - The target schema version.
	TargetSchemaVersion *string `json:"targetSchemaVersion,omitempty"`
}

// GenerateUpgradedDefinitionResponse ...
type GenerateUpgradedDefinitionResponse struct {
	rawResponse *http.Response
	Value       map[string]interface{} `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (gudr GenerateUpgradedDefinitionResponse) Response() *http.Response {
	return gudr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gudr GenerateUpgradedDefinitionResponse) StatusCode() int {
	return gudr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gudr GenerateUpgradedDefinitionResponse) Status() string {
	return gudr.rawResponse.Status
}

// GetCallbackURLParameters - The callback url parameters.
type GetCallbackURLParameters struct {
	// NotAfter - The expiry time.
	NotAfter *time.Time `json:"notAfter,omitempty"`
	// KeyType - The key type. Possible values include: 'NotSpecified', 'Primary', 'Secondary', 'None'
	KeyType KeyType `json:"keyType,omitempty"`
}

// IntegrationAccount - The integration account.
type IntegrationAccount struct {
	rawResponse *http.Response
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The integration account properties.
	Properties map[string]interface{} `json:"properties,omitempty"`
	// Sku - The sku.
	Sku *IntegrationAccountSku `json:"sku,omitempty"`
}

// Response returns the raw HTTP response object.
func (ia IntegrationAccount) Response() *http.Response {
	return ia.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ia IntegrationAccount) StatusCode() int {
	return ia.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ia IntegrationAccount) Status() string {
	return ia.rawResponse.Status
}

// IntegrationAccountAgreement - The integration account agreement.
type IntegrationAccountAgreement struct {
	rawResponse *http.Response
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The integration account agreement properties.
	*IntegrationAccountAgreementProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (iaa IntegrationAccountAgreement) Response() *http.Response {
	return iaa.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (iaa IntegrationAccountAgreement) StatusCode() int {
	return iaa.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (iaa IntegrationAccountAgreement) Status() string {
	return iaa.rawResponse.Status
}

// IntegrationAccountAgreementFilter - The integration account agreement filter for odata query.
type IntegrationAccountAgreementFilter struct {
	// AgreementType - The agreement type of integration account agreement. Possible values include: 'NotSpecified', 'AS2', 'X12', 'Edifact', 'None'
	AgreementType AgreementType `json:"agreementType,omitempty"`
}

// IntegrationAccountAgreementListResult - The list of integration account agreements.
type IntegrationAccountAgreementListResult struct {
	rawResponse *http.Response
	// Value - The list of integration account agreements.
	Value []IntegrationAccountAgreement `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (iaalr IntegrationAccountAgreementListResult) Response() *http.Response {
	return iaalr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (iaalr IntegrationAccountAgreementListResult) StatusCode() int {
	return iaalr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (iaalr IntegrationAccountAgreementListResult) Status() string {
	return iaalr.rawResponse.Status
}

// IntegrationAccountAgreementProperties - The integration account agreement properties.
type IntegrationAccountAgreementProperties struct {
	// CreatedTime - The created time.
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// ChangedTime - The changed time.
	ChangedTime *time.Time `json:"changedTime,omitempty"`
	// Metadata - The metadata.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// AgreementType - The agreement type. Possible values include: 'NotSpecified', 'AS2', 'X12', 'Edifact', 'None'
	AgreementType AgreementType `json:"agreementType,omitempty"`
	// HostPartner - The integration account partner that is set as host partner for this agreement.
	HostPartner string `json:"hostPartner,omitempty"`
	// GuestPartner - The integration account partner that is set as guest partner for this agreement.
	GuestPartner string `json:"guestPartner,omitempty"`
	// HostIdentity - The business identity of the host partner.
	HostIdentity BusinessIdentity `json:"hostIdentity,omitempty"`
	// GuestIdentity - The business identity of the guest partner.
	GuestIdentity BusinessIdentity `json:"guestIdentity,omitempty"`
	// Content - The agreement content.
	Content AgreementContent `json:"content,omitempty"`
}

// IntegrationAccountCertificate - The integration account certificate.
type IntegrationAccountCertificate struct {
	rawResponse *http.Response
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The integration account certificate properties.
	*IntegrationAccountCertificateProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (iac IntegrationAccountCertificate) Response() *http.Response {
	return iac.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (iac IntegrationAccountCertificate) StatusCode() int {
	return iac.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (iac IntegrationAccountCertificate) Status() string {
	return iac.rawResponse.Status
}

// IntegrationAccountCertificateListResult - The list of integration account certificates.
type IntegrationAccountCertificateListResult struct {
	rawResponse *http.Response
	// Value - The list of integration account certificates.
	Value []IntegrationAccountCertificate `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (iaclr IntegrationAccountCertificateListResult) Response() *http.Response {
	return iaclr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (iaclr IntegrationAccountCertificateListResult) StatusCode() int {
	return iaclr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (iaclr IntegrationAccountCertificateListResult) Status() string {
	return iaclr.rawResponse.Status
}

// IntegrationAccountCertificateProperties - The integration account certificate properties.
type IntegrationAccountCertificateProperties struct {
	// CreatedTime - The created time.
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// ChangedTime - The changed time.
	ChangedTime *time.Time `json:"changedTime,omitempty"`
	// Metadata - The metadata.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Key - The key details in the key vault.
	Key *KeyVaultKeyReference `json:"key,omitempty"`
	// PublicCertificate - The public certificate.
	PublicCertificate *string `json:"publicCertificate,omitempty"`
}

// IntegrationAccountListResult - The list of integration accounts.
type IntegrationAccountListResult struct {
	rawResponse *http.Response
	// Value - The list of integration accounts.
	Value []IntegrationAccount `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (ialr IntegrationAccountListResult) Response() *http.Response {
	return ialr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ialr IntegrationAccountListResult) StatusCode() int {
	return ialr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ialr IntegrationAccountListResult) Status() string {
	return ialr.rawResponse.Status
}

// IntegrationAccountMap - The integration account map.
type IntegrationAccountMap struct {
	rawResponse *http.Response
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The integration account map properties.
	*IntegrationAccountMapProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (iam IntegrationAccountMap) Response() *http.Response {
	return iam.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (iam IntegrationAccountMap) StatusCode() int {
	return iam.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (iam IntegrationAccountMap) Status() string {
	return iam.rawResponse.Status
}

// IntegrationAccountMapFilter - The integration account map filter for odata query.
type IntegrationAccountMapFilter struct {
	// MapType - The map type of integration account map. Possible values include: 'NotSpecified', 'Xslt', 'None'
	MapType MapType `json:"mapType,omitempty"`
}

// IntegrationAccountMapListResult - The list of integration account maps.
type IntegrationAccountMapListResult struct {
	rawResponse *http.Response
	// Value - The list of integration account maps.
	Value []IntegrationAccountMap `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (iamlr IntegrationAccountMapListResult) Response() *http.Response {
	return iamlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (iamlr IntegrationAccountMapListResult) StatusCode() int {
	return iamlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (iamlr IntegrationAccountMapListResult) Status() string {
	return iamlr.rawResponse.Status
}

// IntegrationAccountMapProperties - The integration account map.
type IntegrationAccountMapProperties struct {
	// MapType - The map type. Possible values include: 'NotSpecified', 'Xslt', 'None'
	MapType MapType `json:"mapType,omitempty"`
	// ParametersSchema - The parameters schema of integration account map.
	ParametersSchema *IntegrationAccountMapPropertiesParametersSchema `json:"parametersSchema,omitempty"`
	// CreatedTime - The created time.
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// ChangedTime - The changed time.
	ChangedTime *time.Time `json:"changedTime,omitempty"`
	// Content - The content.
	Content *string `json:"content,omitempty"`
	// ContentType - The content type.
	ContentType *string `json:"contentType,omitempty"`
	// ContentLink - The content link.
	ContentLink *ContentLink `json:"contentLink,omitempty"`
	// Metadata - The metadata.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// IntegrationAccountMapPropertiesParametersSchema - The parameters schema of integration account map.
type IntegrationAccountMapPropertiesParametersSchema struct {
	// Ref - The reference name.
	Ref *string `json:"ref,omitempty"`
}

// IntegrationAccountPartner - The integration account partner.
type IntegrationAccountPartner struct {
	rawResponse *http.Response
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The integration account partner properties.
	*IntegrationAccountPartnerProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (iap IntegrationAccountPartner) Response() *http.Response {
	return iap.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (iap IntegrationAccountPartner) StatusCode() int {
	return iap.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (iap IntegrationAccountPartner) Status() string {
	return iap.rawResponse.Status
}

// IntegrationAccountPartnerFilter - The integration account partner filter for odata query.
type IntegrationAccountPartnerFilter struct {
	// PartnerType - The partner type of integration account partner. Possible values include: 'NotSpecified', 'B2B', 'None'
	PartnerType PartnerType `json:"partnerType,omitempty"`
}

// IntegrationAccountPartnerListResult - The list of integration account partners.
type IntegrationAccountPartnerListResult struct {
	rawResponse *http.Response
	// Value - The list of integration account partners.
	Value []IntegrationAccountPartner `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (iaplr IntegrationAccountPartnerListResult) Response() *http.Response {
	return iaplr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (iaplr IntegrationAccountPartnerListResult) StatusCode() int {
	return iaplr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (iaplr IntegrationAccountPartnerListResult) Status() string {
	return iaplr.rawResponse.Status
}

// IntegrationAccountPartnerProperties - The integration account partner properties.
type IntegrationAccountPartnerProperties struct {
	// PartnerType - The partner type. Possible values include: 'NotSpecified', 'B2B', 'None'
	PartnerType PartnerType `json:"partnerType,omitempty"`
	// CreatedTime - The created time.
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// ChangedTime - The changed time.
	ChangedTime *time.Time `json:"changedTime,omitempty"`
	// Metadata - The metadata.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Content - The partner content.
	Content PartnerContent `json:"content,omitempty"`
}

// IntegrationAccountSchema - The integration account schema.
type IntegrationAccountSchema struct {
	rawResponse *http.Response
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The integration account schema properties.
	*IntegrationAccountSchemaProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (ias IntegrationAccountSchema) Response() *http.Response {
	return ias.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ias IntegrationAccountSchema) StatusCode() int {
	return ias.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ias IntegrationAccountSchema) Status() string {
	return ias.rawResponse.Status
}

// IntegrationAccountSchemaFilter - The integration account schema filter for odata query.
type IntegrationAccountSchemaFilter struct {
	// SchemaType - The schema type of integration account schema. Possible values include: 'NotSpecified', 'XML', 'None'
	SchemaType SchemaType `json:"schemaType,omitempty"`
}

// IntegrationAccountSchemaListResult - The list of integration account schemas.
type IntegrationAccountSchemaListResult struct {
	rawResponse *http.Response
	// Value - The list of integration account schemas.
	Value []IntegrationAccountSchema `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (iaslr IntegrationAccountSchemaListResult) Response() *http.Response {
	return iaslr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (iaslr IntegrationAccountSchemaListResult) StatusCode() int {
	return iaslr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (iaslr IntegrationAccountSchemaListResult) Status() string {
	return iaslr.rawResponse.Status
}

// IntegrationAccountSchemaProperties - The integration account schema properties.
type IntegrationAccountSchemaProperties struct {
	// SchemaType - The schema type. Possible values include: 'NotSpecified', 'XML', 'None'
	SchemaType SchemaType `json:"schemaType,omitempty"`
	// TargetNamespace - The target namespace of the schema.
	TargetNamespace *string `json:"targetNamespace,omitempty"`
	// DocumentName - The document name.
	DocumentName *string `json:"documentName,omitempty"`
	// FileName - The file name.
	FileName *string `json:"fileName,omitempty"`
	// CreatedTime - The created time.
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// ChangedTime - The changed time.
	ChangedTime *time.Time `json:"changedTime,omitempty"`
	// Metadata - The metadata.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Content - The content.
	Content *string `json:"content,omitempty"`
	// ContentType - The content type.
	ContentType *string `json:"contentType,omitempty"`
	// ContentLink - The content link.
	ContentLink *ContentLink `json:"contentLink,omitempty"`
}

// IntegrationAccountSession - The integration account session.
type IntegrationAccountSession struct {
	rawResponse *http.Response
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The integration account session properties.
	*IntegrationAccountSessionProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (ias IntegrationAccountSession) Response() *http.Response {
	return ias.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ias IntegrationAccountSession) StatusCode() int {
	return ias.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ias IntegrationAccountSession) Status() string {
	return ias.rawResponse.Status
}

// IntegrationAccountSessionFilter - The integration account session filter.
type IntegrationAccountSessionFilter struct {
	// ChangedTime - The changed time of integration account sessions.
	ChangedTime time.Time `json:"changedTime,omitempty"`
}

// IntegrationAccountSessionListResult - The list of integration account sessions.
type IntegrationAccountSessionListResult struct {
	rawResponse *http.Response
	// Value - The list of integration account sessions.
	Value []IntegrationAccountSession `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (iaslr IntegrationAccountSessionListResult) Response() *http.Response {
	return iaslr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (iaslr IntegrationAccountSessionListResult) StatusCode() int {
	return iaslr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (iaslr IntegrationAccountSessionListResult) Status() string {
	return iaslr.rawResponse.Status
}

// IntegrationAccountSessionProperties - The integration account session properties.
type IntegrationAccountSessionProperties struct {
	// CreatedTime - The created time.
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// ChangedTime - The changed time.
	ChangedTime *time.Time `json:"changedTime,omitempty"`
	// Content - The session content.
	Content map[string]interface{} `json:"content,omitempty"`
}

// IntegrationAccountSku - The integration account sku.
type IntegrationAccountSku struct {
	// Name - The sku name. Possible values include: 'NotSpecified', 'Free', 'Standard', 'None'
	Name IntegrationAccountSkuNameType `json:"name,omitempty"`
}

// IsolatedEnvironment - The isolated environment.
type IsolatedEnvironment struct {
	rawResponse *http.Response
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The isolated environment properties.
	Properties map[string]interface{} `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (ie IsolatedEnvironment) Response() *http.Response {
	return ie.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ie IsolatedEnvironment) StatusCode() int {
	return ie.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ie IsolatedEnvironment) Status() string {
	return ie.rawResponse.Status
}

// IsolatedEnvironmentListResult - The list of isolated environments.
type IsolatedEnvironmentListResult struct {
	rawResponse *http.Response
	// Value - The list of isolated environments.
	Value []IsolatedEnvironment `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (ielr IsolatedEnvironmentListResult) Response() *http.Response {
	return ielr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ielr IsolatedEnvironmentListResult) StatusCode() int {
	return ielr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ielr IsolatedEnvironmentListResult) Status() string {
	return ielr.rawResponse.Status
}

// KeyVaultKeyReference - The reference to the key vault key.
type KeyVaultKeyReference struct {
	// KeyVault - The key vault reference.
	KeyVault KeyVaultKeyReferenceKeyVault `json:"keyVault,omitempty"`
	// KeyName - The private key name in key vault.
	KeyName string `json:"keyName,omitempty"`
	// KeyVersion - The private key version in key vault.
	KeyVersion *string `json:"keyVersion,omitempty"`
}

// KeyVaultKeyReferenceKeyVault - The key vault reference.
type KeyVaultKeyReferenceKeyVault struct {
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
}

// ListSwaggerResponse ...
type ListSwaggerResponse struct {
	rawResponse *http.Response
	Value       map[string]interface{} `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (lsr ListSwaggerResponse) Response() *http.Response {
	return lsr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (lsr ListSwaggerResponse) StatusCode() int {
	return lsr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (lsr ListSwaggerResponse) Status() string {
	return lsr.rawResponse.Status
}

// Operation - Logic REST API operation
type Operation struct {
	// Name - Operation name: {provider}/{resource}/{operation}
	Name *string `json:"name,omitempty"`
	// Display - The object that represents the operation.
	Display *OperationDisplay `json:"display,omitempty"`
}

// OperationDisplay - The object that represents the operation.
type OperationDisplay struct {
	// Provider - Service provider: Microsoft.Logic
	Provider *string `json:"provider,omitempty"`
	// Resource - Resource on which the operation is performed: Profile, endpoint, etc.
	Resource *string `json:"resource,omitempty"`
	// Operation - Operation type: Read, write, delete, etc.
	Operation *string `json:"operation,omitempty"`
}

// OperationListResult - Result of the request to list Logic operations. It contains a list of operations and a URL
// link to get the next set of results.
type OperationListResult struct {
	rawResponse *http.Response
	// Value - List of Logic operations supported by the Logic resource provider.
	Value []Operation `json:"value,omitempty"`
	// NextLink - URL to get the next set of operation list results if there are any.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (olr OperationListResult) Response() *http.Response {
	return olr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (olr OperationListResult) StatusCode() int {
	return olr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (olr OperationListResult) Status() string {
	return olr.rawResponse.Status
}

// PartnerContent - The integration account partner content.
type PartnerContent struct {
	// B2b - The B2B partner content.
	B2b *B2BPartnerContent `json:"b2b,omitempty"`
}

// RecurrenceSchedule - The recurrence schedule.
type RecurrenceSchedule struct {
	// Minutes - The minutes.
	Minutes []int32 `json:"minutes,omitempty"`
	// Hours - The hours.
	Hours []int32 `json:"hours,omitempty"`
	// WeekDays - The days of the week.
	WeekDays []DaysOfWeekType `json:"weekDays,omitempty"`
	// MonthDays - The month days.
	MonthDays []int32 `json:"monthDays,omitempty"`
	// MonthlyOccurrences - The monthly occurrences.
	MonthlyOccurrences []RecurrenceScheduleOccurrence `json:"monthlyOccurrences,omitempty"`
}

// RecurrenceScheduleOccurrence - The recurrence schedule occurence.
type RecurrenceScheduleOccurrence struct {
	// Day - The day of the week. Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'None'
	Day DayOfWeekType `json:"day,omitempty"`
	// Occurrence - The occurrence.
	Occurrence *int32 `json:"occurrence,omitempty"`
}

// RegenerateActionParameter - The access key regenerate action content.
type RegenerateActionParameter struct {
	// KeyType - The key type. Possible values include: 'NotSpecified', 'Primary', 'Secondary', 'None'
	KeyType KeyType `json:"keyType,omitempty"`
}

// Resource - The base resource type.
type Resource struct {
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

// ResourceReference - The resource reference.
type ResourceReference struct {
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
}

// RetryHistory - The retry history.
type RetryHistory struct {
	// StartTime - Gets the start time.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - Gets the end time.
	EndTime *time.Time `json:"endTime,omitempty"`
	// Code - Gets the status code.
	Code *string `json:"code,omitempty"`
	// ClientRequestID - Gets the client request Id.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// ServiceRequestID - Gets the service request Id.
	ServiceRequestID *string `json:"serviceRequestId,omitempty"`
	// Error - Gets the error response.
	Error *ErrorResponse `json:"error,omitempty"`
}

// RunResponse ...
type RunResponse struct {
	rawResponse *http.Response
	Value       map[string]interface{} `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (rr RunResponse) Response() *http.Response {
	return rr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rr RunResponse) StatusCode() int {
	return rr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rr RunResponse) Status() string {
	return rr.rawResponse.Status
}

// Sku - The sku type.
type Sku struct {
	// Name - The name. Possible values include: 'NotSpecified', 'Free', 'Shared', 'Basic', 'Standard', 'Premium', 'None'
	Name SkuNameType `json:"name,omitempty"`
	// Plan - The reference to plan.
	Plan *ResourceReference `json:"plan,omitempty"`
}

// SubResource - The sub resource type.
type SubResource struct {
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
}

// Workflow - The workflow.
type Workflow struct {
	rawResponse *http.Response
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The workflow properties.
	*WorkflowProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (w Workflow) Response() *http.Response {
	return w.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (w Workflow) StatusCode() int {
	return w.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (w Workflow) Status() string {
	return w.rawResponse.Status
}

// WorkflowFilter - The workflow filter.
type WorkflowFilter struct {
	// State - The state of workflows. Possible values include: 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended', 'None'
	State WorkflowStateType `json:"state,omitempty"`
}

// WorkflowListResult - The list of workflows.
type WorkflowListResult struct {
	rawResponse *http.Response
	// Value - The list of workflows.
	Value []Workflow `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (wlr WorkflowListResult) Response() *http.Response {
	return wlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wlr WorkflowListResult) StatusCode() int {
	return wlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wlr WorkflowListResult) Status() string {
	return wlr.rawResponse.Status
}

// WorkflowOutputParameter - The workflow output parameter.
type WorkflowOutputParameter struct {
	// Type - The type. Possible values include: 'NotSpecified', 'String', 'SecureString', 'Int', 'Float', 'Bool', 'Array', 'Object', 'SecureObject', 'None'
	Type ParameterType `json:"type,omitempty"`
	// Value - The value.
	Value map[string]interface{} `json:"value,omitempty"`
	// Metadata - The metadata.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Description - The description.
	Description *string `json:"description,omitempty"`
	// Error - Gets the error.
	Error map[string]interface{} `json:"error,omitempty"`
}

// WorkflowParameter - The workflow parameters.
type WorkflowParameter struct {
	// Type - The type. Possible values include: 'NotSpecified', 'String', 'SecureString', 'Int', 'Float', 'Bool', 'Array', 'Object', 'SecureObject', 'None'
	Type ParameterType `json:"type,omitempty"`
	// Value - The value.
	Value map[string]interface{} `json:"value,omitempty"`
	// Metadata - The metadata.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Description - The description.
	Description *string `json:"description,omitempty"`
}

// WorkflowProperties - The workflow properties.
type WorkflowProperties struct {
	// ProvisioningState - Gets the provisioning state. Possible values include: 'NotSpecified', 'Accepted', 'Running', 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded', 'Moving', 'Updating', 'Registering', 'Registered', 'Unregistering', 'Unregistered', 'Completed', 'None'
	ProvisioningState WorkflowProvisioningStateType `json:"provisioningState,omitempty"`
	// CreatedTime - Gets the created time.
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// ChangedTime - Gets the changed time.
	ChangedTime *time.Time `json:"changedTime,omitempty"`
	// State - The state. Possible values include: 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended', 'None'
	State WorkflowStateType `json:"state,omitempty"`
	// Version - Gets the version.
	Version *string `json:"version,omitempty"`
	// AccessEndpoint - Gets the access endpoint.
	AccessEndpoint *string `json:"accessEndpoint,omitempty"`
	// Sku - The sku.
	Sku *Sku `json:"sku,omitempty"`
	// IntegrationAccount - The integration account.
	IntegrationAccount *ResourceReference `json:"integrationAccount,omitempty"`
	// Definition - The definition.
	Definition map[string]interface{} `json:"definition,omitempty"`
	// Parameters - The parameters.
	Parameters map[string]WorkflowParameter `json:"parameters,omitempty"`
}

// WorkflowRun - The workflow run.
type WorkflowRun struct {
	rawResponse *http.Response
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Properties - The workflow run properties.
	*WorkflowRunProperties `json:"properties,omitempty"`
	// Name - Gets the workflow run name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the workflow run type.
	Type *string `json:"type,omitempty"`
}

// Response returns the raw HTTP response object.
func (wr WorkflowRun) Response() *http.Response {
	return wr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wr WorkflowRun) StatusCode() int {
	return wr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wr WorkflowRun) Status() string {
	return wr.rawResponse.Status
}

// WorkflowRunAction - The workflow run action.
type WorkflowRunAction struct {
	rawResponse *http.Response
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Properties - The workflow run action properties.
	*WorkflowRunActionProperties `json:"properties,omitempty"`
	// Name - Gets the workflow run action name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the workflow run action type.
	Type *string `json:"type,omitempty"`
}

// Response returns the raw HTTP response object.
func (wra WorkflowRunAction) Response() *http.Response {
	return wra.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wra WorkflowRunAction) StatusCode() int {
	return wra.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wra WorkflowRunAction) Status() string {
	return wra.rawResponse.Status
}

// WorkflowRunActionFilter - The workflow run action filter.
type WorkflowRunActionFilter struct {
	// Status - The status of workflow run action. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'Ignored', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
}

// WorkflowRunActionListResult - The list of workflow run actions.
type WorkflowRunActionListResult struct {
	rawResponse *http.Response
	// Value - A list of workflow run actions.
	Value []WorkflowRunAction `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (wralr WorkflowRunActionListResult) Response() *http.Response {
	return wralr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wralr WorkflowRunActionListResult) StatusCode() int {
	return wralr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wralr WorkflowRunActionListResult) Status() string {
	return wralr.rawResponse.Status
}

// WorkflowRunActionProperties - The workflow run action properties.
type WorkflowRunActionProperties struct {
	// StartTime - Gets the start time.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - Gets the end time.
	EndTime *time.Time `json:"endTime,omitempty"`
	// Status - Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'Ignored', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
	// Code - Gets the code.
	Code *string `json:"code,omitempty"`
	// Error - Gets the error.
	Error map[string]interface{} `json:"error,omitempty"`
	// TrackingID - Gets the tracking id.
	TrackingID *string `json:"trackingId,omitempty"`
	// Correlation - The correlation properties.
	Correlation *Correlation `json:"correlation,omitempty"`
	// InputsLink - Gets the link to inputs.
	InputsLink *ContentLink `json:"inputsLink,omitempty"`
	// OutputsLink - Gets the link to outputs.
	OutputsLink *ContentLink `json:"outputsLink,omitempty"`
	// TrackedProperties - Gets the tracked properties.
	TrackedProperties map[string]interface{} `json:"trackedProperties,omitempty"`
	// RetryHistory - Gets the retry histories.
	RetryHistory []RetryHistory `json:"retryHistory,omitempty"`
}

// WorkflowRunFilter - The workflow run filter.
type WorkflowRunFilter struct {
	// Status - The status of workflow run. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'Ignored', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
}

// WorkflowRunListResult - The list of workflow runs.
type WorkflowRunListResult struct {
	rawResponse *http.Response
	// Value - A list of workflow runs.
	Value []WorkflowRun `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (wrlr WorkflowRunListResult) Response() *http.Response {
	return wrlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wrlr WorkflowRunListResult) StatusCode() int {
	return wrlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wrlr WorkflowRunListResult) Status() string {
	return wrlr.rawResponse.Status
}

// WorkflowRunProperties - The workflow run properties.
type WorkflowRunProperties struct {
	// StartTime - Gets the start time.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - Gets the end time.
	EndTime *time.Time `json:"endTime,omitempty"`
	// Status - Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'Ignored', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
	// Code - Gets the code.
	Code *string `json:"code,omitempty"`
	// Error - Gets the error.
	Error map[string]interface{} `json:"error,omitempty"`
	// CorrelationID - Gets the correlation id.
	CorrelationID *string `json:"correlationId,omitempty"`
	// Correlation - The run correlation.
	Correlation *Correlation `json:"correlation,omitempty"`
	// Workflow - Gets the reference to workflow version.
	Workflow *ResourceReference `json:"workflow,omitempty"`
	// Trigger - Gets the fired trigger.
	Trigger *WorkflowRunTrigger `json:"trigger,omitempty"`
	// Outputs - Gets the outputs.
	Outputs map[string]WorkflowOutputParameter `json:"outputs,omitempty"`
	// Response - Gets the response of the flow run.
	Response *WorkflowRunTrigger `json:"response,omitempty"`
}

// WorkflowRunTrigger - The workflow run trigger.
type WorkflowRunTrigger struct {
	// Name - Gets the name.
	Name *string `json:"name,omitempty"`
	// Inputs - Gets the inputs.
	Inputs map[string]interface{} `json:"inputs,omitempty"`
	// InputsLink - Gets the link to inputs.
	InputsLink *ContentLink `json:"inputsLink,omitempty"`
	// Outputs - Gets the outputs.
	Outputs map[string]interface{} `json:"outputs,omitempty"`
	// OutputsLink - Gets the link to outputs.
	OutputsLink *ContentLink `json:"outputsLink,omitempty"`
	// StartTime - Gets the start time.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - Gets the end time.
	EndTime *time.Time `json:"endTime,omitempty"`
	// TrackingID - Gets the tracking id.
	TrackingID *string `json:"trackingId,omitempty"`
	// Correlation - The run correlation.
	Correlation *Correlation `json:"correlation,omitempty"`
	// Code - Gets the code.
	Code *string `json:"code,omitempty"`
	// Status - Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'Ignored', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
	// Error - Gets the error.
	Error map[string]interface{} `json:"error,omitempty"`
	// TrackedProperties - Gets the tracked properties.
	TrackedProperties map[string]interface{} `json:"trackedProperties,omitempty"`
}

// WorkflowTrigger - The workflow trigger.
type WorkflowTrigger struct {
	rawResponse *http.Response
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Properties - The workflow trigger properties.
	*WorkflowTriggerProperties `json:"properties,omitempty"`
	// Name - Gets the workflow trigger name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the workflow trigger type.
	Type *string `json:"type,omitempty"`
}

// Response returns the raw HTTP response object.
func (wt WorkflowTrigger) Response() *http.Response {
	return wt.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wt WorkflowTrigger) StatusCode() int {
	return wt.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wt WorkflowTrigger) Status() string {
	return wt.rawResponse.Status
}

// WorkflowTriggerCallbackURL - The workflow trigger callback URL.
type WorkflowTriggerCallbackURL struct {
	rawResponse *http.Response
	// Value - Gets the workflow trigger callback URL.
	Value *string `json:"value,omitempty"`
	// Method - Gets the workflow trigger callback URL HTTP method.
	Method *string `json:"method,omitempty"`
	// BasePath - Gets the workflow trigger callback URL base path.
	BasePath *string `json:"basePath,omitempty"`
	// RelativePath - Gets the workflow trigger callback URL relative path.
	RelativePath *string `json:"relativePath,omitempty"`
	// RelativePathParameters - Gets the workflow trigger callback URL relative path parameters.
	RelativePathParameters []string `json:"relativePathParameters,omitempty"`
	// Queries - Gets the workflow trigger callback URL query parameters.
	Queries *WorkflowTriggerListCallbackURLQueries `json:"queries,omitempty"`
}

// Response returns the raw HTTP response object.
func (wtcu WorkflowTriggerCallbackURL) Response() *http.Response {
	return wtcu.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wtcu WorkflowTriggerCallbackURL) StatusCode() int {
	return wtcu.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wtcu WorkflowTriggerCallbackURL) Status() string {
	return wtcu.rawResponse.Status
}

// WorkflowTriggerFilter - The workflow trigger filter.
type WorkflowTriggerFilter struct {
	// State - The state of workflow trigger. Possible values include: 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended', 'None'
	State WorkflowStateType `json:"state,omitempty"`
}

// WorkflowTriggerHistory - The workflow trigger history.
type WorkflowTriggerHistory struct {
	rawResponse *http.Response
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Properties - Gets the workflow trigger history properties.
	*WorkflowTriggerHistoryProperties `json:"properties,omitempty"`
	// Name - Gets the workflow trigger history name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the workflow trigger history type.
	Type *string `json:"type,omitempty"`
}

// Response returns the raw HTTP response object.
func (wth WorkflowTriggerHistory) Response() *http.Response {
	return wth.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wth WorkflowTriggerHistory) StatusCode() int {
	return wth.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wth WorkflowTriggerHistory) Status() string {
	return wth.rawResponse.Status
}

// WorkflowTriggerHistoryFilter - The workflow trigger history filter.
type WorkflowTriggerHistoryFilter struct {
	// Status - The status of workflow trigger history. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'Ignored', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
}

// WorkflowTriggerHistoryListResult - The list of workflow trigger histories.
type WorkflowTriggerHistoryListResult struct {
	rawResponse *http.Response
	// Value - A list of workflow trigger histories.
	Value []WorkflowTriggerHistory `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (wthlr WorkflowTriggerHistoryListResult) Response() *http.Response {
	return wthlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wthlr WorkflowTriggerHistoryListResult) StatusCode() int {
	return wthlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wthlr WorkflowTriggerHistoryListResult) Status() string {
	return wthlr.rawResponse.Status
}

// WorkflowTriggerHistoryProperties - The workflow trigger history properties.
type WorkflowTriggerHistoryProperties struct {
	// StartTime - Gets the start time.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - Gets the end time.
	EndTime *time.Time `json:"endTime,omitempty"`
	// Status - Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'Ignored', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
	// Code - Gets the code.
	Code *string `json:"code,omitempty"`
	// Error - Gets the error.
	Error map[string]interface{} `json:"error,omitempty"`
	// TrackingID - Gets the tracking id.
	TrackingID *string `json:"trackingId,omitempty"`
	// Correlation - The run correlation.
	Correlation *Correlation `json:"correlation,omitempty"`
	// InputsLink - Gets the link to input parameters.
	InputsLink *ContentLink `json:"inputsLink,omitempty"`
	// OutputsLink - Gets the link to output parameters.
	OutputsLink *ContentLink `json:"outputsLink,omitempty"`
	// Fired - Gets a value indicating whether trigger was fired.
	Fired *bool `json:"fired,omitempty"`
	// Run - Gets the reference to workflow run.
	Run *ResourceReference `json:"run,omitempty"`
}

// WorkflowTriggerListCallbackURLQueries - Gets the workflow trigger callback URL query parameters.
type WorkflowTriggerListCallbackURLQueries struct {
	// APIVersion - The api version.
	APIVersion *string `json:"api-version,omitempty"`
	// Sp - The SAS permissions.
	Sp *string `json:"sp,omitempty"`
	// Sv - The SAS version.
	Sv *string `json:"sv,omitempty"`
	// Sig - The SAS signature.
	Sig *string `json:"sig,omitempty"`
}

// WorkflowTriggerListResult - The list of workflow triggers.
type WorkflowTriggerListResult struct {
	rawResponse *http.Response
	// Value - A list of workflow triggers.
	Value []WorkflowTrigger `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (wtlr WorkflowTriggerListResult) Response() *http.Response {
	return wtlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wtlr WorkflowTriggerListResult) StatusCode() int {
	return wtlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wtlr WorkflowTriggerListResult) Status() string {
	return wtlr.rawResponse.Status
}

// WorkflowTriggerProperties - The workflow trigger properties.
type WorkflowTriggerProperties struct {
	// ProvisioningState - Gets the provisioning state. Possible values include: 'NotSpecified', 'Accepted', 'Running', 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded', 'Moving', 'Updating', 'Registering', 'Registered', 'Unregistering', 'Unregistered', 'Completed', 'None'
	ProvisioningState WorkflowTriggerProvisioningStateType `json:"provisioningState,omitempty"`
	// CreatedTime - Gets the created time.
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// ChangedTime - Gets the changed time.
	ChangedTime *time.Time `json:"changedTime,omitempty"`
	// State - Gets the state. Possible values include: 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended', 'None'
	State WorkflowStateType `json:"state,omitempty"`
	// Status - Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'Ignored', 'None'
	Status WorkflowStatusType `json:"status,omitempty"`
	// LastExecutionTime - Gets the last execution time.
	LastExecutionTime *time.Time `json:"lastExecutionTime,omitempty"`
	// NextExecutionTime - Gets the next execution time.
	NextExecutionTime *time.Time `json:"nextExecutionTime,omitempty"`
	// Recurrence - Gets the workflow trigger recurrence.
	Recurrence *WorkflowTriggerRecurrence `json:"recurrence,omitempty"`
	// Workflow - Gets the reference to workflow.
	Workflow *ResourceReference `json:"workflow,omitempty"`
}

// WorkflowTriggerRecurrence - The workflow trigger recurrence.
type WorkflowTriggerRecurrence struct {
	// Frequency - The frequency. Possible values include: 'NotSpecified', 'Second', 'Minute', 'Hour', 'Day', 'Week', 'Month', 'Year', 'None'
	Frequency RecurrenceFrequencyType `json:"frequency,omitempty"`
	// Interval - The interval.
	Interval *int32 `json:"interval,omitempty"`
	// StartTime - The start time.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - The end time.
	EndTime *time.Time `json:"endTime,omitempty"`
	// TimeZone - The time zone.
	TimeZone *string `json:"timeZone,omitempty"`
	// Schedule - The recurrence schedule.
	Schedule *RecurrenceSchedule `json:"schedule,omitempty"`
}

// WorkflowVersion - The workflow version.
type WorkflowVersion struct {
	rawResponse *http.Response
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Name - Gets the resource name.
	Name *string `json:"name,omitempty"`
	// Type - Gets the resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The workflow version properties.
	*WorkflowVersionProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (wv WorkflowVersion) Response() *http.Response {
	return wv.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wv WorkflowVersion) StatusCode() int {
	return wv.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wv WorkflowVersion) Status() string {
	return wv.rawResponse.Status
}

// WorkflowVersionListResult - The list of workflow versions.
type WorkflowVersionListResult struct {
	rawResponse *http.Response
	// Value - A list of workflow versions.
	Value []WorkflowVersion `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (wvlr WorkflowVersionListResult) Response() *http.Response {
	return wvlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wvlr WorkflowVersionListResult) StatusCode() int {
	return wvlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wvlr WorkflowVersionListResult) Status() string {
	return wvlr.rawResponse.Status
}

// WorkflowVersionProperties - The workflow version properties.
type WorkflowVersionProperties struct {
	// CreatedTime - Gets the created time.
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// ChangedTime - Gets the changed time.
	ChangedTime *time.Time `json:"changedTime,omitempty"`
	// State - The state. Possible values include: 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended', 'None'
	State WorkflowStateType `json:"state,omitempty"`
	// Version - Gets the version.
	Version *string `json:"version,omitempty"`
	// AccessEndpoint - Gets the access endpoint.
	AccessEndpoint *string `json:"accessEndpoint,omitempty"`
	// Sku - The sku.
	Sku *Sku `json:"sku,omitempty"`
	// IntegrationAccount - The integration account.
	IntegrationAccount *ResourceReference `json:"integrationAccount,omitempty"`
	// Definition - The definition.
	Definition map[string]interface{} `json:"definition,omitempty"`
	// Parameters - The parameters.
	Parameters map[string]WorkflowParameter `json:"parameters,omitempty"`
}

// X12AcknowledgementSettings - The X12 agreement acknowledgement settings.
type X12AcknowledgementSettings struct {
	// NeedTechnicalAcknowledgement - The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement bool `json:"needTechnicalAcknowledgement,omitempty"`
	// BatchTechnicalAcknowledgements - The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements bool `json:"batchTechnicalAcknowledgements,omitempty"`
	// NeedFunctionalAcknowledgement - The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement bool `json:"needFunctionalAcknowledgement,omitempty"`
	// FunctionalAcknowledgementVersion - The functional acknowledgement version.
	FunctionalAcknowledgementVersion *string `json:"functionalAcknowledgementVersion,omitempty"`
	// BatchFunctionalAcknowledgements - The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements bool `json:"batchFunctionalAcknowledgements,omitempty"`
	// NeedImplementationAcknowledgement - The value indicating whether implementation acknowledgement is needed.
	NeedImplementationAcknowledgement bool `json:"needImplementationAcknowledgement,omitempty"`
	// ImplementationAcknowledgementVersion - The implementation acknowledgement version.
	ImplementationAcknowledgementVersion *string `json:"implementationAcknowledgementVersion,omitempty"`
	// BatchImplementationAcknowledgements - The value indicating whether to batch implementation acknowledgements.
	BatchImplementationAcknowledgements bool `json:"batchImplementationAcknowledgements,omitempty"`
	// NeedLoopForValidMessages - The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages bool `json:"needLoopForValidMessages,omitempty"`
	// SendSynchronousAcknowledgement - The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement bool `json:"sendSynchronousAcknowledgement,omitempty"`
	// AcknowledgementControlNumberPrefix - The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix *string `json:"acknowledgementControlNumberPrefix,omitempty"`
	// AcknowledgementControlNumberSuffix - The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix *string `json:"acknowledgementControlNumberSuffix,omitempty"`
	// AcknowledgementControlNumberLowerBound - The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound int32 `json:"acknowledgementControlNumberLowerBound,omitempty"`
	// AcknowledgementControlNumberUpperBound - The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound int32 `json:"acknowledgementControlNumberUpperBound,omitempty"`
	// RolloverAcknowledgementControlNumber - The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber bool `json:"rolloverAcknowledgementControlNumber,omitempty"`
}

// X12AgreementContent - The X12 agreement content.
type X12AgreementContent struct {
	// ReceiveAgreement - The X12 one-way receive agreement.
	ReceiveAgreement X12OneWayAgreement `json:"receiveAgreement,omitempty"`
	// SendAgreement - The X12 one-way send agreement.
	SendAgreement X12OneWayAgreement `json:"sendAgreement,omitempty"`
}

// X12DelimiterOverrides - The X12 delimiter override settings.
type X12DelimiterOverrides struct {
	// ProtocolVersion - The protocol version.
	ProtocolVersion *string `json:"protocolVersion,omitempty"`
	// MessageID - The message id.
	MessageID *string `json:"messageId,omitempty"`
	// DataElementSeparator - The data element separator.
	DataElementSeparator int32 `json:"dataElementSeparator,omitempty"`
	// ComponentSeparator - The component separator.
	ComponentSeparator int32 `json:"componentSeparator,omitempty"`
	// SegmentTerminator - The segment terminator.
	SegmentTerminator int32 `json:"segmentTerminator,omitempty"`
	// SegmentTerminatorSuffix - The segment terminator suffix. Possible values include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF', 'None'
	SegmentTerminatorSuffix SegmentTerminatorSuffixType `json:"segmentTerminatorSuffix,omitempty"`
	// ReplaceCharacter - The replacement character.
	ReplaceCharacter int32 `json:"replaceCharacter,omitempty"`
	// ReplaceSeparatorsInPayload - The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload bool `json:"replaceSeparatorsInPayload,omitempty"`
	// TargetNamespace - The target namespace on which this delimiter settings has to be applied.
	TargetNamespace *string `json:"targetNamespace,omitempty"`
}

// X12EnvelopeOverride - The X12 envelope override settings.
type X12EnvelopeOverride struct {
	// TargetNamespace - The target namespace on which this envelope settings has to be applied.
	TargetNamespace string `json:"targetNamespace,omitempty"`
	// ProtocolVersion - The protocol version on which this envelope settings has to be applied.
	ProtocolVersion string `json:"protocolVersion,omitempty"`
	// MessageID - The message id on which this envelope settings has to be applied.
	MessageID string `json:"messageId,omitempty"`
	// ResponsibleAgencyCode - The responsible agency code.
	ResponsibleAgencyCode string `json:"responsibleAgencyCode,omitempty"`
	// HeaderVersion - The header version.
	HeaderVersion string `json:"headerVersion,omitempty"`
	// SenderApplicationID - The sender application id.
	SenderApplicationID string `json:"senderApplicationId,omitempty"`
	// ReceiverApplicationID - The receiver application id.
	ReceiverApplicationID string `json:"receiverApplicationId,omitempty"`
	// FunctionalIdentifierCode - The functional identifier code.
	FunctionalIdentifierCode *string `json:"functionalIdentifierCode,omitempty"`
	// DateFormat - The date format. Possible values include: 'NotSpecified', 'CCYYMMDD', 'YYMMDD', 'None'
	DateFormat X12DateFormatType `json:"dateFormat,omitempty"`
	// TimeFormat - The time format. Possible values include: 'NotSpecified', 'HHMM', 'HHMMSS', 'HHMMSSdd', 'HHMMSSd', 'None'
	TimeFormat X12TimeFormatType `json:"timeFormat,omitempty"`
}

// X12EnvelopeSettings - The X12 agreement envelope settings.
type X12EnvelopeSettings struct {
	// ControlStandardsID - The controls standards id.
	ControlStandardsID int32 `json:"controlStandardsId,omitempty"`
	// UseControlStandardsIDAsRepetitionCharacter - The value indicating whether to use control standards id as repetition character.
	UseControlStandardsIDAsRepetitionCharacter bool `json:"useControlStandardsIdAsRepetitionCharacter,omitempty"`
	// SenderApplicationID - The sender application id.
	SenderApplicationID string `json:"senderApplicationId,omitempty"`
	// ReceiverApplicationID - The receiver application id.
	ReceiverApplicationID string `json:"receiverApplicationId,omitempty"`
	// ControlVersionNumber - The control version number.
	ControlVersionNumber string `json:"controlVersionNumber,omitempty"`
	// InterchangeControlNumberLowerBound - The interchange  control number lower bound.
	InterchangeControlNumberLowerBound int32 `json:"interchangeControlNumberLowerBound,omitempty"`
	// InterchangeControlNumberUpperBound - The interchange  control number upper bound.
	InterchangeControlNumberUpperBound int32 `json:"interchangeControlNumberUpperBound,omitempty"`
	// RolloverInterchangeControlNumber - The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber bool `json:"rolloverInterchangeControlNumber,omitempty"`
	// EnableDefaultGroupHeaders - The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders bool `json:"enableDefaultGroupHeaders,omitempty"`
	// FunctionalGroupID - The functional group id.
	FunctionalGroupID *string `json:"functionalGroupId,omitempty"`
	// GroupControlNumberLowerBound - The group control number lower bound.
	GroupControlNumberLowerBound int32 `json:"groupControlNumberLowerBound,omitempty"`
	// GroupControlNumberUpperBound - The group control number upper bound.
	GroupControlNumberUpperBound int32 `json:"groupControlNumberUpperBound,omitempty"`
	// RolloverGroupControlNumber - The value indicating whether to rollover group control number.
	RolloverGroupControlNumber bool `json:"rolloverGroupControlNumber,omitempty"`
	// GroupHeaderAgencyCode - The group header agency code.
	GroupHeaderAgencyCode string `json:"groupHeaderAgencyCode,omitempty"`
	// GroupHeaderVersion - The group header version.
	GroupHeaderVersion string `json:"groupHeaderVersion,omitempty"`
	// TransactionSetControlNumberLowerBound - The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound int32 `json:"transactionSetControlNumberLowerBound,omitempty"`
	// TransactionSetControlNumberUpperBound - The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound int32 `json:"transactionSetControlNumberUpperBound,omitempty"`
	// RolloverTransactionSetControlNumber - The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber bool `json:"rolloverTransactionSetControlNumber,omitempty"`
	// TransactionSetControlNumberPrefix - The transaction set control number prefix.
	TransactionSetControlNumberPrefix *string `json:"transactionSetControlNumberPrefix,omitempty"`
	// TransactionSetControlNumberSuffix - The transaction set control number suffix.
	TransactionSetControlNumberSuffix *string `json:"transactionSetControlNumberSuffix,omitempty"`
	// OverwriteExistingTransactionSetControlNumber - The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber bool `json:"overwriteExistingTransactionSetControlNumber,omitempty"`
	// GroupHeaderDateFormat - The group header date format. Possible values include: 'NotSpecified', 'CCYYMMDD', 'YYMMDD', 'None'
	GroupHeaderDateFormat X12DateFormatType `json:"groupHeaderDateFormat,omitempty"`
	// GroupHeaderTimeFormat - The group header time format. Possible values include: 'NotSpecified', 'HHMM', 'HHMMSS', 'HHMMSSdd', 'HHMMSSd', 'None'
	GroupHeaderTimeFormat X12TimeFormatType `json:"groupHeaderTimeFormat,omitempty"`
	// UsageIndicator - The usage indicator. Possible values include: 'NotSpecified', 'Test', 'Information', 'Production', 'None'
	UsageIndicator UsageIndicatorType `json:"usageIndicator,omitempty"`
}

// X12FramingSettings - The X12 agreement framing settings.
type X12FramingSettings struct {
	// DataElementSeparator - The data element separator.
	DataElementSeparator int32 `json:"dataElementSeparator,omitempty"`
	// ComponentSeparator - The component separator.
	ComponentSeparator int32 `json:"componentSeparator,omitempty"`
	// ReplaceSeparatorsInPayload - The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload bool `json:"replaceSeparatorsInPayload,omitempty"`
	// ReplaceCharacter - The replacement character.
	ReplaceCharacter int32 `json:"replaceCharacter,omitempty"`
	// SegmentTerminator - The segment terminator.
	SegmentTerminator int32 `json:"segmentTerminator,omitempty"`
	// CharacterSet - The X12 character set. Possible values include: 'NotSpecified', 'Basic', 'Extended', 'UTF8', 'None'
	CharacterSet X12CharacterSetType `json:"characterSet,omitempty"`
	// SegmentTerminatorSuffix - The segment terminator suffix. Possible values include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF', 'None'
	SegmentTerminatorSuffix SegmentTerminatorSuffixType `json:"segmentTerminatorSuffix,omitempty"`
}

// X12MessageFilter - The X12 message filter for odata query.
type X12MessageFilter struct {
	// MessageFilterType - The message filter type. Possible values include: 'NotSpecified', 'Include', 'Exclude', 'None'
	MessageFilterType MessageFilterType `json:"messageFilterType,omitempty"`
}

// X12MessageIdentifier - The X12 message identifier.
type X12MessageIdentifier struct {
	// MessageID - The message id.
	MessageID string `json:"messageId,omitempty"`
}

// X12OneWayAgreement - The X12 oneway agreement.
type X12OneWayAgreement struct {
	// SenderBusinessIdentity - The sender business identity
	SenderBusinessIdentity BusinessIdentity `json:"senderBusinessIdentity,omitempty"`
	// ReceiverBusinessIdentity - The receiver business identity
	ReceiverBusinessIdentity BusinessIdentity `json:"receiverBusinessIdentity,omitempty"`
	// ProtocolSettings - The X12 protocol settings.
	ProtocolSettings X12ProtocolSettings `json:"protocolSettings,omitempty"`
}

// X12ProcessingSettings - The X12 processing settings.
type X12ProcessingSettings struct {
	// MaskSecurityInfo - The value indicating whether to mask security information.
	MaskSecurityInfo bool `json:"maskSecurityInfo,omitempty"`
	// ConvertImpliedDecimal - The value indicating whether to convert numerical type to implied decimal.
	ConvertImpliedDecimal bool `json:"convertImpliedDecimal,omitempty"`
	// PreserveInterchange - The value indicating whether to preserve interchange.
	PreserveInterchange bool `json:"preserveInterchange,omitempty"`
	// SuspendInterchangeOnError - The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError bool `json:"suspendInterchangeOnError,omitempty"`
	// CreateEmptyXMLTagsForTrailingSeparators - The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXMLTagsForTrailingSeparators bool `json:"createEmptyXmlTagsForTrailingSeparators,omitempty"`
	// UseDotAsDecimalSeparator - The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator bool `json:"useDotAsDecimalSeparator,omitempty"`
}

// X12ProtocolSettings - The X12 agreement protocol settings.
type X12ProtocolSettings struct {
	// ValidationSettings - The X12 validation settings.
	ValidationSettings X12ValidationSettings `json:"validationSettings,omitempty"`
	// FramingSettings - The X12 framing settings.
	FramingSettings X12FramingSettings `json:"framingSettings,omitempty"`
	// EnvelopeSettings - The X12 envelope settings.
	EnvelopeSettings X12EnvelopeSettings `json:"envelopeSettings,omitempty"`
	// AcknowledgementSettings - The X12 acknowledgment settings.
	AcknowledgementSettings X12AcknowledgementSettings `json:"acknowledgementSettings,omitempty"`
	// MessageFilter - The X12 message filter.
	MessageFilter X12MessageFilter `json:"messageFilter,omitempty"`
	// SecuritySettings - The X12 security settings.
	SecuritySettings X12SecuritySettings `json:"securitySettings,omitempty"`
	// ProcessingSettings - The X12 processing settings.
	ProcessingSettings X12ProcessingSettings `json:"processingSettings,omitempty"`
	// EnvelopeOverrides - The X12 envelope override settings.
	EnvelopeOverrides []X12EnvelopeOverride `json:"envelopeOverrides,omitempty"`
	// ValidationOverrides - The X12 validation override settings.
	ValidationOverrides []X12ValidationOverride `json:"validationOverrides,omitempty"`
	// MessageFilterList - The X12 message filter list.
	MessageFilterList []X12MessageIdentifier `json:"messageFilterList,omitempty"`
	// SchemaReferences - The X12 schema references.
	SchemaReferences []X12SchemaReference `json:"schemaReferences,omitempty"`
	// X12DelimiterOverrides - The X12 delimiter override settings.
	X12DelimiterOverrides []X12DelimiterOverrides `json:"x12DelimiterOverrides,omitempty"`
}

// X12SchemaReference - The X12 schema reference.
type X12SchemaReference struct {
	// MessageID - The message id.
	MessageID string `json:"messageId,omitempty"`
	// SenderApplicationID - The sender application id.
	SenderApplicationID *string `json:"senderApplicationId,omitempty"`
	// SchemaVersion - The schema version.
	SchemaVersion string `json:"schemaVersion,omitempty"`
	// SchemaName - The schema name.
	SchemaName string `json:"schemaName,omitempty"`
}

// X12SecuritySettings - The X12 agreement security settings.
type X12SecuritySettings struct {
	// AuthorizationQualifier - The authorization qualifier.
	AuthorizationQualifier string `json:"authorizationQualifier,omitempty"`
	// AuthorizationValue - The authorization value.
	AuthorizationValue *string `json:"authorizationValue,omitempty"`
	// SecurityQualifier - The security qualifier.
	SecurityQualifier string `json:"securityQualifier,omitempty"`
	// PasswordValue - The password value.
	PasswordValue *string `json:"passwordValue,omitempty"`
}

// X12ValidationOverride - The X12 validation override settings.
type X12ValidationOverride struct {
	// MessageID - The message id on which the validation settings has to be applied.
	MessageID string `json:"messageId,omitempty"`
	// ValidateEdiTypes - The value indicating whether to validate EDI types.
	ValidateEdiTypes bool `json:"validateEdiTypes,omitempty"`
	// ValidateXsdTypes - The value indicating whether to validate XSD types.
	ValidateXsdTypes bool `json:"validateXsdTypes,omitempty"`
	// AllowLeadingAndTrailingSpacesAndZeroes - The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes bool `json:"allowLeadingAndTrailingSpacesAndZeroes,omitempty"`
	// ValidateCharacterSet - The value indicating whether to validate character Set.
	ValidateCharacterSet bool `json:"validateCharacterSet,omitempty"`
	// TrimLeadingAndTrailingSpacesAndZeroes - The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes bool `json:"trimLeadingAndTrailingSpacesAndZeroes,omitempty"`
	// TrailingSeparatorPolicy - The trailing separator policy. Possible values include: 'NotSpecified', 'NotAllowed', 'Optional', 'Mandatory', 'None'
	TrailingSeparatorPolicy TrailingSeparatorPolicyType `json:"trailingSeparatorPolicy,omitempty"`
}

// X12ValidationSettings - The X12 agreement validation settings.
type X12ValidationSettings struct {
	// ValidateCharacterSet - The value indicating whether to validate character set in the message.
	ValidateCharacterSet bool `json:"validateCharacterSet,omitempty"`
	// CheckDuplicateInterchangeControlNumber - The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber bool `json:"checkDuplicateInterchangeControlNumber,omitempty"`
	// InterchangeControlNumberValidityDays - The validity period of interchange control number.
	InterchangeControlNumberValidityDays int32 `json:"interchangeControlNumberValidityDays,omitempty"`
	// CheckDuplicateGroupControlNumber - The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber bool `json:"checkDuplicateGroupControlNumber,omitempty"`
	// CheckDuplicateTransactionSetControlNumber - The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber bool `json:"checkDuplicateTransactionSetControlNumber,omitempty"`
	// ValidateEdiTypes - The value indicating whether to Whether to validate EDI types.
	ValidateEdiTypes bool `json:"validateEdiTypes,omitempty"`
	// ValidateXsdTypes - The value indicating whether to Whether to validate XSD types.
	ValidateXsdTypes bool `json:"validateXsdTypes,omitempty"`
	// AllowLeadingAndTrailingSpacesAndZeroes - The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes bool `json:"allowLeadingAndTrailingSpacesAndZeroes,omitempty"`
	// TrimLeadingAndTrailingSpacesAndZeroes - The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes bool `json:"trimLeadingAndTrailingSpacesAndZeroes,omitempty"`
	// TrailingSeparatorPolicy - The trailing separator policy. Possible values include: 'NotSpecified', 'NotAllowed', 'Optional', 'Mandatory', 'None'
	TrailingSeparatorPolicy TrailingSeparatorPolicyType `json:"trailingSeparatorPolicy,omitempty"`
}
