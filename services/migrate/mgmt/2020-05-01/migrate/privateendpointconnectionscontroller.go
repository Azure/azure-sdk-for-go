package migrate

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// PrivateEndpointConnectionsControllerClient is the client for the PrivateEndpointConnectionsController methods of the
// Migrate service.
type PrivateEndpointConnectionsControllerClient struct {
	BaseClient
}

// NewPrivateEndpointConnectionsControllerClient creates an instance of the PrivateEndpointConnectionsControllerClient
// client.
func NewPrivateEndpointConnectionsControllerClient(subscriptionID string) PrivateEndpointConnectionsControllerClient {
	return NewPrivateEndpointConnectionsControllerClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewPrivateEndpointConnectionsControllerClientWithBaseURI creates an instance of the
// PrivateEndpointConnectionsControllerClient client using a custom endpoint.  Use this when interacting with an Azure
// cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewPrivateEndpointConnectionsControllerClientWithBaseURI(baseURI string, subscriptionID string) PrivateEndpointConnectionsControllerClient {
	return PrivateEndpointConnectionsControllerClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// GetPrivateEndpointConnections get all the private endpoint connections under a migrate project.
// Parameters:
// resourceGroupName - name of the Azure Resource Group that project is part of.
// migrateProjectName - migrate project name.
// APIVersion - the API version to use for this operation.
func (client PrivateEndpointConnectionsControllerClient) GetPrivateEndpointConnections(ctx context.Context, resourceGroupName string, migrateProjectName string, APIVersion string) (result PrivateEndpointConnectionCollection, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PrivateEndpointConnectionsControllerClient.GetPrivateEndpointConnections")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPrivateEndpointConnectionsPreparer(ctx, resourceGroupName, migrateProjectName, APIVersion)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.PrivateEndpointConnectionsControllerClient", "GetPrivateEndpointConnections", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetPrivateEndpointConnectionsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "migrate.PrivateEndpointConnectionsControllerClient", "GetPrivateEndpointConnections", resp, "Failure sending request")
		return
	}

	result, err = client.GetPrivateEndpointConnectionsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.PrivateEndpointConnectionsControllerClient", "GetPrivateEndpointConnections", resp, "Failure responding to request")
		return
	}

	return
}

// GetPrivateEndpointConnectionsPreparer prepares the GetPrivateEndpointConnections request.
func (client PrivateEndpointConnectionsControllerClient) GetPrivateEndpointConnectionsPreparer(ctx context.Context, resourceGroupName string, migrateProjectName string, APIVersion string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"migrateProjectName": autorest.Encode("path", migrateProjectName),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
	}

	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnections", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetPrivateEndpointConnectionsSender sends the GetPrivateEndpointConnections request. The method will close the
// http.Response Body if it receives an error.
func (client PrivateEndpointConnectionsControllerClient) GetPrivateEndpointConnectionsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetPrivateEndpointConnectionsResponder handles the response to the GetPrivateEndpointConnections request. The method always
// closes the http.Response Body.
func (client PrivateEndpointConnectionsControllerClient) GetPrivateEndpointConnectionsResponder(resp *http.Response) (result PrivateEndpointConnectionCollection, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
