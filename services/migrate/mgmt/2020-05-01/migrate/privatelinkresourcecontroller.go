package migrate

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// PrivateLinkResourceControllerClient is the client for the PrivateLinkResourceController methods of the Migrate
// service.
type PrivateLinkResourceControllerClient struct {
	BaseClient
}

// NewPrivateLinkResourceControllerClient creates an instance of the PrivateLinkResourceControllerClient client.
func NewPrivateLinkResourceControllerClient(subscriptionID string) PrivateLinkResourceControllerClient {
	return NewPrivateLinkResourceControllerClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewPrivateLinkResourceControllerClientWithBaseURI creates an instance of the PrivateLinkResourceControllerClient
// client using a custom endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI
// (sovereign clouds, Azure stack).
func NewPrivateLinkResourceControllerClientWithBaseURI(baseURI string, subscriptionID string) PrivateLinkResourceControllerClient {
	return PrivateLinkResourceControllerClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// GetPrivateLinkResource get the private link resource with the specified name.
// Parameters:
// resourceGroupName - name of the Azure Resource Group that project is part of.
// migrateProjectName - migrate project name.
// privateLinkResourceName - private Link resource name.
// APIVersion - the API version to use for this operation.
func (client PrivateLinkResourceControllerClient) GetPrivateLinkResource(ctx context.Context, resourceGroupName string, migrateProjectName string, privateLinkResourceName string, APIVersion string) (result PrivateLinkResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PrivateLinkResourceControllerClient.GetPrivateLinkResource")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPrivateLinkResourcePreparer(ctx, resourceGroupName, migrateProjectName, privateLinkResourceName, APIVersion)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.PrivateLinkResourceControllerClient", "GetPrivateLinkResource", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetPrivateLinkResourceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "migrate.PrivateLinkResourceControllerClient", "GetPrivateLinkResource", resp, "Failure sending request")
		return
	}

	result, err = client.GetPrivateLinkResourceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.PrivateLinkResourceControllerClient", "GetPrivateLinkResource", resp, "Failure responding to request")
		return
	}

	return
}

// GetPrivateLinkResourcePreparer prepares the GetPrivateLinkResource request.
func (client PrivateLinkResourceControllerClient) GetPrivateLinkResourcePreparer(ctx context.Context, resourceGroupName string, migrateProjectName string, privateLinkResourceName string, APIVersion string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"migrateProjectName":      autorest.Encode("path", migrateProjectName),
		"privateLinkResourceName": autorest.Encode("path", privateLinkResourceName),
		"resourceGroupName":       autorest.Encode("path", resourceGroupName),
		"subscriptionId":          autorest.Encode("path", client.SubscriptionID),
	}

	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateLinkResources/{privateLinkResourceName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetPrivateLinkResourceSender sends the GetPrivateLinkResource request. The method will close the
// http.Response Body if it receives an error.
func (client PrivateLinkResourceControllerClient) GetPrivateLinkResourceSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetPrivateLinkResourceResponder handles the response to the GetPrivateLinkResource request. The method always
// closes the http.Response Body.
func (client PrivateLinkResourceControllerClient) GetPrivateLinkResourceResponder(resp *http.Response) (result PrivateLinkResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetPrivateLinkResources get the list of private link resources.
// Parameters:
// resourceGroupName - name of the Azure Resource Group that project is part of.
// migrateProjectName - migrate project name.
// APIVersion - the API version to use for this operation.
func (client PrivateLinkResourceControllerClient) GetPrivateLinkResources(ctx context.Context, resourceGroupName string, migrateProjectName string, APIVersion string) (result PrivateLinkResourceCollection, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PrivateLinkResourceControllerClient.GetPrivateLinkResources")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPrivateLinkResourcesPreparer(ctx, resourceGroupName, migrateProjectName, APIVersion)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.PrivateLinkResourceControllerClient", "GetPrivateLinkResources", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetPrivateLinkResourcesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "migrate.PrivateLinkResourceControllerClient", "GetPrivateLinkResources", resp, "Failure sending request")
		return
	}

	result, err = client.GetPrivateLinkResourcesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.PrivateLinkResourceControllerClient", "GetPrivateLinkResources", resp, "Failure responding to request")
		return
	}

	return
}

// GetPrivateLinkResourcesPreparer prepares the GetPrivateLinkResources request.
func (client PrivateLinkResourceControllerClient) GetPrivateLinkResourcesPreparer(ctx context.Context, resourceGroupName string, migrateProjectName string, APIVersion string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"migrateProjectName": autorest.Encode("path", migrateProjectName),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
	}

	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateLinkResources", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetPrivateLinkResourcesSender sends the GetPrivateLinkResources request. The method will close the
// http.Response Body if it receives an error.
func (client PrivateLinkResourceControllerClient) GetPrivateLinkResourcesSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetPrivateLinkResourcesResponder handles the response to the GetPrivateLinkResources request. The method always
// closes the http.Response Body.
func (client PrivateLinkResourceControllerClient) GetPrivateLinkResourcesResponder(resp *http.Response) (result PrivateLinkResourceCollection, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
