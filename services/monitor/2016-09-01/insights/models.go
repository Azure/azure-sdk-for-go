package insights

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// AggregationType enumerates the values for aggregation type.
type AggregationType string

const (
	// Average specifies the average state for aggregation type.
	Average AggregationType = "Average"
	// Count specifies the count state for aggregation type.
	Count AggregationType = "Count"
	// Maximum specifies the maximum state for aggregation type.
	Maximum AggregationType = "Maximum"
	// Minimum specifies the minimum state for aggregation type.
	Minimum AggregationType = "Minimum"
	// None specifies the none state for aggregation type.
	None AggregationType = "None"
	// Total specifies the total state for aggregation type.
	Total AggregationType = "Total"
)

// EventLevel enumerates the values for event level.
type EventLevel string

const (
	// Critical specifies the critical state for event level.
	Critical EventLevel = "Critical"
	// Error specifies the error state for event level.
	Error EventLevel = "Error"
	// Informational specifies the informational state for event level.
	Informational EventLevel = "Informational"
	// Verbose specifies the verbose state for event level.
	Verbose EventLevel = "Verbose"
	// Warning specifies the warning state for event level.
	Warning EventLevel = "Warning"
)

// Unit enumerates the values for unit.
type Unit string

const (
	// UnitBytes specifies the unit bytes state for unit.
	UnitBytes Unit = "Bytes"
	// UnitBytesPerSecond specifies the unit bytes per second state for unit.
	UnitBytesPerSecond Unit = "BytesPerSecond"
	// UnitCount specifies the unit count state for unit.
	UnitCount Unit = "Count"
	// UnitCountPerSecond specifies the unit count per second state for unit.
	UnitCountPerSecond Unit = "CountPerSecond"
	// UnitMilliSeconds specifies the unit milli seconds state for unit.
	UnitMilliSeconds Unit = "MilliSeconds"
	// UnitPercent specifies the unit percent state for unit.
	UnitPercent Unit = "Percent"
	// UnitSeconds specifies the unit seconds state for unit.
	UnitSeconds Unit = "Seconds"
)

// ErrorResponse is describes the format of Error response.
type ErrorResponse struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// EventCategoryCollection is a collection of event categories. Currently possible values are: Administrative,
// Security, ServiceHealth, Alert, Recommendation, Policy.
type EventCategoryCollection struct {
	autorest.Response `json:"-"`
	Value             *[]LocalizableString `json:"value,omitempty"`
}

// EventData is the Azure event log entries are of type EventData
type EventData struct {
	Authorization        *SenderAuthorization `json:"authorization,omitempty"`
	Claims               *map[string]*string  `json:"claims,omitempty"`
	Caller               *string              `json:"caller,omitempty"`
	Description          *string              `json:"description,omitempty"`
	ID                   *string              `json:"id,omitempty"`
	EventDataID          *string              `json:"eventDataId,omitempty"`
	CorrelationID        *string              `json:"correlationId,omitempty"`
	EventName            *LocalizableString   `json:"eventName,omitempty"`
	Category             *LocalizableString   `json:"category,omitempty"`
	HTTPRequest          *HTTPRequestInfo     `json:"httpRequest,omitempty"`
	Level                EventLevel           `json:"level,omitempty"`
	ResourceGroupName    *string              `json:"resourceGroupName,omitempty"`
	ResourceProviderName *LocalizableString   `json:"resourceProviderName,omitempty"`
	ResourceID           *string              `json:"resourceId,omitempty"`
	ResourceType         *LocalizableString   `json:"resourceType,omitempty"`
	OperationID          *string              `json:"operationId,omitempty"`
	OperationName        *LocalizableString   `json:"operationName,omitempty"`
	Properties           *map[string]*string  `json:"properties,omitempty"`
	Status               *LocalizableString   `json:"status,omitempty"`
	SubStatus            *LocalizableString   `json:"subStatus,omitempty"`
	EventTimestamp       *date.Time           `json:"eventTimestamp,omitempty"`
	SubmissionTimestamp  *date.Time           `json:"submissionTimestamp,omitempty"`
	SubscriptionID       *string              `json:"subscriptionId,omitempty"`
	TenantID             *string              `json:"tenantId,omitempty"`
}

// EventDataCollection is represents collection of events.
type EventDataCollection struct {
	autorest.Response `json:"-"`
	Value             *[]EventData `json:"value,omitempty"`
	NextLink          *string      `json:"nextLink,omitempty"`
}

// EventDataCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client EventDataCollection) EventDataCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// HTTPRequestInfo is the Http request info.
type HTTPRequestInfo struct {
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	ClientIPAddress *string `json:"clientIpAddress,omitempty"`
	Method          *string `json:"method,omitempty"`
	URI             *string `json:"uri,omitempty"`
}

// LocalizableString is the localizable string class.
type LocalizableString struct {
	Value          *string `json:"value,omitempty"`
	LocalizedValue *string `json:"localizedValue,omitempty"`
}

// Metric is a set of metric values in a time range.
type Metric struct {
	ID   *string            `json:"id,omitempty"`
	Type *string            `json:"type,omitempty"`
	Name *LocalizableString `json:"name,omitempty"`
	Unit Unit               `json:"unit,omitempty"`
	Data *[]MetricValue     `json:"data,omitempty"`
}

// MetricAvailability is metric availability specifies the time grain (aggregation interval or frequency) and the
// retention period for that time grain.
type MetricAvailability struct {
	TimeGrain *string `json:"timeGrain,omitempty"`
	Retention *string `json:"retention,omitempty"`
}

// MetricCollection is the collection of metric value sets.
type MetricCollection struct {
	autorest.Response `json:"-"`
	Value             *[]Metric `json:"value,omitempty"`
}

// MetricDefinition is metric definition class specifies the metadata for a metric.
type MetricDefinition struct {
	ResourceID             *string               `json:"resourceId,omitempty"`
	Name                   *LocalizableString    `json:"name,omitempty"`
	Unit                   Unit                  `json:"unit,omitempty"`
	PrimaryAggregationType AggregationType       `json:"primaryAggregationType,omitempty"`
	MetricAvailabilities   *[]MetricAvailability `json:"metricAvailabilities,omitempty"`
	ID                     *string               `json:"id,omitempty"`
}

// MetricDefinitionCollection is represents collection of metric definitions.
type MetricDefinitionCollection struct {
	autorest.Response `json:"-"`
	Value             *[]MetricDefinition `json:"value,omitempty"`
}

// MetricValue is represents a metric value.
type MetricValue struct {
	TimeStamp *date.Time `json:"timeStamp,omitempty"`
	Average   *float64   `json:"average,omitempty"`
	Minimum   *float64   `json:"minimum,omitempty"`
	Maximum   *float64   `json:"maximum,omitempty"`
	Total     *float64   `json:"total,omitempty"`
	Count     *int64     `json:"count,omitempty"`
}

// SenderAuthorization is the authorization used by the user who has performed the operation that led to this event.
// This captures the RBAC properties of the event. These usually include the 'action', 'role' and the 'scope'
type SenderAuthorization struct {
	Action *string `json:"action,omitempty"`
	Role   *string `json:"role,omitempty"`
	Scope  *string `json:"scope,omitempty"`
}

// UsageMetric is usage Metric data.
type UsageMetric struct {
	Name          *LocalizableString `json:"name,omitempty"`
	CurrentValue  *float64           `json:"currentValue,omitempty"`
	ID            *string            `json:"id,omitempty"`
	Limit         *float64           `json:"limit,omitempty"`
	Unit          *string            `json:"unit,omitempty"`
	NextResetTime *date.Time         `json:"nextResetTime,omitempty"`
	QuotaPeriod   *string            `json:"quotaPeriod,omitempty"`
}

// UsageMetricCollection is represents collection of usage metrics.
type UsageMetricCollection struct {
	autorest.Response `json:"-"`
	Value             *[]UsageMetric `json:"value,omitempty"`
}
