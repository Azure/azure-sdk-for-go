package network

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"net/http"
	"reflect"
	"strings"
)

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// concatenates a slice of const values with the specified separator between each item
func joinConst(s interface{}, sep string) string {
	v := reflect.ValueOf(s)
	if v.Kind() != reflect.Slice && v.Kind() != reflect.Array {
		panic("s wasn't a slice or array")
	}
	ss := make([]string, 0, v.Len())
	for i := 0; i < v.Len(); i++ {
		ss = append(ss, v.Index(i).String())
	}
	return strings.Join(ss, sep)
}

// ApplicationGatewayCookieBasedAffinityType enumerates the values for application gateway cookie based affinity.
type ApplicationGatewayCookieBasedAffinityType string

const (
	// ApplicationGatewayCookieBasedAffinityDisabled ...
	ApplicationGatewayCookieBasedAffinityDisabled ApplicationGatewayCookieBasedAffinityType = "Disabled"
	// ApplicationGatewayCookieBasedAffinityEnabled ...
	ApplicationGatewayCookieBasedAffinityEnabled ApplicationGatewayCookieBasedAffinityType = "Enabled"
	// ApplicationGatewayCookieBasedAffinityNone represents an empty ApplicationGatewayCookieBasedAffinityType.
	ApplicationGatewayCookieBasedAffinityNone ApplicationGatewayCookieBasedAffinityType = ""
)

// ApplicationGatewayOperationalStateType enumerates the values for application gateway operational state.
type ApplicationGatewayOperationalStateType string

const (
	// ApplicationGatewayOperationalStateNone represents an empty ApplicationGatewayOperationalStateType.
	ApplicationGatewayOperationalStateNone ApplicationGatewayOperationalStateType = ""
	// ApplicationGatewayOperationalStateRunning ...
	ApplicationGatewayOperationalStateRunning ApplicationGatewayOperationalStateType = "Running"
	// ApplicationGatewayOperationalStateStarting ...
	ApplicationGatewayOperationalStateStarting ApplicationGatewayOperationalStateType = "Starting"
	// ApplicationGatewayOperationalStateStopped ...
	ApplicationGatewayOperationalStateStopped ApplicationGatewayOperationalStateType = "Stopped"
	// ApplicationGatewayOperationalStateStopping ...
	ApplicationGatewayOperationalStateStopping ApplicationGatewayOperationalStateType = "Stopping"
)

// ApplicationGatewayProtocolType enumerates the values for application gateway protocol.
type ApplicationGatewayProtocolType string

const (
	// ApplicationGatewayProtocolHTTP ...
	ApplicationGatewayProtocolHTTP ApplicationGatewayProtocolType = "Http"
	// ApplicationGatewayProtocolHTTPS ...
	ApplicationGatewayProtocolHTTPS ApplicationGatewayProtocolType = "Https"
	// ApplicationGatewayProtocolNone represents an empty ApplicationGatewayProtocolType.
	ApplicationGatewayProtocolNone ApplicationGatewayProtocolType = ""
)

// ApplicationGatewayRequestRoutingRuleType enumerates the values for application gateway request routing rule type.
type ApplicationGatewayRequestRoutingRuleType string

const (
	// ApplicationGatewayRequestRoutingRuleBasic ...
	ApplicationGatewayRequestRoutingRuleBasic ApplicationGatewayRequestRoutingRuleType = "Basic"
	// ApplicationGatewayRequestRoutingRuleNone represents an empty ApplicationGatewayRequestRoutingRuleType.
	ApplicationGatewayRequestRoutingRuleNone ApplicationGatewayRequestRoutingRuleType = ""
	// ApplicationGatewayRequestRoutingRulePathBasedRouting ...
	ApplicationGatewayRequestRoutingRulePathBasedRouting ApplicationGatewayRequestRoutingRuleType = "PathBasedRouting"
)

// ApplicationGatewaySkuNameType enumerates the values for application gateway sku name.
type ApplicationGatewaySkuNameType string

const (
	// ApplicationGatewaySkuNameNone represents an empty ApplicationGatewaySkuNameType.
	ApplicationGatewaySkuNameNone ApplicationGatewaySkuNameType = ""
	// ApplicationGatewaySkuNameStandardLarge ...
	ApplicationGatewaySkuNameStandardLarge ApplicationGatewaySkuNameType = "Standard_Large"
	// ApplicationGatewaySkuNameStandardMedium ...
	ApplicationGatewaySkuNameStandardMedium ApplicationGatewaySkuNameType = "Standard_Medium"
	// ApplicationGatewaySkuNameStandardSmall ...
	ApplicationGatewaySkuNameStandardSmall ApplicationGatewaySkuNameType = "Standard_Small"
)

// ApplicationGatewaySslProtocolType enumerates the values for application gateway ssl protocol.
type ApplicationGatewaySslProtocolType string

const (
	// ApplicationGatewaySslProtocolNone represents an empty ApplicationGatewaySslProtocolType.
	ApplicationGatewaySslProtocolNone ApplicationGatewaySslProtocolType = ""
	// ApplicationGatewaySslProtocolTLSv10 ...
	ApplicationGatewaySslProtocolTLSv10 ApplicationGatewaySslProtocolType = "TLSv1_0"
	// ApplicationGatewaySslProtocolTLSv11 ...
	ApplicationGatewaySslProtocolTLSv11 ApplicationGatewaySslProtocolType = "TLSv1_1"
	// ApplicationGatewaySslProtocolTLSv12 ...
	ApplicationGatewaySslProtocolTLSv12 ApplicationGatewaySslProtocolType = "TLSv1_2"
)

// ApplicationGatewayTierType enumerates the values for application gateway tier.
type ApplicationGatewayTierType string

const (
	// ApplicationGatewayTierNone represents an empty ApplicationGatewayTierType.
	ApplicationGatewayTierNone ApplicationGatewayTierType = ""
	// ApplicationGatewayTierStandard ...
	ApplicationGatewayTierStandard ApplicationGatewayTierType = "Standard"
)

// AuthorizationUseStatusType enumerates the values for authorization use status.
type AuthorizationUseStatusType string

const (
	// AuthorizationUseStatusAvailable ...
	AuthorizationUseStatusAvailable AuthorizationUseStatusType = "Available"
	// AuthorizationUseStatusInUse ...
	AuthorizationUseStatusInUse AuthorizationUseStatusType = "InUse"
	// AuthorizationUseStatusNone represents an empty AuthorizationUseStatusType.
	AuthorizationUseStatusNone AuthorizationUseStatusType = ""
)

// EffectiveRouteSourceType enumerates the values for effective route source.
type EffectiveRouteSourceType string

const (
	// EffectiveRouteSourceDefault ...
	EffectiveRouteSourceDefault EffectiveRouteSourceType = "Default"
	// EffectiveRouteSourceNone represents an empty EffectiveRouteSourceType.
	EffectiveRouteSourceNone EffectiveRouteSourceType = ""
	// EffectiveRouteSourceUnknown ...
	EffectiveRouteSourceUnknown EffectiveRouteSourceType = "Unknown"
	// EffectiveRouteSourceUser ...
	EffectiveRouteSourceUser EffectiveRouteSourceType = "User"
	// EffectiveRouteSourceVirtualNetworkGateway ...
	EffectiveRouteSourceVirtualNetworkGateway EffectiveRouteSourceType = "VirtualNetworkGateway"
)

// EffectiveRouteStateType enumerates the values for effective route state.
type EffectiveRouteStateType string

const (
	// EffectiveRouteStateActive ...
	EffectiveRouteStateActive EffectiveRouteStateType = "Active"
	// EffectiveRouteStateInvalid ...
	EffectiveRouteStateInvalid EffectiveRouteStateType = "Invalid"
	// EffectiveRouteStateNone represents an empty EffectiveRouteStateType.
	EffectiveRouteStateNone EffectiveRouteStateType = ""
)

// ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType enumerates the values for express route circuit peering
// advertised public prefix state.
type ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType string

const (
	// ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfigured ...
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfigured ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType = "Configured"
	// ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfiguring ...
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfiguring ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType = "Configuring"
	// ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateNone represents an empty
	// ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType.
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateNone ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType = ""
	// ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateNotConfigured ...
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateNotConfigured ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType = "NotConfigured"
	// ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValidationNeeded ...
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValidationNeeded ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType = "ValidationNeeded"
)

// ExpressRouteCircuitPeeringStateType enumerates the values for express route circuit peering state.
type ExpressRouteCircuitPeeringStateType string

const (
	// ExpressRouteCircuitPeeringStateDisabled ...
	ExpressRouteCircuitPeeringStateDisabled ExpressRouteCircuitPeeringStateType = "Disabled"
	// ExpressRouteCircuitPeeringStateEnabled ...
	ExpressRouteCircuitPeeringStateEnabled ExpressRouteCircuitPeeringStateType = "Enabled"
	// ExpressRouteCircuitPeeringStateNone represents an empty ExpressRouteCircuitPeeringStateType.
	ExpressRouteCircuitPeeringStateNone ExpressRouteCircuitPeeringStateType = ""
)

// ExpressRouteCircuitPeeringType enumerates the values for express route circuit peering type.
type ExpressRouteCircuitPeeringType string

const (
	// ExpressRouteCircuitPeeringAzurePrivatePeering ...
	ExpressRouteCircuitPeeringAzurePrivatePeering ExpressRouteCircuitPeeringType = "AzurePrivatePeering"
	// ExpressRouteCircuitPeeringAzurePublicPeering ...
	ExpressRouteCircuitPeeringAzurePublicPeering ExpressRouteCircuitPeeringType = "AzurePublicPeering"
	// ExpressRouteCircuitPeeringMicrosoftPeering ...
	ExpressRouteCircuitPeeringMicrosoftPeering ExpressRouteCircuitPeeringType = "MicrosoftPeering"
	// ExpressRouteCircuitPeeringNone represents an empty ExpressRouteCircuitPeeringType.
	ExpressRouteCircuitPeeringNone ExpressRouteCircuitPeeringType = ""
)

// ExpressRouteCircuitSkuFamilyType enumerates the values for express route circuit sku family.
type ExpressRouteCircuitSkuFamilyType string

const (
	// ExpressRouteCircuitSkuFamilyMeteredData ...
	ExpressRouteCircuitSkuFamilyMeteredData ExpressRouteCircuitSkuFamilyType = "MeteredData"
	// ExpressRouteCircuitSkuFamilyNone represents an empty ExpressRouteCircuitSkuFamilyType.
	ExpressRouteCircuitSkuFamilyNone ExpressRouteCircuitSkuFamilyType = ""
	// ExpressRouteCircuitSkuFamilyUnlimitedData ...
	ExpressRouteCircuitSkuFamilyUnlimitedData ExpressRouteCircuitSkuFamilyType = "UnlimitedData"
)

// ExpressRouteCircuitSkuTierType enumerates the values for express route circuit sku tier.
type ExpressRouteCircuitSkuTierType string

const (
	// ExpressRouteCircuitSkuTierNone represents an empty ExpressRouteCircuitSkuTierType.
	ExpressRouteCircuitSkuTierNone ExpressRouteCircuitSkuTierType = ""
	// ExpressRouteCircuitSkuTierPremium ...
	ExpressRouteCircuitSkuTierPremium ExpressRouteCircuitSkuTierType = "Premium"
	// ExpressRouteCircuitSkuTierStandard ...
	ExpressRouteCircuitSkuTierStandard ExpressRouteCircuitSkuTierType = "Standard"
)

// IPAllocationMethodType enumerates the values for ip allocation method.
type IPAllocationMethodType string

const (
	// IPAllocationMethodDynamic ...
	IPAllocationMethodDynamic IPAllocationMethodType = "Dynamic"
	// IPAllocationMethodNone represents an empty IPAllocationMethodType.
	IPAllocationMethodNone IPAllocationMethodType = ""
	// IPAllocationMethodStatic ...
	IPAllocationMethodStatic IPAllocationMethodType = "Static"
)

// IPVersionType enumerates the values for ip version.
type IPVersionType string

const (
	// IPVersionIPv4 ...
	IPVersionIPv4 IPVersionType = "IPv4"
	// IPVersionIPv6 ...
	IPVersionIPv6 IPVersionType = "IPv6"
	// IPVersionNone represents an empty IPVersionType.
	IPVersionNone IPVersionType = ""
)

// LoadDistributionType enumerates the values for load distribution.
type LoadDistributionType string

const (
	// LoadDistributionDefault ...
	LoadDistributionDefault LoadDistributionType = "Default"
	// LoadDistributionNone represents an empty LoadDistributionType.
	LoadDistributionNone LoadDistributionType = ""
	// LoadDistributionSourceIP ...
	LoadDistributionSourceIP LoadDistributionType = "SourceIP"
	// LoadDistributionSourceIPProtocol ...
	LoadDistributionSourceIPProtocol LoadDistributionType = "SourceIPProtocol"
)

// OperationStatusType enumerates the values for operation status type.
type OperationStatusType string

const (
	// OperationStatusFailed ...
	OperationStatusFailed OperationStatusType = "Failed"
	// OperationStatusInProgress ...
	OperationStatusInProgress OperationStatusType = "InProgress"
	// OperationStatusNone represents an empty OperationStatusType.
	OperationStatusNone OperationStatusType = ""
	// OperationStatusSucceeded ...
	OperationStatusSucceeded OperationStatusType = "Succeeded"
)

// ProbeProtocolType enumerates the values for probe protocol.
type ProbeProtocolType string

const (
	// ProbeProtocolHTTP ...
	ProbeProtocolHTTP ProbeProtocolType = "Http"
	// ProbeProtocolNone represents an empty ProbeProtocolType.
	ProbeProtocolNone ProbeProtocolType = ""
	// ProbeProtocolTCP ...
	ProbeProtocolTCP ProbeProtocolType = "Tcp"
)

// ProcessorArchitectureType enumerates the values for processor architecture.
type ProcessorArchitectureType string

const (
	// ProcessorArchitectureAmd64 ...
	ProcessorArchitectureAmd64 ProcessorArchitectureType = "Amd64"
	// ProcessorArchitectureNone represents an empty ProcessorArchitectureType.
	ProcessorArchitectureNone ProcessorArchitectureType = ""
	// ProcessorArchitectureX86 ...
	ProcessorArchitectureX86 ProcessorArchitectureType = "X86"
)

// RouteNextHopType enumerates the values for route next hop type.
type RouteNextHopType string

const (
	// RouteNextHopInternet ...
	RouteNextHopInternet RouteNextHopType = "Internet"
	// RouteNextHopNone ...
	RouteNextHopNone RouteNextHopType = "None"
	// RouteNextHopNone represents an empty RouteNextHopType.
	RouteNextHopNone RouteNextHopType = ""
	// RouteNextHopVirtualAppliance ...
	RouteNextHopVirtualAppliance RouteNextHopType = "VirtualAppliance"
	// RouteNextHopVirtualNetworkGateway ...
	RouteNextHopVirtualNetworkGateway RouteNextHopType = "VirtualNetworkGateway"
	// RouteNextHopVnetLocal ...
	RouteNextHopVnetLocal RouteNextHopType = "VnetLocal"
)

// SecurityRuleAccessType enumerates the values for security rule access.
type SecurityRuleAccessType string

const (
	// SecurityRuleAccessAllow ...
	SecurityRuleAccessAllow SecurityRuleAccessType = "Allow"
	// SecurityRuleAccessDeny ...
	SecurityRuleAccessDeny SecurityRuleAccessType = "Deny"
	// SecurityRuleAccessNone represents an empty SecurityRuleAccessType.
	SecurityRuleAccessNone SecurityRuleAccessType = ""
)

// SecurityRuleDirectionType enumerates the values for security rule direction.
type SecurityRuleDirectionType string

const (
	// SecurityRuleDirectionInbound ...
	SecurityRuleDirectionInbound SecurityRuleDirectionType = "Inbound"
	// SecurityRuleDirectionNone represents an empty SecurityRuleDirectionType.
	SecurityRuleDirectionNone SecurityRuleDirectionType = ""
	// SecurityRuleDirectionOutbound ...
	SecurityRuleDirectionOutbound SecurityRuleDirectionType = "Outbound"
)

// SecurityRuleProtocolType enumerates the values for security rule protocol.
type SecurityRuleProtocolType string

const (
	// SecurityRuleProtocolAsterisk ...
	SecurityRuleProtocolAsterisk SecurityRuleProtocolType = "*"
	// SecurityRuleProtocolNone represents an empty SecurityRuleProtocolType.
	SecurityRuleProtocolNone SecurityRuleProtocolType = ""
	// SecurityRuleProtocolTCP ...
	SecurityRuleProtocolTCP SecurityRuleProtocolType = "Tcp"
	// SecurityRuleProtocolUDP ...
	SecurityRuleProtocolUDP SecurityRuleProtocolType = "Udp"
)

// ServiceProviderProvisioningStateType enumerates the values for service provider provisioning state.
type ServiceProviderProvisioningStateType string

const (
	// ServiceProviderProvisioningStateDeprovisioning ...
	ServiceProviderProvisioningStateDeprovisioning ServiceProviderProvisioningStateType = "Deprovisioning"
	// ServiceProviderProvisioningStateNone represents an empty ServiceProviderProvisioningStateType.
	ServiceProviderProvisioningStateNone ServiceProviderProvisioningStateType = ""
	// ServiceProviderProvisioningStateNotProvisioned ...
	ServiceProviderProvisioningStateNotProvisioned ServiceProviderProvisioningStateType = "NotProvisioned"
	// ServiceProviderProvisioningStateProvisioned ...
	ServiceProviderProvisioningStateProvisioned ServiceProviderProvisioningStateType = "Provisioned"
	// ServiceProviderProvisioningStateProvisioning ...
	ServiceProviderProvisioningStateProvisioning ServiceProviderProvisioningStateType = "Provisioning"
)

// TransportProtocolType enumerates the values for transport protocol.
type TransportProtocolType string

const (
	// TransportProtocolNone represents an empty TransportProtocolType.
	TransportProtocolNone TransportProtocolType = ""
	// TransportProtocolTCP ...
	TransportProtocolTCP TransportProtocolType = "Tcp"
	// TransportProtocolUDP ...
	TransportProtocolUDP TransportProtocolType = "Udp"
)

// VirtualNetworkGatewayConnectionStatusType enumerates the values for virtual network gateway connection status.
type VirtualNetworkGatewayConnectionStatusType string

const (
	// VirtualNetworkGatewayConnectionStatusConnected ...
	VirtualNetworkGatewayConnectionStatusConnected VirtualNetworkGatewayConnectionStatusType = "Connected"
	// VirtualNetworkGatewayConnectionStatusConnecting ...
	VirtualNetworkGatewayConnectionStatusConnecting VirtualNetworkGatewayConnectionStatusType = "Connecting"
	// VirtualNetworkGatewayConnectionStatusNone represents an empty VirtualNetworkGatewayConnectionStatusType.
	VirtualNetworkGatewayConnectionStatusNone VirtualNetworkGatewayConnectionStatusType = ""
	// VirtualNetworkGatewayConnectionStatusNotConnected ...
	VirtualNetworkGatewayConnectionStatusNotConnected VirtualNetworkGatewayConnectionStatusType = "NotConnected"
	// VirtualNetworkGatewayConnectionStatusUnknown ...
	VirtualNetworkGatewayConnectionStatusUnknown VirtualNetworkGatewayConnectionStatusType = "Unknown"
)

// VirtualNetworkGatewayConnectionType enumerates the values for virtual network gateway connection type.
type VirtualNetworkGatewayConnectionType string

const (
	// VirtualNetworkGatewayConnectionExpressRoute ...
	VirtualNetworkGatewayConnectionExpressRoute VirtualNetworkGatewayConnectionType = "ExpressRoute"
	// VirtualNetworkGatewayConnectionIPsec ...
	VirtualNetworkGatewayConnectionIPsec VirtualNetworkGatewayConnectionType = "IPsec"
	// VirtualNetworkGatewayConnectionNone represents an empty VirtualNetworkGatewayConnectionType.
	VirtualNetworkGatewayConnectionNone VirtualNetworkGatewayConnectionType = ""
	// VirtualNetworkGatewayConnectionVnet2Vnet ...
	VirtualNetworkGatewayConnectionVnet2Vnet VirtualNetworkGatewayConnectionType = "Vnet2Vnet"
	// VirtualNetworkGatewayConnectionVPNClient ...
	VirtualNetworkGatewayConnectionVPNClient VirtualNetworkGatewayConnectionType = "VPNClient"
)

// VirtualNetworkGatewaySkuNameType enumerates the values for virtual network gateway sku name.
type VirtualNetworkGatewaySkuNameType string

const (
	// VirtualNetworkGatewaySkuNameBasic ...
	VirtualNetworkGatewaySkuNameBasic VirtualNetworkGatewaySkuNameType = "Basic"
	// VirtualNetworkGatewaySkuNameHighPerformance ...
	VirtualNetworkGatewaySkuNameHighPerformance VirtualNetworkGatewaySkuNameType = "HighPerformance"
	// VirtualNetworkGatewaySkuNameNone represents an empty VirtualNetworkGatewaySkuNameType.
	VirtualNetworkGatewaySkuNameNone VirtualNetworkGatewaySkuNameType = ""
	// VirtualNetworkGatewaySkuNameStandard ...
	VirtualNetworkGatewaySkuNameStandard VirtualNetworkGatewaySkuNameType = "Standard"
	// VirtualNetworkGatewaySkuNameUltraPerformance ...
	VirtualNetworkGatewaySkuNameUltraPerformance VirtualNetworkGatewaySkuNameType = "UltraPerformance"
)

// VirtualNetworkGatewaySkuTierType enumerates the values for virtual network gateway sku tier.
type VirtualNetworkGatewaySkuTierType string

const (
	// VirtualNetworkGatewaySkuTierBasic ...
	VirtualNetworkGatewaySkuTierBasic VirtualNetworkGatewaySkuTierType = "Basic"
	// VirtualNetworkGatewaySkuTierHighPerformance ...
	VirtualNetworkGatewaySkuTierHighPerformance VirtualNetworkGatewaySkuTierType = "HighPerformance"
	// VirtualNetworkGatewaySkuTierNone represents an empty VirtualNetworkGatewaySkuTierType.
	VirtualNetworkGatewaySkuTierNone VirtualNetworkGatewaySkuTierType = ""
	// VirtualNetworkGatewaySkuTierStandard ...
	VirtualNetworkGatewaySkuTierStandard VirtualNetworkGatewaySkuTierType = "Standard"
	// VirtualNetworkGatewaySkuTierUltraPerformance ...
	VirtualNetworkGatewaySkuTierUltraPerformance VirtualNetworkGatewaySkuTierType = "UltraPerformance"
)

// VirtualNetworkGatewayType enumerates the values for virtual network gateway type.
type VirtualNetworkGatewayType string

const (
	// VirtualNetworkGatewayExpressRoute ...
	VirtualNetworkGatewayExpressRoute VirtualNetworkGatewayType = "ExpressRoute"
	// VirtualNetworkGatewayNone represents an empty VirtualNetworkGatewayType.
	VirtualNetworkGatewayNone VirtualNetworkGatewayType = ""
	// VirtualNetworkGatewayVpn ...
	VirtualNetworkGatewayVpn VirtualNetworkGatewayType = "Vpn"
)

// VirtualNetworkPeeringStateType enumerates the values for virtual network peering state.
type VirtualNetworkPeeringStateType string

const (
	// VirtualNetworkPeeringStateConnected ...
	VirtualNetworkPeeringStateConnected VirtualNetworkPeeringStateType = "Connected"
	// VirtualNetworkPeeringStateDisconnected ...
	VirtualNetworkPeeringStateDisconnected VirtualNetworkPeeringStateType = "Disconnected"
	// VirtualNetworkPeeringStateInitiated ...
	VirtualNetworkPeeringStateInitiated VirtualNetworkPeeringStateType = "Initiated"
	// VirtualNetworkPeeringStateNone represents an empty VirtualNetworkPeeringStateType.
	VirtualNetworkPeeringStateNone VirtualNetworkPeeringStateType = ""
)

// VpnType enumerates the values for vpn type.
type VpnType string

const (
	// VpnNone represents an empty VpnType.
	VpnNone VpnType = ""
	// VpnPolicyBased ...
	VpnPolicyBased VpnType = "PolicyBased"
	// VpnRouteBased ...
	VpnRouteBased VpnType = "RouteBased"
)

// AddressSpace - AddressSpace contains an array of IP address ranges that can be used by subnets
type AddressSpace struct {
	// AddressPrefixes - Gets or sets list of address blocks reserved for this virtual network in CIDR notation
	AddressPrefixes []string `json:"addressPrefixes,omitempty"`
}

// ApplicationGateway - ApplicationGateways resource
type ApplicationGateway struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags                                map[string]string `json:"tags,omitempty"`
	*ApplicationGatewayPropertiesFormat `json:"properties,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (ag ApplicationGateway) Response() *http.Response {
	return ag.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ag ApplicationGateway) StatusCode() int {
	return ag.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ag ApplicationGateway) Status() string {
	return ag.rawResponse.Status
}

// ApplicationGatewayAuthenticationCertificate - Authentication certificates of application gateway
type ApplicationGatewayAuthenticationCertificate struct {
	// ID - Resource Id
	ID                                                           *string `json:"id,omitempty"`
	*ApplicationGatewayAuthenticationCertificatePropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayAuthenticationCertificatePropertiesFormat - Properties of Authentication certificates of
// application gateway
type ApplicationGatewayAuthenticationCertificatePropertiesFormat struct {
	// Data - Certificate public data
	Data *string `json:"data,omitempty"`
	// ProvisioningState - Provisioning state of the authentication certificate resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayBackendAddress - Backend Address of application gateway
type ApplicationGatewayBackendAddress struct {
	// Fqdn - Dns name
	Fqdn *string `json:"fqdn,omitempty"`
	// IPAddress - Ip address
	IPAddress *string `json:"ipAddress,omitempty"`
}

// ApplicationGatewayBackendAddressPool - Backend Address Pool of application gateway
type ApplicationGatewayBackendAddressPool struct {
	// ID - Resource Id
	ID                                                    *string `json:"id,omitempty"`
	*ApplicationGatewayBackendAddressPoolPropertiesFormat `json:"properties,omitempty"`
	// Name - Resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayBackendAddressPoolPropertiesFormat - Properties of Backend Address Pool of application gateway
type ApplicationGatewayBackendAddressPoolPropertiesFormat struct {
	// BackendIPConfigurations - Collection of references to IPs defined in NICs
	BackendIPConfigurations []InterfaceIPConfiguration `json:"backendIPConfigurations,omitempty"`
	// BackendAddresses - Backend addresses
	BackendAddresses []ApplicationGatewayBackendAddress `json:"backendAddresses,omitempty"`
	// ProvisioningState - Provisioning state of the backend address pool resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayBackendHTTPSettings - Backend address pool settings of application gateway
type ApplicationGatewayBackendHTTPSettings struct {
	// ID - Resource Id
	ID                                                     *string `json:"id,omitempty"`
	*ApplicationGatewayBackendHTTPSettingsPropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayBackendHTTPSettingsPropertiesFormat - Properties of Backend address pool settings of application
// gateway
type ApplicationGatewayBackendHTTPSettingsPropertiesFormat struct {
	// Port - Port
	Port *int32 `json:"port,omitempty"`
	// Protocol - Protocol. Possible values include: 'HTTP', 'HTTPS', 'None'
	Protocol ApplicationGatewayProtocolType `json:"protocol,omitempty"`
	// CookieBasedAffinity - Cookie affinity. Possible values include: 'Enabled', 'Disabled', 'None'
	CookieBasedAffinity ApplicationGatewayCookieBasedAffinityType `json:"cookieBasedAffinity,omitempty"`
	// RequestTimeout - Request timeout
	RequestTimeout *int32 `json:"requestTimeout,omitempty"`
	// Probe - Probe resource of application gateway
	Probe *SubResource `json:"probe,omitempty"`
	// AuthenticationCertificates - Array of references to Application Gateway Authentication Certificates
	AuthenticationCertificates []SubResource `json:"authenticationCertificates,omitempty"`
	// ProvisioningState - Provisioning state of the backend http settings resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayFrontendIPConfiguration - Frontend IP configuration of application gateway
type ApplicationGatewayFrontendIPConfiguration struct {
	// ID - Resource Id
	ID                                                         *string `json:"id,omitempty"`
	*ApplicationGatewayFrontendIPConfigurationPropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayFrontendIPConfigurationPropertiesFormat - Properties of Frontend IP configuration of application
// gateway
type ApplicationGatewayFrontendIPConfigurationPropertiesFormat struct {
	// PrivateIPAddress - PrivateIPAddress of the Network Interface IP Configuration
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
	// PrivateIPAllocationMethod - PrivateIP allocation method (Static/Dynamic). Possible values include: 'Static', 'Dynamic', 'None'
	PrivateIPAllocationMethod IPAllocationMethodType `json:"privateIPAllocationMethod,omitempty"`
	// Subnet - Reference of the subnet resource
	Subnet *SubResource `json:"subnet,omitempty"`
	// PublicIPAddress - Reference of the PublicIP resource
	PublicIPAddress *SubResource `json:"publicIPAddress,omitempty"`
	// ProvisioningState - Provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayFrontendPort - Frontend Port of application gateway
type ApplicationGatewayFrontendPort struct {
	// ID - Resource Id
	ID                                              *string `json:"id,omitempty"`
	*ApplicationGatewayFrontendPortPropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayFrontendPortPropertiesFormat - Properties of Frontend Port of application gateway
type ApplicationGatewayFrontendPortPropertiesFormat struct {
	// Port - Frontend port
	Port *int32 `json:"port,omitempty"`
	// ProvisioningState - Provisioning state of the frontend port resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayHTTPListener - Http listener of application gateway
type ApplicationGatewayHTTPListener struct {
	// ID - Resource Id
	ID                                              *string `json:"id,omitempty"`
	*ApplicationGatewayHTTPListenerPropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayHTTPListenerPropertiesFormat - Properties of Http listener of application gateway
type ApplicationGatewayHTTPListenerPropertiesFormat struct {
	// FrontendIPConfiguration - Frontend IP configuration resource of application gateway
	FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`
	// FrontendPort - Frontend port resource of application gateway
	FrontendPort *SubResource `json:"frontendPort,omitempty"`
	// Protocol - Protocol. Possible values include: 'HTTP', 'HTTPS', 'None'
	Protocol ApplicationGatewayProtocolType `json:"protocol,omitempty"`
	// HostName - Host name of http listener
	HostName *string `json:"hostName,omitempty"`
	// SslCertificate - Ssl certificate resource of application gateway
	SslCertificate *SubResource `json:"sslCertificate,omitempty"`
	// RequireServerNameIndication - RequireServerNameIndication of http listener
	RequireServerNameIndication *bool `json:"requireServerNameIndication,omitempty"`
	// ProvisioningState - Provisioning state of the http listener resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayIPConfiguration - IP configuration of application gateway
type ApplicationGatewayIPConfiguration struct {
	// ID - Resource Id
	ID                                                 *string `json:"id,omitempty"`
	*ApplicationGatewayIPConfigurationPropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayIPConfigurationPropertiesFormat - Properties of IP configuration of application gateway
type ApplicationGatewayIPConfigurationPropertiesFormat struct {
	// Subnet - Reference of the subnet resource. A subnet from where application gateway gets its private address
	Subnet *SubResource `json:"subnet,omitempty"`
	// ProvisioningState - Provisioning state of the application gateway subnet resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayListResult - Response for ListApplicationGateways Api service call
type ApplicationGatewayListResult struct {
	rawResponse *http.Response
	// Value - List of ApplicationGateways in a resource group
	Value []ApplicationGateway `json:"value,omitempty"`
	// NextLink - URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (aglr ApplicationGatewayListResult) Response() *http.Response {
	return aglr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (aglr ApplicationGatewayListResult) StatusCode() int {
	return aglr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (aglr ApplicationGatewayListResult) Status() string {
	return aglr.rawResponse.Status
}

// ApplicationGatewayPathRule - Path rule of URL path map of application gateway
type ApplicationGatewayPathRule struct {
	// ID - Resource Id
	ID                                          *string `json:"id,omitempty"`
	*ApplicationGatewayPathRulePropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayPathRulePropertiesFormat - Properties of probe of application gateway
type ApplicationGatewayPathRulePropertiesFormat struct {
	// Paths - Path rules of URL path map
	Paths []string `json:"paths,omitempty"`
	// BackendAddressPool - Backend address pool resource of URL path map
	BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`
	// BackendHTTPSettings - Backend http settings resource of URL path map
	BackendHTTPSettings *SubResource `json:"backendHttpSettings,omitempty"`
	// ProvisioningState - Path rule of URL path map resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayProbe - Probe of application gateway
type ApplicationGatewayProbe struct {
	// ID - Resource Id
	ID                                       *string `json:"id,omitempty"`
	*ApplicationGatewayProbePropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayProbePropertiesFormat - Properties of probe of application gateway
type ApplicationGatewayProbePropertiesFormat struct {
	// Protocol - Protocol. Possible values include: 'HTTP', 'HTTPS', 'None'
	Protocol ApplicationGatewayProtocolType `json:"protocol,omitempty"`
	// Host - Host to send probe to
	Host *string `json:"host,omitempty"`
	// Path - Relative path of probe
	Path *string `json:"path,omitempty"`
	// Interval - Probing interval in seconds
	Interval *int32 `json:"interval,omitempty"`
	// Timeout - Probing timeout in seconds
	Timeout *int32 `json:"timeout,omitempty"`
	// UnhealthyThreshold - Probing unhealthy threshold
	UnhealthyThreshold *int32 `json:"unhealthyThreshold,omitempty"`
	// ProvisioningState - Provisioning state of the backend http settings resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayPropertiesFormat - Properties of Application Gateway
type ApplicationGatewayPropertiesFormat struct {
	// Sku - Sku of application gateway resource
	Sku *ApplicationGatewaySku `json:"sku,omitempty"`
	// SslPolicy - SSL policy of application gateway resource
	SslPolicy *ApplicationGatewaySslPolicy `json:"sslPolicy,omitempty"`
	// OperationalState - Operational state of application gateway resource. Possible values include: 'Stopped', 'Starting', 'Running', 'Stopping', 'None'
	OperationalState ApplicationGatewayOperationalStateType `json:"operationalState,omitempty"`
	// GatewayIPConfigurations - Subnets of application gateway resource
	GatewayIPConfigurations []ApplicationGatewayIPConfiguration `json:"gatewayIPConfigurations,omitempty"`
	// AuthenticationCertificates - Authentication certificates of application gateway resource
	AuthenticationCertificates []ApplicationGatewayAuthenticationCertificate `json:"authenticationCertificates,omitempty"`
	// SslCertificates - SSL certificates of application gateway resource
	SslCertificates []ApplicationGatewaySslCertificate `json:"sslCertificates,omitempty"`
	// FrontendIPConfigurations - Frontend IP addresses of application gateway resource
	FrontendIPConfigurations []ApplicationGatewayFrontendIPConfiguration `json:"frontendIPConfigurations,omitempty"`
	// FrontendPorts - Frontend ports of application gateway resource
	FrontendPorts []ApplicationGatewayFrontendPort `json:"frontendPorts,omitempty"`
	// Probes - Probes of application gateway resource
	Probes []ApplicationGatewayProbe `json:"probes,omitempty"`
	// BackendAddressPools - Backend address pool of application gateway resource
	BackendAddressPools []ApplicationGatewayBackendAddressPool `json:"backendAddressPools,omitempty"`
	// BackendHTTPSettingsCollection - Backend http settings of application gateway resource
	BackendHTTPSettingsCollection []ApplicationGatewayBackendHTTPSettings `json:"backendHttpSettingsCollection,omitempty"`
	// HTTPListeners - HTTP listeners of application gateway resource
	HTTPListeners []ApplicationGatewayHTTPListener `json:"httpListeners,omitempty"`
	// URLPathMaps - URL path map of application gateway resource
	URLPathMaps []ApplicationGatewayURLPathMap `json:"urlPathMaps,omitempty"`
	// RequestRoutingRules - Request routing rules of application gateway resource
	RequestRoutingRules []ApplicationGatewayRequestRoutingRule `json:"requestRoutingRules,omitempty"`
	// ResourceGUID - Resource guid property of the ApplicationGateway resource
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - Provisioning state of the ApplicationGateway resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayRequestRoutingRule - Request routing rule of application gateway
type ApplicationGatewayRequestRoutingRule struct {
	// ID - Resource Id
	ID                                                    *string `json:"id,omitempty"`
	*ApplicationGatewayRequestRoutingRulePropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayRequestRoutingRulePropertiesFormat - Properties of Request routing rule of application gateway
type ApplicationGatewayRequestRoutingRulePropertiesFormat struct {
	// RuleType - Rule type. Possible values include: 'Basic', 'PathBasedRouting', 'None'
	RuleType ApplicationGatewayRequestRoutingRuleType `json:"ruleType,omitempty"`
	// BackendAddressPool - Backend address pool resource of application gateway
	BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`
	// BackendHTTPSettings - Frontend port resource of application gateway
	BackendHTTPSettings *SubResource `json:"backendHttpSettings,omitempty"`
	// HTTPListener - Http listener resource of application gateway
	HTTPListener *SubResource `json:"httpListener,omitempty"`
	// URLPathMap - Url path map resource of application gateway
	URLPathMap *SubResource `json:"urlPathMap,omitempty"`
	// ProvisioningState - Provisioning state of the request routing rule resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewaySku - SKU of application gateway
type ApplicationGatewaySku struct {
	// Name - Name of application gateway SKU. Possible values include: 'StandardSmall', 'StandardMedium', 'StandardLarge', 'None'
	Name ApplicationGatewaySkuNameType `json:"name,omitempty"`
	// Tier - Tier of application gateway. Possible values include: 'Standard', 'None'
	Tier ApplicationGatewayTierType `json:"tier,omitempty"`
	// Capacity - Capacity (instance count) of application gateway
	Capacity *int32 `json:"capacity,omitempty"`
}

// ApplicationGatewaySslCertificate - SSL certificates of application gateway
type ApplicationGatewaySslCertificate struct {
	// ID - Resource Id
	ID                                                *string `json:"id,omitempty"`
	*ApplicationGatewaySslCertificatePropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewaySslCertificatePropertiesFormat - Properties of SSL certificates of application gateway
type ApplicationGatewaySslCertificatePropertiesFormat struct {
	// Data - SSL Certificate data
	Data *string `json:"data,omitempty"`
	// Password - SSL Certificate password
	Password *string `json:"password,omitempty"`
	// PublicCertData - SSL Certificate public data
	PublicCertData *string `json:"publicCertData,omitempty"`
	// ProvisioningState - Provisioning state of the ssl certificate resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewaySslPolicy - Application gateway SSL policy
type ApplicationGatewaySslPolicy struct {
	// DisabledSslProtocols - SSL protocols to be disabled on Application Gateway
	DisabledSslProtocols []ApplicationGatewaySslProtocolType `json:"disabledSslProtocols,omitempty"`
}

// ApplicationGatewayURLPathMap - UrlPathMap of application gateway
type ApplicationGatewayURLPathMap struct {
	// ID - Resource Id
	ID                                            *string `json:"id,omitempty"`
	*ApplicationGatewayURLPathMapPropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayURLPathMapPropertiesFormat - Properties of UrlPathMap of application gateway
type ApplicationGatewayURLPathMapPropertiesFormat struct {
	// DefaultBackendAddressPool - Default backend address pool resource of URL path map
	DefaultBackendAddressPool *SubResource `json:"defaultBackendAddressPool,omitempty"`
	// DefaultBackendHTTPSettings - Default backend http settings resource of URL path map
	DefaultBackendHTTPSettings *SubResource `json:"defaultBackendHttpSettings,omitempty"`
	// PathRules - Path rule of URL path map resource
	PathRules []ApplicationGatewayPathRule `json:"pathRules,omitempty"`
	// ProvisioningState - Provisioning state of the backend http settings resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// AuthorizationListResult - Response for ListAuthorizations Api service callRetrieves all authorizations that belongs
// to an ExpressRouteCircuit
type AuthorizationListResult struct {
	rawResponse *http.Response
	// Value - Gets the authorizations in an ExpressRoute Circuit
	Value []ExpressRouteCircuitAuthorization `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (alr AuthorizationListResult) Response() *http.Response {
	return alr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (alr AuthorizationListResult) StatusCode() int {
	return alr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (alr AuthorizationListResult) Status() string {
	return alr.rawResponse.Status
}

// AuthorizationPropertiesFormat ...
type AuthorizationPropertiesFormat struct {
	// AuthorizationKey - Gets or sets the authorization key
	AuthorizationKey *string `json:"authorizationKey,omitempty"`
	// AuthorizationUseStatus - Gets or sets AuthorizationUseStatus. Possible values include: 'Available', 'InUse', 'None'
	AuthorizationUseStatus AuthorizationUseStatusType `json:"authorizationUseStatus,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// AzureAsyncOperationResult - The response body contains the status of the specified asynchronous operation,
// indicating whether it has succeeded, is in progress, or has failed. Note that this status is distinct from the HTTP
// status code returned for the Get Operation Status operation itself. If the asynchronous operation succeeded, the
// response body includes the HTTP status code for the successful request. If the asynchronous operation failed, the
// response body includes the HTTP status code for the failed request and error information regarding the failure.
type AzureAsyncOperationResult struct {
	// Status - Status of the AzureAsuncOperation. Possible values include: 'InProgress', 'Succeeded', 'Failed', 'None'
	Status OperationStatusType `json:"status,omitempty"`
	Error  *Error              `json:"error,omitempty"`
}

// BackendAddressPool - Pool of backend IP addresses
type BackendAddressPool struct {
	// ID - Resource Id
	ID                                  *string `json:"id,omitempty"`
	*BackendAddressPoolPropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// BackendAddressPoolPropertiesFormat - Properties of BackendAddressPool
type BackendAddressPoolPropertiesFormat struct {
	// BackendIPConfigurations - Gets collection of references to IPs defined in NICs
	BackendIPConfigurations []InterfaceIPConfiguration `json:"backendIPConfigurations,omitempty"`
	// LoadBalancingRules - Gets Load Balancing rules that use this Backend Address Pool
	LoadBalancingRules []SubResource `json:"loadBalancingRules,omitempty"`
	// OutboundNatRule - Gets outbound rules that use this Backend Address Pool
	OutboundNatRule *SubResource `json:"outboundNatRule,omitempty"`
	// ProvisioningState - Get provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// BgpSettings ...
type BgpSettings struct {
	// Asn - Gets or sets this BGP speaker's ASN
	Asn *int64 `json:"asn,omitempty"`
	// BgpPeeringAddress - Gets or sets the BGP peering address and BGP identifier of this BGP speaker
	BgpPeeringAddress *string `json:"bgpPeeringAddress,omitempty"`
	// PeerWeight - Gets or sets the weight added to routes learned from this BGP speaker
	PeerWeight *int32 `json:"peerWeight,omitempty"`
}

// ConnectionResetSharedKey ...
type ConnectionResetSharedKey struct {
	rawResponse *http.Response
	// KeyLength - The virtual network connection reset shared key length
	KeyLength *int64 `json:"keyLength,omitempty"`
}

// Response returns the raw HTTP response object.
func (crsk ConnectionResetSharedKey) Response() *http.Response {
	return crsk.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (crsk ConnectionResetSharedKey) StatusCode() int {
	return crsk.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (crsk ConnectionResetSharedKey) Status() string {
	return crsk.rawResponse.Status
}

// ConnectionSharedKey - Response for GetConnectionSharedKey Api service call
type ConnectionSharedKey struct {
	rawResponse *http.Response
	// Value - The virtual network connection shared key value
	Value *string `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (csk ConnectionSharedKey) Response() *http.Response {
	return csk.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (csk ConnectionSharedKey) StatusCode() int {
	return csk.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (csk ConnectionSharedKey) Status() string {
	return csk.rawResponse.Status
}

// ConnectionSharedKeyResult - Response for CheckConnectionSharedKey Api service call
type ConnectionSharedKeyResult struct {
	rawResponse *http.Response
	// Value - The virtual network connection shared key value
	Value *string `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (cskr ConnectionSharedKeyResult) Response() *http.Response {
	return cskr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (cskr ConnectionSharedKeyResult) StatusCode() int {
	return cskr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (cskr ConnectionSharedKeyResult) Status() string {
	return cskr.rawResponse.Status
}

// DhcpOptions - DHCPOptions contains an array of DNS servers available to VMs deployed in the virtual networkStandard
// DHCP option for a subnet overrides VNET DHCP options.
type DhcpOptions struct {
	// DNSServers - Gets or sets list of DNS servers IP addresses
	DNSServers []string `json:"dnsServers,omitempty"`
}

// DNSNameAvailabilityResult - Response for CheckDnsNameAvailability Api service call
type DNSNameAvailabilityResult struct {
	rawResponse *http.Response
	// Available - Domain availability (True/False)
	Available *bool `json:"available,omitempty"`
}

// Response returns the raw HTTP response object.
func (dnar DNSNameAvailabilityResult) Response() *http.Response {
	return dnar.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dnar DNSNameAvailabilityResult) StatusCode() int {
	return dnar.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dnar DNSNameAvailabilityResult) Status() string {
	return dnar.rawResponse.Status
}

// EffectiveNetworkSecurityGroup - Effective NetworkSecurityGroup
type EffectiveNetworkSecurityGroup struct {
	// NetworkSecurityGroup - Gets the id of network security group that is applied
	NetworkSecurityGroup *SubResource                              `json:"networkSecurityGroup,omitempty"`
	Association          *EffectiveNetworkSecurityGroupAssociation `json:"association,omitempty"`
	// EffectiveSecurityRules - Gets collection of effective security rules
	EffectiveSecurityRules []EffectiveNetworkSecurityRule `json:"effectiveSecurityRules,omitempty"`
}

// EffectiveNetworkSecurityGroupAssociation - Effective NetworkSecurityGroup association
type EffectiveNetworkSecurityGroupAssociation struct {
	// Subnet - Gets the id of subnet if assigned
	Subnet *SubResource `json:"subnet,omitempty"`
	// NetworkInterface - Gets the id of network interface if assigned
	NetworkInterface *SubResource `json:"networkInterface,omitempty"`
}

// EffectiveNetworkSecurityGroupListResult - Response for list effective network security groups api service call
type EffectiveNetworkSecurityGroupListResult struct {
	rawResponse *http.Response
	// Value - Gets list of effective network security groups
	Value []EffectiveNetworkSecurityGroup `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// Response returns the raw HTTP response object.
func (ensglr EffectiveNetworkSecurityGroupListResult) Response() *http.Response {
	return ensglr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ensglr EffectiveNetworkSecurityGroupListResult) StatusCode() int {
	return ensglr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ensglr EffectiveNetworkSecurityGroupListResult) Status() string {
	return ensglr.rawResponse.Status
}

// EffectiveNetworkSecurityRule - Effective NetworkSecurityRules
type EffectiveNetworkSecurityRule struct {
	// Name - Gets the name of the security rule specified by the user (if created by the user)
	Name *string `json:"name,omitempty"`
	// Protocol - Gets Network protocol this rule applies to. Possible values include: 'TCP', 'UDP', 'Asterisk', 'None'
	Protocol SecurityRuleProtocolType `json:"protocol,omitempty"`
	// SourcePortRange - Gets source port or range
	SourcePortRange *string `json:"sourcePortRange,omitempty"`
	// DestinationPortRange - Gets destination port or range
	DestinationPortRange *string `json:"destinationPortRange,omitempty"`
	// SourceAddressPrefix - Gets source address prefix
	SourceAddressPrefix *string `json:"sourceAddressPrefix,omitempty"`
	// DestinationAddressPrefix - Gets destination address prefix
	DestinationAddressPrefix *string `json:"destinationAddressPrefix,omitempty"`
	// ExpandedSourceAddressPrefix - Gets expanded source address prefix
	ExpandedSourceAddressPrefix []string `json:"expandedSourceAddressPrefix,omitempty"`
	// ExpandedDestinationAddressPrefix - Gets expanded destination address prefix
	ExpandedDestinationAddressPrefix []string `json:"expandedDestinationAddressPrefix,omitempty"`
	// Access - Gets network traffic is allowed or denied. Possible values include: 'Allow', 'Deny', 'None'
	Access SecurityRuleAccessType `json:"access,omitempty"`
	// Priority - Gets the priority of the rule
	Priority *int32 `json:"priority,omitempty"`
	// Direction - Gets the direction of the rule. Possible values include: 'Inbound', 'Outbound', 'None'
	Direction SecurityRuleDirectionType `json:"direction,omitempty"`
}

// EffectiveRoute - Effective Route
type EffectiveRoute struct {
	// Name - Gets the name of the user defined route. This is optional.
	Name *string `json:"name,omitempty"`
	// Source - Gets who created the route. Possible values include: 'Unknown', 'User', 'VirtualNetworkGateway', 'Default', 'None'
	Source EffectiveRouteSourceType `json:"source,omitempty"`
	// State - Gets value of effective route. Possible values include: 'Active', 'Invalid', 'None'
	State EffectiveRouteStateType `json:"state,omitempty"`
	// AddressPrefix - Gets address prefixes of the effective routes in CIDR notation.
	AddressPrefix []string `json:"addressPrefix,omitempty"`
	// NextHopIPAddress - Gets the IP address of the next hop of the effective route
	NextHopIPAddress []string `json:"nextHopIpAddress,omitempty"`
	// NextHopType - Gets or sets the type of Azure hop the packet should be sent to. Possible values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', 'None', 'None'
	NextHopType RouteNextHopType `json:"nextHopType,omitempty"`
}

// EffectiveRouteListResult - Response for list effective route api service call
type EffectiveRouteListResult struct {
	rawResponse *http.Response
	// Value - Gets list of effective routes
	Value []EffectiveRoute `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// Response returns the raw HTTP response object.
func (erlr EffectiveRouteListResult) Response() *http.Response {
	return erlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (erlr EffectiveRouteListResult) StatusCode() int {
	return erlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (erlr EffectiveRouteListResult) Status() string {
	return erlr.rawResponse.Status
}

// Error ...
type Error struct {
	Code       *string        `json:"code,omitempty"`
	Message    *string        `json:"message,omitempty"`
	Target     *string        `json:"target,omitempty"`
	Details    []ErrorDetails `json:"details,omitempty"`
	InnerError *string        `json:"innerError,omitempty"`
}

// ErrorDetails ...
type ErrorDetails struct {
	Code    *string `json:"code,omitempty"`
	Target  *string `json:"target,omitempty"`
	Message *string `json:"message,omitempty"`
}

// ExpressRouteCircuit - ExpressRouteCircuit resource
type ExpressRouteCircuit struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Sku - Gets or sets sku
	Sku                                  *ExpressRouteCircuitSku `json:"sku,omitempty"`
	*ExpressRouteCircuitPropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (erc ExpressRouteCircuit) Response() *http.Response {
	return erc.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (erc ExpressRouteCircuit) StatusCode() int {
	return erc.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (erc ExpressRouteCircuit) Status() string {
	return erc.rawResponse.Status
}

// ExpressRouteCircuitArpTable - The arp table associated with the ExpressRouteCircuit
type ExpressRouteCircuitArpTable struct {
	// Age - Age.
	Age *int32 `json:"age,omitempty"`
	// Interface - Interface.
	Interface *string `json:"interface,omitempty"`
	// IPAddress - Gets ipAddress.
	IPAddress *string `json:"ipAddress,omitempty"`
	// MacAddress - Gets macAddress.
	MacAddress *string `json:"macAddress,omitempty"`
}

// ExpressRouteCircuitAuthorization - Authorization in a ExpressRouteCircuit resource
type ExpressRouteCircuitAuthorization struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID                             *string `json:"id,omitempty"`
	*AuthorizationPropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (erca ExpressRouteCircuitAuthorization) Response() *http.Response {
	return erca.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (erca ExpressRouteCircuitAuthorization) StatusCode() int {
	return erca.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (erca ExpressRouteCircuitAuthorization) Status() string {
	return erca.rawResponse.Status
}

// ExpressRouteCircuitListResult - Response for ListExpressRouteCircuit Api service call
type ExpressRouteCircuitListResult struct {
	rawResponse *http.Response
	// Value - Gets a list of ExpressRouteCircuits in a resource group
	Value []ExpressRouteCircuit `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (erclr ExpressRouteCircuitListResult) Response() *http.Response {
	return erclr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (erclr ExpressRouteCircuitListResult) StatusCode() int {
	return erclr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (erclr ExpressRouteCircuitListResult) Status() string {
	return erclr.rawResponse.Status
}

// ExpressRouteCircuitPeering - Peering in a ExpressRouteCircuit resource
type ExpressRouteCircuitPeering struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID                                          *string `json:"id,omitempty"`
	*ExpressRouteCircuitPeeringPropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (ercp ExpressRouteCircuitPeering) Response() *http.Response {
	return ercp.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ercp ExpressRouteCircuitPeering) StatusCode() int {
	return ercp.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ercp ExpressRouteCircuitPeering) Status() string {
	return ercp.rawResponse.Status
}

// ExpressRouteCircuitPeeringConfig - Specifies the peering config
type ExpressRouteCircuitPeeringConfig struct {
	// AdvertisedPublicPrefixes - Gets or sets the reference of AdvertisedPublicPrefixes
	AdvertisedPublicPrefixes []string `json:"advertisedPublicPrefixes,omitempty"`
	// AdvertisedPublicPrefixesState - Gets or sets AdvertisedPublicPrefixState of the Peering resource. Possible values include: 'NotConfigured', 'Configuring', 'Configured', 'ValidationNeeded', 'None'
	AdvertisedPublicPrefixesState ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType `json:"advertisedPublicPrefixesState,omitempty"`
	// CustomerASN - Gets or Sets CustomerAsn of the peering.
	CustomerASN *int32 `json:"customerASN,omitempty"`
	// RoutingRegistryName - Gets or Sets RoutingRegistryName of the config.
	RoutingRegistryName *string `json:"routingRegistryName,omitempty"`
}

// ExpressRouteCircuitPeeringListResult - Response for ListPeering Api service callRetrieves all Peerings that belongs
// to an ExpressRouteCircuit
type ExpressRouteCircuitPeeringListResult struct {
	rawResponse *http.Response
	// Value - Gets the peerings in an express route circuit
	Value []ExpressRouteCircuitPeering `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (ercplr ExpressRouteCircuitPeeringListResult) Response() *http.Response {
	return ercplr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ercplr ExpressRouteCircuitPeeringListResult) StatusCode() int {
	return ercplr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ercplr ExpressRouteCircuitPeeringListResult) Status() string {
	return ercplr.rawResponse.Status
}

// ExpressRouteCircuitPeeringPropertiesFormat ...
type ExpressRouteCircuitPeeringPropertiesFormat struct {
	// PeeringType - Gets or sets PeeringType. Possible values include: 'AzurePublicPeering', 'AzurePrivatePeering', 'MicrosoftPeering', 'None'
	PeeringType ExpressRouteCircuitPeeringType `json:"peeringType,omitempty"`
	// State - Gets or sets state of Peering. Possible values include: 'Disabled', 'Enabled', 'None'
	State ExpressRouteCircuitPeeringStateType `json:"state,omitempty"`
	// AzureASN - Gets or sets the azure ASN
	AzureASN *int32 `json:"azureASN,omitempty"`
	// PeerASN - Gets or sets the peer ASN
	PeerASN *int32 `json:"peerASN,omitempty"`
	// PrimaryPeerAddressPrefix - Gets or sets the primary address prefix
	PrimaryPeerAddressPrefix *string `json:"primaryPeerAddressPrefix,omitempty"`
	// SecondaryPeerAddressPrefix - Gets or sets the secondary address prefix
	SecondaryPeerAddressPrefix *string `json:"secondaryPeerAddressPrefix,omitempty"`
	// PrimaryAzurePort - Gets or sets the primary port
	PrimaryAzurePort *string `json:"primaryAzurePort,omitempty"`
	// SecondaryAzurePort - Gets or sets the secondary port
	SecondaryAzurePort *string `json:"secondaryAzurePort,omitempty"`
	// SharedKey - Gets or sets the shared key
	SharedKey *string `json:"sharedKey,omitempty"`
	// VlanID - Gets or sets the vlan id
	VlanID *int32 `json:"vlanId,omitempty"`
	// MicrosoftPeeringConfig - Gets or sets the mircosoft peering config
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringConfig `json:"microsoftPeeringConfig,omitempty"`
	// Stats - Gets or peering stats
	Stats *ExpressRouteCircuitStats `json:"stats,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
	// GatewayManagerEtag - Gets or sets the GatewayManager Etag
	GatewayManagerEtag *string `json:"gatewayManagerEtag,omitempty"`
	// LastModifiedBy - Gets whether the provider or the customer last modified the peering
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`
}

// ExpressRouteCircuitPropertiesFormat - Properties of ExpressRouteCircuit
type ExpressRouteCircuitPropertiesFormat struct {
	// AllowClassicOperations - allow classic operations
	AllowClassicOperations *bool `json:"allowClassicOperations,omitempty"`
	// CircuitProvisioningState - Gets or sets CircuitProvisioningState state of the resource
	CircuitProvisioningState *string `json:"circuitProvisioningState,omitempty"`
	// ServiceProviderProvisioningState - Gets or sets ServiceProviderProvisioningState state of the resource. Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned', 'Deprovisioning', 'None'
	ServiceProviderProvisioningState ServiceProviderProvisioningStateType `json:"serviceProviderProvisioningState,omitempty"`
	// Authorizations - Gets or sets list of authorizations
	Authorizations []ExpressRouteCircuitAuthorization `json:"authorizations,omitempty"`
	// Peerings - Gets or sets list of peerings
	Peerings []ExpressRouteCircuitPeering `json:"peerings,omitempty"`
	// ServiceKey - Gets or sets ServiceKey
	ServiceKey *string `json:"serviceKey,omitempty"`
	// ServiceProviderNotes - Gets or sets ServiceProviderNotes
	ServiceProviderNotes *string `json:"serviceProviderNotes,omitempty"`
	// ServiceProviderProperties - Gets or sets ServiceProviderProperties
	ServiceProviderProperties *ExpressRouteCircuitServiceProviderProperties `json:"serviceProviderProperties,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
	// GatewayManagerEtag - Gets or sets the GatewayManager Etag
	GatewayManagerEtag *string `json:"gatewayManagerEtag,omitempty"`
}

// ExpressRouteCircuitRoutesTable - The routes table associated with the ExpressRouteCircuit
type ExpressRouteCircuitRoutesTable struct {
	// NetworkProperty - network.
	NetworkProperty *string `json:"network,omitempty"`
	// NextHop - nextHop
	NextHop *string `json:"nextHop,omitempty"`
	// LocPrf - locPrf.
	LocPrf *string `json:"locPrf,omitempty"`
	// Weight - weight.
	Weight *int32 `json:"weight,omitempty"`
	// Path - path .
	Path *string `json:"path,omitempty"`
}

// ExpressRouteCircuitRoutesTableSummary - The routes table associated with the ExpressRouteCircuit
type ExpressRouteCircuitRoutesTableSummary struct {
	// Neighbor - Neighbor.
	Neighbor *string `json:"neighbor,omitempty"`
	// V - BGP version number spoken to the neighbor.
	V *int32 `json:"v,omitempty"`
	// As - Autonomous system number.
	As *int32 `json:"as,omitempty"`
	// UpDown - The length of time that the BGP session has been in the Established state, or the current status if not in the Established state.
	UpDown *string `json:"upDown,omitempty"`
	// StatePfxRcd - Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.
	StatePfxRcd *string `json:"statePfxRcd,omitempty"`
}

// ExpressRouteCircuitsArpTableListResult - Response for ListArpTable associated with the Express Route Circuits Api
type ExpressRouteCircuitsArpTableListResult struct {
	rawResponse *http.Response
	// Value - Gets List of ArpTable
	Value []ExpressRouteCircuitArpTable `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// Response returns the raw HTTP response object.
func (ercatlr ExpressRouteCircuitsArpTableListResult) Response() *http.Response {
	return ercatlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ercatlr ExpressRouteCircuitsArpTableListResult) StatusCode() int {
	return ercatlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ercatlr ExpressRouteCircuitsArpTableListResult) Status() string {
	return ercatlr.rawResponse.Status
}

// ExpressRouteCircuitServiceProviderProperties - Contains ServiceProviderProperties in an ExpressRouteCircuit
type ExpressRouteCircuitServiceProviderProperties struct {
	// ServiceProviderName - Gets or sets serviceProviderName.
	ServiceProviderName *string `json:"serviceProviderName,omitempty"`
	// PeeringLocation - Gets or sets peering location.
	PeeringLocation *string `json:"peeringLocation,omitempty"`
	// BandwidthInMbps - Gets or sets BandwidthInMbps.
	BandwidthInMbps *int32 `json:"bandwidthInMbps,omitempty"`
}

// ExpressRouteCircuitSku - Contains sku in an ExpressRouteCircuit
type ExpressRouteCircuitSku struct {
	// Name - Gets or sets name of the sku.
	Name *string `json:"name,omitempty"`
	// Tier - Gets or sets tier of the sku. Possible values include: 'Standard', 'Premium', 'None'
	Tier ExpressRouteCircuitSkuTierType `json:"tier,omitempty"`
	// Family - Gets or sets family of the sku. Possible values include: 'UnlimitedData', 'MeteredData', 'None'
	Family ExpressRouteCircuitSkuFamilyType `json:"family,omitempty"`
}

// ExpressRouteCircuitsRoutesTableListResult - Response for ListRoutesTable associated with the Express Route Circuits
// Api
type ExpressRouteCircuitsRoutesTableListResult struct {
	rawResponse *http.Response
	// Value - Gets List of RoutesTable
	Value []ExpressRouteCircuitRoutesTable `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// Response returns the raw HTTP response object.
func (ercrtlr ExpressRouteCircuitsRoutesTableListResult) Response() *http.Response {
	return ercrtlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ercrtlr ExpressRouteCircuitsRoutesTableListResult) StatusCode() int {
	return ercrtlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ercrtlr ExpressRouteCircuitsRoutesTableListResult) Status() string {
	return ercrtlr.rawResponse.Status
}

// ExpressRouteCircuitsRoutesTableSummaryListResult - Response for ListRoutesTable associated with the Express Route
// Circuits Api
type ExpressRouteCircuitsRoutesTableSummaryListResult struct {
	rawResponse *http.Response
	// Value - Gets List of RoutesTable
	Value []ExpressRouteCircuitRoutesTableSummary `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// Response returns the raw HTTP response object.
func (ercrtslr ExpressRouteCircuitsRoutesTableSummaryListResult) Response() *http.Response {
	return ercrtslr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ercrtslr ExpressRouteCircuitsRoutesTableSummaryListResult) StatusCode() int {
	return ercrtslr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ercrtslr ExpressRouteCircuitsRoutesTableSummaryListResult) Status() string {
	return ercrtslr.rawResponse.Status
}

// ExpressRouteCircuitStats - Contains Stats associated with the peering
type ExpressRouteCircuitStats struct {
	rawResponse *http.Response
	// PrimarybytesIn - Gets BytesIn of the peering.
	PrimarybytesIn *int64 `json:"primarybytesIn,omitempty"`
	// PrimarybytesOut - Gets BytesOut of the peering.
	PrimarybytesOut *int64 `json:"primarybytesOut,omitempty"`
	// SecondarybytesIn - Gets BytesIn of the peering.
	SecondarybytesIn *int64 `json:"secondarybytesIn,omitempty"`
	// SecondarybytesOut - Gets BytesOut of the peering.
	SecondarybytesOut *int64 `json:"secondarybytesOut,omitempty"`
}

// Response returns the raw HTTP response object.
func (ercs ExpressRouteCircuitStats) Response() *http.Response {
	return ercs.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ercs ExpressRouteCircuitStats) StatusCode() int {
	return ercs.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ercs ExpressRouteCircuitStats) Status() string {
	return ercs.rawResponse.Status
}

// ExpressRouteServiceProvider - ExpressRouteResourceProvider object
type ExpressRouteServiceProvider struct {
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags                                         map[string]string `json:"tags,omitempty"`
	*ExpressRouteServiceProviderPropertiesFormat `json:"properties,omitempty"`
}

// ExpressRouteServiceProviderBandwidthsOffered - Contains Bandwidths offered in ExpressRouteServiceProviders
type ExpressRouteServiceProviderBandwidthsOffered struct {
	// OfferName - Gets the OfferName
	OfferName *string `json:"offerName,omitempty"`
	// ValueInMbps - Gets the ValueInMbps.
	ValueInMbps *int32 `json:"valueInMbps,omitempty"`
}

// ExpressRouteServiceProviderListResult - Response for ListExpressRouteServiceProvider Api service call
type ExpressRouteServiceProviderListResult struct {
	rawResponse *http.Response
	// Value - Gets List of ExpressRouteResourceProvider
	Value []ExpressRouteServiceProvider `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (ersplr ExpressRouteServiceProviderListResult) Response() *http.Response {
	return ersplr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ersplr ExpressRouteServiceProviderListResult) StatusCode() int {
	return ersplr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ersplr ExpressRouteServiceProviderListResult) Status() string {
	return ersplr.rawResponse.Status
}

// ExpressRouteServiceProviderPropertiesFormat - Properties of ExpressRouteServiceProvider
type ExpressRouteServiceProviderPropertiesFormat struct {
	// PeeringLocations - Gets or list of peering locations
	PeeringLocations []string `json:"peeringLocations,omitempty"`
	// BandwidthsOffered - Gets or bandwidths offered
	BandwidthsOffered []ExpressRouteServiceProviderBandwidthsOffered `json:"bandwidthsOffered,omitempty"`
	// ProvisioningState - Gets provisioning state of the resource
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// FrontendIPConfiguration - Frontend IP address of the load balancer
type FrontendIPConfiguration struct {
	// ID - Resource Id
	ID                                       *string `json:"id,omitempty"`
	*FrontendIPConfigurationPropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// FrontendIPConfigurationPropertiesFormat - Properties of Frontend IP Configuration of the load balancer
type FrontendIPConfigurationPropertiesFormat struct {
	// InboundNatRules - Read only. Inbound rules URIs that use this frontend IP
	InboundNatRules []SubResource `json:"inboundNatRules,omitempty"`
	// InboundNatPools - Read only. Inbound pools URIs that use this frontend IP
	InboundNatPools []SubResource `json:"inboundNatPools,omitempty"`
	// OutboundNatRules - Read only. Outbound rules URIs that use this frontend IP
	OutboundNatRules []SubResource `json:"outboundNatRules,omitempty"`
	// LoadBalancingRules - Gets Load Balancing rules URIs that use this frontend IP
	LoadBalancingRules []SubResource `json:"loadBalancingRules,omitempty"`
	// PrivateIPAddress - Gets or sets the privateIPAddress of the IP Configuration
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
	// PrivateIPAllocationMethod - Gets or sets PrivateIP allocation method. Possible values include: 'Static', 'Dynamic', 'None'
	PrivateIPAllocationMethod IPAllocationMethodType `json:"privateIPAllocationMethod,omitempty"`
	// Subnet - Gets or sets the reference of the subnet resource
	Subnet *Subnet `json:"subnet,omitempty"`
	// PublicIPAddress - Gets or sets the reference of the PublicIP resource
	PublicIPAddress *PublicIPAddress `json:"publicIPAddress,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// GeneratevpnclientpackageResponse ...
type GeneratevpnclientpackageResponse struct {
	rawResponse *http.Response
	Value       *string `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (gr GeneratevpnclientpackageResponse) Response() *http.Response {
	return gr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gr GeneratevpnclientpackageResponse) StatusCode() int {
	return gr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gr GeneratevpnclientpackageResponse) Status() string {
	return gr.rawResponse.Status
}

// InboundNatPool - Inbound NAT pool of the load balancer
type InboundNatPool struct {
	// ID - Resource Id
	ID                              *string `json:"id,omitempty"`
	*InboundNatPoolPropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// InboundNatPoolPropertiesFormat - Properties of Inbound NAT pool
type InboundNatPoolPropertiesFormat struct {
	// FrontendIPConfiguration - Gets or sets a reference to frontend IP Addresses
	FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`
	// Protocol - Gets or sets the transport protocol for the endpoint. Possible values are Udp or Tcp. Possible values include: 'UDP', 'TCP', 'None'
	Protocol TransportProtocolType `json:"protocol,omitempty"`
	// FrontendPortRangeStart - Gets or sets the starting port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive
	FrontendPortRangeStart int32 `json:"frontendPortRangeStart,omitempty"`
	// FrontendPortRangeEnd - Gets or sets the ending port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive
	FrontendPortRangeEnd int32 `json:"frontendPortRangeEnd,omitempty"`
	// BackendPort - Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API
	BackendPort int32 `json:"backendPort,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// InboundNatRule - Inbound NAT rule of the loadbalancer
type InboundNatRule struct {
	// ID - Resource Id
	ID                              *string `json:"id,omitempty"`
	*InboundNatRulePropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// InboundNatRulePropertiesFormat - Properties of Inbound NAT rule
type InboundNatRulePropertiesFormat struct {
	// FrontendIPConfiguration - Gets or sets a reference to frontend IP Addresses
	FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`
	// BackendIPConfiguration - Gets or sets a reference to a private ip address defined on a NetworkInterface of a VM. Traffic sent to frontendPort of each of the frontendIPConfigurations is forwarded to the backed IP
	BackendIPConfiguration *InterfaceIPConfiguration `json:"backendIPConfiguration,omitempty"`
	// Protocol - Gets or sets the transport protocol for the endpoint. Possible values are Udp or Tcp. Possible values include: 'UDP', 'TCP', 'None'
	Protocol TransportProtocolType `json:"protocol,omitempty"`
	// FrontendPort - Gets or sets the port for the external endpoint. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive
	FrontendPort *int32 `json:"frontendPort,omitempty"`
	// BackendPort - Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API
	BackendPort *int32 `json:"backendPort,omitempty"`
	// IdleTimeoutInMinutes - Gets or sets the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp
	IdleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`
	// EnableFloatingIP - Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON availability Groups in SQL server. This setting can't be changed after you create the endpoint
	EnableFloatingIP *bool `json:"enableFloatingIP,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// Interface - A NetworkInterface in a resource group
type Interface struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags                       map[string]string `json:"tags,omitempty"`
	*InterfacePropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (i Interface) Response() *http.Response {
	return i.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (i Interface) StatusCode() int {
	return i.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (i Interface) Status() string {
	return i.rawResponse.Status
}

// InterfaceDNSSettings - Dns settings of a network interface
type InterfaceDNSSettings struct {
	// DNSServers - Gets or sets list of DNS servers IP addresses
	DNSServers []string `json:"dnsServers,omitempty"`
	// AppliedDNSServers - Gets or sets list of Applied DNS servers IP addresses
	AppliedDNSServers []string `json:"appliedDnsServers,omitempty"`
	// InternalDNSNameLabel - Gets or sets the internal DNS name
	InternalDNSNameLabel *string `json:"internalDnsNameLabel,omitempty"`
	// InternalFqdn - Gets or sets the internal fqdn.
	InternalFqdn *string `json:"internalFqdn,omitempty"`
	// InternalDomainNameSuffix - Gets or sets internal domain name suffix of the NIC.
	InternalDomainNameSuffix *string `json:"internalDomainNameSuffix,omitempty"`
}

// InterfaceIPConfiguration - IPConfiguration in a NetworkInterface
type InterfaceIPConfiguration struct {
	// ID - Resource Id
	ID                                        *string `json:"id,omitempty"`
	*InterfaceIPConfigurationPropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// InterfaceIPConfigurationPropertiesFormat - Properties of IPConfiguration
type InterfaceIPConfigurationPropertiesFormat struct {
	// ApplicationGatewayBackendAddressPools - Gets or sets the reference of ApplicationGatewayBackendAddressPool resource
	ApplicationGatewayBackendAddressPools []ApplicationGatewayBackendAddressPool `json:"applicationGatewayBackendAddressPools,omitempty"`
	// LoadBalancerBackendAddressPools - Gets or sets the reference of LoadBalancerBackendAddressPool resource
	LoadBalancerBackendAddressPools []BackendAddressPool `json:"loadBalancerBackendAddressPools,omitempty"`
	// LoadBalancerInboundNatRules - Gets or sets list of references of LoadBalancerInboundNatRules
	LoadBalancerInboundNatRules []InboundNatRule `json:"loadBalancerInboundNatRules,omitempty"`
	PrivateIPAddress            *string          `json:"privateIPAddress,omitempty"`
	// PrivateIPAllocationMethod - Gets or sets PrivateIP allocation method. Possible values include: 'Static', 'Dynamic', 'None'
	PrivateIPAllocationMethod IPAllocationMethodType `json:"privateIPAllocationMethod,omitempty"`
	// PrivateIPAddressVersion - Gets or sets PrivateIP address version (IPv4/IPv6). Possible values include: 'IPv4', 'IPv6', 'None'
	PrivateIPAddressVersion IPVersionType `json:"privateIPAddressVersion,omitempty"`
	Subnet                  *Subnet       `json:"subnet,omitempty"`
	// Primary - Gets whether this is a primary customer address on the NIC
	Primary           *bool            `json:"primary,omitempty"`
	PublicIPAddress   *PublicIPAddress `json:"publicIPAddress,omitempty"`
	ProvisioningState *string          `json:"provisioningState,omitempty"`
}

// InterfaceListResult - Response for ListNetworkInterface Api service call
type InterfaceListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets list of NetworkInterfaces in a resource group
	Value []Interface `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (ilr InterfaceListResult) Response() *http.Response {
	return ilr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ilr InterfaceListResult) StatusCode() int {
	return ilr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ilr InterfaceListResult) Status() string {
	return ilr.rawResponse.Status
}

// InterfacePropertiesFormat - NetworkInterface properties.
type InterfacePropertiesFormat struct {
	// VirtualMachine - Gets or sets the reference of a VirtualMachine
	VirtualMachine *SubResource `json:"virtualMachine,omitempty"`
	// NetworkSecurityGroup - Gets or sets the reference of the NetworkSecurityGroup resource
	NetworkSecurityGroup *SecurityGroup `json:"networkSecurityGroup,omitempty"`
	// IPConfigurations - Gets or sets list of IPConfigurations of the network interface
	IPConfigurations []InterfaceIPConfiguration `json:"ipConfigurations,omitempty"`
	// DNSSettings - Gets or sets DNS settings in network interface
	DNSSettings *InterfaceDNSSettings `json:"dnsSettings,omitempty"`
	// MacAddress - Gets the MAC address of the network interface
	MacAddress *string `json:"macAddress,omitempty"`
	// Primary - Gets whether this is a primary NIC on a virtual machine
	Primary *bool `json:"primary,omitempty"`
	// EnableIPForwarding - Gets or sets whether IPForwarding is enabled on the NIC
	EnableIPForwarding *bool `json:"enableIPForwarding,omitempty"`
	// ResourceGUID - Gets or sets resource guid property of the network interface resource
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// IPAddressAvailabilityResult - Response for CheckIPAddressAvailability Api service call
type IPAddressAvailabilityResult struct {
	rawResponse *http.Response
	// Available - Private IP address availability
	Available *bool `json:"available,omitempty"`
	// AvailableIPAddresses - Contains other available private IP addresses if the asked for address is taken
	AvailableIPAddresses []string `json:"availableIPAddresses,omitempty"`
}

// Response returns the raw HTTP response object.
func (iaar IPAddressAvailabilityResult) Response() *http.Response {
	return iaar.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (iaar IPAddressAvailabilityResult) StatusCode() int {
	return iaar.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (iaar IPAddressAvailabilityResult) Status() string {
	return iaar.rawResponse.Status
}

// IPConfiguration - IPConfiguration
type IPConfiguration struct {
	// ID - Resource Id
	ID                               *string `json:"id,omitempty"`
	*IPConfigurationPropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// IPConfigurationPropertiesFormat - Properties of IPConfiguration
type IPConfigurationPropertiesFormat struct {
	// PrivateIPAddress - Gets or sets the privateIPAddress of the IP Configuration
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
	// PrivateIPAllocationMethod - Gets or sets PrivateIP allocation method. Possible values include: 'Static', 'Dynamic', 'None'
	PrivateIPAllocationMethod IPAllocationMethodType `json:"privateIPAllocationMethod,omitempty"`
	// Subnet - Gets or sets the reference of the subnet resource
	Subnet *Subnet `json:"subnet,omitempty"`
	// PublicIPAddress - Gets or sets the reference of the PublicIP resource
	PublicIPAddress *PublicIPAddress `json:"publicIPAddress,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// LoadBalancer - LoadBalancer resource
type LoadBalancer struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags                          map[string]string `json:"tags,omitempty"`
	*LoadBalancerPropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (lb LoadBalancer) Response() *http.Response {
	return lb.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (lb LoadBalancer) StatusCode() int {
	return lb.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (lb LoadBalancer) Status() string {
	return lb.rawResponse.Status
}

// LoadBalancerListResult - Response for ListLoadBalancers Api service call
type LoadBalancerListResult struct {
	rawResponse *http.Response
	// Value - Gets a list of LoadBalancers in a resource group
	Value []LoadBalancer `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (lblr LoadBalancerListResult) Response() *http.Response {
	return lblr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (lblr LoadBalancerListResult) StatusCode() int {
	return lblr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (lblr LoadBalancerListResult) Status() string {
	return lblr.rawResponse.Status
}

// LoadBalancerPropertiesFormat - Properties of Load Balancer
type LoadBalancerPropertiesFormat struct {
	// FrontendIPConfigurations - Gets or sets frontend IP addresses of the load balancer
	FrontendIPConfigurations []FrontendIPConfiguration `json:"frontendIPConfigurations,omitempty"`
	// BackendAddressPools - Gets or sets Pools of backend IP addresses
	BackendAddressPools []BackendAddressPool `json:"backendAddressPools,omitempty"`
	// LoadBalancingRules - Gets or sets load balancing rules
	LoadBalancingRules []LoadBalancingRule `json:"loadBalancingRules,omitempty"`
	// Probes - Gets or sets list of Load balancer probes
	Probes []Probe `json:"probes,omitempty"`
	// InboundNatRules - Gets or sets list of inbound rules
	InboundNatRules []InboundNatRule `json:"inboundNatRules,omitempty"`
	// InboundNatPools - Gets or sets inbound NAT pools
	InboundNatPools []InboundNatPool `json:"inboundNatPools,omitempty"`
	// OutboundNatRules - Gets or sets outbound NAT rules
	OutboundNatRules []OutboundNatRule `json:"outboundNatRules,omitempty"`
	// ResourceGUID - Gets or sets resource guid property of the Load balancer resource
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// LoadBalancingRule - Rules of the load balancer
type LoadBalancingRule struct {
	// ID - Resource Id
	ID                                 *string `json:"id,omitempty"`
	*LoadBalancingRulePropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// LoadBalancingRulePropertiesFormat - Properties of the load balancer
type LoadBalancingRulePropertiesFormat struct {
	// FrontendIPConfiguration - Gets or sets a reference to frontend IP Addresses
	FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`
	// BackendAddressPool - Gets or sets  a reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the backend IPs
	BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`
	// Probe - Gets or sets the reference of the load balancer probe used by the Load Balancing rule.
	Probe *SubResource `json:"probe,omitempty"`
	// Protocol - Gets or sets the transport protocol for the external endpoint. Possible values are Udp or Tcp. Possible values include: 'UDP', 'TCP', 'None'
	Protocol TransportProtocolType `json:"protocol,omitempty"`
	// LoadDistribution - Gets or sets the load distribution policy for this rule. Possible values include: 'Default', 'SourceIP', 'SourceIPProtocol', 'None'
	LoadDistribution LoadDistributionType `json:"loadDistribution,omitempty"`
	// FrontendPort - Gets or sets the port for the external endpoint. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive
	FrontendPort int32 `json:"frontendPort,omitempty"`
	// BackendPort - Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API
	BackendPort *int32 `json:"backendPort,omitempty"`
	// IdleTimeoutInMinutes - Gets or sets the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp
	IdleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`
	// EnableFloatingIP - Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON availability Groups in SQL server. This setting can't be changed after you create the endpoint
	EnableFloatingIP *bool `json:"enableFloatingIP,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// LocalNetworkGateway - A common class for general resource information
type LocalNetworkGateway struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags                                 map[string]string `json:"tags,omitempty"`
	*LocalNetworkGatewayPropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (lng LocalNetworkGateway) Response() *http.Response {
	return lng.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (lng LocalNetworkGateway) StatusCode() int {
	return lng.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (lng LocalNetworkGateway) Status() string {
	return lng.rawResponse.Status
}

// LocalNetworkGatewayListResult - Response for ListLocalNetworkGateways Api service call
type LocalNetworkGatewayListResult struct {
	rawResponse *http.Response
	// Value - Gets List of LocalNetworkGateways that exists in a resource group
	Value []LocalNetworkGateway `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (lnglr LocalNetworkGatewayListResult) Response() *http.Response {
	return lnglr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (lnglr LocalNetworkGatewayListResult) StatusCode() int {
	return lnglr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (lnglr LocalNetworkGatewayListResult) Status() string {
	return lnglr.rawResponse.Status
}

// LocalNetworkGatewayPropertiesFormat - LocalNetworkGateway properties
type LocalNetworkGatewayPropertiesFormat struct {
	// LocalNetworkAddressSpace - Local network site Address space
	LocalNetworkAddressSpace *AddressSpace `json:"localNetworkAddressSpace,omitempty"`
	// GatewayIPAddress - IP address of local network gateway.
	GatewayIPAddress *string `json:"gatewayIpAddress,omitempty"`
	// BgpSettings - Local network gateway's BGP speaker settings
	BgpSettings *BgpSettings `json:"bgpSettings,omitempty"`
	// ResourceGUID - Gets or sets resource guid property of the LocalNetworkGateway resource
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - Gets provisioning state of the LocalNetworkGateway resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// OutboundNatRule - Outbound NAT pool of the load balancer
type OutboundNatRule struct {
	// ID - Resource Id
	ID                               *string `json:"id,omitempty"`
	*OutboundNatRulePropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// OutboundNatRulePropertiesFormat - Outbound NAT pool of the load balancer
type OutboundNatRulePropertiesFormat struct {
	// AllocatedOutboundPorts - Gets or sets the number of outbound ports to be used for SNAT
	AllocatedOutboundPorts *int32 `json:"allocatedOutboundPorts,omitempty"`
	// FrontendIPConfigurations - Gets or sets Frontend IP addresses of the load balancer
	FrontendIPConfigurations []SubResource `json:"frontendIPConfigurations,omitempty"`
	// BackendAddressPool - Gets or sets a reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the backend IPs
	BackendAddressPool SubResource `json:"backendAddressPool,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// Probe - Load balancer Probe
type Probe struct {
	// ID - Resource Id
	ID                     *string `json:"id,omitempty"`
	*ProbePropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// ProbePropertiesFormat ...
type ProbePropertiesFormat struct {
	// LoadBalancingRules - Gets Load balancer rules that use this probe
	LoadBalancingRules []SubResource `json:"loadBalancingRules,omitempty"`
	// Protocol - Gets or sets the protocol of the end point. Possible values are http or Tcp. If Tcp is specified, a received ACK is required for the probe to be successful. If http is specified,a 200 OK response from the specifies URI is required for the probe to be successful. Possible values include: 'HTTP', 'TCP', 'None'
	Protocol ProbeProtocolType `json:"protocol,omitempty"`
	// Port - Gets or sets Port for communicating the probe. Possible values range from 1 to 65535, inclusive.
	Port int32 `json:"port,omitempty"`
	// IntervalInSeconds - Gets or sets the interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5
	IntervalInSeconds *int32 `json:"intervalInSeconds,omitempty"`
	// NumberOfProbes - Gets or sets the number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure.
	NumberOfProbes *int32 `json:"numberOfProbes,omitempty"`
	// RequestPath - Gets or sets the URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value
	RequestPath *string `json:"requestPath,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// PublicIPAddress - PublicIPAddress resource
type PublicIPAddress struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags                             map[string]string `json:"tags,omitempty"`
	*PublicIPAddressPropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (pia PublicIPAddress) Response() *http.Response {
	return pia.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (pia PublicIPAddress) StatusCode() int {
	return pia.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (pia PublicIPAddress) Status() string {
	return pia.rawResponse.Status
}

// PublicIPAddressDNSSettings - Contains FQDN of the DNS record associated with the public IP address
type PublicIPAddressDNSSettings struct {
	// DomainNameLabel - Gets or sets the Domain name label.The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.
	DomainNameLabel *string `json:"domainNameLabel,omitempty"`
	// Fqdn - Gets the FQDN, Fully qualified domain name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.
	Fqdn *string `json:"fqdn,omitempty"`
	// ReverseFqdn - Gets or Sets the Reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
	ReverseFqdn *string `json:"reverseFqdn,omitempty"`
}

// PublicIPAddressListResult - Response for ListPublicIpAddresses Api service call
type PublicIPAddressListResult struct {
	rawResponse *http.Response
	// Value - Gets List of publicIP addresses that exists in a resource group
	Value []PublicIPAddress `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (pialr PublicIPAddressListResult) Response() *http.Response {
	return pialr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (pialr PublicIPAddressListResult) StatusCode() int {
	return pialr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (pialr PublicIPAddressListResult) Status() string {
	return pialr.rawResponse.Status
}

// PublicIPAddressPropertiesFormat - PublicIpAddress properties
type PublicIPAddressPropertiesFormat struct {
	// PublicIPAllocationMethod - Gets or sets PublicIP allocation method (Static/Dynamic). Possible values include: 'Static', 'Dynamic', 'None'
	PublicIPAllocationMethod IPAllocationMethodType `json:"publicIPAllocationMethod,omitempty"`
	// PublicIPAddressVersion - Gets or sets PublicIP address version (IPv4/IPv6). Possible values include: 'IPv4', 'IPv6', 'None'
	PublicIPAddressVersion IPVersionType    `json:"publicIPAddressVersion,omitempty"`
	IPConfiguration        *IPConfiguration `json:"ipConfiguration,omitempty"`
	// DNSSettings - Gets or sets FQDN of the DNS record associated with the public IP address
	DNSSettings *PublicIPAddressDNSSettings `json:"dnsSettings,omitempty"`
	IPAddress   *string                     `json:"ipAddress,omitempty"`
	// IdleTimeoutInMinutes - Gets or sets the Idletimeout of the public IP address
	IdleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`
	// ResourceGUID - Gets or sets resource guid property of the PublicIP resource
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// Resource ...
type Resource struct {
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
}

// ResourceNavigationLink - ResourceNavigationLink resource
type ResourceNavigationLink struct {
	// ID - Resource Id
	ID                            *string `json:"id,omitempty"`
	*ResourceNavigationLinkFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// ResourceNavigationLinkFormat - Properties of ResourceNavigationLink
type ResourceNavigationLinkFormat struct {
	// LinkedResourceType - Resource type of the linked resource
	LinkedResourceType *string `json:"linkedResourceType,omitempty"`
	// Link - Link to the external resource
	Link *string `json:"link,omitempty"`
	// ProvisioningState - Provisioning state of the ResourceNavigationLink resource
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// Route - Route resource
type Route struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID                     *string `json:"id,omitempty"`
	*RoutePropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (r Route) Response() *http.Response {
	return r.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (r Route) StatusCode() int {
	return r.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (r Route) Status() string {
	return r.rawResponse.Status
}

// RouteListResult - Response for ListRoute Api service call
type RouteListResult struct {
	rawResponse *http.Response
	// Value - Gets List of Routes in a resource group
	Value []Route `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (rlr RouteListResult) Response() *http.Response {
	return rlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rlr RouteListResult) StatusCode() int {
	return rlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rlr RouteListResult) Status() string {
	return rlr.rawResponse.Status
}

// RoutePropertiesFormat - Route resource
type RoutePropertiesFormat struct {
	// AddressPrefix - Gets or sets the destination CIDR to which the route applies.
	AddressPrefix *string `json:"addressPrefix,omitempty"`
	// NextHopType - Gets or sets the type of Azure hop the packet should be sent to. Possible values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', 'None', 'None'
	NextHopType RouteNextHopType `json:"nextHopType,omitempty"`
	// NextHopIPAddress - Gets or sets the IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
	NextHopIPAddress *string `json:"nextHopIpAddress,omitempty"`
	// ProvisioningState - Gets provisioning state of the resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// RouteTable - RouteTable resource
type RouteTable struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags                        map[string]string `json:"tags,omitempty"`
	*RouteTablePropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (rt RouteTable) Response() *http.Response {
	return rt.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rt RouteTable) StatusCode() int {
	return rt.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rt RouteTable) Status() string {
	return rt.rawResponse.Status
}

// RouteTableListResult - Response for ListRouteTable Api service call
type RouteTableListResult struct {
	rawResponse *http.Response
	// Value - Gets List of RouteTables in a resource group
	Value []RouteTable `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (rtlr RouteTableListResult) Response() *http.Response {
	return rtlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rtlr RouteTableListResult) StatusCode() int {
	return rtlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rtlr RouteTableListResult) Status() string {
	return rtlr.rawResponse.Status
}

// RouteTablePropertiesFormat - Route Table resource
type RouteTablePropertiesFormat struct {
	// Routes - Gets or sets Routes in a Route Table
	Routes []Route `json:"routes,omitempty"`
	// Subnets - Gets collection of references to subnets
	Subnets []Subnet `json:"subnets,omitempty"`
	// ProvisioningState - Gets provisioning state of the resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// SecurityGroup - NetworkSecurityGroup resource
type SecurityGroup struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags                           map[string]string `json:"tags,omitempty"`
	*SecurityGroupPropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (sg SecurityGroup) Response() *http.Response {
	return sg.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (sg SecurityGroup) StatusCode() int {
	return sg.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (sg SecurityGroup) Status() string {
	return sg.rawResponse.Status
}

// SecurityGroupListResult - Response for ListNetworkSecurityGroups Api service call
type SecurityGroupListResult struct {
	rawResponse *http.Response
	// Value - Gets List of NetworkSecurityGroups
	Value []SecurityGroup `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (sglr SecurityGroupListResult) Response() *http.Response {
	return sglr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (sglr SecurityGroupListResult) StatusCode() int {
	return sglr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (sglr SecurityGroupListResult) Status() string {
	return sglr.rawResponse.Status
}

// SecurityGroupPropertiesFormat - Network Security Group resource
type SecurityGroupPropertiesFormat struct {
	// SecurityRules - Gets or sets security rules of network security group
	SecurityRules []SecurityRule `json:"securityRules,omitempty"`
	// DefaultSecurityRules - Gets or default security rules of network security group
	DefaultSecurityRules []SecurityRule `json:"defaultSecurityRules,omitempty"`
	// NetworkInterfaces - Gets collection of references to Network Interfaces
	NetworkInterfaces []Interface `json:"networkInterfaces,omitempty"`
	// Subnets - Gets collection of references to subnets
	Subnets []Subnet `json:"subnets,omitempty"`
	// ResourceGUID - Gets or sets resource guid property of the network security group resource
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// SecurityRule - Network security rule
type SecurityRule struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID                            *string `json:"id,omitempty"`
	*SecurityRulePropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (sr SecurityRule) Response() *http.Response {
	return sr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (sr SecurityRule) StatusCode() int {
	return sr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (sr SecurityRule) Status() string {
	return sr.rawResponse.Status
}

// SecurityRuleListResult - Response for ListSecurityRule Api service callRetrieves all security rules that belongs to
// a network security group
type SecurityRuleListResult struct {
	rawResponse *http.Response
	// Value - Gets security rules in a network security group
	Value []SecurityRule `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (srlr SecurityRuleListResult) Response() *http.Response {
	return srlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (srlr SecurityRuleListResult) StatusCode() int {
	return srlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (srlr SecurityRuleListResult) Status() string {
	return srlr.rawResponse.Status
}

// SecurityRulePropertiesFormat ...
type SecurityRulePropertiesFormat struct {
	// Description - Gets or sets a description for this rule. Restricted to 140 chars.
	Description *string `json:"description,omitempty"`
	// Protocol - Gets or sets Network protocol this rule applies to. Can be Tcp, Udp or All(*). Possible values include: 'TCP', 'UDP', 'Asterisk', 'None'
	Protocol SecurityRuleProtocolType `json:"protocol,omitempty"`
	// SourcePortRange - Gets or sets Source Port or Range. Integer or range between 0 and 65535. Asterix '*' can also be used to match all ports.
	SourcePortRange *string `json:"sourcePortRange,omitempty"`
	// DestinationPortRange - Gets or sets Destination Port or Range. Integer or range between 0 and 65535. Asterix '*' can also be used to match all ports.
	DestinationPortRange *string `json:"destinationPortRange,omitempty"`
	// SourceAddressPrefix - Gets or sets source address prefix. CIDR or source IP range. Asterix '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from.
	SourceAddressPrefix string `json:"sourceAddressPrefix,omitempty"`
	// DestinationAddressPrefix - Gets or sets destination address prefix. CIDR or source IP range. Asterix '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.
	DestinationAddressPrefix string `json:"destinationAddressPrefix,omitempty"`
	// Access - Gets or sets network traffic is allowed or denied. Possible values are 'Allow' and 'Deny'. Possible values include: 'Allow', 'Deny', 'None'
	Access SecurityRuleAccessType `json:"access,omitempty"`
	// Priority - Gets or sets the priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
	Priority *int32 `json:"priority,omitempty"`
	// Direction - Gets or sets the direction of the rule.InBound or Outbound. The direction specifies if rule will be evaluated on incoming or outcoming traffic. Possible values include: 'Inbound', 'Outbound', 'None'
	Direction SecurityRuleDirectionType `json:"direction,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// Subnet - Subnet in a VirtualNework resource
type Subnet struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID                      *string `json:"id,omitempty"`
	*SubnetPropertiesFormat `json:"properties,omitempty"`
	// Name - Gets or sets the name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (s Subnet) Response() *http.Response {
	return s.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (s Subnet) StatusCode() int {
	return s.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (s Subnet) Status() string {
	return s.rawResponse.Status
}

// SubnetListResult - Response for ListSubnets Api service callRetrieves all subnet that belongs to a virtual network
type SubnetListResult struct {
	rawResponse *http.Response
	// Value - Gets the subnets in a virtual network
	Value []Subnet `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (slr SubnetListResult) Response() *http.Response {
	return slr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (slr SubnetListResult) StatusCode() int {
	return slr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (slr SubnetListResult) Status() string {
	return slr.rawResponse.Status
}

// SubnetPropertiesFormat ...
type SubnetPropertiesFormat struct {
	// AddressPrefix - Gets or sets Address prefix for the subnet.
	AddressPrefix *string `json:"addressPrefix,omitempty"`
	// NetworkSecurityGroup - Gets or sets the reference of the NetworkSecurityGroup resource
	NetworkSecurityGroup *SecurityGroup `json:"networkSecurityGroup,omitempty"`
	// RouteTable - Gets or sets the reference of the RouteTable resource
	RouteTable *RouteTable `json:"routeTable,omitempty"`
	// IPConfigurations - Gets array of references to the network interface IP configurations using subnet
	IPConfigurations []IPConfiguration `json:"ipConfigurations,omitempty"`
	// ResourceNavigationLinks - Gets array of references to the external resources using subnet
	ResourceNavigationLinks []ResourceNavigationLink `json:"resourceNavigationLinks,omitempty"`
	// ProvisioningState - Gets provisioning state of the resource
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// SubResource ...
type SubResource struct {
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
}

// Usage - Describes Network Resource Usage.
type Usage struct {
	// Unit - Gets or sets an enum describing the unit of measurement.
	Unit string `json:"unit,omitempty"`
	// CurrentValue - Gets or sets the current value of the usage.
	CurrentValue int64 `json:"currentValue,omitempty"`
	// Limit - Gets or sets the limit of usage.
	Limit int64 `json:"limit,omitempty"`
	// Name - Gets or sets the name of the type of usage.
	Name UsageName `json:"name,omitempty"`
}

// UsageName - The Usage Names.
type UsageName struct {
	// Value - Gets or sets a string describing the resource name.
	Value *string `json:"value,omitempty"`
	// LocalizedValue - Gets or sets a localized string describing the resource name.
	LocalizedValue *string `json:"localizedValue,omitempty"`
}

// UsagesListResult - The List Usages operation response.
type UsagesListResult struct {
	rawResponse *http.Response
	// Value - Gets or sets the list Network Resource Usages.
	Value []Usage `json:"value,omitempty"`
	// NextLink - URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (ulr UsagesListResult) Response() *http.Response {
	return ulr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ulr UsagesListResult) StatusCode() int {
	return ulr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ulr UsagesListResult) Status() string {
	return ulr.rawResponse.Status
}

// VirtualNetwork - Virtual Network resource
type VirtualNetwork struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags                            map[string]string `json:"tags,omitempty"`
	*VirtualNetworkPropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (vn VirtualNetwork) Response() *http.Response {
	return vn.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vn VirtualNetwork) StatusCode() int {
	return vn.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vn VirtualNetwork) Status() string {
	return vn.rawResponse.Status
}

// VirtualNetworkGateway - A common class for general resource information
type VirtualNetworkGateway struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags                                   map[string]string `json:"tags,omitempty"`
	*VirtualNetworkGatewayPropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (vng VirtualNetworkGateway) Response() *http.Response {
	return vng.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vng VirtualNetworkGateway) StatusCode() int {
	return vng.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vng VirtualNetworkGateway) Status() string {
	return vng.rawResponse.Status
}

// VirtualNetworkGatewayConnection - A common class for general resource information
type VirtualNetworkGatewayConnection struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Name - Resource name
	Name *string `json:"name,omitempty"`
	// Type - Resource type
	Type *string `json:"type,omitempty"`
	// Location - Resource location
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags
	Tags                                             map[string]string `json:"tags,omitempty"`
	*VirtualNetworkGatewayConnectionPropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (vngc VirtualNetworkGatewayConnection) Response() *http.Response {
	return vngc.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vngc VirtualNetworkGatewayConnection) StatusCode() int {
	return vngc.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vngc VirtualNetworkGatewayConnection) Status() string {
	return vngc.rawResponse.Status
}

// VirtualNetworkGatewayConnectionListResult - Response for ListVirtualNetworkGatewayConnections Api service call
type VirtualNetworkGatewayConnectionListResult struct {
	rawResponse *http.Response
	// Value - Gets List of VirtualNetworkGatewayConnections that exists in a resource group
	Value []VirtualNetworkGatewayConnection `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (vngclr VirtualNetworkGatewayConnectionListResult) Response() *http.Response {
	return vngclr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vngclr VirtualNetworkGatewayConnectionListResult) StatusCode() int {
	return vngclr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vngclr VirtualNetworkGatewayConnectionListResult) Status() string {
	return vngclr.rawResponse.Status
}

// VirtualNetworkGatewayConnectionPropertiesFormat - VirtualNetworkGatewayConnection properties
type VirtualNetworkGatewayConnectionPropertiesFormat struct {
	// AuthorizationKey - The authorizationKey.
	AuthorizationKey       *string                `json:"authorizationKey,omitempty"`
	VirtualNetworkGateway1 *VirtualNetworkGateway `json:"virtualNetworkGateway1,omitempty"`
	VirtualNetworkGateway2 *VirtualNetworkGateway `json:"virtualNetworkGateway2,omitempty"`
	LocalNetworkGateway2   *LocalNetworkGateway   `json:"localNetworkGateway2,omitempty"`
	// ConnectionType - Gateway connection type -Ipsec/Dedicated/VpnClient/Vnet2Vnet. Possible values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient', 'None'
	ConnectionType VirtualNetworkGatewayConnectionType `json:"connectionType,omitempty"`
	// RoutingWeight - The Routing weight.
	RoutingWeight *int32 `json:"routingWeight,omitempty"`
	// SharedKey - The Ipsec share key.
	SharedKey *string `json:"sharedKey,omitempty"`
	// ConnectionStatus - Virtual network Gateway connection status. Possible values include: 'Unknown', 'Connecting', 'Connected', 'NotConnected', 'None'
	ConnectionStatus VirtualNetworkGatewayConnectionStatusType `json:"connectionStatus,omitempty"`
	// EgressBytesTransferred - The Egress Bytes Transferred in this connection
	EgressBytesTransferred *int64 `json:"egressBytesTransferred,omitempty"`
	// IngressBytesTransferred - The Ingress Bytes Transferred in this connection
	IngressBytesTransferred *int64 `json:"ingressBytesTransferred,omitempty"`
	// Peer - The reference to peerings resource.
	Peer *SubResource `json:"peer,omitempty"`
	// EnableBgp - EnableBgp Flag
	EnableBgp *bool `json:"enableBgp,omitempty"`
	// ResourceGUID - Gets or sets resource guid property of the VirtualNetworkGatewayConnection resource
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - Gets provisioning state of the VirtualNetworkGatewayConnection resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// VirtualNetworkGatewayIPConfiguration - IpConfiguration for Virtual network gateway
type VirtualNetworkGatewayIPConfiguration struct {
	// ID - Resource Id
	ID                                                    *string `json:"id,omitempty"`
	*VirtualNetworkGatewayIPConfigurationPropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// VirtualNetworkGatewayIPConfigurationPropertiesFormat - Properties of VirtualNetworkGatewayIPConfiguration
type VirtualNetworkGatewayIPConfigurationPropertiesFormat struct {
	// PrivateIPAllocationMethod - Gets or sets PrivateIP allocation method. Possible values include: 'Static', 'Dynamic', 'None'
	PrivateIPAllocationMethod IPAllocationMethodType `json:"privateIPAllocationMethod,omitempty"`
	// Subnet - Gets or sets the reference of the subnet resource
	Subnet *SubResource `json:"subnet,omitempty"`
	// PublicIPAddress - Gets or sets the reference of the PublicIP resource
	PublicIPAddress *SubResource `json:"publicIPAddress,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// VirtualNetworkGatewayListResult - Response for ListVirtualNetworkGateways Api service call
type VirtualNetworkGatewayListResult struct {
	rawResponse *http.Response
	// Value - Gets List of VirtualNetworkGateways that exists in a resource group
	Value []VirtualNetworkGateway `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (vnglr VirtualNetworkGatewayListResult) Response() *http.Response {
	return vnglr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vnglr VirtualNetworkGatewayListResult) StatusCode() int {
	return vnglr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vnglr VirtualNetworkGatewayListResult) Status() string {
	return vnglr.rawResponse.Status
}

// VirtualNetworkGatewayPropertiesFormat - VirtualNetworkGateway properties
type VirtualNetworkGatewayPropertiesFormat struct {
	// IPConfigurations - IpConfigurations for Virtual network gateway.
	IPConfigurations []VirtualNetworkGatewayIPConfiguration `json:"ipConfigurations,omitempty"`
	// GatewayType - The type of this virtual network gateway. Possible values include: 'Vpn', 'ExpressRoute', 'None'
	GatewayType VirtualNetworkGatewayType `json:"gatewayType,omitempty"`
	// VpnType - The type of this virtual network gateway. Possible values include: 'PolicyBased', 'RouteBased', 'None'
	VpnType VpnType `json:"vpnType,omitempty"`
	// EnableBgp - EnableBgp Flag
	EnableBgp *bool `json:"enableBgp,omitempty"`
	// ActiveActive - ActiveActive flag
	ActiveActive *bool `json:"activeActive,omitempty"`
	// GatewayDefaultSite - Gets or sets the reference of the LocalNetworkGateway resource which represents Local network site having default routes. Assign Null value in case of removing existing default site setting.
	GatewayDefaultSite *SubResource `json:"gatewayDefaultSite,omitempty"`
	// Sku - Gets or sets the reference of the VirtualNetworkGatewaySku resource which represents the sku selected for Virtual network gateway.
	Sku *VirtualNetworkGatewaySku `json:"sku,omitempty"`
	// VpnClientConfiguration - Gets or sets the reference of the VpnClientConfiguration resource which represents the P2S VpnClient configurations.
	VpnClientConfiguration *VpnClientConfiguration `json:"vpnClientConfiguration,omitempty"`
	// BgpSettings - Virtual network gateway's BGP speaker settings
	BgpSettings *BgpSettings `json:"bgpSettings,omitempty"`
	// ResourceGUID - Gets or sets resource guid property of the VirtualNetworkGateway resource
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - Gets provisioning state of the VirtualNetworkGateway resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// VirtualNetworkGatewaySku - VirtualNetworkGatewaySku details
type VirtualNetworkGatewaySku struct {
	// Name - Gateway sku name -Basic/HighPerformance/Standard/UltraPerformance. Possible values include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance', 'None'
	Name VirtualNetworkGatewaySkuNameType `json:"name,omitempty"`
	// Tier - Gateway sku tier -Basic/HighPerformance/Standard/UltraPerformance. Possible values include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance', 'None'
	Tier VirtualNetworkGatewaySkuTierType `json:"tier,omitempty"`
	// Capacity - The capacity
	Capacity *int32 `json:"capacity,omitempty"`
}

// VirtualNetworkListResult - Response for ListVirtualNetworks Api service call
type VirtualNetworkListResult struct {
	rawResponse *http.Response
	// Value - Gets list of VirtualNetworks in a resource group
	Value []VirtualNetwork `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (vnlr VirtualNetworkListResult) Response() *http.Response {
	return vnlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vnlr VirtualNetworkListResult) StatusCode() int {
	return vnlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vnlr VirtualNetworkListResult) Status() string {
	return vnlr.rawResponse.Status
}

// VirtualNetworkPeering - Peerings in a VirtualNework resource
type VirtualNetworkPeering struct {
	rawResponse *http.Response
	// ID - Resource Id
	ID                                     *string `json:"id,omitempty"`
	*VirtualNetworkPeeringPropertiesFormat `json:"properties,omitempty"`
	// Name - Gets or sets the name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (vnp VirtualNetworkPeering) Response() *http.Response {
	return vnp.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vnp VirtualNetworkPeering) StatusCode() int {
	return vnp.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vnp VirtualNetworkPeering) Status() string {
	return vnp.rawResponse.Status
}

// VirtualNetworkPeeringListResult - Response for ListSubnets Api service callRetrieves all subnet that belongs to a
// virtual network
type VirtualNetworkPeeringListResult struct {
	rawResponse *http.Response
	// Value - Gets the peerings in a virtual network
	Value []VirtualNetworkPeering `json:"value,omitempty"`
	// NextLink - Gets the URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (vnplr VirtualNetworkPeeringListResult) Response() *http.Response {
	return vnplr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vnplr VirtualNetworkPeeringListResult) StatusCode() int {
	return vnplr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vnplr VirtualNetworkPeeringListResult) Status() string {
	return vnplr.rawResponse.Status
}

// VirtualNetworkPeeringPropertiesFormat ...
type VirtualNetworkPeeringPropertiesFormat struct {
	// AllowVirtualNetworkAccess - Gets or sets whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space
	AllowVirtualNetworkAccess *bool `json:"allowVirtualNetworkAccess,omitempty"`
	// AllowForwardedTraffic - Gets or sets whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed
	AllowForwardedTraffic *bool `json:"allowForwardedTraffic,omitempty"`
	// AllowGatewayTransit - Gets or sets if gatewayLinks can be used in remote virtual network’s link to this virtual network
	AllowGatewayTransit *bool `json:"allowGatewayTransit,omitempty"`
	// UseRemoteGateways - Gets or sets if remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only 1 peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
	UseRemoteGateways *bool `json:"useRemoteGateways,omitempty"`
	// RemoteVirtualNetwork - Gets or sets the reference of the remote virtual network
	RemoteVirtualNetwork *SubResource `json:"remoteVirtualNetwork,omitempty"`
	// PeeringState - Gets the status of the virtual network peering. Possible values include: 'Initiated', 'Connected', 'Disconnected', 'None'
	PeeringState VirtualNetworkPeeringStateType `json:"peeringState,omitempty"`
	// ProvisioningState - Gets provisioning state of the resource
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// VirtualNetworkPropertiesFormat ...
type VirtualNetworkPropertiesFormat struct {
	// AddressSpace - Gets or sets AddressSpace that contains an array of IP address ranges that can be used by subnets
	AddressSpace *AddressSpace `json:"addressSpace,omitempty"`
	// DhcpOptions - Gets or sets DHCPOptions that contains an array of DNS servers available to VMs deployed in the virtual network
	DhcpOptions *DhcpOptions `json:"dhcpOptions,omitempty"`
	// Subnets - Gets or sets list of subnets in a VirtualNetwork
	Subnets []Subnet `json:"subnets,omitempty"`
	// VirtualNetworkPeerings - Gets or sets list of peerings in a VirtualNetwork
	VirtualNetworkPeerings []VirtualNetworkPeering `json:"VirtualNetworkPeerings,omitempty"`
	// ResourceGUID - Gets or sets resource guid property of the VirtualNetwork resource
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// VpnClientConfiguration - VpnClientConfiguration for P2S client
type VpnClientConfiguration struct {
	// VpnClientAddressPool - Gets or sets the reference of the Address space resource which represents Address space for P2S VpnClient.
	VpnClientAddressPool *AddressSpace `json:"vpnClientAddressPool,omitempty"`
	// VpnClientRootCertificates - VpnClientRootCertificate for Virtual network gateway.
	VpnClientRootCertificates []VpnClientRootCertificate `json:"vpnClientRootCertificates,omitempty"`
	// VpnClientRevokedCertificates - VpnClientRevokedCertificate for Virtual network gateway.
	VpnClientRevokedCertificates []VpnClientRevokedCertificate `json:"vpnClientRevokedCertificates,omitempty"`
}

// VpnClientParameters - VpnClientParameters
type VpnClientParameters struct {
	// ProcessorArchitecture - VPN client Processor Architecture -Amd64/X86. Possible values include: 'Amd64', 'X86', 'None'
	ProcessorArchitecture ProcessorArchitectureType `json:"ProcessorArchitecture,omitempty"`
}

// VpnClientRevokedCertificate - VPN client revoked certificate of virtual network gateway
type VpnClientRevokedCertificate struct {
	// ID - Resource Id
	ID                                           *string `json:"id,omitempty"`
	*VpnClientRevokedCertificatePropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// VpnClientRevokedCertificatePropertiesFormat - Properties of the revoked VPN client certificate of virtual network
// gateway
type VpnClientRevokedCertificatePropertiesFormat struct {
	// Thumbprint - Gets or sets the revoked Vpn client certificate thumbprint
	Thumbprint *string `json:"thumbprint,omitempty"`
	// ProvisioningState - Gets provisioning state of the VPN client revoked certificate resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// VpnClientRootCertificate - VPN client root certificate of virtual network gateway
type VpnClientRootCertificate struct {
	// ID - Resource Id
	ID                                        *string `json:"id,omitempty"`
	*VpnClientRootCertificatePropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated
	Etag *string `json:"etag,omitempty"`
}

// VpnClientRootCertificatePropertiesFormat - Properties of SSL certificates of application gateway
type VpnClientRootCertificatePropertiesFormat struct {
	// PublicCertData - Gets or sets the certificate public data
	PublicCertData *string `json:"publicCertData,omitempty"`
	// ProvisioningState - Gets provisioning state of the VPN client root certificate resource Updating/Deleting/Failed
	ProvisioningState *string `json:"provisioningState,omitempty"`
}
