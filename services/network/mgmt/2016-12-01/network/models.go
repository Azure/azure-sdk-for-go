package network

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"net/http"
	"reflect"
	"strings"
	"time"
)

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// concatenates a slice of const values with the specified separator between each item
func joinConst(s interface{}, sep string) string {
	v := reflect.ValueOf(s)
	if v.Kind() != reflect.Slice && v.Kind() != reflect.Array {
		panic("s wasn't a slice or array")
	}
	ss := make([]string, 0, v.Len())
	for i := 0; i < v.Len(); i++ {
		ss = append(ss, v.Index(i).String())
	}
	return strings.Join(ss, sep)
}

// AccessType enumerates the values for access.
type AccessType string

const (
	// AccessAllow ...
	AccessAllow AccessType = "Allow"
	// AccessDeny ...
	AccessDeny AccessType = "Deny"
	// AccessNone represents an empty AccessType.
	AccessNone AccessType = ""
)

// ApplicationGatewayBackendHealthServerHealthType enumerates the values for application gateway backend health server
// health.
type ApplicationGatewayBackendHealthServerHealthType string

const (
	// ApplicationGatewayBackendHealthServerHealthDown ...
	ApplicationGatewayBackendHealthServerHealthDown ApplicationGatewayBackendHealthServerHealthType = "Down"
	// ApplicationGatewayBackendHealthServerHealthNone represents an empty
	// ApplicationGatewayBackendHealthServerHealthType.
	ApplicationGatewayBackendHealthServerHealthNone ApplicationGatewayBackendHealthServerHealthType = ""
	// ApplicationGatewayBackendHealthServerHealthPartial ...
	ApplicationGatewayBackendHealthServerHealthPartial ApplicationGatewayBackendHealthServerHealthType = "Partial"
	// ApplicationGatewayBackendHealthServerHealthUnknown ...
	ApplicationGatewayBackendHealthServerHealthUnknown ApplicationGatewayBackendHealthServerHealthType = "Unknown"
	// ApplicationGatewayBackendHealthServerHealthUp ...
	ApplicationGatewayBackendHealthServerHealthUp ApplicationGatewayBackendHealthServerHealthType = "Up"
)

// ApplicationGatewayCookieBasedAffinityType enumerates the values for application gateway cookie based affinity.
type ApplicationGatewayCookieBasedAffinityType string

const (
	// ApplicationGatewayCookieBasedAffinityDisabled ...
	ApplicationGatewayCookieBasedAffinityDisabled ApplicationGatewayCookieBasedAffinityType = "Disabled"
	// ApplicationGatewayCookieBasedAffinityEnabled ...
	ApplicationGatewayCookieBasedAffinityEnabled ApplicationGatewayCookieBasedAffinityType = "Enabled"
	// ApplicationGatewayCookieBasedAffinityNone represents an empty ApplicationGatewayCookieBasedAffinityType.
	ApplicationGatewayCookieBasedAffinityNone ApplicationGatewayCookieBasedAffinityType = ""
)

// ApplicationGatewayFirewallModeType enumerates the values for application gateway firewall mode.
type ApplicationGatewayFirewallModeType string

const (
	// ApplicationGatewayFirewallModeDetection ...
	ApplicationGatewayFirewallModeDetection ApplicationGatewayFirewallModeType = "Detection"
	// ApplicationGatewayFirewallModeNone represents an empty ApplicationGatewayFirewallModeType.
	ApplicationGatewayFirewallModeNone ApplicationGatewayFirewallModeType = ""
	// ApplicationGatewayFirewallModePrevention ...
	ApplicationGatewayFirewallModePrevention ApplicationGatewayFirewallModeType = "Prevention"
)

// ApplicationGatewayOperationalStateType enumerates the values for application gateway operational state.
type ApplicationGatewayOperationalStateType string

const (
	// ApplicationGatewayOperationalStateNone represents an empty ApplicationGatewayOperationalStateType.
	ApplicationGatewayOperationalStateNone ApplicationGatewayOperationalStateType = ""
	// ApplicationGatewayOperationalStateRunning ...
	ApplicationGatewayOperationalStateRunning ApplicationGatewayOperationalStateType = "Running"
	// ApplicationGatewayOperationalStateStarting ...
	ApplicationGatewayOperationalStateStarting ApplicationGatewayOperationalStateType = "Starting"
	// ApplicationGatewayOperationalStateStopped ...
	ApplicationGatewayOperationalStateStopped ApplicationGatewayOperationalStateType = "Stopped"
	// ApplicationGatewayOperationalStateStopping ...
	ApplicationGatewayOperationalStateStopping ApplicationGatewayOperationalStateType = "Stopping"
)

// ApplicationGatewayProtocolType enumerates the values for application gateway protocol.
type ApplicationGatewayProtocolType string

const (
	// ApplicationGatewayProtocolHTTP ...
	ApplicationGatewayProtocolHTTP ApplicationGatewayProtocolType = "Http"
	// ApplicationGatewayProtocolHTTPS ...
	ApplicationGatewayProtocolHTTPS ApplicationGatewayProtocolType = "Https"
	// ApplicationGatewayProtocolNone represents an empty ApplicationGatewayProtocolType.
	ApplicationGatewayProtocolNone ApplicationGatewayProtocolType = ""
)

// ApplicationGatewayRequestRoutingRuleType enumerates the values for application gateway request routing rule type.
type ApplicationGatewayRequestRoutingRuleType string

const (
	// ApplicationGatewayRequestRoutingRuleBasic ...
	ApplicationGatewayRequestRoutingRuleBasic ApplicationGatewayRequestRoutingRuleType = "Basic"
	// ApplicationGatewayRequestRoutingRuleNone represents an empty ApplicationGatewayRequestRoutingRuleType.
	ApplicationGatewayRequestRoutingRuleNone ApplicationGatewayRequestRoutingRuleType = ""
	// ApplicationGatewayRequestRoutingRulePathBasedRouting ...
	ApplicationGatewayRequestRoutingRulePathBasedRouting ApplicationGatewayRequestRoutingRuleType = "PathBasedRouting"
)

// ApplicationGatewaySkuNameType enumerates the values for application gateway sku name.
type ApplicationGatewaySkuNameType string

const (
	// ApplicationGatewaySkuNameNone represents an empty ApplicationGatewaySkuNameType.
	ApplicationGatewaySkuNameNone ApplicationGatewaySkuNameType = ""
	// ApplicationGatewaySkuNameStandardLarge ...
	ApplicationGatewaySkuNameStandardLarge ApplicationGatewaySkuNameType = "Standard_Large"
	// ApplicationGatewaySkuNameStandardMedium ...
	ApplicationGatewaySkuNameStandardMedium ApplicationGatewaySkuNameType = "Standard_Medium"
	// ApplicationGatewaySkuNameStandardSmall ...
	ApplicationGatewaySkuNameStandardSmall ApplicationGatewaySkuNameType = "Standard_Small"
	// ApplicationGatewaySkuNameWAFLarge ...
	ApplicationGatewaySkuNameWAFLarge ApplicationGatewaySkuNameType = "WAF_Large"
	// ApplicationGatewaySkuNameWAFMedium ...
	ApplicationGatewaySkuNameWAFMedium ApplicationGatewaySkuNameType = "WAF_Medium"
)

// ApplicationGatewaySslProtocolType enumerates the values for application gateway ssl protocol.
type ApplicationGatewaySslProtocolType string

const (
	// ApplicationGatewaySslProtocolNone represents an empty ApplicationGatewaySslProtocolType.
	ApplicationGatewaySslProtocolNone ApplicationGatewaySslProtocolType = ""
	// ApplicationGatewaySslProtocolTLSv10 ...
	ApplicationGatewaySslProtocolTLSv10 ApplicationGatewaySslProtocolType = "TLSv1_0"
	// ApplicationGatewaySslProtocolTLSv11 ...
	ApplicationGatewaySslProtocolTLSv11 ApplicationGatewaySslProtocolType = "TLSv1_1"
	// ApplicationGatewaySslProtocolTLSv12 ...
	ApplicationGatewaySslProtocolTLSv12 ApplicationGatewaySslProtocolType = "TLSv1_2"
)

// ApplicationGatewayTierType enumerates the values for application gateway tier.
type ApplicationGatewayTierType string

const (
	// ApplicationGatewayTierNone represents an empty ApplicationGatewayTierType.
	ApplicationGatewayTierNone ApplicationGatewayTierType = ""
	// ApplicationGatewayTierStandard ...
	ApplicationGatewayTierStandard ApplicationGatewayTierType = "Standard"
	// ApplicationGatewayTierWAF ...
	ApplicationGatewayTierWAF ApplicationGatewayTierType = "WAF"
)

// AssociationType enumerates the values for association type.
type AssociationType string

const (
	// AssociationAssociated ...
	AssociationAssociated AssociationType = "Associated"
	// AssociationContains ...
	AssociationContains AssociationType = "Contains"
	// AssociationNone represents an empty AssociationType.
	AssociationNone AssociationType = ""
)

// AuthorizationUseStatusType enumerates the values for authorization use status.
type AuthorizationUseStatusType string

const (
	// AuthorizationUseStatusAvailable ...
	AuthorizationUseStatusAvailable AuthorizationUseStatusType = "Available"
	// AuthorizationUseStatusInUse ...
	AuthorizationUseStatusInUse AuthorizationUseStatusType = "InUse"
	// AuthorizationUseStatusNone represents an empty AuthorizationUseStatusType.
	AuthorizationUseStatusNone AuthorizationUseStatusType = ""
)

// BgpPeerStateType enumerates the values for bgp peer state.
type BgpPeerStateType string

const (
	// BgpPeerStateConnected ...
	BgpPeerStateConnected BgpPeerStateType = "Connected"
	// BgpPeerStateConnecting ...
	BgpPeerStateConnecting BgpPeerStateType = "Connecting"
	// BgpPeerStateIdle ...
	BgpPeerStateIdle BgpPeerStateType = "Idle"
	// BgpPeerStateNone represents an empty BgpPeerStateType.
	BgpPeerStateNone BgpPeerStateType = ""
	// BgpPeerStateStopped ...
	BgpPeerStateStopped BgpPeerStateType = "Stopped"
	// BgpPeerStateUnknown ...
	BgpPeerStateUnknown BgpPeerStateType = "Unknown"
)

// DirectionType enumerates the values for direction.
type DirectionType string

const (
	// DirectionInbound ...
	DirectionInbound DirectionType = "Inbound"
	// DirectionNone represents an empty DirectionType.
	DirectionNone DirectionType = ""
	// DirectionOutbound ...
	DirectionOutbound DirectionType = "Outbound"
)

// EffectiveRouteSourceType enumerates the values for effective route source.
type EffectiveRouteSourceType string

const (
	// EffectiveRouteSourceDefault ...
	EffectiveRouteSourceDefault EffectiveRouteSourceType = "Default"
	// EffectiveRouteSourceNone represents an empty EffectiveRouteSourceType.
	EffectiveRouteSourceNone EffectiveRouteSourceType = ""
	// EffectiveRouteSourceUnknown ...
	EffectiveRouteSourceUnknown EffectiveRouteSourceType = "Unknown"
	// EffectiveRouteSourceUser ...
	EffectiveRouteSourceUser EffectiveRouteSourceType = "User"
	// EffectiveRouteSourceVirtualNetworkGateway ...
	EffectiveRouteSourceVirtualNetworkGateway EffectiveRouteSourceType = "VirtualNetworkGateway"
)

// EffectiveRouteStateType enumerates the values for effective route state.
type EffectiveRouteStateType string

const (
	// EffectiveRouteStateActive ...
	EffectiveRouteStateActive EffectiveRouteStateType = "Active"
	// EffectiveRouteStateInvalid ...
	EffectiveRouteStateInvalid EffectiveRouteStateType = "Invalid"
	// EffectiveRouteStateNone represents an empty EffectiveRouteStateType.
	EffectiveRouteStateNone EffectiveRouteStateType = ""
)

// ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType enumerates the values for express route circuit peering
// advertised public prefix state.
type ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType string

const (
	// ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfigured ...
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfigured ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType = "Configured"
	// ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfiguring ...
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfiguring ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType = "Configuring"
	// ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateNone represents an empty
	// ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType.
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateNone ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType = ""
	// ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateNotConfigured ...
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateNotConfigured ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType = "NotConfigured"
	// ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValidationNeeded ...
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValidationNeeded ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType = "ValidationNeeded"
)

// ExpressRouteCircuitPeeringStateType enumerates the values for express route circuit peering state.
type ExpressRouteCircuitPeeringStateType string

const (
	// ExpressRouteCircuitPeeringStateDisabled ...
	ExpressRouteCircuitPeeringStateDisabled ExpressRouteCircuitPeeringStateType = "Disabled"
	// ExpressRouteCircuitPeeringStateEnabled ...
	ExpressRouteCircuitPeeringStateEnabled ExpressRouteCircuitPeeringStateType = "Enabled"
	// ExpressRouteCircuitPeeringStateNone represents an empty ExpressRouteCircuitPeeringStateType.
	ExpressRouteCircuitPeeringStateNone ExpressRouteCircuitPeeringStateType = ""
)

// ExpressRouteCircuitPeeringType enumerates the values for express route circuit peering type.
type ExpressRouteCircuitPeeringType string

const (
	// ExpressRouteCircuitPeeringAzurePrivatePeering ...
	ExpressRouteCircuitPeeringAzurePrivatePeering ExpressRouteCircuitPeeringType = "AzurePrivatePeering"
	// ExpressRouteCircuitPeeringAzurePublicPeering ...
	ExpressRouteCircuitPeeringAzurePublicPeering ExpressRouteCircuitPeeringType = "AzurePublicPeering"
	// ExpressRouteCircuitPeeringMicrosoftPeering ...
	ExpressRouteCircuitPeeringMicrosoftPeering ExpressRouteCircuitPeeringType = "MicrosoftPeering"
	// ExpressRouteCircuitPeeringNone represents an empty ExpressRouteCircuitPeeringType.
	ExpressRouteCircuitPeeringNone ExpressRouteCircuitPeeringType = ""
)

// ExpressRouteCircuitSkuFamilyType enumerates the values for express route circuit sku family.
type ExpressRouteCircuitSkuFamilyType string

const (
	// ExpressRouteCircuitSkuFamilyMeteredData ...
	ExpressRouteCircuitSkuFamilyMeteredData ExpressRouteCircuitSkuFamilyType = "MeteredData"
	// ExpressRouteCircuitSkuFamilyNone represents an empty ExpressRouteCircuitSkuFamilyType.
	ExpressRouteCircuitSkuFamilyNone ExpressRouteCircuitSkuFamilyType = ""
	// ExpressRouteCircuitSkuFamilyUnlimitedData ...
	ExpressRouteCircuitSkuFamilyUnlimitedData ExpressRouteCircuitSkuFamilyType = "UnlimitedData"
)

// ExpressRouteCircuitSkuTierType enumerates the values for express route circuit sku tier.
type ExpressRouteCircuitSkuTierType string

const (
	// ExpressRouteCircuitSkuTierNone represents an empty ExpressRouteCircuitSkuTierType.
	ExpressRouteCircuitSkuTierNone ExpressRouteCircuitSkuTierType = ""
	// ExpressRouteCircuitSkuTierPremium ...
	ExpressRouteCircuitSkuTierPremium ExpressRouteCircuitSkuTierType = "Premium"
	// ExpressRouteCircuitSkuTierStandard ...
	ExpressRouteCircuitSkuTierStandard ExpressRouteCircuitSkuTierType = "Standard"
)

// IPAllocationMethodType enumerates the values for ip allocation method.
type IPAllocationMethodType string

const (
	// IPAllocationMethodDynamic ...
	IPAllocationMethodDynamic IPAllocationMethodType = "Dynamic"
	// IPAllocationMethodNone represents an empty IPAllocationMethodType.
	IPAllocationMethodNone IPAllocationMethodType = ""
	// IPAllocationMethodStatic ...
	IPAllocationMethodStatic IPAllocationMethodType = "Static"
)

// IPVersionType enumerates the values for ip version.
type IPVersionType string

const (
	// IPVersionIPv4 ...
	IPVersionIPv4 IPVersionType = "IPv4"
	// IPVersionIPv6 ...
	IPVersionIPv6 IPVersionType = "IPv6"
	// IPVersionNone represents an empty IPVersionType.
	IPVersionNone IPVersionType = ""
)

// LoadDistributionType enumerates the values for load distribution.
type LoadDistributionType string

const (
	// LoadDistributionDefault ...
	LoadDistributionDefault LoadDistributionType = "Default"
	// LoadDistributionNone represents an empty LoadDistributionType.
	LoadDistributionNone LoadDistributionType = ""
	// LoadDistributionSourceIP ...
	LoadDistributionSourceIP LoadDistributionType = "SourceIP"
	// LoadDistributionSourceIPProtocol ...
	LoadDistributionSourceIPProtocol LoadDistributionType = "SourceIPProtocol"
)

// NextHopType enumerates the values for next hop type.
type NextHopType string

const (
	// NextHopHyperNetGateway ...
	NextHopHyperNetGateway NextHopType = "HyperNetGateway"
	// NextHopInternet ...
	NextHopInternet NextHopType = "Internet"
	// NextHopNone ...
	NextHopNone NextHopType = "None"
	// NextHopNone represents an empty NextHopType.
	NextHopNone NextHopType = ""
	// NextHopVirtualAppliance ...
	NextHopVirtualAppliance NextHopType = "VirtualAppliance"
	// NextHopVirtualNetworkGateway ...
	NextHopVirtualNetworkGateway NextHopType = "VirtualNetworkGateway"
	// NextHopVnetLocal ...
	NextHopVnetLocal NextHopType = "VnetLocal"
)

// OperationStatusType enumerates the values for operation status type.
type OperationStatusType string

const (
	// OperationStatusFailed ...
	OperationStatusFailed OperationStatusType = "Failed"
	// OperationStatusInProgress ...
	OperationStatusInProgress OperationStatusType = "InProgress"
	// OperationStatusNone represents an empty OperationStatusType.
	OperationStatusNone OperationStatusType = ""
	// OperationStatusSucceeded ...
	OperationStatusSucceeded OperationStatusType = "Succeeded"
)

// PcErrorType enumerates the values for pc error.
type PcErrorType string

const (
	// PcErrorAgentStopped ...
	PcErrorAgentStopped PcErrorType = "AgentStopped"
	// PcErrorCaptureFailed ...
	PcErrorCaptureFailed PcErrorType = "CaptureFailed"
	// PcErrorInternalError ...
	PcErrorInternalError PcErrorType = "InternalError"
	// PcErrorLocalFileFailed ...
	PcErrorLocalFileFailed PcErrorType = "LocalFileFailed"
	// PcErrorNone represents an empty PcErrorType.
	PcErrorNone PcErrorType = ""
	// PcErrorStorageFailed ...
	PcErrorStorageFailed PcErrorType = "StorageFailed"
)

// PcProtocolType enumerates the values for pc protocol.
type PcProtocolType string

const (
	// PcProtocolAny ...
	PcProtocolAny PcProtocolType = "Any"
	// PcProtocolNone represents an empty PcProtocolType.
	PcProtocolNone PcProtocolType = ""
	// PcProtocolTCP ...
	PcProtocolTCP PcProtocolType = "TCP"
	// PcProtocolUDP ...
	PcProtocolUDP PcProtocolType = "UDP"
)

// PcStatusType enumerates the values for pc status.
type PcStatusType string

const (
	// PcStatusError ...
	PcStatusError PcStatusType = "Error"
	// PcStatusNone represents an empty PcStatusType.
	PcStatusNone PcStatusType = ""
	// PcStatusNotStarted ...
	PcStatusNotStarted PcStatusType = "NotStarted"
	// PcStatusRunning ...
	PcStatusRunning PcStatusType = "Running"
	// PcStatusStopped ...
	PcStatusStopped PcStatusType = "Stopped"
	// PcStatusUnknown ...
	PcStatusUnknown PcStatusType = "Unknown"
)

// ProbeProtocolType enumerates the values for probe protocol.
type ProbeProtocolType string

const (
	// ProbeProtocolHTTP ...
	ProbeProtocolHTTP ProbeProtocolType = "Http"
	// ProbeProtocolNone represents an empty ProbeProtocolType.
	ProbeProtocolNone ProbeProtocolType = ""
	// ProbeProtocolTCP ...
	ProbeProtocolTCP ProbeProtocolType = "Tcp"
)

// ProcessorArchitectureType enumerates the values for processor architecture.
type ProcessorArchitectureType string

const (
	// ProcessorArchitectureAmd64 ...
	ProcessorArchitectureAmd64 ProcessorArchitectureType = "Amd64"
	// ProcessorArchitectureNone represents an empty ProcessorArchitectureType.
	ProcessorArchitectureNone ProcessorArchitectureType = ""
	// ProcessorArchitectureX86 ...
	ProcessorArchitectureX86 ProcessorArchitectureType = "X86"
)

// ProtocolType enumerates the values for protocol.
type ProtocolType string

const (
	// ProtocolNone represents an empty ProtocolType.
	ProtocolNone ProtocolType = ""
	// ProtocolTCP ...
	ProtocolTCP ProtocolType = "TCP"
	// ProtocolUDP ...
	ProtocolUDP ProtocolType = "UDP"
)

// ProvisioningStateType enumerates the values for provisioning state.
type ProvisioningStateType string

const (
	// ProvisioningStateDeleting ...
	ProvisioningStateDeleting ProvisioningStateType = "Deleting"
	// ProvisioningStateFailed ...
	ProvisioningStateFailed ProvisioningStateType = "Failed"
	// ProvisioningStateNone represents an empty ProvisioningStateType.
	ProvisioningStateNone ProvisioningStateType = ""
	// ProvisioningStateSucceeded ...
	ProvisioningStateSucceeded ProvisioningStateType = "Succeeded"
	// ProvisioningStateUpdating ...
	ProvisioningStateUpdating ProvisioningStateType = "Updating"
)

// RouteNextHopType enumerates the values for route next hop type.
type RouteNextHopType string

const (
	// RouteNextHopInternet ...
	RouteNextHopInternet RouteNextHopType = "Internet"
	// RouteNextHopNone ...
	RouteNextHopNone RouteNextHopType = "None"
	// RouteNextHopNone represents an empty RouteNextHopType.
	RouteNextHopNone RouteNextHopType = ""
	// RouteNextHopVirtualAppliance ...
	RouteNextHopVirtualAppliance RouteNextHopType = "VirtualAppliance"
	// RouteNextHopVirtualNetworkGateway ...
	RouteNextHopVirtualNetworkGateway RouteNextHopType = "VirtualNetworkGateway"
	// RouteNextHopVnetLocal ...
	RouteNextHopVnetLocal RouteNextHopType = "VnetLocal"
)

// SecurityRuleAccessType enumerates the values for security rule access.
type SecurityRuleAccessType string

const (
	// SecurityRuleAccessAllow ...
	SecurityRuleAccessAllow SecurityRuleAccessType = "Allow"
	// SecurityRuleAccessDeny ...
	SecurityRuleAccessDeny SecurityRuleAccessType = "Deny"
	// SecurityRuleAccessNone represents an empty SecurityRuleAccessType.
	SecurityRuleAccessNone SecurityRuleAccessType = ""
)

// SecurityRuleDirectionType enumerates the values for security rule direction.
type SecurityRuleDirectionType string

const (
	// SecurityRuleDirectionInbound ...
	SecurityRuleDirectionInbound SecurityRuleDirectionType = "Inbound"
	// SecurityRuleDirectionNone represents an empty SecurityRuleDirectionType.
	SecurityRuleDirectionNone SecurityRuleDirectionType = ""
	// SecurityRuleDirectionOutbound ...
	SecurityRuleDirectionOutbound SecurityRuleDirectionType = "Outbound"
)

// SecurityRuleProtocolType enumerates the values for security rule protocol.
type SecurityRuleProtocolType string

const (
	// SecurityRuleProtocolAsterisk ...
	SecurityRuleProtocolAsterisk SecurityRuleProtocolType = "*"
	// SecurityRuleProtocolNone represents an empty SecurityRuleProtocolType.
	SecurityRuleProtocolNone SecurityRuleProtocolType = ""
	// SecurityRuleProtocolTCP ...
	SecurityRuleProtocolTCP SecurityRuleProtocolType = "Tcp"
	// SecurityRuleProtocolUDP ...
	SecurityRuleProtocolUDP SecurityRuleProtocolType = "Udp"
)

// ServiceProviderProvisioningStateType enumerates the values for service provider provisioning state.
type ServiceProviderProvisioningStateType string

const (
	// ServiceProviderProvisioningStateDeprovisioning ...
	ServiceProviderProvisioningStateDeprovisioning ServiceProviderProvisioningStateType = "Deprovisioning"
	// ServiceProviderProvisioningStateNone represents an empty ServiceProviderProvisioningStateType.
	ServiceProviderProvisioningStateNone ServiceProviderProvisioningStateType = ""
	// ServiceProviderProvisioningStateNotProvisioned ...
	ServiceProviderProvisioningStateNotProvisioned ServiceProviderProvisioningStateType = "NotProvisioned"
	// ServiceProviderProvisioningStateProvisioned ...
	ServiceProviderProvisioningStateProvisioned ServiceProviderProvisioningStateType = "Provisioned"
	// ServiceProviderProvisioningStateProvisioning ...
	ServiceProviderProvisioningStateProvisioning ServiceProviderProvisioningStateType = "Provisioning"
)

// TransportProtocolType enumerates the values for transport protocol.
type TransportProtocolType string

const (
	// TransportProtocolNone represents an empty TransportProtocolType.
	TransportProtocolNone TransportProtocolType = ""
	// TransportProtocolTCP ...
	TransportProtocolTCP TransportProtocolType = "Tcp"
	// TransportProtocolUDP ...
	TransportProtocolUDP TransportProtocolType = "Udp"
)

// VirtualNetworkGatewayConnectionStatusType enumerates the values for virtual network gateway connection status.
type VirtualNetworkGatewayConnectionStatusType string

const (
	// VirtualNetworkGatewayConnectionStatusConnected ...
	VirtualNetworkGatewayConnectionStatusConnected VirtualNetworkGatewayConnectionStatusType = "Connected"
	// VirtualNetworkGatewayConnectionStatusConnecting ...
	VirtualNetworkGatewayConnectionStatusConnecting VirtualNetworkGatewayConnectionStatusType = "Connecting"
	// VirtualNetworkGatewayConnectionStatusNone represents an empty VirtualNetworkGatewayConnectionStatusType.
	VirtualNetworkGatewayConnectionStatusNone VirtualNetworkGatewayConnectionStatusType = ""
	// VirtualNetworkGatewayConnectionStatusNotConnected ...
	VirtualNetworkGatewayConnectionStatusNotConnected VirtualNetworkGatewayConnectionStatusType = "NotConnected"
	// VirtualNetworkGatewayConnectionStatusUnknown ...
	VirtualNetworkGatewayConnectionStatusUnknown VirtualNetworkGatewayConnectionStatusType = "Unknown"
)

// VirtualNetworkGatewayConnectionType enumerates the values for virtual network gateway connection type.
type VirtualNetworkGatewayConnectionType string

const (
	// VirtualNetworkGatewayConnectionExpressRoute ...
	VirtualNetworkGatewayConnectionExpressRoute VirtualNetworkGatewayConnectionType = "ExpressRoute"
	// VirtualNetworkGatewayConnectionIPsec ...
	VirtualNetworkGatewayConnectionIPsec VirtualNetworkGatewayConnectionType = "IPsec"
	// VirtualNetworkGatewayConnectionNone represents an empty VirtualNetworkGatewayConnectionType.
	VirtualNetworkGatewayConnectionNone VirtualNetworkGatewayConnectionType = ""
	// VirtualNetworkGatewayConnectionVnet2Vnet ...
	VirtualNetworkGatewayConnectionVnet2Vnet VirtualNetworkGatewayConnectionType = "Vnet2Vnet"
	// VirtualNetworkGatewayConnectionVPNClient ...
	VirtualNetworkGatewayConnectionVPNClient VirtualNetworkGatewayConnectionType = "VPNClient"
)

// VirtualNetworkGatewaySkuNameType enumerates the values for virtual network gateway sku name.
type VirtualNetworkGatewaySkuNameType string

const (
	// VirtualNetworkGatewaySkuNameBasic ...
	VirtualNetworkGatewaySkuNameBasic VirtualNetworkGatewaySkuNameType = "Basic"
	// VirtualNetworkGatewaySkuNameHighPerformance ...
	VirtualNetworkGatewaySkuNameHighPerformance VirtualNetworkGatewaySkuNameType = "HighPerformance"
	// VirtualNetworkGatewaySkuNameNone represents an empty VirtualNetworkGatewaySkuNameType.
	VirtualNetworkGatewaySkuNameNone VirtualNetworkGatewaySkuNameType = ""
	// VirtualNetworkGatewaySkuNameStandard ...
	VirtualNetworkGatewaySkuNameStandard VirtualNetworkGatewaySkuNameType = "Standard"
	// VirtualNetworkGatewaySkuNameUltraPerformance ...
	VirtualNetworkGatewaySkuNameUltraPerformance VirtualNetworkGatewaySkuNameType = "UltraPerformance"
)

// VirtualNetworkGatewaySkuTierType enumerates the values for virtual network gateway sku tier.
type VirtualNetworkGatewaySkuTierType string

const (
	// VirtualNetworkGatewaySkuTierBasic ...
	VirtualNetworkGatewaySkuTierBasic VirtualNetworkGatewaySkuTierType = "Basic"
	// VirtualNetworkGatewaySkuTierHighPerformance ...
	VirtualNetworkGatewaySkuTierHighPerformance VirtualNetworkGatewaySkuTierType = "HighPerformance"
	// VirtualNetworkGatewaySkuTierNone represents an empty VirtualNetworkGatewaySkuTierType.
	VirtualNetworkGatewaySkuTierNone VirtualNetworkGatewaySkuTierType = ""
	// VirtualNetworkGatewaySkuTierStandard ...
	VirtualNetworkGatewaySkuTierStandard VirtualNetworkGatewaySkuTierType = "Standard"
	// VirtualNetworkGatewaySkuTierUltraPerformance ...
	VirtualNetworkGatewaySkuTierUltraPerformance VirtualNetworkGatewaySkuTierType = "UltraPerformance"
)

// VirtualNetworkGatewayType enumerates the values for virtual network gateway type.
type VirtualNetworkGatewayType string

const (
	// VirtualNetworkGatewayExpressRoute ...
	VirtualNetworkGatewayExpressRoute VirtualNetworkGatewayType = "ExpressRoute"
	// VirtualNetworkGatewayNone represents an empty VirtualNetworkGatewayType.
	VirtualNetworkGatewayNone VirtualNetworkGatewayType = ""
	// VirtualNetworkGatewayVpn ...
	VirtualNetworkGatewayVpn VirtualNetworkGatewayType = "Vpn"
)

// VirtualNetworkPeeringStateType enumerates the values for virtual network peering state.
type VirtualNetworkPeeringStateType string

const (
	// VirtualNetworkPeeringStateConnected ...
	VirtualNetworkPeeringStateConnected VirtualNetworkPeeringStateType = "Connected"
	// VirtualNetworkPeeringStateDisconnected ...
	VirtualNetworkPeeringStateDisconnected VirtualNetworkPeeringStateType = "Disconnected"
	// VirtualNetworkPeeringStateInitiated ...
	VirtualNetworkPeeringStateInitiated VirtualNetworkPeeringStateType = "Initiated"
	// VirtualNetworkPeeringStateNone represents an empty VirtualNetworkPeeringStateType.
	VirtualNetworkPeeringStateNone VirtualNetworkPeeringStateType = ""
)

// VpnType enumerates the values for vpn type.
type VpnType string

const (
	// VpnNone represents an empty VpnType.
	VpnNone VpnType = ""
	// VpnPolicyBased ...
	VpnPolicyBased VpnType = "PolicyBased"
	// VpnRouteBased ...
	VpnRouteBased VpnType = "RouteBased"
)

// AddressSpace - AddressSpace contains an array of IP address ranges that can be used by subnets of the virtual
// network.
type AddressSpace struct {
	// AddressPrefixes - A list of address blocks reserved for this virtual network in CIDR notation.
	AddressPrefixes []string `json:"addressPrefixes,omitempty"`
}

// ApplicationGateway - Application gateway resource
type ApplicationGateway struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags                                map[string]string `json:"tags,omitempty"`
	*ApplicationGatewayPropertiesFormat `json:"properties,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (ag ApplicationGateway) Response() *http.Response {
	return ag.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ag ApplicationGateway) StatusCode() int {
	return ag.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ag ApplicationGateway) Status() string {
	return ag.rawResponse.Status
}

// ApplicationGatewayAuthenticationCertificate - Authentication certificates of an application gateway.
type ApplicationGatewayAuthenticationCertificate struct {
	// ID - Resource ID.
	ID                                                           *string `json:"id,omitempty"`
	*ApplicationGatewayAuthenticationCertificatePropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayAuthenticationCertificatePropertiesFormat - Authentication certificates properties of an
// application gateway.
type ApplicationGatewayAuthenticationCertificatePropertiesFormat struct {
	// Data - Certificate public data.
	Data *string `json:"data,omitempty"`
	// ProvisioningState - Provisioning state of the authentication certificate resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayBackendAddress - Backend address of an application gateway.
type ApplicationGatewayBackendAddress struct {
	// Fqdn - Fully qualified domain name (FQDN).
	Fqdn *string `json:"fqdn,omitempty"`
	// IPAddress - IP address
	IPAddress *string `json:"ipAddress,omitempty"`
}

// ApplicationGatewayBackendAddressPool - Backend Address Pool of an application gateway.
type ApplicationGatewayBackendAddressPool struct {
	// ID - Resource ID.
	ID                                                    *string `json:"id,omitempty"`
	*ApplicationGatewayBackendAddressPoolPropertiesFormat `json:"properties,omitempty"`
	// Name - Resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayBackendAddressPoolPropertiesFormat - Properties of Backend Address Pool of an application gateway.
type ApplicationGatewayBackendAddressPoolPropertiesFormat struct {
	// BackendIPConfigurations - Collection of references to IPs defined in network interfaces.
	BackendIPConfigurations []InterfaceIPConfiguration `json:"backendIPConfigurations,omitempty"`
	// BackendAddresses - Backend addresses
	BackendAddresses []ApplicationGatewayBackendAddress `json:"backendAddresses,omitempty"`
	// ProvisioningState - Provisioning state of the backend address pool resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayBackendHealth - List of ApplicationGatewayBackendHealthPool resources.
type ApplicationGatewayBackendHealth struct {
	rawResponse         *http.Response
	BackendAddressPools []ApplicationGatewayBackendHealthPool `json:"backendAddressPools,omitempty"`
}

// Response returns the raw HTTP response object.
func (agbh ApplicationGatewayBackendHealth) Response() *http.Response {
	return agbh.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (agbh ApplicationGatewayBackendHealth) StatusCode() int {
	return agbh.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (agbh ApplicationGatewayBackendHealth) Status() string {
	return agbh.rawResponse.Status
}

// ApplicationGatewayBackendHealthHTTPSettings - Application gateway BackendHealthHttp settings.
type ApplicationGatewayBackendHealthHTTPSettings struct {
	// BackendHTTPSettings - Reference of an ApplicationGatewayBackendHttpSettings resource.
	BackendHTTPSettings *ApplicationGatewayBackendHTTPSettings `json:"backendHttpSettings,omitempty"`
	// Servers - List of ApplicationGatewayBackendHealthServer resources.
	Servers []ApplicationGatewayBackendHealthServer `json:"servers,omitempty"`
}

// ApplicationGatewayBackendHealthPool - Application gateway BackendHealth pool.
type ApplicationGatewayBackendHealthPool struct {
	// BackendAddressPool - Reference of an ApplicationGatewayBackendAddressPool resource.
	BackendAddressPool *ApplicationGatewayBackendAddressPool `json:"backendAddressPool,omitempty"`
	// BackendHTTPSettingsCollection - List of ApplicationGatewayBackendHealthHttpSettings resources.
	BackendHTTPSettingsCollection []ApplicationGatewayBackendHealthHTTPSettings `json:"backendHttpSettingsCollection,omitempty"`
}

// ApplicationGatewayBackendHealthServer - Application gateway backendhealth http settings.
type ApplicationGatewayBackendHealthServer struct {
	// Address - IP address or FQDN of backend server.
	Address *string `json:"address,omitempty"`
	// IPConfiguration - Reference of IP configuration of backend server.
	IPConfiguration *SubResource `json:"ipConfiguration,omitempty"`
	// Health - Health of backend server. Possible values are: 'Unknown', 'Up', 'Down', and 'Partial'. Possible values include: 'Unknown', 'Up', 'Down', 'Partial', 'None'
	Health ApplicationGatewayBackendHealthServerHealthType `json:"health,omitempty"`
}

// ApplicationGatewayBackendHTTPSettings - Backend address pool settings of an application gateway.
type ApplicationGatewayBackendHTTPSettings struct {
	// ID - Resource ID.
	ID                                                     *string `json:"id,omitempty"`
	*ApplicationGatewayBackendHTTPSettingsPropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayBackendHTTPSettingsPropertiesFormat - Properties of Backend address pool settings of an
// application gateway.
type ApplicationGatewayBackendHTTPSettingsPropertiesFormat struct {
	// Port - Port
	Port *int32 `json:"port,omitempty"`
	// Protocol - Protocol. Possible values are: 'Http' and 'Https'. Possible values include: 'HTTP', 'HTTPS', 'None'
	Protocol ApplicationGatewayProtocolType `json:"protocol,omitempty"`
	// CookieBasedAffinity - Cookie based affinity. Possible values are: 'Enabled' and 'Disabled'. Possible values include: 'Enabled', 'Disabled', 'None'
	CookieBasedAffinity ApplicationGatewayCookieBasedAffinityType `json:"cookieBasedAffinity,omitempty"`
	// RequestTimeout - Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
	RequestTimeout *int32 `json:"requestTimeout,omitempty"`
	// Probe - Probe resource of an application gateway.
	Probe *SubResource `json:"probe,omitempty"`
	// AuthenticationCertificates - Array of references to application gateway authentication certificates.
	AuthenticationCertificates []SubResource `json:"authenticationCertificates,omitempty"`
	// ProvisioningState - Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
	// ConnectionDraining - Connection draining of the backend http settings resource.
	ConnectionDraining *ApplicationGatewayConnectionDraining `json:"connectionDraining,omitempty"`
}

// ApplicationGatewayConnectionDraining - Connection draining allows open connections to a backend server to be active
// for a specified time after the backend server got removed from the configuration.
type ApplicationGatewayConnectionDraining struct {
	// Enabled - Whether connection draining is enabled or not.
	Enabled bool `json:"enabled,omitempty"`
	// DrainTimeoutInSec - The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.
	DrainTimeoutInSec int32 `json:"drainTimeoutInSec,omitempty"`
}

// ApplicationGatewayFrontendIPConfiguration - Frontend IP configuration of an application gateway.
type ApplicationGatewayFrontendIPConfiguration struct {
	// ID - Resource ID.
	ID                                                         *string `json:"id,omitempty"`
	*ApplicationGatewayFrontendIPConfigurationPropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayFrontendIPConfigurationPropertiesFormat - Properties of Frontend IP configuration of an
// application gateway.
type ApplicationGatewayFrontendIPConfigurationPropertiesFormat struct {
	// PrivateIPAddress - PrivateIPAddress of the network interface IP Configuration.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
	// PrivateIPAllocationMethod - PrivateIP allocation method. Possible values are: 'Static' and 'Dynamic'. Possible values include: 'Static', 'Dynamic', 'None'
	PrivateIPAllocationMethod IPAllocationMethodType `json:"privateIPAllocationMethod,omitempty"`
	// Subnet - Reference of the subnet resource.
	Subnet *SubResource `json:"subnet,omitempty"`
	// PublicIPAddress - Reference of the PublicIP resource.
	PublicIPAddress *SubResource `json:"publicIPAddress,omitempty"`
	// ProvisioningState - Provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayFrontendPort - Frontend port of an application gateway.
type ApplicationGatewayFrontendPort struct {
	// ID - Resource ID.
	ID                                              *string `json:"id,omitempty"`
	*ApplicationGatewayFrontendPortPropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayFrontendPortPropertiesFormat - Properties of Frontend port of an application gateway.
type ApplicationGatewayFrontendPortPropertiesFormat struct {
	// Port - Frontend port
	Port *int32 `json:"port,omitempty"`
	// ProvisioningState - Provisioning state of the frontend port resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayHTTPListener - Http listener of an application gateway.
type ApplicationGatewayHTTPListener struct {
	// ID - Resource ID.
	ID                                              *string `json:"id,omitempty"`
	*ApplicationGatewayHTTPListenerPropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayHTTPListenerPropertiesFormat - Properties of HTTP listener of an application gateway.
type ApplicationGatewayHTTPListenerPropertiesFormat struct {
	// FrontendIPConfiguration - Frontend IP configuration resource of an application gateway.
	FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`
	// FrontendPort - Frontend port resource of an application gateway.
	FrontendPort *SubResource `json:"frontendPort,omitempty"`
	// Protocol - Protocol. Possible values are: 'Http' and 'Https'. Possible values include: 'HTTP', 'HTTPS', 'None'
	Protocol ApplicationGatewayProtocolType `json:"protocol,omitempty"`
	// HostName - Host name of HTTP listener.
	HostName *string `json:"hostName,omitempty"`
	// SslCertificate - SSL certificate resource of an application gateway.
	SslCertificate *SubResource `json:"sslCertificate,omitempty"`
	// RequireServerNameIndication - Applicable only if protocol is https. Enables SNI for multi-hosting.
	RequireServerNameIndication *bool `json:"requireServerNameIndication,omitempty"`
	// ProvisioningState - Provisioning state of the HTTP listener resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayIPConfiguration - IP configuration of an application gateway. Currently 1 public and 1 private IP
// configuration is allowed.
type ApplicationGatewayIPConfiguration struct {
	// ID - Resource ID.
	ID                                                 *string `json:"id,omitempty"`
	*ApplicationGatewayIPConfigurationPropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayIPConfigurationPropertiesFormat - Properties of IP configuration of an application gateway.
type ApplicationGatewayIPConfigurationPropertiesFormat struct {
	// Subnet - Reference of the subnet resource. A subnet from where application gateway gets its private address.
	Subnet *SubResource `json:"subnet,omitempty"`
	// ProvisioningState - Provisioning state of the application gateway subnet resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayListResult - Response for ListApplicationGateways API service call.
type ApplicationGatewayListResult struct {
	rawResponse *http.Response
	// Value - List of an application gateways in a resource group.
	Value []ApplicationGateway `json:"value,omitempty"`
	// NextLink - URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (aglr ApplicationGatewayListResult) Response() *http.Response {
	return aglr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (aglr ApplicationGatewayListResult) StatusCode() int {
	return aglr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (aglr ApplicationGatewayListResult) Status() string {
	return aglr.rawResponse.Status
}

// ApplicationGatewayPathRule - Path rule of URL path map of an application gateway.
type ApplicationGatewayPathRule struct {
	// ID - Resource ID.
	ID                                          *string `json:"id,omitempty"`
	*ApplicationGatewayPathRulePropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayPathRulePropertiesFormat - Properties of probe of an application gateway.
type ApplicationGatewayPathRulePropertiesFormat struct {
	// Paths - Path rules of URL path map.
	Paths []string `json:"paths,omitempty"`
	// BackendAddressPool - Backend address pool resource of URL path map.
	BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`
	// BackendHTTPSettings - Backend http settings resource of URL path map.
	BackendHTTPSettings *SubResource `json:"backendHttpSettings,omitempty"`
	// ProvisioningState - Path rule of URL path map resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayProbe - Probe of the application gateway.
type ApplicationGatewayProbe struct {
	// ID - Resource ID.
	ID                                       *string `json:"id,omitempty"`
	*ApplicationGatewayProbePropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayProbePropertiesFormat - Properties of probe of an application gateway.
type ApplicationGatewayProbePropertiesFormat struct {
	// Protocol - Protocol. Possible values are: 'Http' and 'Https'. Possible values include: 'HTTP', 'HTTPS', 'None'
	Protocol ApplicationGatewayProtocolType `json:"protocol,omitempty"`
	// Host - Host name to send the probe to.
	Host *string `json:"host,omitempty"`
	// Path - Relative path of probe. Valid path starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>
	Path *string `json:"path,omitempty"`
	// Interval - The probing interval in seconds. This is the time interval between two consecutive probes. Acceptable values are from 1 second to 86400 seconds.
	Interval *int32 `json:"interval,omitempty"`
	// Timeout - the probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
	Timeout *int32 `json:"timeout,omitempty"`
	// UnhealthyThreshold - The probe retry count. Backend server is marked down after consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second to 20.
	UnhealthyThreshold *int32 `json:"unhealthyThreshold,omitempty"`
	// ProvisioningState - Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayPropertiesFormat - Properties of the application gateway.
type ApplicationGatewayPropertiesFormat struct {
	// Sku - SKU of the application gateway resource.
	Sku *ApplicationGatewaySku `json:"sku,omitempty"`
	// SslPolicy - SSL policy of the application gateway resource.
	SslPolicy *ApplicationGatewaySslPolicy `json:"sslPolicy,omitempty"`
	// OperationalState - Operational state of the application gateway resource. Possible values are: 'Stopped', 'Started', 'Running', and 'Stopping'. Possible values include: 'Stopped', 'Starting', 'Running', 'Stopping', 'None'
	OperationalState ApplicationGatewayOperationalStateType `json:"operationalState,omitempty"`
	// GatewayIPConfigurations - Subnets of application the gateway resource.
	GatewayIPConfigurations []ApplicationGatewayIPConfiguration `json:"gatewayIPConfigurations,omitempty"`
	// AuthenticationCertificates - Authentication certificates of the application gateway resource.
	AuthenticationCertificates []ApplicationGatewayAuthenticationCertificate `json:"authenticationCertificates,omitempty"`
	// SslCertificates - SSL certificates of the application gateway resource.
	SslCertificates []ApplicationGatewaySslCertificate `json:"sslCertificates,omitempty"`
	// FrontendIPConfigurations - Frontend IP addresses of the application gateway resource.
	FrontendIPConfigurations []ApplicationGatewayFrontendIPConfiguration `json:"frontendIPConfigurations,omitempty"`
	// FrontendPorts - Frontend ports of the application gateway resource.
	FrontendPorts []ApplicationGatewayFrontendPort `json:"frontendPorts,omitempty"`
	// Probes - Probes of the application gateway resource.
	Probes []ApplicationGatewayProbe `json:"probes,omitempty"`
	// BackendAddressPools - Backend address pool of the application gateway resource.
	BackendAddressPools []ApplicationGatewayBackendAddressPool `json:"backendAddressPools,omitempty"`
	// BackendHTTPSettingsCollection - Backend http settings of the application gateway resource.
	BackendHTTPSettingsCollection []ApplicationGatewayBackendHTTPSettings `json:"backendHttpSettingsCollection,omitempty"`
	// HTTPListeners - Http listeners of the application gateway resource.
	HTTPListeners []ApplicationGatewayHTTPListener `json:"httpListeners,omitempty"`
	// URLPathMaps - URL path map of the application gateway resource.
	URLPathMaps []ApplicationGatewayURLPathMap `json:"urlPathMaps,omitempty"`
	// RequestRoutingRules - Request routing rules of the application gateway resource.
	RequestRoutingRules []ApplicationGatewayRequestRoutingRule `json:"requestRoutingRules,omitempty"`
	// WebApplicationFirewallConfiguration - Web application firewall configuration.
	WebApplicationFirewallConfiguration *ApplicationGatewayWebApplicationFirewallConfiguration `json:"webApplicationFirewallConfiguration,omitempty"`
	// ResourceGUID - Resource GUID property of the application gateway resource.
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - Provisioning state of the application gateway resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayRequestRoutingRule - Request routing rule of an application gateway.
type ApplicationGatewayRequestRoutingRule struct {
	// ID - Resource ID.
	ID                                                    *string `json:"id,omitempty"`
	*ApplicationGatewayRequestRoutingRulePropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayRequestRoutingRulePropertiesFormat - Properties of request routing rule of the application
// gateway.
type ApplicationGatewayRequestRoutingRulePropertiesFormat struct {
	// RuleType - Rule type. Possible values are: 'Basic' and 'PathBasedRouting'. Possible values include: 'Basic', 'PathBasedRouting', 'None'
	RuleType ApplicationGatewayRequestRoutingRuleType `json:"ruleType,omitempty"`
	// BackendAddressPool - Backend address pool resource of the application gateway.
	BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`
	// BackendHTTPSettings - Frontend port resource of the application gateway.
	BackendHTTPSettings *SubResource `json:"backendHttpSettings,omitempty"`
	// HTTPListener - Http listener resource of the application gateway.
	HTTPListener *SubResource `json:"httpListener,omitempty"`
	// URLPathMap - URL path map resource of the application gateway.
	URLPathMap *SubResource `json:"urlPathMap,omitempty"`
	// ProvisioningState - Provisioning state of the request routing rule resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewaySku - SKU of an application gateway
type ApplicationGatewaySku struct {
	// Name - Name of an application gateway SKU. Possible values are: 'Standard_Small', 'Standard_Medium', 'Standard_Large', 'WAF_Medium', and 'WAF_Large'. Possible values include: 'StandardSmall', 'StandardMedium', 'StandardLarge', 'WAFMedium', 'WAFLarge', 'None'
	Name ApplicationGatewaySkuNameType `json:"name,omitempty"`
	// Tier - Tier of an application gateway. Possible values are: 'Standard' and 'WAF'. Possible values include: 'Standard', 'WAF', 'None'
	Tier ApplicationGatewayTierType `json:"tier,omitempty"`
	// Capacity - Capacity (instance count) of an application gateway.
	Capacity *int32 `json:"capacity,omitempty"`
}

// ApplicationGatewaySslCertificate - SSL certificates of an application gateway.
type ApplicationGatewaySslCertificate struct {
	// ID - Resource ID.
	ID                                                *string `json:"id,omitempty"`
	*ApplicationGatewaySslCertificatePropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewaySslCertificatePropertiesFormat - Properties of SSL certificates of an application gateway.
type ApplicationGatewaySslCertificatePropertiesFormat struct {
	// Data - Base-64 encoded pfx certificate. Only applicable in PUT Request.
	Data *string `json:"data,omitempty"`
	// Password - Password for the pfx file specified in data. Only applicable in PUT request.
	Password *string `json:"password,omitempty"`
	// PublicCertData - Base-64 encoded Public cert data corresponding to pfx specified in data. Only applicable in GET request.
	PublicCertData *string `json:"publicCertData,omitempty"`
	// ProvisioningState - Provisioning state of the SSL certificate resource Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewaySslPolicy - Application gateway SSL policy.
type ApplicationGatewaySslPolicy struct {
	// DisabledSslProtocols - SSL protocols to be disabled on application gateway. Possible values are: 'TLSv1_0', 'TLSv1_1', and 'TLSv1_2'.
	DisabledSslProtocols []ApplicationGatewaySslProtocolType `json:"disabledSslProtocols,omitempty"`
}

// ApplicationGatewayURLPathMap - UrlPathMaps give a url path to the backend mapping information for PathBasedRouting.
type ApplicationGatewayURLPathMap struct {
	// ID - Resource ID.
	ID                                            *string `json:"id,omitempty"`
	*ApplicationGatewayURLPathMapPropertiesFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// ApplicationGatewayURLPathMapPropertiesFormat - Properties of UrlPathMap of the application gateway.
type ApplicationGatewayURLPathMapPropertiesFormat struct {
	// DefaultBackendAddressPool - Default backend address pool resource of URL path map.
	DefaultBackendAddressPool *SubResource `json:"defaultBackendAddressPool,omitempty"`
	// DefaultBackendHTTPSettings - Default backend http settings resource of URL path map.
	DefaultBackendHTTPSettings *SubResource `json:"defaultBackendHttpSettings,omitempty"`
	// PathRules - Path rule of URL path map resource.
	PathRules []ApplicationGatewayPathRule `json:"pathRules,omitempty"`
	// ProvisioningState - Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationGatewayWebApplicationFirewallConfiguration - Application gateway web application firewall configuration.
type ApplicationGatewayWebApplicationFirewallConfiguration struct {
	// Enabled - Whether the web application firewall is enabled or not.
	Enabled bool `json:"enabled,omitempty"`
	// FirewallMode - Web application firewall mode. Possible values are: 'Detection' and 'Prevention'. Possible values include: 'Detection', 'Prevention', 'None'
	FirewallMode ApplicationGatewayFirewallModeType `json:"firewallMode,omitempty"`
}

// AuthorizationListResult - Response for ListAuthorizations API service call retrieves all authorizations that belongs
// to an ExpressRouteCircuit.
type AuthorizationListResult struct {
	rawResponse *http.Response
	// Value - The authorizations in an ExpressRoute Circuit.
	Value []ExpressRouteCircuitAuthorization `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (alr AuthorizationListResult) Response() *http.Response {
	return alr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (alr AuthorizationListResult) StatusCode() int {
	return alr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (alr AuthorizationListResult) Status() string {
	return alr.rawResponse.Status
}

// AuthorizationPropertiesFormat ...
type AuthorizationPropertiesFormat struct {
	// AuthorizationKey - The authorization key.
	AuthorizationKey *string `json:"authorizationKey,omitempty"`
	// AuthorizationUseStatus - AuthorizationUseStatus. Possible values are: 'Available' and 'InUse'. Possible values include: 'Available', 'InUse', 'None'
	AuthorizationUseStatus AuthorizationUseStatusType `json:"authorizationUseStatus,omitempty"`
	// ProvisioningState - Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// AzureAsyncOperationResult - The response body contains the status of the specified asynchronous operation,
// indicating whether it has succeeded, is in progress, or has failed. Note that this status is distinct from the HTTP
// status code returned for the Get Operation Status operation itself. If the asynchronous operation succeeded, the
// response body includes the HTTP status code for the successful request. If the asynchronous operation failed, the
// response body includes the HTTP status code for the failed request and error information regarding the failure.
type AzureAsyncOperationResult struct {
	// Status - Status of the Azure async operation. Possible values are: 'InProgress', 'Succeeded', and 'Failed'. Possible values include: 'InProgress', 'Succeeded', 'Failed', 'None'
	Status OperationStatusType `json:"status,omitempty"`
	Error  *Error              `json:"error,omitempty"`
}

// BackendAddressPool - Pool of backend IP addresses.
type BackendAddressPool struct {
	// ID - Resource ID.
	ID                                  *string `json:"id,omitempty"`
	*BackendAddressPoolPropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// BackendAddressPoolPropertiesFormat - Properties of the backend address pool.
type BackendAddressPoolPropertiesFormat struct {
	// BackendIPConfigurations - Gets collection of references to IP addresses defined in network interfaces.
	BackendIPConfigurations []InterfaceIPConfiguration `json:"backendIPConfigurations,omitempty"`
	// LoadBalancingRules - Gets load balancing rules that use this backend address pool.
	LoadBalancingRules []SubResource `json:"loadBalancingRules,omitempty"`
	// OutboundNatRule - Gets outbound rules that use this backend address pool.
	OutboundNatRule *SubResource `json:"outboundNatRule,omitempty"`
	// ProvisioningState - Get provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// BGPCommunity - Contains bgp community information offered in Service Community resources.
type BGPCommunity struct {
	// ServiceSupportedRegion - The region which the service support. e.g. For O365, region is Global.
	ServiceSupportedRegion *string `json:"serviceSupportedRegion,omitempty"`
	// CommunityName - The name of the bgp community. e.g. Skype.
	CommunityName *string `json:"communityName,omitempty"`
	// CommunityValue - The value of the bgp community. For more information: https://docs.microsoft.com/en-us/azure/expressroute/expressroute-routing.
	CommunityValue *string `json:"communityValue,omitempty"`
	// CommunityPrefixes - The prefixes that the bgp community contains.
	CommunityPrefixes []string `json:"communityPrefixes,omitempty"`
}

// BgpPeerStatus ...
type BgpPeerStatus struct {
	// LocalAddress - The virtual network gateway's local address
	LocalAddress *string `json:"localAddress,omitempty"`
	// Neighbor - The remote BGP peer
	Neighbor *string `json:"neighbor,omitempty"`
	// Asn - The autonomous system number of the remote BGP peer
	Asn *int32 `json:"asn,omitempty"`
	// State - The BGP peer state. Possible values include: 'Unknown', 'Stopped', 'Idle', 'Connecting', 'Connected', 'None'
	State BgpPeerStateType `json:"state,omitempty"`
	// ConnectedDuration - For how long the peering has been up
	ConnectedDuration *string `json:"connectedDuration,omitempty"`
	// RoutesReceived - The number of routes learned from this peer
	RoutesReceived *int64 `json:"routesReceived,omitempty"`
	// MessagesSent - The number of BGP messages sent
	MessagesSent *int64 `json:"messagesSent,omitempty"`
	// MessagesReceived - The number of BGP messages received
	MessagesReceived *int32 `json:"messagesReceived,omitempty"`
}

// BgpPeerStatusListResult - Response for list BGP peer status API service call
type BgpPeerStatusListResult struct {
	rawResponse *http.Response
	// Value - List of BGP peers
	Value []BgpPeerStatus `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (bpslr BgpPeerStatusListResult) Response() *http.Response {
	return bpslr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (bpslr BgpPeerStatusListResult) StatusCode() int {
	return bpslr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (bpslr BgpPeerStatusListResult) Status() string {
	return bpslr.rawResponse.Status
}

// BgpServiceCommunity - Service Community Properties.
type BgpServiceCommunity struct {
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags                                 map[string]string `json:"tags,omitempty"`
	*BgpServiceCommunityPropertiesFormat `json:"properties,omitempty"`
}

// BgpServiceCommunityListResult - Response for the ListServiceCommunity API service call.
type BgpServiceCommunityListResult struct {
	rawResponse *http.Response
	// Value - A list of service community resources.
	Value []BgpServiceCommunity `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (bsclr BgpServiceCommunityListResult) Response() *http.Response {
	return bsclr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (bsclr BgpServiceCommunityListResult) StatusCode() int {
	return bsclr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (bsclr BgpServiceCommunityListResult) Status() string {
	return bsclr.rawResponse.Status
}

// BgpServiceCommunityPropertiesFormat - Properties of Service Community.
type BgpServiceCommunityPropertiesFormat struct {
	// ServiceName - The name of the bgp community. e.g. Skype.
	ServiceName *string `json:"serviceName,omitempty"`
	// BgpCommunities - Get a list of bgp communities.
	BgpCommunities []BGPCommunity `json:"bgpCommunities,omitempty"`
}

// BgpSettings ...
type BgpSettings struct {
	// Asn - The BGP speaker's ASN.
	Asn *int64 `json:"asn,omitempty"`
	// BgpPeeringAddress - The BGP peering address and BGP identifier of this BGP speaker.
	BgpPeeringAddress *string `json:"bgpPeeringAddress,omitempty"`
	// PeerWeight - The weight added to routes learned from this BGP speaker.
	PeerWeight *int32 `json:"peerWeight,omitempty"`
}

// ConnectionResetSharedKey ...
type ConnectionResetSharedKey struct {
	rawResponse *http.Response
	// KeyLength - The virtual network connection reset shared key length, should between 1 and 128.
	KeyLength int32 `json:"keyLength,omitempty"`
}

// Response returns the raw HTTP response object.
func (crsk ConnectionResetSharedKey) Response() *http.Response {
	return crsk.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (crsk ConnectionResetSharedKey) StatusCode() int {
	return crsk.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (crsk ConnectionResetSharedKey) Status() string {
	return crsk.rawResponse.Status
}

// ConnectionSharedKey - Response for GetConnectionSharedKey API service call
type ConnectionSharedKey struct {
	rawResponse *http.Response
	// Value - The virtual network connection shared key value.
	Value string `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (csk ConnectionSharedKey) Response() *http.Response {
	return csk.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (csk ConnectionSharedKey) StatusCode() int {
	return csk.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (csk ConnectionSharedKey) Status() string {
	return csk.rawResponse.Status
}

// DhcpOptions - DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network.
// Standard DHCP option for a subnet overrides VNET DHCP options.
type DhcpOptions struct {
	// DNSServers - The list of DNS servers IP addresses.
	DNSServers []string `json:"dnsServers,omitempty"`
}

// DNSNameAvailabilityResult - Response for the CheckDnsNameAvailability API service call.
type DNSNameAvailabilityResult struct {
	rawResponse *http.Response
	// Available - Domain availability (True/False).
	Available *bool `json:"available,omitempty"`
}

// Response returns the raw HTTP response object.
func (dnar DNSNameAvailabilityResult) Response() *http.Response {
	return dnar.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dnar DNSNameAvailabilityResult) StatusCode() int {
	return dnar.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dnar DNSNameAvailabilityResult) Status() string {
	return dnar.rawResponse.Status
}

// EffectiveNetworkSecurityGroup - Effective network security group.
type EffectiveNetworkSecurityGroup struct {
	// NetworkSecurityGroup - The ID of network security group that is applied.
	NetworkSecurityGroup *SubResource                              `json:"networkSecurityGroup,omitempty"`
	Association          *EffectiveNetworkSecurityGroupAssociation `json:"association,omitempty"`
	// EffectiveSecurityRules - A collection of effective security rules.
	EffectiveSecurityRules []EffectiveNetworkSecurityRule `json:"effectiveSecurityRules,omitempty"`
}

// EffectiveNetworkSecurityGroupAssociation - The effective network security group association.
type EffectiveNetworkSecurityGroupAssociation struct {
	// Subnet - The ID of the subnet if assigned.
	Subnet *SubResource `json:"subnet,omitempty"`
	// NetworkInterface - The ID of the network interface if assigned.
	NetworkInterface *SubResource `json:"networkInterface,omitempty"`
}

// EffectiveNetworkSecurityGroupListResult - Response for list effective network security groups API service call.
type EffectiveNetworkSecurityGroupListResult struct {
	rawResponse *http.Response
	// Value - A list of effective network security groups.
	Value []EffectiveNetworkSecurityGroup `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// Response returns the raw HTTP response object.
func (ensglr EffectiveNetworkSecurityGroupListResult) Response() *http.Response {
	return ensglr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ensglr EffectiveNetworkSecurityGroupListResult) StatusCode() int {
	return ensglr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ensglr EffectiveNetworkSecurityGroupListResult) Status() string {
	return ensglr.rawResponse.Status
}

// EffectiveNetworkSecurityRule - Effective network security rules.
type EffectiveNetworkSecurityRule struct {
	// Name - The name of the security rule specified by the user (if created by the user).
	Name *string `json:"name,omitempty"`
	// Protocol - The network protocol this rule applies to. Possible values are: 'Tcp', 'Udp', and '*'. Possible values include: 'TCP', 'UDP', 'Asterisk', 'None'
	Protocol SecurityRuleProtocolType `json:"protocol,omitempty"`
	// SourcePortRange - The source port or range.
	SourcePortRange *string `json:"sourcePortRange,omitempty"`
	// DestinationPortRange - The destination port or range.
	DestinationPortRange *string `json:"destinationPortRange,omitempty"`
	// SourceAddressPrefix - The source address prefix.
	SourceAddressPrefix *string `json:"sourceAddressPrefix,omitempty"`
	// DestinationAddressPrefix - The destination address prefix.
	DestinationAddressPrefix *string `json:"destinationAddressPrefix,omitempty"`
	// ExpandedSourceAddressPrefix - The expanded source address prefix.
	ExpandedSourceAddressPrefix []string `json:"expandedSourceAddressPrefix,omitempty"`
	// ExpandedDestinationAddressPrefix - Expanded destination address prefix.
	ExpandedDestinationAddressPrefix []string `json:"expandedDestinationAddressPrefix,omitempty"`
	// Access - Whether network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'. Possible values include: 'Allow', 'Deny', 'None'
	Access SecurityRuleAccessType `json:"access,omitempty"`
	// Priority - The priority of the rule.
	Priority *int32 `json:"priority,omitempty"`
	// Direction - The direction of the rule. Possible values are: 'Inbound and Outbound'. Possible values include: 'Inbound', 'Outbound', 'None'
	Direction SecurityRuleDirectionType `json:"direction,omitempty"`
}

// EffectiveRoute - Effective Route
type EffectiveRoute struct {
	// Name - The name of the user defined route. This is optional.
	Name *string `json:"name,omitempty"`
	// Source - Who created the route. Possible values are: 'Unknown', 'User', 'VirtualNetworkGateway', and 'Default'. Possible values include: 'Unknown', 'User', 'VirtualNetworkGateway', 'Default', 'None'
	Source EffectiveRouteSourceType `json:"source,omitempty"`
	// State - The value of effective route. Possible values are: 'Active' and 'Invalid'. Possible values include: 'Active', 'Invalid', 'None'
	State EffectiveRouteStateType `json:"state,omitempty"`
	// AddressPrefix - The address prefixes of the effective routes in CIDR notation.
	AddressPrefix []string `json:"addressPrefix,omitempty"`
	// NextHopIPAddress - The IP address of the next hop of the effective route.
	NextHopIPAddress []string `json:"nextHopIpAddress,omitempty"`
	// NextHopType - The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', 'None', 'None'
	NextHopType RouteNextHopType `json:"nextHopType,omitempty"`
}

// EffectiveRouteListResult - Response for list effective route API service call.
type EffectiveRouteListResult struct {
	rawResponse *http.Response
	// Value - A list of effective routes.
	Value []EffectiveRoute `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// Response returns the raw HTTP response object.
func (erlr EffectiveRouteListResult) Response() *http.Response {
	return erlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (erlr EffectiveRouteListResult) StatusCode() int {
	return erlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (erlr EffectiveRouteListResult) Status() string {
	return erlr.rawResponse.Status
}

// Error ...
type Error struct {
	Code       *string        `json:"code,omitempty"`
	Message    *string        `json:"message,omitempty"`
	Target     *string        `json:"target,omitempty"`
	Details    []ErrorDetails `json:"details,omitempty"`
	InnerError *string        `json:"innerError,omitempty"`
}

// ErrorDetails ...
type ErrorDetails struct {
	Code    *string `json:"code,omitempty"`
	Target  *string `json:"target,omitempty"`
	Message *string `json:"message,omitempty"`
}

// ExpressRouteCircuit - ExpressRouteCircuit resource
type ExpressRouteCircuit struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Sku - The SKU.
	Sku                                  *ExpressRouteCircuitSku `json:"sku,omitempty"`
	*ExpressRouteCircuitPropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (erc ExpressRouteCircuit) Response() *http.Response {
	return erc.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (erc ExpressRouteCircuit) StatusCode() int {
	return erc.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (erc ExpressRouteCircuit) Status() string {
	return erc.rawResponse.Status
}

// ExpressRouteCircuitArpTable - The ARP table associated with the ExpressRouteCircuit.
type ExpressRouteCircuitArpTable struct {
	// Age - Age
	Age *int32 `json:"age,omitempty"`
	// Interface - Interface
	Interface *string `json:"interface,omitempty"`
	// IPAddress - The IP address.
	IPAddress *string `json:"ipAddress,omitempty"`
	// MacAddress - The MAC address.
	MacAddress *string `json:"macAddress,omitempty"`
}

// ExpressRouteCircuitAuthorization - Authorization in an ExpressRouteCircuit resource.
type ExpressRouteCircuitAuthorization struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID                             *string `json:"id,omitempty"`
	*AuthorizationPropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (erca ExpressRouteCircuitAuthorization) Response() *http.Response {
	return erca.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (erca ExpressRouteCircuitAuthorization) StatusCode() int {
	return erca.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (erca ExpressRouteCircuitAuthorization) Status() string {
	return erca.rawResponse.Status
}

// ExpressRouteCircuitListResult - Response for ListExpressRouteCircuit API service call.
type ExpressRouteCircuitListResult struct {
	rawResponse *http.Response
	// Value - A list of ExpressRouteCircuits in a resource group.
	Value []ExpressRouteCircuit `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (erclr ExpressRouteCircuitListResult) Response() *http.Response {
	return erclr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (erclr ExpressRouteCircuitListResult) StatusCode() int {
	return erclr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (erclr ExpressRouteCircuitListResult) Status() string {
	return erclr.rawResponse.Status
}

// ExpressRouteCircuitPeering - Peering in an ExpressRouteCircuit resource.
type ExpressRouteCircuitPeering struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID                                          *string `json:"id,omitempty"`
	*ExpressRouteCircuitPeeringPropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (ercp ExpressRouteCircuitPeering) Response() *http.Response {
	return ercp.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ercp ExpressRouteCircuitPeering) StatusCode() int {
	return ercp.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ercp ExpressRouteCircuitPeering) Status() string {
	return ercp.rawResponse.Status
}

// ExpressRouteCircuitPeeringConfig - Specifies the peering configuration.
type ExpressRouteCircuitPeeringConfig struct {
	// AdvertisedPublicPrefixes - The reference of AdvertisedPublicPrefixes.
	AdvertisedPublicPrefixes []string `json:"advertisedPublicPrefixes,omitempty"`
	// AdvertisedPublicPrefixesState - AdvertisedPublicPrefixState of the Peering resource. Possible values are 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'. Possible values include: 'NotConfigured', 'Configuring', 'Configured', 'ValidationNeeded', 'None'
	AdvertisedPublicPrefixesState ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateType `json:"advertisedPublicPrefixesState,omitempty"`
	// CustomerASN - The CustomerASN of the peering.
	CustomerASN *int32 `json:"customerASN,omitempty"`
	// RoutingRegistryName - The RoutingRegistryName of the configuration.
	RoutingRegistryName *string `json:"routingRegistryName,omitempty"`
}

// ExpressRouteCircuitPeeringListResult - Response for ListPeering API service call retrieves all peerings that belong
// to an ExpressRouteCircuit.
type ExpressRouteCircuitPeeringListResult struct {
	rawResponse *http.Response
	// Value - The peerings in an express route circuit.
	Value []ExpressRouteCircuitPeering `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (ercplr ExpressRouteCircuitPeeringListResult) Response() *http.Response {
	return ercplr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ercplr ExpressRouteCircuitPeeringListResult) StatusCode() int {
	return ercplr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ercplr ExpressRouteCircuitPeeringListResult) Status() string {
	return ercplr.rawResponse.Status
}

// ExpressRouteCircuitPeeringPropertiesFormat ...
type ExpressRouteCircuitPeeringPropertiesFormat struct {
	// PeeringType - The PeeringType. Possible values are: 'AzurePublicPeering', 'AzurePrivatePeering', and 'MicrosoftPeering'. Possible values include: 'AzurePublicPeering', 'AzurePrivatePeering', 'MicrosoftPeering', 'None'
	PeeringType ExpressRouteCircuitPeeringType `json:"peeringType,omitempty"`
	// State - The state of peering. Possible values are: 'Disabled' and 'Enabled'. Possible values include: 'Disabled', 'Enabled', 'None'
	State ExpressRouteCircuitPeeringStateType `json:"state,omitempty"`
	// AzureASN - The Azure ASN.
	AzureASN *int32 `json:"azureASN,omitempty"`
	// PeerASN - The peer ASN.
	PeerASN *int32 `json:"peerASN,omitempty"`
	// PrimaryPeerAddressPrefix - The primary address prefix.
	PrimaryPeerAddressPrefix *string `json:"primaryPeerAddressPrefix,omitempty"`
	// SecondaryPeerAddressPrefix - The secondary address prefix.
	SecondaryPeerAddressPrefix *string `json:"secondaryPeerAddressPrefix,omitempty"`
	// PrimaryAzurePort - The primary port.
	PrimaryAzurePort *string `json:"primaryAzurePort,omitempty"`
	// SecondaryAzurePort - The secondary port.
	SecondaryAzurePort *string `json:"secondaryAzurePort,omitempty"`
	// SharedKey - The shared key.
	SharedKey *string `json:"sharedKey,omitempty"`
	// VlanID - The VLAN ID.
	VlanID *int32 `json:"vlanId,omitempty"`
	// MicrosoftPeeringConfig - The Microsoft peering configuration.
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringConfig `json:"microsoftPeeringConfig,omitempty"`
	// Stats - Gets peering stats.
	Stats *ExpressRouteCircuitStats `json:"stats,omitempty"`
	// ProvisioningState - Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
	// GatewayManagerEtag - The GatewayManager Etag.
	GatewayManagerEtag *string `json:"gatewayManagerEtag,omitempty"`
	// LastModifiedBy - Gets whether the provider or the customer last modified the peering.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`
	// RouteFilter - The reference of the RouteFilter resource.
	RouteFilter *RouteFilter `json:"routeFilter,omitempty"`
}

// ExpressRouteCircuitPropertiesFormat - Properties of ExpressRouteCircuit.
type ExpressRouteCircuitPropertiesFormat struct {
	// AllowClassicOperations - Allow classic operations
	AllowClassicOperations *bool `json:"allowClassicOperations,omitempty"`
	// CircuitProvisioningState - The CircuitProvisioningState state of the resource.
	CircuitProvisioningState *string `json:"circuitProvisioningState,omitempty"`
	// ServiceProviderProvisioningState - The ServiceProviderProvisioningState state of the resource. Possible values are 'NotProvisioned', 'Provisioning', 'Provisioned', and 'Deprovisioning'. Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned', 'Deprovisioning', 'None'
	ServiceProviderProvisioningState ServiceProviderProvisioningStateType `json:"serviceProviderProvisioningState,omitempty"`
	// Authorizations - The list of authorizations.
	Authorizations []ExpressRouteCircuitAuthorization `json:"authorizations,omitempty"`
	// Peerings - The list of peerings.
	Peerings []ExpressRouteCircuitPeering `json:"peerings,omitempty"`
	// ServiceKey - The ServiceKey.
	ServiceKey *string `json:"serviceKey,omitempty"`
	// ServiceProviderNotes - The ServiceProviderNotes.
	ServiceProviderNotes *string `json:"serviceProviderNotes,omitempty"`
	// ServiceProviderProperties - The ServiceProviderProperties.
	ServiceProviderProperties *ExpressRouteCircuitServiceProviderProperties `json:"serviceProviderProperties,omitempty"`
	// ProvisioningState - Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
	// GatewayManagerEtag - The GatewayManager Etag.
	GatewayManagerEtag *string `json:"gatewayManagerEtag,omitempty"`
}

// ExpressRouteCircuitRoutesTable - The routes table associated with the ExpressRouteCircuit
type ExpressRouteCircuitRoutesTable struct {
	// NetworkProperty - network
	NetworkProperty *string `json:"network,omitempty"`
	// NextHop - nextHop
	NextHop *string `json:"nextHop,omitempty"`
	// LocPrf - locPrf
	LocPrf *string `json:"locPrf,omitempty"`
	// Weight - weight.
	Weight *int32 `json:"weight,omitempty"`
	// Path - path
	Path *string `json:"path,omitempty"`
}

// ExpressRouteCircuitRoutesTableSummary - The routes table associated with the ExpressRouteCircuit.
type ExpressRouteCircuitRoutesTableSummary struct {
	// Neighbor - Neighbor
	Neighbor *string `json:"neighbor,omitempty"`
	// V - BGP version number spoken to the neighbor.
	V *int32 `json:"v,omitempty"`
	// As - Autonomous system number.
	As *int32 `json:"as,omitempty"`
	// UpDown - The length of time that the BGP session has been in the Established state, or the current status if not in the Established state.
	UpDown *string `json:"upDown,omitempty"`
	// StatePfxRcd - Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.
	StatePfxRcd *string `json:"statePfxRcd,omitempty"`
}

// ExpressRouteCircuitsArpTableListResult - Response for ListArpTable associated with the Express Route Circuits API.
type ExpressRouteCircuitsArpTableListResult struct {
	rawResponse *http.Response
	// Value - Gets list of the ARP table.
	Value []ExpressRouteCircuitArpTable `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// Response returns the raw HTTP response object.
func (ercatlr ExpressRouteCircuitsArpTableListResult) Response() *http.Response {
	return ercatlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ercatlr ExpressRouteCircuitsArpTableListResult) StatusCode() int {
	return ercatlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ercatlr ExpressRouteCircuitsArpTableListResult) Status() string {
	return ercatlr.rawResponse.Status
}

// ExpressRouteCircuitServiceProviderProperties - Contains ServiceProviderProperties in an ExpressRouteCircuit.
type ExpressRouteCircuitServiceProviderProperties struct {
	// ServiceProviderName - The serviceProviderName.
	ServiceProviderName *string `json:"serviceProviderName,omitempty"`
	// PeeringLocation - The peering location.
	PeeringLocation *string `json:"peeringLocation,omitempty"`
	// BandwidthInMbps - The BandwidthInMbps.
	BandwidthInMbps *int32 `json:"bandwidthInMbps,omitempty"`
}

// ExpressRouteCircuitSku - Contains SKU in an ExpressRouteCircuit.
type ExpressRouteCircuitSku struct {
	// Name - The name of the SKU.
	Name *string `json:"name,omitempty"`
	// Tier - The tier of the SKU. Possible values are 'Standard' and 'Premium'. Possible values include: 'Standard', 'Premium', 'None'
	Tier ExpressRouteCircuitSkuTierType `json:"tier,omitempty"`
	// Family - The family of the SKU. Possible values are: 'UnlimitedData' and 'MeteredData'. Possible values include: 'UnlimitedData', 'MeteredData', 'None'
	Family ExpressRouteCircuitSkuFamilyType `json:"family,omitempty"`
}

// ExpressRouteCircuitsRoutesTableListResult - Response for ListRoutesTable associated with the Express Route Circuits
// API.
type ExpressRouteCircuitsRoutesTableListResult struct {
	rawResponse *http.Response
	// Value - The list of routes table.
	Value []ExpressRouteCircuitRoutesTable `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// Response returns the raw HTTP response object.
func (ercrtlr ExpressRouteCircuitsRoutesTableListResult) Response() *http.Response {
	return ercrtlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ercrtlr ExpressRouteCircuitsRoutesTableListResult) StatusCode() int {
	return ercrtlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ercrtlr ExpressRouteCircuitsRoutesTableListResult) Status() string {
	return ercrtlr.rawResponse.Status
}

// ExpressRouteCircuitsRoutesTableSummaryListResult - Response for ListRoutesTable associated with the Express Route
// Circuits API.
type ExpressRouteCircuitsRoutesTableSummaryListResult struct {
	rawResponse *http.Response
	// Value - A list of the routes table.
	Value []ExpressRouteCircuitRoutesTableSummary `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// Response returns the raw HTTP response object.
func (ercrtslr ExpressRouteCircuitsRoutesTableSummaryListResult) Response() *http.Response {
	return ercrtslr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ercrtslr ExpressRouteCircuitsRoutesTableSummaryListResult) StatusCode() int {
	return ercrtslr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ercrtslr ExpressRouteCircuitsRoutesTableSummaryListResult) Status() string {
	return ercrtslr.rawResponse.Status
}

// ExpressRouteCircuitStats - Contains stats associated with the peering.
type ExpressRouteCircuitStats struct {
	rawResponse *http.Response
	// PrimarybytesIn - Gets BytesIn of the peering.
	PrimarybytesIn *int64 `json:"primarybytesIn,omitempty"`
	// PrimarybytesOut - Gets BytesOut of the peering.
	PrimarybytesOut *int64 `json:"primarybytesOut,omitempty"`
	// SecondarybytesIn - Gets BytesIn of the peering.
	SecondarybytesIn *int64 `json:"secondarybytesIn,omitempty"`
	// SecondarybytesOut - Gets BytesOut of the peering.
	SecondarybytesOut *int64 `json:"secondarybytesOut,omitempty"`
}

// Response returns the raw HTTP response object.
func (ercs ExpressRouteCircuitStats) Response() *http.Response {
	return ercs.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ercs ExpressRouteCircuitStats) StatusCode() int {
	return ercs.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ercs ExpressRouteCircuitStats) Status() string {
	return ercs.rawResponse.Status
}

// ExpressRouteServiceProvider - A ExpressRouteResourceProvider object.
type ExpressRouteServiceProvider struct {
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags                                         map[string]string `json:"tags,omitempty"`
	*ExpressRouteServiceProviderPropertiesFormat `json:"properties,omitempty"`
}

// ExpressRouteServiceProviderBandwidthsOffered - Contains bandwidths offered in ExpressRouteServiceProvider resources.
type ExpressRouteServiceProviderBandwidthsOffered struct {
	// OfferName - The OfferName.
	OfferName *string `json:"offerName,omitempty"`
	// ValueInMbps - The ValueInMbps.
	ValueInMbps *int32 `json:"valueInMbps,omitempty"`
}

// ExpressRouteServiceProviderListResult - Response for the ListExpressRouteServiceProvider API service call.
type ExpressRouteServiceProviderListResult struct {
	rawResponse *http.Response
	// Value - A list of ExpressRouteResourceProvider resources.
	Value []ExpressRouteServiceProvider `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (ersplr ExpressRouteServiceProviderListResult) Response() *http.Response {
	return ersplr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ersplr ExpressRouteServiceProviderListResult) StatusCode() int {
	return ersplr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ersplr ExpressRouteServiceProviderListResult) Status() string {
	return ersplr.rawResponse.Status
}

// ExpressRouteServiceProviderPropertiesFormat - Properties of ExpressRouteServiceProvider.
type ExpressRouteServiceProviderPropertiesFormat struct {
	// PeeringLocations - Get a list of peering locations.
	PeeringLocations []string `json:"peeringLocations,omitempty"`
	// BandwidthsOffered - Gets bandwidths offered.
	BandwidthsOffered []ExpressRouteServiceProviderBandwidthsOffered `json:"bandwidthsOffered,omitempty"`
	// ProvisioningState - Gets the provisioning state of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// FlowLogInformation - Information on the configuration of flow log.
type FlowLogInformation struct {
	rawResponse *http.Response
	// TargetResourceID - The ID of the resource to configure for flow logging.
	TargetResourceID   string `json:"targetResourceId,omitempty"`
	*FlowLogProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (fli FlowLogInformation) Response() *http.Response {
	return fli.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (fli FlowLogInformation) StatusCode() int {
	return fli.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (fli FlowLogInformation) Status() string {
	return fli.rawResponse.Status
}

// FlowLogProperties - Parameters that define the configuration of flow log.
type FlowLogProperties struct {
	// StorageID - ID of the storage account which is used to store the flow log.
	StorageID string `json:"storageId,omitempty"`
	// Enabled - Flag to enable/disable flow logging.
	Enabled         bool                       `json:"enabled,omitempty"`
	RetentionPolicy *RetentionPolicyParameters `json:"retentionPolicy,omitempty"`
}

// FlowLogStatusParameters - Parameters that define a resource to query flow log status.
type FlowLogStatusParameters struct {
	// TargetResourceID - The target resource where getting the flow logging status.
	TargetResourceID string `json:"targetResourceId,omitempty"`
}

// FrontendIPConfiguration - Frontend IP address of the load balancer.
type FrontendIPConfiguration struct {
	// ID - Resource ID.
	ID                                       *string `json:"id,omitempty"`
	*FrontendIPConfigurationPropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// FrontendIPConfigurationPropertiesFormat - Properties of Frontend IP Configuration of the load balancer.
type FrontendIPConfigurationPropertiesFormat struct {
	// InboundNatRules - Read only. Inbound rules URIs that use this frontend IP.
	InboundNatRules []SubResource `json:"inboundNatRules,omitempty"`
	// InboundNatPools - Read only. Inbound pools URIs that use this frontend IP.
	InboundNatPools []SubResource `json:"inboundNatPools,omitempty"`
	// OutboundNatRules - Read only. Outbound rules URIs that use this frontend IP.
	OutboundNatRules []SubResource `json:"outboundNatRules,omitempty"`
	// LoadBalancingRules - Gets load balancing rules URIs that use this frontend IP.
	LoadBalancingRules []SubResource `json:"loadBalancingRules,omitempty"`
	// PrivateIPAddress - The private IP address of the IP configuration.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
	// PrivateIPAllocationMethod - The Private IP allocation method. Possible values are: 'Static' and 'Dynamic'. Possible values include: 'Static', 'Dynamic', 'None'
	PrivateIPAllocationMethod IPAllocationMethodType `json:"privateIPAllocationMethod,omitempty"`
	// Subnet - The reference of the subnet resource.
	Subnet *Subnet `json:"subnet,omitempty"`
	// PublicIPAddress - The reference of the Public IP resource.
	PublicIPAddress *PublicIPAddress `json:"publicIPAddress,omitempty"`
	// ProvisioningState - Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// GatewayRoute ...
type GatewayRoute struct {
	// LocalAddress - The gateway's local address
	LocalAddress *string `json:"localAddress,omitempty"`
	// NetworkProperty - The route's network prefix
	NetworkProperty *string `json:"network,omitempty"`
	// NextHop - The route's next hop
	NextHop *string `json:"nextHop,omitempty"`
	// SourcePeer - The peer this route was learned from
	SourcePeer *string `json:"sourcePeer,omitempty"`
	// Origin - The source this route was learned from
	Origin *string `json:"origin,omitempty"`
	// AsPath - The route's AS path sequence
	AsPath *string `json:"asPath,omitempty"`
	// Weight - The route's weight
	Weight *int32 `json:"weight,omitempty"`
}

// GatewayRouteListResult - List of virtual network gateway routes
type GatewayRouteListResult struct {
	rawResponse *http.Response
	// Value - List of gateway routes
	Value []GatewayRoute `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (grlr GatewayRouteListResult) Response() *http.Response {
	return grlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (grlr GatewayRouteListResult) StatusCode() int {
	return grlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (grlr GatewayRouteListResult) Status() string {
	return grlr.rawResponse.Status
}

// GeneratevpnclientpackageResponse ...
type GeneratevpnclientpackageResponse struct {
	rawResponse *http.Response
	Value       *string `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (gr GeneratevpnclientpackageResponse) Response() *http.Response {
	return gr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gr GeneratevpnclientpackageResponse) StatusCode() int {
	return gr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gr GeneratevpnclientpackageResponse) Status() string {
	return gr.rawResponse.Status
}

// InboundNatPool - Inbound NAT pool of the load balancer.
type InboundNatPool struct {
	// ID - Resource ID.
	ID                              *string `json:"id,omitempty"`
	*InboundNatPoolPropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// InboundNatPoolPropertiesFormat - Properties of Inbound NAT pool.
type InboundNatPoolPropertiesFormat struct {
	// FrontendIPConfiguration - A reference to frontend IP addresses.
	FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`
	// Protocol - The transport protocol for the endpoint. Possible values are: 'Udp' or 'Tcp'. Possible values include: 'UDP', 'TCP', 'None'
	Protocol TransportProtocolType `json:"protocol,omitempty"`
	// FrontendPortRangeStart - The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65534.
	FrontendPortRangeStart int32 `json:"frontendPortRangeStart,omitempty"`
	// FrontendPortRangeEnd - The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65535.
	FrontendPortRangeEnd int32 `json:"frontendPortRangeEnd,omitempty"`
	// BackendPort - The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
	BackendPort int32 `json:"backendPort,omitempty"`
	// ProvisioningState - Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// InboundNatRule - Inbound NAT rule of the load balancer.
type InboundNatRule struct {
	// ID - Resource ID.
	ID                              *string `json:"id,omitempty"`
	*InboundNatRulePropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// InboundNatRulePropertiesFormat - Properties of the inbound NAT rule.
type InboundNatRulePropertiesFormat struct {
	// FrontendIPConfiguration - A reference to frontend IP addresses.
	FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`
	// BackendIPConfiguration - A reference to a private IP address defined on a network interface of a VM. Traffic sent to the frontend port of each of the frontend IP configurations is forwarded to the backed IP.
	BackendIPConfiguration *InterfaceIPConfiguration `json:"backendIPConfiguration,omitempty"`
	// Protocol - The transport protocol for the endpoint. Possible values are: 'Udp' or 'Tcp'. Possible values include: 'UDP', 'TCP', 'None'
	Protocol TransportProtocolType `json:"protocol,omitempty"`
	// FrontendPort - The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.
	FrontendPort *int32 `json:"frontendPort,omitempty"`
	// BackendPort - The port used for the internal endpoint. Acceptable values range from 1 to 65535.
	BackendPort *int32 `json:"backendPort,omitempty"`
	// IdleTimeoutInMinutes - The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
	IdleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`
	// EnableFloatingIP - Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
	EnableFloatingIP *bool `json:"enableFloatingIP,omitempty"`
	// ProvisioningState - Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// Interface - A network interface in a resource group.
type Interface struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags                       map[string]string `json:"tags,omitempty"`
	*InterfacePropertiesFormat `json:"properties,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (i Interface) Response() *http.Response {
	return i.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (i Interface) StatusCode() int {
	return i.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (i Interface) Status() string {
	return i.rawResponse.Status
}

// InterfaceAssociation - Network interface and its custom security rules.
type InterfaceAssociation struct {
	// ID - Network interface ID.
	ID *string `json:"id,omitempty"`
	// SecurityRules - Collection of custom security rules.
	SecurityRules []SecurityRule `json:"securityRules,omitempty"`
}

// InterfaceDNSSettings - DNS settings of a network interface.
type InterfaceDNSSettings struct {
	// DNSServers - List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection.
	DNSServers []string `json:"dnsServers,omitempty"`
	// AppliedDNSServers - If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers from all NICs that are part of the Availability Set. This property is what is configured on each of those VMs.
	AppliedDNSServers []string `json:"appliedDnsServers,omitempty"`
	// InternalDNSNameLabel - Relative DNS name for this NIC used for internal communications between VMs in the same virtual network.
	InternalDNSNameLabel *string `json:"internalDnsNameLabel,omitempty"`
	// InternalFqdn - Fully qualified DNS name supporting internal communications between VMs in the same virtual network.
	InternalFqdn *string `json:"internalFqdn,omitempty"`
	// InternalDomainNameSuffix - Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of the VM. This DNS name can be constructed by concatenating the VM name with the value of internalDomainNameSuffix.
	InternalDomainNameSuffix *string `json:"internalDomainNameSuffix,omitempty"`
}

// InterfaceIPConfiguration - IPConfiguration in a network interface.
type InterfaceIPConfiguration struct {
	// ID - Resource ID.
	ID                                        *string `json:"id,omitempty"`
	*InterfaceIPConfigurationPropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// InterfaceIPConfigurationPropertiesFormat - Properties of IP configuration.
type InterfaceIPConfigurationPropertiesFormat struct {
	// ApplicationGatewayBackendAddressPools - The reference of ApplicationGatewayBackendAddressPool resource.
	ApplicationGatewayBackendAddressPools []ApplicationGatewayBackendAddressPool `json:"applicationGatewayBackendAddressPools,omitempty"`
	// LoadBalancerBackendAddressPools - The reference of LoadBalancerBackendAddressPool resource.
	LoadBalancerBackendAddressPools []BackendAddressPool `json:"loadBalancerBackendAddressPools,omitempty"`
	// LoadBalancerInboundNatRules - A list of references of LoadBalancerInboundNatRules.
	LoadBalancerInboundNatRules []InboundNatRule `json:"loadBalancerInboundNatRules,omitempty"`
	PrivateIPAddress            *string          `json:"privateIPAddress,omitempty"`
	// PrivateIPAllocationMethod - Defines how a private IP address is assigned. Possible values are: 'Static' and 'Dynamic'. Possible values include: 'Static', 'Dynamic', 'None'
	PrivateIPAllocationMethod IPAllocationMethodType `json:"privateIPAllocationMethod,omitempty"`
	// PrivateIPAddressVersion - Available from Api-Version 2016-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'. Possible values include: 'IPv4', 'IPv6', 'None'
	PrivateIPAddressVersion IPVersionType `json:"privateIPAddressVersion,omitempty"`
	Subnet                  *Subnet       `json:"subnet,omitempty"`
	// Primary - Gets whether this is a primary customer address on the network interface.
	Primary           *bool            `json:"primary,omitempty"`
	PublicIPAddress   *PublicIPAddress `json:"publicIPAddress,omitempty"`
	ProvisioningState *string          `json:"provisioningState,omitempty"`
}

// InterfaceListResult - Response for the ListNetworkInterface API service call.
type InterfaceListResult struct {
	rawResponse *http.Response
	// Value - A list of network interfaces in a resource group.
	Value []Interface `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (ilr InterfaceListResult) Response() *http.Response {
	return ilr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ilr InterfaceListResult) StatusCode() int {
	return ilr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ilr InterfaceListResult) Status() string {
	return ilr.rawResponse.Status
}

// InterfacePropertiesFormat - NetworkInterface properties.
type InterfacePropertiesFormat struct {
	// VirtualMachine - The reference of a virtual machine.
	VirtualMachine *SubResource `json:"virtualMachine,omitempty"`
	// NetworkSecurityGroup - The reference of the NetworkSecurityGroup resource.
	NetworkSecurityGroup *SecurityGroup `json:"networkSecurityGroup,omitempty"`
	// IPConfigurations - A list of IPConfigurations of the network interface.
	IPConfigurations []InterfaceIPConfiguration `json:"ipConfigurations,omitempty"`
	// DNSSettings - The DNS settings in network interface.
	DNSSettings *InterfaceDNSSettings `json:"dnsSettings,omitempty"`
	// MacAddress - The MAC address of the network interface.
	MacAddress *string `json:"macAddress,omitempty"`
	// Primary - Gets whether this is a primary network interface on a virtual machine.
	Primary *bool `json:"primary,omitempty"`
	// EnableAcceleratedNetworking - If the network interface is accelerated networking enabled.
	EnableAcceleratedNetworking *bool `json:"enableAcceleratedNetworking,omitempty"`
	// EnableIPForwarding - Indicates whether IP forwarding is enabled on this network interface.
	EnableIPForwarding *bool `json:"enableIPForwarding,omitempty"`
	// ResourceGUID - The resource GUID property of the network interface resource.
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// IPAddressAvailabilityResult - Response for CheckIPAddressAvailability API service call
type IPAddressAvailabilityResult struct {
	rawResponse *http.Response
	// Available - Private IP address availability.
	Available *bool `json:"available,omitempty"`
	// AvailableIPAddresses - Contains other available private IP addresses if the asked for address is taken.
	AvailableIPAddresses []string `json:"availableIPAddresses,omitempty"`
}

// Response returns the raw HTTP response object.
func (iaar IPAddressAvailabilityResult) Response() *http.Response {
	return iaar.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (iaar IPAddressAvailabilityResult) StatusCode() int {
	return iaar.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (iaar IPAddressAvailabilityResult) Status() string {
	return iaar.rawResponse.Status
}

// IPConfiguration - IPConfiguration
type IPConfiguration struct {
	// ID - Resource ID.
	ID                               *string `json:"id,omitempty"`
	*IPConfigurationPropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// IPConfigurationPropertiesFormat - Properties of IP configuration.
type IPConfigurationPropertiesFormat struct {
	// PrivateIPAddress - The private IP address of the IP configuration.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
	// PrivateIPAllocationMethod - The private IP allocation method. Possible values are 'Static' and 'Dynamic'. Possible values include: 'Static', 'Dynamic', 'None'
	PrivateIPAllocationMethod IPAllocationMethodType `json:"privateIPAllocationMethod,omitempty"`
	// Subnet - The reference of the subnet resource.
	Subnet *Subnet `json:"subnet,omitempty"`
	// PublicIPAddress - The reference of the public IP resource.
	PublicIPAddress *PublicIPAddress `json:"publicIPAddress,omitempty"`
	// ProvisioningState - Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// LoadBalancer - LoadBalancer resource
type LoadBalancer struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags                          map[string]string `json:"tags,omitempty"`
	*LoadBalancerPropertiesFormat `json:"properties,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (lb LoadBalancer) Response() *http.Response {
	return lb.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (lb LoadBalancer) StatusCode() int {
	return lb.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (lb LoadBalancer) Status() string {
	return lb.rawResponse.Status
}

// LoadBalancerListResult - Response for ListLoadBalancers API service call.
type LoadBalancerListResult struct {
	rawResponse *http.Response
	// Value - A list of load balancers in a resource group.
	Value []LoadBalancer `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (lblr LoadBalancerListResult) Response() *http.Response {
	return lblr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (lblr LoadBalancerListResult) StatusCode() int {
	return lblr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (lblr LoadBalancerListResult) Status() string {
	return lblr.rawResponse.Status
}

// LoadBalancerPropertiesFormat - Properties of the load balancer.
type LoadBalancerPropertiesFormat struct {
	// FrontendIPConfigurations - Object representing the frontend IPs to be used for the load balancer
	FrontendIPConfigurations []FrontendIPConfiguration `json:"frontendIPConfigurations,omitempty"`
	// BackendAddressPools - Collection of backend address pools used by a load balancer
	BackendAddressPools []BackendAddressPool `json:"backendAddressPools,omitempty"`
	// LoadBalancingRules - Object collection representing the load balancing rules Gets the provisioning
	LoadBalancingRules []LoadBalancingRule `json:"loadBalancingRules,omitempty"`
	// Probes - Collection of probe objects used in the load balancer
	Probes []Probe `json:"probes,omitempty"`
	// InboundNatRules - Collection of inbound NAT Rules used by a load balancer. Defining inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an Inbound NAT pool. They have to reference individual inbound NAT rules.
	InboundNatRules []InboundNatRule `json:"inboundNatRules,omitempty"`
	// InboundNatPools - Defines an external port range for inbound NAT to a single backend port on NICs associated with a load balancer. Inbound NAT rules are created automatically for each NIC associated with the Load Balancer using an external port from this range. Defining an Inbound NAT pool on your Load Balancer is mutually exclusive with defining inbound Nat rules. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an inbound NAT pool. They have to reference individual inbound NAT rules.
	InboundNatPools []InboundNatPool `json:"inboundNatPools,omitempty"`
	// OutboundNatRules - The outbound NAT rules.
	OutboundNatRules []OutboundNatRule `json:"outboundNatRules,omitempty"`
	// ResourceGUID - The resource GUID property of the load balancer resource.
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// LoadBalancingRule - A load balancing rule for a load balancer.
type LoadBalancingRule struct {
	// ID - Resource ID.
	ID                                 *string `json:"id,omitempty"`
	*LoadBalancingRulePropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// LoadBalancingRulePropertiesFormat - Properties of the load balancer.
type LoadBalancingRulePropertiesFormat struct {
	// FrontendIPConfiguration - A reference to frontend IP addresses.
	FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`
	// BackendAddressPool - A reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the backend IPs.
	BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`
	// Probe - The reference of the load balancer probe used by the load balancing rule.
	Probe *SubResource `json:"probe,omitempty"`
	// Protocol - The transport protocol for the external endpoint. Possible values are 'Udp' or 'Tcp'. Possible values include: 'UDP', 'TCP', 'None'
	Protocol TransportProtocolType `json:"protocol,omitempty"`
	// LoadDistribution - The load distribution policy for this rule. Possible values are 'Default', 'SourceIP', and 'SourceIPProtocol'. Possible values include: 'Default', 'SourceIP', 'SourceIPProtocol', 'None'
	LoadDistribution LoadDistributionType `json:"loadDistribution,omitempty"`
	// FrontendPort - The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values are between 1 and 65534.
	FrontendPort int32 `json:"frontendPort,omitempty"`
	// BackendPort - The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
	BackendPort *int32 `json:"backendPort,omitempty"`
	// IdleTimeoutInMinutes - The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
	IdleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`
	// EnableFloatingIP - Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
	EnableFloatingIP *bool `json:"enableFloatingIP,omitempty"`
	// ProvisioningState - Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// LocalNetworkGateway - A common class for general resource information
type LocalNetworkGateway struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags                                 map[string]string `json:"tags,omitempty"`
	*LocalNetworkGatewayPropertiesFormat `json:"properties,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (lng LocalNetworkGateway) Response() *http.Response {
	return lng.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (lng LocalNetworkGateway) StatusCode() int {
	return lng.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (lng LocalNetworkGateway) Status() string {
	return lng.rawResponse.Status
}

// LocalNetworkGatewayListResult - Response for ListLocalNetworkGateways API service call.
type LocalNetworkGatewayListResult struct {
	rawResponse *http.Response
	// Value - A list of local network gateways that exists in a resource group.
	Value []LocalNetworkGateway `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (lnglr LocalNetworkGatewayListResult) Response() *http.Response {
	return lnglr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (lnglr LocalNetworkGatewayListResult) StatusCode() int {
	return lnglr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (lnglr LocalNetworkGatewayListResult) Status() string {
	return lnglr.rawResponse.Status
}

// LocalNetworkGatewayPropertiesFormat - LocalNetworkGateway properties
type LocalNetworkGatewayPropertiesFormat struct {
	// LocalNetworkAddressSpace - Local network site address space.
	LocalNetworkAddressSpace *AddressSpace `json:"localNetworkAddressSpace,omitempty"`
	// GatewayIPAddress - IP address of local network gateway.
	GatewayIPAddress *string `json:"gatewayIpAddress,omitempty"`
	// BgpSettings - Local network gateway's BGP speaker settings.
	BgpSettings *BgpSettings `json:"bgpSettings,omitempty"`
	// ResourceGUID - The resource GUID property of the LocalNetworkGateway resource.
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - The provisioning state of the LocalNetworkGateway resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// NextHopParameters - Parameters that define the source and destination endpoint.
type NextHopParameters struct {
	// TargetResourceID - The resource identifier of the target resource against which the action is to be performed.
	TargetResourceID string `json:"targetResourceId,omitempty"`
	// SourceIPAddress - The source IP address.
	SourceIPAddress string `json:"sourceIPAddress,omitempty"`
	// DestinationIPAddress - The destination IP address.
	DestinationIPAddress string `json:"destinationIPAddress,omitempty"`
	// TargetNicResourceID - The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of the nics, then this parameter must be specified. Otherwise optional).
	TargetNicResourceID *string `json:"targetNicResourceId,omitempty"`
}

// NextHopResult - The information about next hop from the specified VM.
type NextHopResult struct {
	rawResponse *http.Response
	// NextHopType - Next hop type. Possible values include: 'Internet', 'VirtualAppliance', 'VirtualNetworkGateway', 'VnetLocal', 'HyperNetGateway', 'None', 'None'
	NextHopType NextHopType `json:"nextHopType,omitempty"`
	// NextHopIPAddress - Next hop IP Address
	NextHopIPAddress *string `json:"nextHopIpAddress,omitempty"`
	// RouteTableID - The resource identifier for the route table associated with the route being returned. If the route being returned does not correspond to any user created routes then this field will be the string 'System Route'.
	RouteTableID *string `json:"routeTableId,omitempty"`
}

// Response returns the raw HTTP response object.
func (nhr NextHopResult) Response() *http.Response {
	return nhr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (nhr NextHopResult) StatusCode() int {
	return nhr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (nhr NextHopResult) Status() string {
	return nhr.rawResponse.Status
}

// OutboundNatRule - Outbound NAT pool of the load balancer.
type OutboundNatRule struct {
	// ID - Resource ID.
	ID                               *string `json:"id,omitempty"`
	*OutboundNatRulePropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// OutboundNatRulePropertiesFormat - Outbound NAT pool of the load balancer.
type OutboundNatRulePropertiesFormat struct {
	// AllocatedOutboundPorts - The number of outbound ports to be used for NAT.
	AllocatedOutboundPorts *int32 `json:"allocatedOutboundPorts,omitempty"`
	// FrontendIPConfigurations - The Frontend IP addresses of the load balancer.
	FrontendIPConfigurations []SubResource `json:"frontendIPConfigurations,omitempty"`
	// BackendAddressPool - A reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the backend IPs.
	BackendAddressPool SubResource `json:"backendAddressPool,omitempty"`
	// ProvisioningState - Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// PacketCapture - Parameters that define the create packet capture operation.
type PacketCapture struct {
	*PacketCaptureParameters `json:"properties,omitempty"`
}

// PacketCaptureFilter - Filter that is applied to packet capture request. Multiple filters can be applied.
type PacketCaptureFilter struct {
	// Protocol - Protocol to be filtered on. Possible values include: 'TCP', 'UDP', 'Any', 'None'
	Protocol PcProtocolType `json:"protocol,omitempty"`
	// LocalIPAddress - Local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5"? for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
	LocalIPAddress *string `json:"localIPAddress,omitempty"`
	// RemoteIPAddress - Local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
	RemoteIPAddress *string `json:"remoteIPAddress,omitempty"`
	// LocalPort - Local port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
	LocalPort *string `json:"localPort,omitempty"`
	// RemotePort - Remote port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
	RemotePort *string `json:"remotePort,omitempty"`
}

// PacketCaptureListResult - List of packet capture sessions.
type PacketCaptureListResult struct {
	rawResponse *http.Response
	// Value - Information about packet capture sessions.
	Value []PacketCaptureResult `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (pclr PacketCaptureListResult) Response() *http.Response {
	return pclr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (pclr PacketCaptureListResult) StatusCode() int {
	return pclr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (pclr PacketCaptureListResult) Status() string {
	return pclr.rawResponse.Status
}

// PacketCaptureParameters - Parameters that define the create packet capture operation.
type PacketCaptureParameters struct {
	// Target - The ID of the targeted resource, only VM is currently supported.
	Target string `json:"target,omitempty"`
	// BytesToCapturePerPacket - Number of bytes captured per packet, the remaining bytes are truncated.
	BytesToCapturePerPacket *int32 `json:"bytesToCapturePerPacket,omitempty"`
	// TotalBytesPerSession - Maximum size of the capture output.
	TotalBytesPerSession *int32 `json:"totalBytesPerSession,omitempty"`
	// TimeLimitInSeconds - Maximum duration of the capture session in seconds.
	TimeLimitInSeconds *int32                       `json:"timeLimitInSeconds,omitempty"`
	StorageLocation    PacketCaptureStorageLocation `json:"storageLocation,omitempty"`
	Filters            []PacketCaptureFilter        `json:"filters,omitempty"`
}

// PacketCaptureQueryStatusResult - Status of packet capture session.
type PacketCaptureQueryStatusResult struct {
	rawResponse *http.Response
	// Name - The name of the packet capture resource.
	Name *string `json:"name,omitempty"`
	// ID - The ID of the packet capture resource.
	ID *string `json:"id,omitempty"`
	// CaptureStartTime - The start time of the packet capture session.
	CaptureStartTime *time.Time `json:"captureStartTime,omitempty"`
	// PacketCaptureStatus - The status of the packet capture session. Possible values include: 'NotStarted', 'Running', 'Stopped', 'Error', 'Unknown', 'None'
	PacketCaptureStatus PcStatusType `json:"packetCaptureStatus,omitempty"`
	// StopReason - The reason the current packet capture session was stopped.
	StopReason *string `json:"stopReason,omitempty"`
	// PacketCaptureError - List of errors of packet capture session.
	PacketCaptureError []PcErrorType `json:"packetCaptureError,omitempty"`
}

// Response returns the raw HTTP response object.
func (pcqsr PacketCaptureQueryStatusResult) Response() *http.Response {
	return pcqsr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (pcqsr PacketCaptureQueryStatusResult) StatusCode() int {
	return pcqsr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (pcqsr PacketCaptureQueryStatusResult) Status() string {
	return pcqsr.rawResponse.Status
}

// PacketCaptureResult - Information about packet capture session.
type PacketCaptureResult struct {
	rawResponse *http.Response
	// Name - Name of the packet capture session.
	Name *string `json:"name,omitempty"`
	// ID - ID of the packet capture operation.
	ID                             *string `json:"id,omitempty"`
	Etag                           *string `json:"etag,omitempty"`
	*PacketCaptureResultProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (pcr PacketCaptureResult) Response() *http.Response {
	return pcr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (pcr PacketCaptureResult) StatusCode() int {
	return pcr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (pcr PacketCaptureResult) Status() string {
	return pcr.rawResponse.Status
}

// PacketCaptureResultProperties - Describes the properties of a packet capture session.
type PacketCaptureResultProperties struct {
	// Target - The ID of the targeted resource, only VM is currently supported.
	Target string `json:"target,omitempty"`
	// BytesToCapturePerPacket - Number of bytes captured per packet, the remaining bytes are truncated.
	BytesToCapturePerPacket *int32 `json:"bytesToCapturePerPacket,omitempty"`
	// TotalBytesPerSession - Maximum size of the capture output.
	TotalBytesPerSession *int32 `json:"totalBytesPerSession,omitempty"`
	// TimeLimitInSeconds - Maximum duration of the capture session in seconds.
	TimeLimitInSeconds *int32                       `json:"timeLimitInSeconds,omitempty"`
	StorageLocation    PacketCaptureStorageLocation `json:"storageLocation,omitempty"`
	Filters            []PacketCaptureFilter        `json:"filters,omitempty"`
	// ProvisioningState - The provisioning state of the packet capture session. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed', 'None'
	ProvisioningState ProvisioningStateType `json:"provisioningState,omitempty"`
}

// PacketCaptureStorageLocation - Describes the storage location for a packet capture session.
type PacketCaptureStorageLocation struct {
	// StorageID - The ID of the storage account to save the packet capture session. Required if no local file path is provided.
	StorageID *string `json:"storageId,omitempty"`
	// StoragePath - The URI of the storage path to save the packet capture. Must be a well-formed URI describing the location to save the packet capture.
	StoragePath *string `json:"storagePath,omitempty"`
	// FilePath - A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with /var/captures. Required if no storage ID is provided, otherwise optional.
	FilePath *string `json:"filePath,omitempty"`
}

// PatchRouteFilter - Route Filter Resource.
type PatchRouteFilter struct {
	// ID - Resource ID.
	ID                           *string `json:"id,omitempty"`
	*RouteFilterPropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Tags - Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

// PatchRouteFilterRule - Route Filter Rule Resource
type PatchRouteFilterRule struct {
	// ID - Resource ID.
	ID                               *string `json:"id,omitempty"`
	*RouteFilterRulePropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
	// Tags - Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

// Probe - A load balancer probe.
type Probe struct {
	// ID - Resource ID.
	ID                     *string `json:"id,omitempty"`
	*ProbePropertiesFormat `json:"properties,omitempty"`
	// Name - Gets name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// ProbePropertiesFormat ...
type ProbePropertiesFormat struct {
	// LoadBalancingRules - The load balancer rules that use this probe.
	LoadBalancingRules []SubResource `json:"loadBalancingRules,omitempty"`
	// Protocol - The protocol of the end point. Possible values are: 'Http' or 'Tcp'. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' is specified, a 200 OK response from the specifies URI is required for the probe to be successful. Possible values include: 'HTTP', 'TCP', 'None'
	Protocol ProbeProtocolType `json:"protocol,omitempty"`
	// Port - The port for communicating the probe. Possible values range from 1 to 65535, inclusive.
	Port int32 `json:"port,omitempty"`
	// IntervalInSeconds - The interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5.
	IntervalInSeconds *int32 `json:"intervalInSeconds,omitempty"`
	// NumberOfProbes - The number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure.
	NumberOfProbes *int32 `json:"numberOfProbes,omitempty"`
	// RequestPath - The URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value.
	RequestPath *string `json:"requestPath,omitempty"`
	// ProvisioningState - Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// PublicIPAddress - Public IP address resource.
type PublicIPAddress struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags                             map[string]string `json:"tags,omitempty"`
	*PublicIPAddressPropertiesFormat `json:"properties,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (pia PublicIPAddress) Response() *http.Response {
	return pia.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (pia PublicIPAddress) StatusCode() int {
	return pia.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (pia PublicIPAddress) Status() string {
	return pia.rawResponse.Status
}

// PublicIPAddressDNSSettings - Contains FQDN of the DNS record associated with the public IP address
type PublicIPAddressDNSSettings struct {
	// DomainNameLabel - Gets or sets the Domain name label.The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.
	DomainNameLabel *string `json:"domainNameLabel,omitempty"`
	// Fqdn - Gets the FQDN, Fully qualified domain name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.
	Fqdn *string `json:"fqdn,omitempty"`
	// ReverseFqdn - Gets or Sets the Reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
	ReverseFqdn *string `json:"reverseFqdn,omitempty"`
}

// PublicIPAddressListResult - Response for ListPublicIpAddresses API service call.
type PublicIPAddressListResult struct {
	rawResponse *http.Response
	// Value - A list of public IP addresses that exists in a resource group.
	Value []PublicIPAddress `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (pialr PublicIPAddressListResult) Response() *http.Response {
	return pialr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (pialr PublicIPAddressListResult) StatusCode() int {
	return pialr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (pialr PublicIPAddressListResult) Status() string {
	return pialr.rawResponse.Status
}

// PublicIPAddressPropertiesFormat - Public IP address properties.
type PublicIPAddressPropertiesFormat struct {
	// PublicIPAllocationMethod - The public IP allocation method. Possible values are: 'Static' and 'Dynamic'. Possible values include: 'Static', 'Dynamic', 'None'
	PublicIPAllocationMethod IPAllocationMethodType `json:"publicIPAllocationMethod,omitempty"`
	// PublicIPAddressVersion - The public IP address version. Possible values are: 'IPv4' and 'IPv6'. Possible values include: 'IPv4', 'IPv6', 'None'
	PublicIPAddressVersion IPVersionType    `json:"publicIPAddressVersion,omitempty"`
	IPConfiguration        *IPConfiguration `json:"ipConfiguration,omitempty"`
	// DNSSettings - The FQDN of the DNS record associated with the public IP address.
	DNSSettings *PublicIPAddressDNSSettings `json:"dnsSettings,omitempty"`
	IPAddress   *string                     `json:"ipAddress,omitempty"`
	// IdleTimeoutInMinutes - The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`
	// ResourceGUID - The resource GUID property of the public IP resource.
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// QueryTroubleshootingParameters - Parameters that define the resource to query the troubleshooting result.
type QueryTroubleshootingParameters struct {
	// TargetResourceID - The target resource ID to query the troubleshooting result.
	TargetResourceID string `json:"targetResourceId,omitempty"`
}

// Resource ...
type Resource struct {
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

// ResourceNavigationLink - ResourceNavigationLink resource.
type ResourceNavigationLink struct {
	// ID - Resource ID.
	ID                            *string `json:"id,omitempty"`
	*ResourceNavigationLinkFormat `json:"properties,omitempty"`
	// Name - Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// ResourceNavigationLinkFormat - Properties of ResourceNavigationLink.
type ResourceNavigationLinkFormat struct {
	// LinkedResourceType - Resource type of the linked resource.
	LinkedResourceType *string `json:"linkedResourceType,omitempty"`
	// Link - Link to the external resource
	Link *string `json:"link,omitempty"`
	// ProvisioningState - Provisioning state of the ResourceNavigationLink resource.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// RetentionPolicyParameters - Parameters that define the retention policy for flow log.
type RetentionPolicyParameters struct {
	// Days - Number of days to retain flow log records.
	Days *int32 `json:"days,omitempty"`
	// Enabled - Flag to enable/disable retention.
	Enabled *bool `json:"enabled,omitempty"`
}

// Route - Route resource
type Route struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID                     *string `json:"id,omitempty"`
	*RoutePropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (r Route) Response() *http.Response {
	return r.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (r Route) StatusCode() int {
	return r.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (r Route) Status() string {
	return r.rawResponse.Status
}

// RouteFilter - Route Filter Resource.
type RouteFilter struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags                         map[string]string `json:"tags,omitempty"`
	*RouteFilterPropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (rf RouteFilter) Response() *http.Response {
	return rf.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rf RouteFilter) StatusCode() int {
	return rf.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rf RouteFilter) Status() string {
	return rf.rawResponse.Status
}

// RouteFilterListResult - Response for the ListRouteFilters API service call.
type RouteFilterListResult struct {
	rawResponse *http.Response
	// Value - Gets a list of route filters in a resource group.
	Value []RouteFilter `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (rflr RouteFilterListResult) Response() *http.Response {
	return rflr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rflr RouteFilterListResult) StatusCode() int {
	return rflr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rflr RouteFilterListResult) Status() string {
	return rflr.rawResponse.Status
}

// RouteFilterPropertiesFormat - Route Filter Resource
type RouteFilterPropertiesFormat struct {
	// Rules - Collection of RouteFilterRules contained within a route filter.
	Rules []RouteFilterRule `json:"rules,omitempty"`
	// Peerings - A collection of references to express route circuit peerings.
	Peerings []ExpressRouteCircuitPeering `json:"peerings,omitempty"`
	// ProvisioningState - The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', 'Succeeded' and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// RouteFilterRule - Route Filter Rule Resource
type RouteFilterRule struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID                               *string `json:"id,omitempty"`
	*RouteFilterRulePropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
	// Tags - Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

// Response returns the raw HTTP response object.
func (rfr RouteFilterRule) Response() *http.Response {
	return rfr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rfr RouteFilterRule) StatusCode() int {
	return rfr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rfr RouteFilterRule) Status() string {
	return rfr.rawResponse.Status
}

// RouteFilterRuleListResult - Response for the ListRouteFilterRules API service call
type RouteFilterRuleListResult struct {
	rawResponse *http.Response
	// Value - Gets a list of RouteFilterRules in a resource group.
	Value []RouteFilterRule `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (rfrlr RouteFilterRuleListResult) Response() *http.Response {
	return rfrlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rfrlr RouteFilterRuleListResult) StatusCode() int {
	return rfrlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rfrlr RouteFilterRuleListResult) Status() string {
	return rfrlr.rawResponse.Status
}

// RouteFilterRulePropertiesFormat - Route Filter Rule Resource
type RouteFilterRulePropertiesFormat struct {
	// Access - The access type of the rule. Valid values are: 'Allow', 'Deny'. Possible values include: 'Allow', 'Deny', 'None'
	Access AccessType `json:"access,omitempty"`
	// RouteFilterRuleType - The rule type of the rule. Valid value is: 'Community'
	RouteFilterRuleType string `json:"routeFilterRuleType,omitempty"`
	// Communities - The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020']
	Communities []string `json:"communities,omitempty"`
	// ProvisioningState - The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', 'Succeeded' and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// RouteListResult - Response for the ListRoute API service call
type RouteListResult struct {
	rawResponse *http.Response
	// Value - Gets a list of routes in a resource group.
	Value []Route `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (rlr RouteListResult) Response() *http.Response {
	return rlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rlr RouteListResult) StatusCode() int {
	return rlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rlr RouteListResult) Status() string {
	return rlr.rawResponse.Status
}

// RoutePropertiesFormat - Route resource
type RoutePropertiesFormat struct {
	// AddressPrefix - The destination CIDR to which the route applies.
	AddressPrefix *string `json:"addressPrefix,omitempty"`
	// NextHopType - The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', 'None', 'None'
	NextHopType RouteNextHopType `json:"nextHopType,omitempty"`
	// NextHopIPAddress - The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
	NextHopIPAddress *string `json:"nextHopIpAddress,omitempty"`
	// ProvisioningState - The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// RouteTable - Route table resource.
type RouteTable struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags                        map[string]string `json:"tags,omitempty"`
	*RouteTablePropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (rt RouteTable) Response() *http.Response {
	return rt.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rt RouteTable) StatusCode() int {
	return rt.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rt RouteTable) Status() string {
	return rt.rawResponse.Status
}

// RouteTableListResult - Response for the ListRouteTable API service call.
type RouteTableListResult struct {
	rawResponse *http.Response
	// Value - Gets a list of route tables in a resource group.
	Value []RouteTable `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (rtlr RouteTableListResult) Response() *http.Response {
	return rtlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rtlr RouteTableListResult) StatusCode() int {
	return rtlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rtlr RouteTableListResult) Status() string {
	return rtlr.rawResponse.Status
}

// RouteTablePropertiesFormat - Route Table resource
type RouteTablePropertiesFormat struct {
	// Routes - Collection of routes contained within a route table.
	Routes []Route `json:"routes,omitempty"`
	// Subnets - A collection of references to subnets.
	Subnets []Subnet `json:"subnets,omitempty"`
	// ProvisioningState - The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// SecurityGroup - NetworkSecurityGroup resource.
type SecurityGroup struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags                           map[string]string `json:"tags,omitempty"`
	*SecurityGroupPropertiesFormat `json:"properties,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (sg SecurityGroup) Response() *http.Response {
	return sg.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (sg SecurityGroup) StatusCode() int {
	return sg.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (sg SecurityGroup) Status() string {
	return sg.rawResponse.Status
}

// SecurityGroupListResult - Response for ListNetworkSecurityGroups API service call.
type SecurityGroupListResult struct {
	rawResponse *http.Response
	// Value - A list of NetworkSecurityGroup resources.
	Value []SecurityGroup `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (sglr SecurityGroupListResult) Response() *http.Response {
	return sglr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (sglr SecurityGroupListResult) StatusCode() int {
	return sglr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (sglr SecurityGroupListResult) Status() string {
	return sglr.rawResponse.Status
}

// SecurityGroupNetworkInterface - Network interface and all its associated security rules.
type SecurityGroupNetworkInterface struct {
	// ID - ID of the network interface.
	ID                       *string                   `json:"id,omitempty"`
	SecurityRuleAssociations *SecurityRuleAssociations `json:"securityRuleAssociations,omitempty"`
}

// SecurityGroupPropertiesFormat - Network Security Group resource.
type SecurityGroupPropertiesFormat struct {
	// SecurityRules - A collection of security rules of the network security group.
	SecurityRules []SecurityRule `json:"securityRules,omitempty"`
	// DefaultSecurityRules - The default security rules of network security group.
	DefaultSecurityRules []SecurityRule `json:"defaultSecurityRules,omitempty"`
	// NetworkInterfaces - A collection of references to network interfaces.
	NetworkInterfaces []Interface `json:"networkInterfaces,omitempty"`
	// Subnets - A collection of references to subnets.
	Subnets []Subnet `json:"subnets,omitempty"`
	// ResourceGUID - The resource GUID property of the network security group resource.
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// SecurityGroupViewParameters - Parameters that define the VM to check security groups for.
type SecurityGroupViewParameters struct {
	// TargetResourceID - ID of the target VM.
	TargetResourceID string `json:"targetResourceId,omitempty"`
}

// SecurityGroupViewResult - The information about security rules applied to the specified VM.
type SecurityGroupViewResult struct {
	rawResponse *http.Response
	// NetworkInterfaces - List of network interfaces on the specified VM.
	NetworkInterfaces []SecurityGroupNetworkInterface `json:"networkInterfaces,omitempty"`
}

// Response returns the raw HTTP response object.
func (sgvr SecurityGroupViewResult) Response() *http.Response {
	return sgvr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (sgvr SecurityGroupViewResult) StatusCode() int {
	return sgvr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (sgvr SecurityGroupViewResult) Status() string {
	return sgvr.rawResponse.Status
}

// SecurityRule - Network security rule.
type SecurityRule struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID                            *string `json:"id,omitempty"`
	*SecurityRulePropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (sr SecurityRule) Response() *http.Response {
	return sr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (sr SecurityRule) StatusCode() int {
	return sr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (sr SecurityRule) Status() string {
	return sr.rawResponse.Status
}

// SecurityRuleAssociations - All security rules associated with the network interface.
type SecurityRuleAssociations struct {
	NetworkInterfaceAssociation *InterfaceAssociation `json:"networkInterfaceAssociation,omitempty"`
	SubnetAssociation           *SubnetAssociation    `json:"subnetAssociation,omitempty"`
	// DefaultSecurityRules - Collection of default security rules of the network security group.
	DefaultSecurityRules []SecurityRule `json:"defaultSecurityRules,omitempty"`
	// EffectiveSecurityRules - Collection of effective security rules.
	EffectiveSecurityRules []EffectiveNetworkSecurityRule `json:"effectiveSecurityRules,omitempty"`
}

// SecurityRuleListResult - Response for ListSecurityRule API service call. Retrieves all security rules that belongs
// to a network security group.
type SecurityRuleListResult struct {
	rawResponse *http.Response
	// Value - The security rules in a network security group.
	Value []SecurityRule `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (srlr SecurityRuleListResult) Response() *http.Response {
	return srlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (srlr SecurityRuleListResult) StatusCode() int {
	return srlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (srlr SecurityRuleListResult) Status() string {
	return srlr.rawResponse.Status
}

// SecurityRulePropertiesFormat ...
type SecurityRulePropertiesFormat struct {
	// Description - A description for this rule. Restricted to 140 chars.
	Description *string `json:"description,omitempty"`
	// Protocol - Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'. Possible values include: 'TCP', 'UDP', 'Asterisk', 'None'
	Protocol SecurityRuleProtocolType `json:"protocol,omitempty"`
	// SourcePortRange - The source port or range. Integer or range between 0 and 65535. Asterix '*' can also be used to match all ports.
	SourcePortRange *string `json:"sourcePortRange,omitempty"`
	// DestinationPortRange - The destination port or range. Integer or range between 0 and 65535. Asterix '*' can also be used to match all ports.
	DestinationPortRange *string `json:"destinationPortRange,omitempty"`
	// SourceAddressPrefix - The CIDR or source IP range. Asterix '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from.
	SourceAddressPrefix string `json:"sourceAddressPrefix,omitempty"`
	// DestinationAddressPrefix - The destination address prefix. CIDR or source IP range. Asterix '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.
	DestinationAddressPrefix string `json:"destinationAddressPrefix,omitempty"`
	// Access - The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'. Possible values include: 'Allow', 'Deny', 'None'
	Access SecurityRuleAccessType `json:"access,omitempty"`
	// Priority - The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
	Priority *int32 `json:"priority,omitempty"`
	// Direction - The direction of the rule. The direction specifies if rule will be evaluated on incoming or outcoming traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values include: 'Inbound', 'Outbound', 'None'
	Direction SecurityRuleDirectionType `json:"direction,omitempty"`
	// ProvisioningState - The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// Subnet - Subnet in a virtual network resource.
type Subnet struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID                      *string `json:"id,omitempty"`
	*SubnetPropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (s Subnet) Response() *http.Response {
	return s.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (s Subnet) StatusCode() int {
	return s.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (s Subnet) Status() string {
	return s.rawResponse.Status
}

// SubnetAssociation - Network interface and its custom security rules.
type SubnetAssociation struct {
	// ID - Subnet ID.
	ID *string `json:"id,omitempty"`
	// SecurityRules - Collection of custom security rules.
	SecurityRules []SecurityRule `json:"securityRules,omitempty"`
}

// SubnetListResult - Response for ListSubnets API service callRetrieves all subnet that belongs to a virtual network
type SubnetListResult struct {
	rawResponse *http.Response
	// Value - The subnets in a virtual network.
	Value []Subnet `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (slr SubnetListResult) Response() *http.Response {
	return slr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (slr SubnetListResult) StatusCode() int {
	return slr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (slr SubnetListResult) Status() string {
	return slr.rawResponse.Status
}

// SubnetPropertiesFormat ...
type SubnetPropertiesFormat struct {
	// AddressPrefix - The address prefix for the subnet.
	AddressPrefix *string `json:"addressPrefix,omitempty"`
	// NetworkSecurityGroup - The reference of the NetworkSecurityGroup resource.
	NetworkSecurityGroup *SecurityGroup `json:"networkSecurityGroup,omitempty"`
	// RouteTable - The reference of the RouteTable resource.
	RouteTable *RouteTable `json:"routeTable,omitempty"`
	// IPConfigurations - Gets an array of references to the network interface IP configurations using subnet.
	IPConfigurations []IPConfiguration `json:"ipConfigurations,omitempty"`
	// ResourceNavigationLinks - Gets an array of references to the external resources using subnet.
	ResourceNavigationLinks []ResourceNavigationLink `json:"resourceNavigationLinks,omitempty"`
	// ProvisioningState - The provisioning state of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// SubResource ...
type SubResource struct {
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
}

// Topology - Topology of the specified resource group.
type Topology struct {
	rawResponse *http.Response
	// ID - GUID representing the operation id.
	ID *string `json:"id,omitempty"`
	// CreatedDateTime - The datetime when the topology was initially created for the resource group.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// LastModified - The datetime when the topology was last modified.
	LastModified *time.Time         `json:"lastModified,omitempty"`
	Resources    []TopologyResource `json:"resources,omitempty"`
}

// Response returns the raw HTTP response object.
func (t Topology) Response() *http.Response {
	return t.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (t Topology) StatusCode() int {
	return t.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (t Topology) Status() string {
	return t.rawResponse.Status
}

// TopologyAssociation - Resources that have an association with the parent resource.
type TopologyAssociation struct {
	// Name - The name of the resource that is associated with the parent resource.
	Name *string `json:"name,omitempty"`
	// ResourceID - The ID of the resource that is associated with the parent resource.
	ResourceID *string `json:"resourceId,omitempty"`
	// AssociationType - The association type of the child resource to the parent resource. Possible values include: 'Associated', 'Contains', 'None'
	AssociationType AssociationType `json:"associationType,omitempty"`
}

// TopologyParameters - Parameters that define the representation of topology.
type TopologyParameters struct {
	// TargetResourceGroupName - The name of the target resource group to perform topology on.
	TargetResourceGroupName string `json:"targetResourceGroupName,omitempty"`
}

// TopologyResource - The network resource topology information for the given resource group.
type TopologyResource struct {
	// Name - Name of the resource.
	Name *string `json:"name,omitempty"`
	// ID - ID of the resource.
	ID *string `json:"id,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Associations - Holds the associations the resource has with other resources in the resource group.
	Associations []TopologyAssociation `json:"associations,omitempty"`
}

// TroubleshootingDetails - Information gained from troubleshooting of specified resource.
type TroubleshootingDetails struct {
	// ID - The id of the get troubleshoot operation.
	ID *string `json:"id,omitempty"`
	// ReasonType - Reason type of failure.
	ReasonType *string `json:"reasonType,omitempty"`
	// Summary - A summary of troubleshooting.
	Summary *string `json:"summary,omitempty"`
	// Detail - Details on troubleshooting results.
	Detail *string `json:"detail,omitempty"`
	// RecommendedActions - List of recommended actions.
	RecommendedActions []TroubleshootingRecommendedActions `json:"recommendedActions,omitempty"`
}

// TroubleshootingParameters - Parameters that define the resource to troubleshoot.
type TroubleshootingParameters struct {
	// TargetResourceID - The target resource to troubleshoot.
	TargetResourceID           string `json:"targetResourceId,omitempty"`
	*TroubleshootingProperties `json:"properties,omitempty"`
}

// TroubleshootingProperties - Storage location provided for troubleshoot.
type TroubleshootingProperties struct {
	// StorageID - The ID for the storage account to save the troubleshoot result.
	StorageID string `json:"storageId,omitempty"`
	// StoragePath - The path to the blob to save the troubleshoot result in.
	StoragePath string `json:"storagePath,omitempty"`
}

// TroubleshootingRecommendedActions - Recommended actions based on discovered issues.
type TroubleshootingRecommendedActions struct {
	// ActionID - ID of the recommended action.
	ActionID *string `json:"actionId,omitempty"`
	// ActionText - Description of recommended actions.
	ActionText *string `json:"actionText,omitempty"`
	// ActionURI - The uri linking to a documentation for the recommended troubleshooting actions.
	ActionURI *string `json:"actionUri,omitempty"`
	// ActionURIText - The information from the URI for the recommended troubleshooting actions.
	ActionURIText *string `json:"actionUriText,omitempty"`
}

// TroubleshootingResult - Troubleshooting information gained from specified resource.
type TroubleshootingResult struct {
	rawResponse *http.Response
	// StartTime - The start time of the troubleshooting.
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime - The end time of the troubleshooting.
	EndTime *time.Time `json:"endTime,omitempty"`
	// Code - The result code of the troubleshooting.
	Code *string `json:"code,omitempty"`
	// Results - Information from troubleshooting.
	Results []TroubleshootingDetails `json:"results,omitempty"`
}

// Response returns the raw HTTP response object.
func (tr TroubleshootingResult) Response() *http.Response {
	return tr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (tr TroubleshootingResult) StatusCode() int {
	return tr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (tr TroubleshootingResult) Status() string {
	return tr.rawResponse.Status
}

// TunnelConnectionHealth - VirtualNetworkGatewayConnection properties
type TunnelConnectionHealth struct {
	// Tunnel - Tunnel name.
	Tunnel *string `json:"tunnel,omitempty"`
	// ConnectionStatus - Virtual network Gateway connection status. Possible values include: 'Unknown', 'Connecting', 'Connected', 'NotConnected', 'None'
	ConnectionStatus VirtualNetworkGatewayConnectionStatusType `json:"connectionStatus,omitempty"`
	// IngressBytesTransferred - The Ingress Bytes Transferred in this connection
	IngressBytesTransferred *int64 `json:"ingressBytesTransferred,omitempty"`
	// EgressBytesTransferred - The Egress Bytes Transferred in this connection
	EgressBytesTransferred *int64 `json:"egressBytesTransferred,omitempty"`
	// LastConnectionEstablishedUtcTime - The time at which connection was established in Utc format.
	LastConnectionEstablishedUtcTime *string `json:"lastConnectionEstablishedUtcTime,omitempty"`
}

// Usage - Describes network resource usage.
type Usage struct {
	// Unit - An enum describing the unit of measurement.
	Unit string `json:"unit,omitempty"`
	// CurrentValue - The current value of the usage.
	CurrentValue int64 `json:"currentValue,omitempty"`
	// Limit - The limit of usage.
	Limit int64 `json:"limit,omitempty"`
	// Name - The name of the type of usage.
	Name UsageName `json:"name,omitempty"`
}

// UsageName - The usage names.
type UsageName struct {
	// Value - A string describing the resource name.
	Value *string `json:"value,omitempty"`
	// LocalizedValue - A localized string describing the resource name.
	LocalizedValue *string `json:"localizedValue,omitempty"`
}

// UsagesListResult - The list usages operation response.
type UsagesListResult struct {
	rawResponse *http.Response
	// Value - The list network resource usages.
	Value []Usage `json:"value,omitempty"`
	// NextLink - URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (ulr UsagesListResult) Response() *http.Response {
	return ulr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ulr UsagesListResult) StatusCode() int {
	return ulr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ulr UsagesListResult) Status() string {
	return ulr.rawResponse.Status
}

// VerificationIPFlowParameters - Parameters that define the IP flow to be verified.
type VerificationIPFlowParameters struct {
	// TargetResourceID - The ID of the target resource to perform next-hop on.
	TargetResourceID string `json:"targetResourceId,omitempty"`
	// Direction - The direction of the packet represented as a 5-tuple. Possible values include: 'Inbound', 'Outbound', 'None'
	Direction DirectionType `json:"direction,omitempty"`
	// Protocol - Protocol to be verified on. Possible values include: 'TCP', 'UDP', 'None'
	Protocol ProtocolType `json:"protocol,omitempty"`
	// LocalPort - The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
	LocalPort string `json:"localPort,omitempty"`
	// RemotePort - The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
	RemotePort string `json:"remotePort,omitempty"`
	// LocalIPAddress - The local IP address. Acceptable values are valid IPv4 addresses.
	LocalIPAddress string `json:"localIPAddress,omitempty"`
	// RemoteIPAddress - The remote IP address. Acceptable values are valid IPv4 addresses.
	RemoteIPAddress string `json:"remoteIPAddress,omitempty"`
	// TargetNicResourceID - The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of them, then this parameter must be specified. Otherwise optional).
	TargetNicResourceID *string `json:"targetNicResourceId,omitempty"`
}

// VerificationIPFlowResult - Results of IP flow verification on the target resource.
type VerificationIPFlowResult struct {
	rawResponse *http.Response
	// Access - Indicates whether the traffic is allowed or denied. Possible values include: 'Allow', 'Deny', 'None'
	Access AccessType `json:"access,omitempty"`
	// RuleName - Name of the rule. If input is not matched against any security rule, it is not displayed.
	RuleName *string `json:"ruleName,omitempty"`
}

// Response returns the raw HTTP response object.
func (vifr VerificationIPFlowResult) Response() *http.Response {
	return vifr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vifr VerificationIPFlowResult) StatusCode() int {
	return vifr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vifr VerificationIPFlowResult) Status() string {
	return vifr.rawResponse.Status
}

// VirtualNetwork - Virtual Network resource.
type VirtualNetwork struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags                            map[string]string `json:"tags,omitempty"`
	*VirtualNetworkPropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (vn VirtualNetwork) Response() *http.Response {
	return vn.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vn VirtualNetwork) StatusCode() int {
	return vn.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vn VirtualNetwork) Status() string {
	return vn.rawResponse.Status
}

// VirtualNetworkGateway - A common class for general resource information
type VirtualNetworkGateway struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags                                   map[string]string `json:"tags,omitempty"`
	*VirtualNetworkGatewayPropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (vng VirtualNetworkGateway) Response() *http.Response {
	return vng.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vng VirtualNetworkGateway) StatusCode() int {
	return vng.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vng VirtualNetworkGateway) Status() string {
	return vng.rawResponse.Status
}

// VirtualNetworkGatewayConnection - A common class for general resource information
type VirtualNetworkGatewayConnection struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags                                             map[string]string `json:"tags,omitempty"`
	*VirtualNetworkGatewayConnectionPropertiesFormat `json:"properties,omitempty"`
	// Etag - Gets a unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (vngc VirtualNetworkGatewayConnection) Response() *http.Response {
	return vngc.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vngc VirtualNetworkGatewayConnection) StatusCode() int {
	return vngc.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vngc VirtualNetworkGatewayConnection) Status() string {
	return vngc.rawResponse.Status
}

// VirtualNetworkGatewayConnectionListResult - Response for the ListVirtualNetworkGatewayConnections API service call
type VirtualNetworkGatewayConnectionListResult struct {
	rawResponse *http.Response
	// Value - Gets a list of VirtualNetworkGatewayConnection resources that exists in a resource group.
	Value []VirtualNetworkGatewayConnection `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (vngclr VirtualNetworkGatewayConnectionListResult) Response() *http.Response {
	return vngclr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vngclr VirtualNetworkGatewayConnectionListResult) StatusCode() int {
	return vngclr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vngclr VirtualNetworkGatewayConnectionListResult) Status() string {
	return vngclr.rawResponse.Status
}

// VirtualNetworkGatewayConnectionPropertiesFormat - VirtualNetworkGatewayConnection properties
type VirtualNetworkGatewayConnectionPropertiesFormat struct {
	// AuthorizationKey - The authorizationKey.
	AuthorizationKey       *string                `json:"authorizationKey,omitempty"`
	VirtualNetworkGateway1 VirtualNetworkGateway  `json:"virtualNetworkGateway1,omitempty"`
	VirtualNetworkGateway2 *VirtualNetworkGateway `json:"virtualNetworkGateway2,omitempty"`
	LocalNetworkGateway2   *LocalNetworkGateway   `json:"localNetworkGateway2,omitempty"`
	// ConnectionType - Gateway connection type. Possible values are: 'Ipsec','Vnet2Vnet','ExpressRoute', and 'VPNClient. Possible values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient', 'None'
	ConnectionType VirtualNetworkGatewayConnectionType `json:"connectionType,omitempty"`
	// RoutingWeight - The routing weight.
	RoutingWeight *int32 `json:"routingWeight,omitempty"`
	// SharedKey - The IPSec shared key.
	SharedKey *string `json:"sharedKey,omitempty"`
	// ConnectionStatus - Virtual network Gateway connection status. Possible values are 'Unknown', 'Connecting', 'Connected' and 'NotConnected'. Possible values include: 'Unknown', 'Connecting', 'Connected', 'NotConnected', 'None'
	ConnectionStatus VirtualNetworkGatewayConnectionStatusType `json:"connectionStatus,omitempty"`
	// TunnelConnectionStatus - Collection of all tunnels' connection health status.
	TunnelConnectionStatus []TunnelConnectionHealth `json:"tunnelConnectionStatus,omitempty"`
	// EgressBytesTransferred - The egress bytes transferred in this connection.
	EgressBytesTransferred *int64 `json:"egressBytesTransferred,omitempty"`
	// IngressBytesTransferred - The ingress bytes transferred in this connection.
	IngressBytesTransferred *int64 `json:"ingressBytesTransferred,omitempty"`
	// Peer - The reference to peerings resource.
	Peer *SubResource `json:"peer,omitempty"`
	// EnableBgp - EnableBgp flag
	EnableBgp *bool `json:"enableBgp,omitempty"`
	// ResourceGUID - The resource GUID property of the VirtualNetworkGatewayConnection resource.
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - The provisioning state of the VirtualNetworkGatewayConnection resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// VirtualNetworkGatewayIPConfiguration - IP configuration for virtual network gateway
type VirtualNetworkGatewayIPConfiguration struct {
	// ID - Resource ID.
	ID                                                    *string `json:"id,omitempty"`
	*VirtualNetworkGatewayIPConfigurationPropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// VirtualNetworkGatewayIPConfigurationPropertiesFormat - Properties of VirtualNetworkGatewayIPConfiguration
type VirtualNetworkGatewayIPConfigurationPropertiesFormat struct {
	// PrivateIPAllocationMethod - The private IP allocation method. Possible values are: 'Static' and 'Dynamic'. Possible values include: 'Static', 'Dynamic', 'None'
	PrivateIPAllocationMethod IPAllocationMethodType `json:"privateIPAllocationMethod,omitempty"`
	// Subnet - The reference of the subnet resource.
	Subnet *SubResource `json:"subnet,omitempty"`
	// PublicIPAddress - The reference of the public IP resource.
	PublicIPAddress *SubResource `json:"publicIPAddress,omitempty"`
	// ProvisioningState - The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// VirtualNetworkGatewayListResult - Response for the ListVirtualNetworkGateways API service call.
type VirtualNetworkGatewayListResult struct {
	rawResponse *http.Response
	// Value - Gets a list of VirtualNetworkGateway resources that exists in a resource group.
	Value []VirtualNetworkGateway `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (vnglr VirtualNetworkGatewayListResult) Response() *http.Response {
	return vnglr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vnglr VirtualNetworkGatewayListResult) StatusCode() int {
	return vnglr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vnglr VirtualNetworkGatewayListResult) Status() string {
	return vnglr.rawResponse.Status
}

// VirtualNetworkGatewayPropertiesFormat - VirtualNetworkGateway properties
type VirtualNetworkGatewayPropertiesFormat struct {
	// IPConfigurations - IP configurations for virtual network gateway.
	IPConfigurations []VirtualNetworkGatewayIPConfiguration `json:"ipConfigurations,omitempty"`
	// GatewayType - The type of this virtual network gateway. Possible values are: 'Vpn' and 'ExpressRoute'. Possible values include: 'Vpn', 'ExpressRoute', 'None'
	GatewayType VirtualNetworkGatewayType `json:"gatewayType,omitempty"`
	// VpnType - The type of this virtual network gateway. Possible values are: 'PolicyBased' and 'RouteBased'. Possible values include: 'PolicyBased', 'RouteBased', 'None'
	VpnType VpnType `json:"vpnType,omitempty"`
	// EnableBgp - Whether BGP is enabled for this virtual network gateway or not.
	EnableBgp *bool `json:"enableBgp,omitempty"`
	// ActiveActive - ActiveActive flag
	ActiveActive *bool `json:"activeActive,omitempty"`
	// GatewayDefaultSite - The reference of the LocalNetworkGateway resource which represents local network site having default routes. Assign Null value in case of removing existing default site setting.
	GatewayDefaultSite *SubResource `json:"gatewayDefaultSite,omitempty"`
	// Sku - The reference of the VirtualNetworkGatewaySku resource which represents the SKU selected for Virtual network gateway.
	Sku *VirtualNetworkGatewaySku `json:"sku,omitempty"`
	// VpnClientConfiguration - The reference of the VpnClientConfiguration resource which represents the P2S VpnClient configurations.
	VpnClientConfiguration *VpnClientConfiguration `json:"vpnClientConfiguration,omitempty"`
	// BgpSettings - Virtual network gateway's BGP speaker settings.
	BgpSettings *BgpSettings `json:"bgpSettings,omitempty"`
	// ResourceGUID - The resource GUID property of the VirtualNetworkGateway resource.
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - The provisioning state of the VirtualNetworkGateway resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// VirtualNetworkGatewaySku - VirtualNetworkGatewaySku details
type VirtualNetworkGatewaySku struct {
	// Name - Gateway SKU name. Possible values are: 'Basic', 'HighPerformance','Standard', and 'UltraPerformance'. Possible values include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance', 'None'
	Name VirtualNetworkGatewaySkuNameType `json:"name,omitempty"`
	// Tier - Gateway SKU tier. Possible values are: 'Basic', 'HighPerformance','Standard', and 'UltraPerformance'. Possible values include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance', 'None'
	Tier VirtualNetworkGatewaySkuTierType `json:"tier,omitempty"`
	// Capacity - The capacity.
	Capacity *int32 `json:"capacity,omitempty"`
}

// VirtualNetworkListResult - Response for the ListVirtualNetworks API service call.
type VirtualNetworkListResult struct {
	rawResponse *http.Response
	// Value - Gets a list of VirtualNetwork resources in a resource group.
	Value []VirtualNetwork `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (vnlr VirtualNetworkListResult) Response() *http.Response {
	return vnlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vnlr VirtualNetworkListResult) StatusCode() int {
	return vnlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vnlr VirtualNetworkListResult) Status() string {
	return vnlr.rawResponse.Status
}

// VirtualNetworkPeering - Peerings in a virtual network resource.
type VirtualNetworkPeering struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID                                     *string `json:"id,omitempty"`
	*VirtualNetworkPeeringPropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// Response returns the raw HTTP response object.
func (vnp VirtualNetworkPeering) Response() *http.Response {
	return vnp.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vnp VirtualNetworkPeering) StatusCode() int {
	return vnp.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vnp VirtualNetworkPeering) Status() string {
	return vnp.rawResponse.Status
}

// VirtualNetworkPeeringListResult - Response for ListSubnets API service call. Retrieves all subnets that belong to a
// virtual network.
type VirtualNetworkPeeringListResult struct {
	rawResponse *http.Response
	// Value - The peerings in a virtual network.
	Value []VirtualNetworkPeering `json:"value,omitempty"`
	// NextLink - The URL to get the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (vnplr VirtualNetworkPeeringListResult) Response() *http.Response {
	return vnplr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (vnplr VirtualNetworkPeeringListResult) StatusCode() int {
	return vnplr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (vnplr VirtualNetworkPeeringListResult) Status() string {
	return vnplr.rawResponse.Status
}

// VirtualNetworkPeeringPropertiesFormat ...
type VirtualNetworkPeeringPropertiesFormat struct {
	// AllowVirtualNetworkAccess - Whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space.
	AllowVirtualNetworkAccess *bool `json:"allowVirtualNetworkAccess,omitempty"`
	// AllowForwardedTraffic - Whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed.
	AllowForwardedTraffic *bool `json:"allowForwardedTraffic,omitempty"`
	// AllowGatewayTransit - If gateway links can be used in remote virtual networking to link to this virtual network.
	AllowGatewayTransit *bool `json:"allowGatewayTransit,omitempty"`
	// UseRemoteGateways - If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
	UseRemoteGateways *bool `json:"useRemoteGateways,omitempty"`
	// RemoteVirtualNetwork - The reference of the remote virtual network.
	RemoteVirtualNetwork *SubResource `json:"remoteVirtualNetwork,omitempty"`
	// PeeringState - The status of the virtual network peering. Possible values are 'Initiated', 'Connected', and 'Disconnected'. Possible values include: 'Initiated', 'Connected', 'Disconnected', 'None'
	PeeringState VirtualNetworkPeeringStateType `json:"peeringState,omitempty"`
	// ProvisioningState - The provisioning state of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// VirtualNetworkPropertiesFormat ...
type VirtualNetworkPropertiesFormat struct {
	// AddressSpace - The AddressSpace that contains an array of IP address ranges that can be used by subnets.
	AddressSpace *AddressSpace `json:"addressSpace,omitempty"`
	// DhcpOptions - The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
	DhcpOptions *DhcpOptions `json:"dhcpOptions,omitempty"`
	// Subnets - A list of subnets in a Virtual Network.
	Subnets []Subnet `json:"subnets,omitempty"`
	// VirtualNetworkPeerings - A list of peerings in a Virtual Network.
	VirtualNetworkPeerings []VirtualNetworkPeering `json:"virtualNetworkPeerings,omitempty"`
	// ResourceGUID - The resourceGuid property of the Virtual Network resource.
	ResourceGUID *string `json:"resourceGuid,omitempty"`
	// ProvisioningState - The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// VpnClientConfiguration - VpnClientConfiguration for P2S client.
type VpnClientConfiguration struct {
	// VpnClientAddressPool - The reference of the address space resource which represents Address space for P2S VpnClient.
	VpnClientAddressPool *AddressSpace `json:"vpnClientAddressPool,omitempty"`
	// VpnClientRootCertificates - VpnClientRootCertificate for virtual network gateway.
	VpnClientRootCertificates []VpnClientRootCertificate `json:"vpnClientRootCertificates,omitempty"`
	// VpnClientRevokedCertificates - VpnClientRevokedCertificate for Virtual network gateway.
	VpnClientRevokedCertificates []VpnClientRevokedCertificate `json:"vpnClientRevokedCertificates,omitempty"`
}

// VpnClientParameters - VpnClientParameters
type VpnClientParameters struct {
	// ProcessorArchitecture - VPN client Processor Architecture. Possible values are: 'AMD64' and 'X86'. Possible values include: 'Amd64', 'X86', 'None'
	ProcessorArchitecture ProcessorArchitectureType `json:"ProcessorArchitecture,omitempty"`
}

// VpnClientRevokedCertificate - VPN client revoked certificate of virtual network gateway.
type VpnClientRevokedCertificate struct {
	// ID - Resource ID.
	ID                                           *string `json:"id,omitempty"`
	*VpnClientRevokedCertificatePropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// VpnClientRevokedCertificatePropertiesFormat - Properties of the revoked VPN client certificate of virtual network
// gateway.
type VpnClientRevokedCertificatePropertiesFormat struct {
	// Thumbprint - The revoked VPN client certificate thumbprint.
	Thumbprint *string `json:"thumbprint,omitempty"`
	// ProvisioningState - The provisioning state of the VPN client revoked certificate resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// VpnClientRootCertificate - VPN client root certificate of virtual network gateway
type VpnClientRootCertificate struct {
	// ID - Resource ID.
	ID                                        *string `json:"id,omitempty"`
	*VpnClientRootCertificatePropertiesFormat `json:"properties,omitempty"`
	// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`
}

// VpnClientRootCertificatePropertiesFormat - Properties of SSL certificates of application gateway
type VpnClientRootCertificatePropertiesFormat struct {
	// PublicCertData - The certificate public data.
	PublicCertData string `json:"publicCertData,omitempty"`
	// ProvisioningState - The provisioning state of the VPN client root certificate resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// Watcher - Network watcher in a resource group.
type Watcher struct {
	rawResponse *http.Response
	// ID - Resource ID.
	ID *string `json:"id,omitempty"`
	// Name - Resource name.
	Name *string `json:"name,omitempty"`
	// Type - Resource type.
	Type *string `json:"type,omitempty"`
	// Location - Resource location.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Etag - A unique read-only string that changes whenever the resource is updated.
	Etag                     *string `json:"etag,omitempty"`
	*WatcherPropertiesFormat `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (w Watcher) Response() *http.Response {
	return w.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (w Watcher) StatusCode() int {
	return w.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (w Watcher) Status() string {
	return w.rawResponse.Status
}

// WatcherListResult - List of network watcher resources.
type WatcherListResult struct {
	rawResponse *http.Response
	Value       []Watcher `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (wlr WatcherListResult) Response() *http.Response {
	return wlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (wlr WatcherListResult) StatusCode() int {
	return wlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (wlr WatcherListResult) Status() string {
	return wlr.rawResponse.Status
}

// WatcherPropertiesFormat - The network watcher properties.
type WatcherPropertiesFormat struct {
	// ProvisioningState - The provisioning state of the resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed', 'None'
	ProvisioningState ProvisioningStateType `json:"provisioningState,omitempty"`
}
