package network

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/xml"
	"reflect"
	"time"
	"unsafe"
)

const (
	rfc3339Format = "2006-01-02T15:04:05.0000000Z07:00"
)

// used to convert times from UTC to GMT before sending across the wire
var gmt = time.FixedZone("GMT", 0)

// internal type used for marshalling time in RFC1123 format
type timeRFC1123 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC1123.
func (t timeRFC1123) MarshalText() ([]byte, error) {
	return []byte(t.Format(time.RFC1123)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC1123.
func (t *timeRFC1123) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(time.RFC1123, string(data))
	return
}

// internal type used for marshalling time in RFC3339 format
type timeRFC3339 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC3339.
func (t timeRFC3339) MarshalText() ([]byte, error) {
	return []byte(t.Format(rfc3339Format)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC3339.
func (t *timeRFC3339) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(rfc3339Format, string(data))
	return
}

// internal type used for marshalling
type topology struct {
	ID              *string            `json:"id,omitempty"`
	CreatedDateTime *timeRFC3339       `json:"createdDateTime,omitempty"`
	LastModified    *timeRFC3339       `json:"lastModified,omitempty"`
	Resources       []TopologyResource `json:"resources,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for Topology.
func (t Topology) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*Topology)(nil)).Elem().Size() != reflect.TypeOf((*topology)(nil)).Elem().Size() {
		panic("size mismatch between Topology and topology")
	}
	t2 := (*topology)(unsafe.Pointer(&t))
	return e.EncodeElement(*t2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for Topology.
func (t *Topology) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*Topology)(nil)).Elem().Size() != reflect.TypeOf((*topology)(nil)).Elem().Size() {
		panic("size mismatch between Topology and topology")
	}
	t2 := (*topology)(unsafe.Pointer(t))
	return d.DecodeElement(t2, &start)
}

// internal type used for marshalling
type packetCaptureQueryStatusResult struct {
	Name                *string       `json:"name,omitempty"`
	ID                  *string       `json:"id,omitempty"`
	CaptureStartTime    *timeRFC3339  `json:"captureStartTime,omitempty"`
	PacketCaptureStatus PcStatusType  `json:"packetCaptureStatus,omitempty"`
	StopReason          *string       `json:"stopReason,omitempty"`
	PacketCaptureError  []PcErrorType `json:"packetCaptureError,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for PacketCaptureQueryStatusResult.
func (pcqsr PacketCaptureQueryStatusResult) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*PacketCaptureQueryStatusResult)(nil)).Elem().Size() != reflect.TypeOf((*packetCaptureQueryStatusResult)(nil)).Elem().Size() {
		panic("size mismatch between PacketCaptureQueryStatusResult and packetCaptureQueryStatusResult")
	}
	pcqsr2 := (*packetCaptureQueryStatusResult)(unsafe.Pointer(&pcqsr))
	return e.EncodeElement(*pcqsr2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for PacketCaptureQueryStatusResult.
func (pcqsr *PacketCaptureQueryStatusResult) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*PacketCaptureQueryStatusResult)(nil)).Elem().Size() != reflect.TypeOf((*packetCaptureQueryStatusResult)(nil)).Elem().Size() {
		panic("size mismatch between PacketCaptureQueryStatusResult and packetCaptureQueryStatusResult")
	}
	pcqsr2 := (*packetCaptureQueryStatusResult)(unsafe.Pointer(pcqsr))
	return d.DecodeElement(pcqsr2, &start)
}

// internal type used for marshalling
type troubleshootingResult struct {
	StartTime *timeRFC3339             `json:"startTime,omitempty"`
	EndTime   *timeRFC3339             `json:"endTime,omitempty"`
	Code      *string                  `json:"code,omitempty"`
	Results   []TroubleshootingDetails `json:"results,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for TroubleshootingResult.
func (tr TroubleshootingResult) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*TroubleshootingResult)(nil)).Elem().Size() != reflect.TypeOf((*troubleshootingResult)(nil)).Elem().Size() {
		panic("size mismatch between TroubleshootingResult and troubleshootingResult")
	}
	tr2 := (*troubleshootingResult)(unsafe.Pointer(&tr))
	return e.EncodeElement(*tr2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for TroubleshootingResult.
func (tr *TroubleshootingResult) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*TroubleshootingResult)(nil)).Elem().Size() != reflect.TypeOf((*troubleshootingResult)(nil)).Elem().Size() {
		panic("size mismatch between TroubleshootingResult and troubleshootingResult")
	}
	tr2 := (*troubleshootingResult)(unsafe.Pointer(tr))
	return d.DecodeElement(tr2, &start)
}

// internal type used for marshalling
type azureReachabilityReportParameters struct {
	ProviderLocation AzureReachabilityReportLocation `json:"providerLocation,omitempty"`
	Providers        []string                        `json:"providers,omitempty"`
	AzureLocations   []string                        `json:"azureLocations,omitempty"`
	StartTime        timeRFC3339                     `json:"startTime,omitempty"`
	EndTime          timeRFC3339                     `json:"endTime,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for AzureReachabilityReportParameters.
func (arrp AzureReachabilityReportParameters) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*AzureReachabilityReportParameters)(nil)).Elem().Size() != reflect.TypeOf((*azureReachabilityReportParameters)(nil)).Elem().Size() {
		panic("size mismatch between AzureReachabilityReportParameters and azureReachabilityReportParameters")
	}
	arrp2 := (*azureReachabilityReportParameters)(unsafe.Pointer(&arrp))
	return e.EncodeElement(*arrp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for AzureReachabilityReportParameters.
func (arrp *AzureReachabilityReportParameters) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*AzureReachabilityReportParameters)(nil)).Elem().Size() != reflect.TypeOf((*azureReachabilityReportParameters)(nil)).Elem().Size() {
		panic("size mismatch between AzureReachabilityReportParameters and azureReachabilityReportParameters")
	}
	arrp2 := (*azureReachabilityReportParameters)(unsafe.Pointer(arrp))
	return d.DecodeElement(arrp2, &start)
}

// internal type used for marshalling
type azureReachabilityReportLatencyInfo struct {
	TimeStamp *timeRFC3339 `json:"timeStamp,omitempty"`
	Score     *int32       `json:"score,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for AzureReachabilityReportLatencyInfo.
func (arrli AzureReachabilityReportLatencyInfo) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*AzureReachabilityReportLatencyInfo)(nil)).Elem().Size() != reflect.TypeOf((*azureReachabilityReportLatencyInfo)(nil)).Elem().Size() {
		panic("size mismatch between AzureReachabilityReportLatencyInfo and azureReachabilityReportLatencyInfo")
	}
	arrli2 := (*azureReachabilityReportLatencyInfo)(unsafe.Pointer(&arrli))
	return e.EncodeElement(*arrli2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for AzureReachabilityReportLatencyInfo.
func (arrli *AzureReachabilityReportLatencyInfo) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*AzureReachabilityReportLatencyInfo)(nil)).Elem().Size() != reflect.TypeOf((*azureReachabilityReportLatencyInfo)(nil)).Elem().Size() {
		panic("size mismatch between AzureReachabilityReportLatencyInfo and azureReachabilityReportLatencyInfo")
	}
	arrli2 := (*azureReachabilityReportLatencyInfo)(unsafe.Pointer(arrli))
	return d.DecodeElement(arrli2, &start)
}
