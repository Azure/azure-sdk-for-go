package peering

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// LookingGlassClient is the peering Client
type LookingGlassClient struct {
	BaseClient
}

// NewLookingGlassClient creates an instance of the LookingGlassClient client.
func NewLookingGlassClient(subscriptionID string) LookingGlassClient {
	return NewLookingGlassClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewLookingGlassClientWithBaseURI creates an instance of the LookingGlassClient client using a custom endpoint.  Use
// this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewLookingGlassClientWithBaseURI(baseURI string, subscriptionID string) LookingGlassClient {
	return LookingGlassClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Invoke run looking glass functionality
// Parameters:
// command - the command to be executed: ping, traceroute, bgpRoute.
// sourceType - the type of the source: Edge site or Azure Region.
// sourceLocation - the location of the source.
// destinationIP - the IP address of the destination.
func (client LookingGlassClient) Invoke(ctx context.Context, command string, sourceType string, sourceLocation string, destinationIP string) (result LookingGlassOutput, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/LookingGlassClient.Invoke")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.InvokePreparer(ctx, command, sourceType, sourceLocation, destinationIP)
	if err != nil {
		err = autorest.NewErrorWithError(err, "peering.LookingGlassClient", "Invoke", nil, "Failure preparing request")
		return
	}

	resp, err := client.InvokeSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "peering.LookingGlassClient", "Invoke", resp, "Failure sending request")
		return
	}

	result, err = client.InvokeResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "peering.LookingGlassClient", "Invoke", resp, "Failure responding to request")
		return
	}

	return
}

// InvokePreparer prepares the Invoke request.
func (client LookingGlassClient) InvokePreparer(ctx context.Context, command string, sourceType string, sourceLocation string, destinationIP string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-06-01"
	queryParameters := map[string]interface{}{
		"api-version":    APIVersion,
		"command":        autorest.Encode("query", command),
		"destinationIP":  autorest.Encode("query", destinationIP),
		"sourceLocation": autorest.Encode("query", sourceLocation),
		"sourceType":     autorest.Encode("query", sourceType),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Peering/lookingGlass", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// InvokeSender sends the Invoke request. The method will close the
// http.Response Body if it receives an error.
func (client LookingGlassClient) InvokeSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// InvokeResponder handles the response to the Invoke request. The method always
// closes the http.Response Body.
func (client LookingGlassClient) InvokeResponder(resp *http.Response) (result LookingGlassOutput, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
