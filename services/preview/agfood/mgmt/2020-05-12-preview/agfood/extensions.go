package agfood

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// ExtensionsClient is the aPIs documentation for Azure AgFoodPlatform Resource Provider Service.
type ExtensionsClient struct {
	BaseClient
}

// NewExtensionsClient creates an instance of the ExtensionsClient client.
func NewExtensionsClient(subscriptionID string) ExtensionsClient {
	return NewExtensionsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewExtensionsClientWithBaseURI creates an instance of the ExtensionsClient client using a custom endpoint.  Use this
// when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewExtensionsClientWithBaseURI(baseURI string, subscriptionID string) ExtensionsClient {
	return ExtensionsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Create install extension.
// Parameters:
// extensionID - id of extension resource.
// farmBeatsResourceName - farmBeats resource name.
// resourceGroupName - the name of the resource group. The name is case insensitive.
func (client ExtensionsClient) Create(ctx context.Context, extensionID string, farmBeatsResourceName string, resourceGroupName string) (result Extension, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ExtensionsClient.Create")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
				{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("agfood.ExtensionsClient", "Create", err.Error())
	}

	req, err := client.CreatePreparer(ctx, extensionID, farmBeatsResourceName, resourceGroupName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "Create", resp, "Failure responding to request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client ExtensionsClient) CreatePreparer(ctx context.Context, extensionID string, farmBeatsResourceName string, resourceGroupName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"extensionId":           autorest.Encode("path", extensionID),
		"farmBeatsResourceName": autorest.Encode("path", farmBeatsResourceName),
		"resourceGroupName":     autorest.Encode("path", resourceGroupName),
		"subscriptionId":        autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-05-12-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/extensions/{extensionId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client ExtensionsClient) CreateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client ExtensionsClient) CreateResponder(resp *http.Response) (result Extension, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete uninstall extension.
// Parameters:
// extensionID - id of extension resource.
// farmBeatsResourceName - farmBeats resource name.
// resourceGroupName - the name of the resource group. The name is case insensitive.
func (client ExtensionsClient) Delete(ctx context.Context, extensionID string, farmBeatsResourceName string, resourceGroupName string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ExtensionsClient.Delete")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
				{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("agfood.ExtensionsClient", "Delete", err.Error())
	}

	req, err := client.DeletePreparer(ctx, extensionID, farmBeatsResourceName, resourceGroupName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "Delete", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "Delete", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "Delete", resp, "Failure responding to request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client ExtensionsClient) DeletePreparer(ctx context.Context, extensionID string, farmBeatsResourceName string, resourceGroupName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"extensionId":           autorest.Encode("path", extensionID),
		"farmBeatsResourceName": autorest.Encode("path", farmBeatsResourceName),
		"resourceGroupName":     autorest.Encode("path", resourceGroupName),
		"subscriptionId":        autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-05-12-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/extensions/{extensionId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client ExtensionsClient) DeleteSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client ExtensionsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get get installed extension details by extension id.
// Parameters:
// extensionID - id of extension resource.
// farmBeatsResourceName - farmBeats resource name.
// resourceGroupName - the name of the resource group. The name is case insensitive.
func (client ExtensionsClient) Get(ctx context.Context, extensionID string, farmBeatsResourceName string, resourceGroupName string) (result Extension, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ExtensionsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
				{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("agfood.ExtensionsClient", "Get", err.Error())
	}

	req, err := client.GetPreparer(ctx, extensionID, farmBeatsResourceName, resourceGroupName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client ExtensionsClient) GetPreparer(ctx context.Context, extensionID string, farmBeatsResourceName string, resourceGroupName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"extensionId":           autorest.Encode("path", extensionID),
		"farmBeatsResourceName": autorest.Encode("path", farmBeatsResourceName),
		"resourceGroupName":     autorest.Encode("path", resourceGroupName),
		"subscriptionId":        autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-05-12-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/extensions/{extensionId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client ExtensionsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client ExtensionsClient) GetResponder(resp *http.Response) (result Extension, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByFarmBeats get installed extensions details.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// farmBeatsResourceName - farmBeats resource name.
// extensionID - id of extension resource.
// extensionCategory - category of extension (weather/sensor/satellite etc.).
// maxPageSize - maximum number of items needed (inclusive).
// Minimum = 10, Maximum = 1000, Default value = 50.
// skipToken - skip token for getting next set of results.
func (client ExtensionsClient) ListByFarmBeats(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, extensionID string, extensionCategory string, maxPageSize *int32, skipToken string) (result ExtensionListResponsePage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ExtensionsClient.ListByFarmBeats")
		defer func() {
			sc := -1
			if result.elr.Response.Response != nil {
				sc = result.elr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
				{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: extensionCategory,
			Constraints: []validation.Constraint{{Target: "extensionCategory", Name: validation.Empty, Rule: false,
				Chain: []validation.Constraint{{Target: "extensionCategory", Name: validation.MaxLength, Rule: 50, Chain: nil},
					{Target: "extensionCategory", Name: validation.MinLength, Rule: 0, Chain: nil},
				}}}},
		{TargetValue: maxPageSize,
			Constraints: []validation.Constraint{{Target: "maxPageSize", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "maxPageSize", Name: validation.InclusiveMaximum, Rule: int64(1000), Chain: nil},
					{Target: "maxPageSize", Name: validation.InclusiveMinimum, Rule: int64(10), Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("agfood.ExtensionsClient", "ListByFarmBeats", err.Error())
	}

	result.fn = client.listByFarmBeatsNextResults
	req, err := client.ListByFarmBeatsPreparer(ctx, resourceGroupName, farmBeatsResourceName, extensionID, extensionCategory, maxPageSize, skipToken)
	if err != nil {
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "ListByFarmBeats", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByFarmBeatsSender(req)
	if err != nil {
		result.elr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "ListByFarmBeats", resp, "Failure sending request")
		return
	}

	result.elr, err = client.ListByFarmBeatsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "ListByFarmBeats", resp, "Failure responding to request")
		return
	}
	if result.elr.hasNextLink() && result.elr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByFarmBeatsPreparer prepares the ListByFarmBeats request.
func (client ExtensionsClient) ListByFarmBeatsPreparer(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, extensionID string, extensionCategory string, maxPageSize *int32, skipToken string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"farmBeatsResourceName": autorest.Encode("path", farmBeatsResourceName),
		"resourceGroupName":     autorest.Encode("path", resourceGroupName),
		"subscriptionId":        autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-05-12-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(extensionID) > 0 {
		queryParameters["extensionId"] = autorest.Encode("query", extensionID)
	}
	if len(extensionCategory) > 0 {
		queryParameters["extensionCategory"] = autorest.Encode("query", extensionCategory)
	}
	if maxPageSize != nil {
		queryParameters["$maxPageSize"] = autorest.Encode("query", *maxPageSize)
	} else {
		queryParameters["$maxPageSize"] = autorest.Encode("query", 50)
	}
	if len(skipToken) > 0 {
		queryParameters["$skipToken"] = autorest.Encode("query", skipToken)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/extensions", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByFarmBeatsSender sends the ListByFarmBeats request. The method will close the
// http.Response Body if it receives an error.
func (client ExtensionsClient) ListByFarmBeatsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByFarmBeatsResponder handles the response to the ListByFarmBeats request. The method always
// closes the http.Response Body.
func (client ExtensionsClient) ListByFarmBeatsResponder(resp *http.Response) (result ExtensionListResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByFarmBeatsNextResults retrieves the next set of results, if any.
func (client ExtensionsClient) listByFarmBeatsNextResults(ctx context.Context, lastResults ExtensionListResponse) (result ExtensionListResponse, err error) {
	req, err := lastResults.extensionListResponsePreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "listByFarmBeatsNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByFarmBeatsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "listByFarmBeatsNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByFarmBeatsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "listByFarmBeatsNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByFarmBeatsComplete enumerates all values, automatically crossing page boundaries as required.
func (client ExtensionsClient) ListByFarmBeatsComplete(ctx context.Context, resourceGroupName string, farmBeatsResourceName string, extensionID string, extensionCategory string, maxPageSize *int32, skipToken string) (result ExtensionListResponseIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ExtensionsClient.ListByFarmBeats")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByFarmBeats(ctx, resourceGroupName, farmBeatsResourceName, extensionID, extensionCategory, maxPageSize, skipToken)
	return
}

// Update upgrade to latest extension.
// Parameters:
// extensionID - id of extension resource.
// farmBeatsResourceName - farmBeats resource name.
// resourceGroupName - the name of the resource group. The name is case insensitive.
func (client ExtensionsClient) Update(ctx context.Context, extensionID string, farmBeatsResourceName string, resourceGroupName string) (result Extension, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ExtensionsClient.Update")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
				{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("agfood.ExtensionsClient", "Update", err.Error())
	}

	req, err := client.UpdatePreparer(ctx, extensionID, farmBeatsResourceName, resourceGroupName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "Update", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "Update", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "agfood.ExtensionsClient", "Update", resp, "Failure responding to request")
		return
	}

	return
}

// UpdatePreparer prepares the Update request.
func (client ExtensionsClient) UpdatePreparer(ctx context.Context, extensionID string, farmBeatsResourceName string, resourceGroupName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"extensionId":           autorest.Encode("path", extensionID),
		"farmBeatsResourceName": autorest.Encode("path", farmBeatsResourceName),
		"resourceGroupName":     autorest.Encode("path", resourceGroupName),
		"subscriptionId":        autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-05-12-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/extensions/{extensionId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateSender sends the Update request. The method will close the
// http.Response Body if it receives an error.
func (client ExtensionsClient) UpdateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// UpdateResponder handles the response to the Update request. The method always
// closes the http.Response Body.
func (client ExtensionsClient) UpdateResponder(resp *http.Response) (result Extension, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
