package authorization

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// AccessReviewInstanceClient is the client for the AccessReviewInstance methods of the Authorization service.
type AccessReviewInstanceClient struct {
	BaseClient
}

// NewAccessReviewInstanceClient creates an instance of the AccessReviewInstanceClient client.
func NewAccessReviewInstanceClient(subscriptionID string) AccessReviewInstanceClient {
	return NewAccessReviewInstanceClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewAccessReviewInstanceClientWithBaseURI creates an instance of the AccessReviewInstanceClient client using a custom
// endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure
// stack).
func NewAccessReviewInstanceClientWithBaseURI(baseURI string, subscriptionID string) AccessReviewInstanceClient {
	return AccessReviewInstanceClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// AcceptRecommendations an action to accept recommendations for decision in an access review instance.
// Parameters:
// scheduleDefinitionID - the id of the access review schedule definition.
// ID - the id of the access review instance.
func (client AccessReviewInstanceClient) AcceptRecommendations(ctx context.Context, scheduleDefinitionID string, ID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AccessReviewInstanceClient.AcceptRecommendations")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.AcceptRecommendationsPreparer(ctx, scheduleDefinitionID, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstanceClient", "AcceptRecommendations", nil, "Failure preparing request")
		return
	}

	resp, err := client.AcceptRecommendationsSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstanceClient", "AcceptRecommendations", resp, "Failure sending request")
		return
	}

	result, err = client.AcceptRecommendationsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstanceClient", "AcceptRecommendations", resp, "Failure responding to request")
		return
	}

	return
}

// AcceptRecommendationsPreparer prepares the AcceptRecommendations request.
func (client AccessReviewInstanceClient) AcceptRecommendationsPreparer(ctx context.Context, scheduleDefinitionID string, ID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id":                   autorest.Encode("path", ID),
		"scheduleDefinitionId": autorest.Encode("path", scheduleDefinitionID),
	}

	const APIVersion = "2018-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/acceptRecommendations", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// AcceptRecommendationsSender sends the AcceptRecommendations request. The method will close the
// http.Response Body if it receives an error.
func (client AccessReviewInstanceClient) AcceptRecommendationsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// AcceptRecommendationsResponder handles the response to the AcceptRecommendations request. The method always
// closes the http.Response Body.
func (client AccessReviewInstanceClient) AcceptRecommendationsResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ApplyDecisions an action to apply all decisions for an access review instance.
// Parameters:
// scheduleDefinitionID - the id of the access review schedule definition.
// ID - the id of the access review instance.
func (client AccessReviewInstanceClient) ApplyDecisions(ctx context.Context, scheduleDefinitionID string, ID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AccessReviewInstanceClient.ApplyDecisions")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("authorization.AccessReviewInstanceClient", "ApplyDecisions", err.Error())
	}

	req, err := client.ApplyDecisionsPreparer(ctx, scheduleDefinitionID, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstanceClient", "ApplyDecisions", nil, "Failure preparing request")
		return
	}

	resp, err := client.ApplyDecisionsSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstanceClient", "ApplyDecisions", resp, "Failure sending request")
		return
	}

	result, err = client.ApplyDecisionsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstanceClient", "ApplyDecisions", resp, "Failure responding to request")
		return
	}

	return
}

// ApplyDecisionsPreparer prepares the ApplyDecisions request.
func (client AccessReviewInstanceClient) ApplyDecisionsPreparer(ctx context.Context, scheduleDefinitionID string, ID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id":                   autorest.Encode("path", ID),
		"scheduleDefinitionId": autorest.Encode("path", scheduleDefinitionID),
		"subscriptionId":       autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/applyDecisions", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ApplyDecisionsSender sends the ApplyDecisions request. The method will close the
// http.Response Body if it receives an error.
func (client AccessReviewInstanceClient) ApplyDecisionsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ApplyDecisionsResponder handles the response to the ApplyDecisions request. The method always
// closes the http.Response Body.
func (client AccessReviewInstanceClient) ApplyDecisionsResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResetDecisions an action to reset all decisions for an access review instance.
// Parameters:
// scheduleDefinitionID - the id of the access review schedule definition.
// ID - the id of the access review instance.
func (client AccessReviewInstanceClient) ResetDecisions(ctx context.Context, scheduleDefinitionID string, ID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AccessReviewInstanceClient.ResetDecisions")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("authorization.AccessReviewInstanceClient", "ResetDecisions", err.Error())
	}

	req, err := client.ResetDecisionsPreparer(ctx, scheduleDefinitionID, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstanceClient", "ResetDecisions", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResetDecisionsSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstanceClient", "ResetDecisions", resp, "Failure sending request")
		return
	}

	result, err = client.ResetDecisionsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstanceClient", "ResetDecisions", resp, "Failure responding to request")
		return
	}

	return
}

// ResetDecisionsPreparer prepares the ResetDecisions request.
func (client AccessReviewInstanceClient) ResetDecisionsPreparer(ctx context.Context, scheduleDefinitionID string, ID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id":                   autorest.Encode("path", ID),
		"scheduleDefinitionId": autorest.Encode("path", scheduleDefinitionID),
		"subscriptionId":       autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/resetDecisions", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ResetDecisionsSender sends the ResetDecisions request. The method will close the
// http.Response Body if it receives an error.
func (client AccessReviewInstanceClient) ResetDecisionsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ResetDecisionsResponder handles the response to the ResetDecisions request. The method always
// closes the http.Response Body.
func (client AccessReviewInstanceClient) ResetDecisionsResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// SendReminders an action to send reminders for an access review instance.
// Parameters:
// scheduleDefinitionID - the id of the access review schedule definition.
// ID - the id of the access review instance.
func (client AccessReviewInstanceClient) SendReminders(ctx context.Context, scheduleDefinitionID string, ID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AccessReviewInstanceClient.SendReminders")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("authorization.AccessReviewInstanceClient", "SendReminders", err.Error())
	}

	req, err := client.SendRemindersPreparer(ctx, scheduleDefinitionID, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstanceClient", "SendReminders", nil, "Failure preparing request")
		return
	}

	resp, err := client.SendRemindersSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstanceClient", "SendReminders", resp, "Failure sending request")
		return
	}

	result, err = client.SendRemindersResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstanceClient", "SendReminders", resp, "Failure responding to request")
		return
	}

	return
}

// SendRemindersPreparer prepares the SendReminders request.
func (client AccessReviewInstanceClient) SendRemindersPreparer(ctx context.Context, scheduleDefinitionID string, ID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id":                   autorest.Encode("path", ID),
		"scheduleDefinitionId": autorest.Encode("path", scheduleDefinitionID),
		"subscriptionId":       autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/sendReminders", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// SendRemindersSender sends the SendReminders request. The method will close the
// http.Response Body if it receives an error.
func (client AccessReviewInstanceClient) SendRemindersSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// SendRemindersResponder handles the response to the SendReminders request. The method always
// closes the http.Response Body.
func (client AccessReviewInstanceClient) SendRemindersResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Stop an action to stop an access review instance.
// Parameters:
// scheduleDefinitionID - the id of the access review schedule definition.
// ID - the id of the access review instance.
func (client AccessReviewInstanceClient) Stop(ctx context.Context, scheduleDefinitionID string, ID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AccessReviewInstanceClient.Stop")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("authorization.AccessReviewInstanceClient", "Stop", err.Error())
	}

	req, err := client.StopPreparer(ctx, scheduleDefinitionID, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstanceClient", "Stop", nil, "Failure preparing request")
		return
	}

	resp, err := client.StopSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstanceClient", "Stop", resp, "Failure sending request")
		return
	}

	result, err = client.StopResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstanceClient", "Stop", resp, "Failure responding to request")
		return
	}

	return
}

// StopPreparer prepares the Stop request.
func (client AccessReviewInstanceClient) StopPreparer(ctx context.Context, scheduleDefinitionID string, ID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id":                   autorest.Encode("path", ID),
		"scheduleDefinitionId": autorest.Encode("path", scheduleDefinitionID),
		"subscriptionId":       autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/stop", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// StopSender sends the Stop request. The method will close the
// http.Response Body if it receives an error.
func (client AccessReviewInstanceClient) StopSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// StopResponder handles the response to the Stop request. The method always
// closes the http.Response Body.
func (client AccessReviewInstanceClient) StopResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}
