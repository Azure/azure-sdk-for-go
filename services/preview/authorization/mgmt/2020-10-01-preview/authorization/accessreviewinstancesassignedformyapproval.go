package authorization

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// AccessReviewInstancesAssignedForMyApprovalClient is the client for the AccessReviewInstancesAssignedForMyApproval
// methods of the Authorization service.
type AccessReviewInstancesAssignedForMyApprovalClient struct {
	BaseClient
}

// NewAccessReviewInstancesAssignedForMyApprovalClient creates an instance of the
// AccessReviewInstancesAssignedForMyApprovalClient client.
func NewAccessReviewInstancesAssignedForMyApprovalClient(subscriptionID string) AccessReviewInstancesAssignedForMyApprovalClient {
	return NewAccessReviewInstancesAssignedForMyApprovalClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewAccessReviewInstancesAssignedForMyApprovalClientWithBaseURI creates an instance of the
// AccessReviewInstancesAssignedForMyApprovalClient client using a custom endpoint.  Use this when interacting with an
// Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewAccessReviewInstancesAssignedForMyApprovalClientWithBaseURI(baseURI string, subscriptionID string) AccessReviewInstancesAssignedForMyApprovalClient {
	return AccessReviewInstancesAssignedForMyApprovalClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// GetByID get single access review instance assigned for my approval.
// Parameters:
// scheduleDefinitionID - the id of the access review schedule definition.
// ID - the id of the access review instance.
func (client AccessReviewInstancesAssignedForMyApprovalClient) GetByID(ctx context.Context, scheduleDefinitionID string, ID string) (result AccessReviewInstance, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AccessReviewInstancesAssignedForMyApprovalClient.GetByID")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetByIDPreparer(ctx, scheduleDefinitionID, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstancesAssignedForMyApprovalClient", "GetByID", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetByIDSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstancesAssignedForMyApprovalClient", "GetByID", resp, "Failure sending request")
		return
	}

	result, err = client.GetByIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstancesAssignedForMyApprovalClient", "GetByID", resp, "Failure responding to request")
		return
	}

	return
}

// GetByIDPreparer prepares the GetByID request.
func (client AccessReviewInstancesAssignedForMyApprovalClient) GetByIDPreparer(ctx context.Context, scheduleDefinitionID string, ID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id":                   autorest.Encode("path", ID),
		"scheduleDefinitionId": autorest.Encode("path", scheduleDefinitionID),
	}

	const APIVersion = "2018-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetByIDSender sends the GetByID request. The method will close the
// http.Response Body if it receives an error.
func (client AccessReviewInstancesAssignedForMyApprovalClient) GetByIDSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetByIDResponder handles the response to the GetByID request. The method always
// closes the http.Response Body.
func (client AccessReviewInstancesAssignedForMyApprovalClient) GetByIDResponder(resp *http.Response) (result AccessReviewInstance, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List get access review instances assigned for my approval.
// Parameters:
// scheduleDefinitionID - the id of the access review schedule definition.
func (client AccessReviewInstancesAssignedForMyApprovalClient) List(ctx context.Context, scheduleDefinitionID string) (result AccessReviewInstanceListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AccessReviewInstancesAssignedForMyApprovalClient.List")
		defer func() {
			sc := -1
			if result.arilr.Response.Response != nil {
				sc = result.arilr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listNextResults
	req, err := client.ListPreparer(ctx, scheduleDefinitionID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstancesAssignedForMyApprovalClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.arilr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstancesAssignedForMyApprovalClient", "List", resp, "Failure sending request")
		return
	}

	result.arilr, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstancesAssignedForMyApprovalClient", "List", resp, "Failure responding to request")
		return
	}
	if result.arilr.hasNextLink() && result.arilr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListPreparer prepares the List request.
func (client AccessReviewInstancesAssignedForMyApprovalClient) ListPreparer(ctx context.Context, scheduleDefinitionID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"scheduleDefinitionId": autorest.Encode("path", scheduleDefinitionID),
	}

	const APIVersion = "2018-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client AccessReviewInstancesAssignedForMyApprovalClient) ListSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client AccessReviewInstancesAssignedForMyApprovalClient) ListResponder(resp *http.Response) (result AccessReviewInstanceListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listNextResults retrieves the next set of results, if any.
func (client AccessReviewInstancesAssignedForMyApprovalClient) listNextResults(ctx context.Context, lastResults AccessReviewInstanceListResult) (result AccessReviewInstanceListResult, err error) {
	req, err := lastResults.accessReviewInstanceListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "authorization.AccessReviewInstancesAssignedForMyApprovalClient", "listNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "authorization.AccessReviewInstancesAssignedForMyApprovalClient", "listNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewInstancesAssignedForMyApprovalClient", "listNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListComplete enumerates all values, automatically crossing page boundaries as required.
func (client AccessReviewInstancesAssignedForMyApprovalClient) ListComplete(ctx context.Context, scheduleDefinitionID string) (result AccessReviewInstanceListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AccessReviewInstancesAssignedForMyApprovalClient.List")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.List(ctx, scheduleDefinitionID)
	return
}
