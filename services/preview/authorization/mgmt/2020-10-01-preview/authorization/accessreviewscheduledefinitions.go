package authorization

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// AccessReviewScheduleDefinitionsClient is the client for the AccessReviewScheduleDefinitions methods of the
// Authorization service.
type AccessReviewScheduleDefinitionsClient struct {
	BaseClient
}

// NewAccessReviewScheduleDefinitionsClient creates an instance of the AccessReviewScheduleDefinitionsClient client.
func NewAccessReviewScheduleDefinitionsClient(subscriptionID string) AccessReviewScheduleDefinitionsClient {
	return NewAccessReviewScheduleDefinitionsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewAccessReviewScheduleDefinitionsClientWithBaseURI creates an instance of the AccessReviewScheduleDefinitionsClient
// client using a custom endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI
// (sovereign clouds, Azure stack).
func NewAccessReviewScheduleDefinitionsClientWithBaseURI(baseURI string, subscriptionID string) AccessReviewScheduleDefinitionsClient {
	return AccessReviewScheduleDefinitionsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// CreateOrUpdateByID create or Update access review schedule definition.
// Parameters:
// scheduleDefinitionID - the id of the access review schedule definition.
// properties - access review schedule definition properties.
func (client AccessReviewScheduleDefinitionsClient) CreateOrUpdateByID(ctx context.Context, scheduleDefinitionID string, properties AccessReviewScheduleDefinitionProperties) (result AccessReviewScheduleDefinition, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AccessReviewScheduleDefinitionsClient.CreateOrUpdateByID")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("authorization.AccessReviewScheduleDefinitionsClient", "CreateOrUpdateByID", err.Error())
	}

	req, err := client.CreateOrUpdateByIDPreparer(ctx, scheduleDefinitionID, properties)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "CreateOrUpdateByID", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateOrUpdateByIDSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "CreateOrUpdateByID", resp, "Failure sending request")
		return
	}

	result, err = client.CreateOrUpdateByIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "CreateOrUpdateByID", resp, "Failure responding to request")
		return
	}

	return
}

// CreateOrUpdateByIDPreparer prepares the CreateOrUpdateByID request.
func (client AccessReviewScheduleDefinitionsClient) CreateOrUpdateByIDPreparer(ctx context.Context, scheduleDefinitionID string, properties AccessReviewScheduleDefinitionProperties) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"scheduleDefinitionId": autorest.Encode("path", scheduleDefinitionID),
		"subscriptionId":       autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	properties.Status = ""
	properties.AccessReviewActorIdentity = nil
	properties.AccessReviewScope = nil
	properties.ReviewersType = ""
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}", pathParameters),
		autorest.WithJSON(properties),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateByIDSender sends the CreateOrUpdateByID request. The method will close the
// http.Response Body if it receives an error.
func (client AccessReviewScheduleDefinitionsClient) CreateOrUpdateByIDSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CreateOrUpdateByIDResponder handles the response to the CreateOrUpdateByID request. The method always
// closes the http.Response Body.
func (client AccessReviewScheduleDefinitionsClient) CreateOrUpdateByIDResponder(resp *http.Response) (result AccessReviewScheduleDefinition, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteByID delete access review schedule definition
// Parameters:
// scheduleDefinitionID - the id of the access review schedule definition.
func (client AccessReviewScheduleDefinitionsClient) DeleteByID(ctx context.Context, scheduleDefinitionID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AccessReviewScheduleDefinitionsClient.DeleteByID")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("authorization.AccessReviewScheduleDefinitionsClient", "DeleteByID", err.Error())
	}

	req, err := client.DeleteByIDPreparer(ctx, scheduleDefinitionID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "DeleteByID", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteByIDSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "DeleteByID", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteByIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "DeleteByID", resp, "Failure responding to request")
		return
	}

	return
}

// DeleteByIDPreparer prepares the DeleteByID request.
func (client AccessReviewScheduleDefinitionsClient) DeleteByIDPreparer(ctx context.Context, scheduleDefinitionID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"scheduleDefinitionId": autorest.Encode("path", scheduleDefinitionID),
		"subscriptionId":       autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteByIDSender sends the DeleteByID request. The method will close the
// http.Response Body if it receives an error.
func (client AccessReviewScheduleDefinitionsClient) DeleteByIDSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteByIDResponder handles the response to the DeleteByID request. The method always
// closes the http.Response Body.
func (client AccessReviewScheduleDefinitionsClient) DeleteByIDResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetByID get single access review definition
// Parameters:
// scheduleDefinitionID - the id of the access review schedule definition.
func (client AccessReviewScheduleDefinitionsClient) GetByID(ctx context.Context, scheduleDefinitionID string) (result AccessReviewScheduleDefinition, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AccessReviewScheduleDefinitionsClient.GetByID")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("authorization.AccessReviewScheduleDefinitionsClient", "GetByID", err.Error())
	}

	req, err := client.GetByIDPreparer(ctx, scheduleDefinitionID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "GetByID", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetByIDSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "GetByID", resp, "Failure sending request")
		return
	}

	result, err = client.GetByIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "GetByID", resp, "Failure responding to request")
		return
	}

	return
}

// GetByIDPreparer prepares the GetByID request.
func (client AccessReviewScheduleDefinitionsClient) GetByIDPreparer(ctx context.Context, scheduleDefinitionID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"scheduleDefinitionId": autorest.Encode("path", scheduleDefinitionID),
		"subscriptionId":       autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetByIDSender sends the GetByID request. The method will close the
// http.Response Body if it receives an error.
func (client AccessReviewScheduleDefinitionsClient) GetByIDSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetByIDResponder handles the response to the GetByID request. The method always
// closes the http.Response Body.
func (client AccessReviewScheduleDefinitionsClient) GetByIDResponder(resp *http.Response) (result AccessReviewScheduleDefinition, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List get access review schedule definitions
func (client AccessReviewScheduleDefinitionsClient) List(ctx context.Context) (result AccessReviewScheduleDefinitionListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AccessReviewScheduleDefinitionsClient.List")
		defer func() {
			sc := -1
			if result.arsdlr.Response.Response != nil {
				sc = result.arsdlr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("authorization.AccessReviewScheduleDefinitionsClient", "List", err.Error())
	}

	result.fn = client.listNextResults
	req, err := client.ListPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.arsdlr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "List", resp, "Failure sending request")
		return
	}

	result.arsdlr, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "List", resp, "Failure responding to request")
		return
	}
	if result.arsdlr.hasNextLink() && result.arsdlr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListPreparer prepares the List request.
func (client AccessReviewScheduleDefinitionsClient) ListPreparer(ctx context.Context) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client AccessReviewScheduleDefinitionsClient) ListSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client AccessReviewScheduleDefinitionsClient) ListResponder(resp *http.Response) (result AccessReviewScheduleDefinitionListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listNextResults retrieves the next set of results, if any.
func (client AccessReviewScheduleDefinitionsClient) listNextResults(ctx context.Context, lastResults AccessReviewScheduleDefinitionListResult) (result AccessReviewScheduleDefinitionListResult, err error) {
	req, err := lastResults.accessReviewScheduleDefinitionListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "listNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "listNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "listNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListComplete enumerates all values, automatically crossing page boundaries as required.
func (client AccessReviewScheduleDefinitionsClient) ListComplete(ctx context.Context) (result AccessReviewScheduleDefinitionListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AccessReviewScheduleDefinitionsClient.List")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.List(ctx)
	return
}

// Stop stop access review definition
// Parameters:
// scheduleDefinitionID - the id of the access review schedule definition.
func (client AccessReviewScheduleDefinitionsClient) Stop(ctx context.Context, scheduleDefinitionID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AccessReviewScheduleDefinitionsClient.Stop")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("authorization.AccessReviewScheduleDefinitionsClient", "Stop", err.Error())
	}

	req, err := client.StopPreparer(ctx, scheduleDefinitionID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "Stop", nil, "Failure preparing request")
		return
	}

	resp, err := client.StopSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "Stop", resp, "Failure sending request")
		return
	}

	result, err = client.StopResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authorization.AccessReviewScheduleDefinitionsClient", "Stop", resp, "Failure responding to request")
		return
	}

	return
}

// StopPreparer prepares the Stop request.
func (client AccessReviewScheduleDefinitionsClient) StopPreparer(ctx context.Context, scheduleDefinitionID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"scheduleDefinitionId": autorest.Encode("path", scheduleDefinitionID),
		"subscriptionId":       autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/stop", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// StopSender sends the Stop request. The method will close the
// http.Response Body if it receives an error.
func (client AccessReviewScheduleDefinitionsClient) StopSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// StopResponder handles the response to the Stop request. The method always
// closes the http.Response Body.
func (client AccessReviewScheduleDefinitionsClient) StopResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}
