package azurestackhci

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// ActionType enumerates the values for action type.
type ActionType string

const (
	// Internal ...
	Internal ActionType = "Internal"
)

// PossibleActionTypeValues returns an array of possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{Internal}
}

// ArcSettingAggregateState enumerates the values for arc setting aggregate state.
type ArcSettingAggregateState string

const (
	// Canceled ...
	Canceled ArcSettingAggregateState = "Canceled"
	// Connected ...
	Connected ArcSettingAggregateState = "Connected"
	// Creating ...
	Creating ArcSettingAggregateState = "Creating"
	// Deleted ...
	Deleted ArcSettingAggregateState = "Deleted"
	// Deleting ...
	Deleting ArcSettingAggregateState = "Deleting"
	// Disconnected ...
	Disconnected ArcSettingAggregateState = "Disconnected"
	// Error ...
	Error ArcSettingAggregateState = "Error"
	// Failed ...
	Failed ArcSettingAggregateState = "Failed"
	// InProgress ...
	InProgress ArcSettingAggregateState = "InProgress"
	// Moving ...
	Moving ArcSettingAggregateState = "Moving"
	// NotSpecified ...
	NotSpecified ArcSettingAggregateState = "NotSpecified"
	// PartiallyConnected ...
	PartiallyConnected ArcSettingAggregateState = "PartiallyConnected"
	// PartiallySucceeded ...
	PartiallySucceeded ArcSettingAggregateState = "PartiallySucceeded"
	// Succeeded ...
	Succeeded ArcSettingAggregateState = "Succeeded"
	// Updating ...
	Updating ArcSettingAggregateState = "Updating"
)

// PossibleArcSettingAggregateStateValues returns an array of possible values for the ArcSettingAggregateState const type.
func PossibleArcSettingAggregateStateValues() []ArcSettingAggregateState {
	return []ArcSettingAggregateState{Canceled, Connected, Creating, Deleted, Deleting, Disconnected, Error, Failed, InProgress, Moving, NotSpecified, PartiallyConnected, PartiallySucceeded, Succeeded, Updating}
}

// CreatedByType enumerates the values for created by type.
type CreatedByType string

const (
	// Application ...
	Application CreatedByType = "Application"
	// Key ...
	Key CreatedByType = "Key"
	// ManagedIdentity ...
	ManagedIdentity CreatedByType = "ManagedIdentity"
	// User ...
	User CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns an array of possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{Application, Key, ManagedIdentity, User}
}

// ExtensionAggregateState enumerates the values for extension aggregate state.
type ExtensionAggregateState string

const (
	// ExtensionAggregateStateCanceled ...
	ExtensionAggregateStateCanceled ExtensionAggregateState = "Canceled"
	// ExtensionAggregateStateConnected ...
	ExtensionAggregateStateConnected ExtensionAggregateState = "Connected"
	// ExtensionAggregateStateCreating ...
	ExtensionAggregateStateCreating ExtensionAggregateState = "Creating"
	// ExtensionAggregateStateDeleted ...
	ExtensionAggregateStateDeleted ExtensionAggregateState = "Deleted"
	// ExtensionAggregateStateDeleting ...
	ExtensionAggregateStateDeleting ExtensionAggregateState = "Deleting"
	// ExtensionAggregateStateDisconnected ...
	ExtensionAggregateStateDisconnected ExtensionAggregateState = "Disconnected"
	// ExtensionAggregateStateError ...
	ExtensionAggregateStateError ExtensionAggregateState = "Error"
	// ExtensionAggregateStateFailed ...
	ExtensionAggregateStateFailed ExtensionAggregateState = "Failed"
	// ExtensionAggregateStateInProgress ...
	ExtensionAggregateStateInProgress ExtensionAggregateState = "InProgress"
	// ExtensionAggregateStateMoving ...
	ExtensionAggregateStateMoving ExtensionAggregateState = "Moving"
	// ExtensionAggregateStateNotSpecified ...
	ExtensionAggregateStateNotSpecified ExtensionAggregateState = "NotSpecified"
	// ExtensionAggregateStatePartiallyConnected ...
	ExtensionAggregateStatePartiallyConnected ExtensionAggregateState = "PartiallyConnected"
	// ExtensionAggregateStatePartiallySucceeded ...
	ExtensionAggregateStatePartiallySucceeded ExtensionAggregateState = "PartiallySucceeded"
	// ExtensionAggregateStateSucceeded ...
	ExtensionAggregateStateSucceeded ExtensionAggregateState = "Succeeded"
	// ExtensionAggregateStateUpdating ...
	ExtensionAggregateStateUpdating ExtensionAggregateState = "Updating"
)

// PossibleExtensionAggregateStateValues returns an array of possible values for the ExtensionAggregateState const type.
func PossibleExtensionAggregateStateValues() []ExtensionAggregateState {
	return []ExtensionAggregateState{ExtensionAggregateStateCanceled, ExtensionAggregateStateConnected, ExtensionAggregateStateCreating, ExtensionAggregateStateDeleted, ExtensionAggregateStateDeleting, ExtensionAggregateStateDisconnected, ExtensionAggregateStateError, ExtensionAggregateStateFailed, ExtensionAggregateStateInProgress, ExtensionAggregateStateMoving, ExtensionAggregateStateNotSpecified, ExtensionAggregateStatePartiallyConnected, ExtensionAggregateStatePartiallySucceeded, ExtensionAggregateStateSucceeded, ExtensionAggregateStateUpdating}
}

// NodeArcState enumerates the values for node arc state.
type NodeArcState string

const (
	// NodeArcStateCanceled ...
	NodeArcStateCanceled NodeArcState = "Canceled"
	// NodeArcStateConnected ...
	NodeArcStateConnected NodeArcState = "Connected"
	// NodeArcStateCreating ...
	NodeArcStateCreating NodeArcState = "Creating"
	// NodeArcStateDeleted ...
	NodeArcStateDeleted NodeArcState = "Deleted"
	// NodeArcStateDeleting ...
	NodeArcStateDeleting NodeArcState = "Deleting"
	// NodeArcStateDisconnected ...
	NodeArcStateDisconnected NodeArcState = "Disconnected"
	// NodeArcStateError ...
	NodeArcStateError NodeArcState = "Error"
	// NodeArcStateFailed ...
	NodeArcStateFailed NodeArcState = "Failed"
	// NodeArcStateMoving ...
	NodeArcStateMoving NodeArcState = "Moving"
	// NodeArcStateNotSpecified ...
	NodeArcStateNotSpecified NodeArcState = "NotSpecified"
	// NodeArcStateSucceeded ...
	NodeArcStateSucceeded NodeArcState = "Succeeded"
	// NodeArcStateUpdating ...
	NodeArcStateUpdating NodeArcState = "Updating"
)

// PossibleNodeArcStateValues returns an array of possible values for the NodeArcState const type.
func PossibleNodeArcStateValues() []NodeArcState {
	return []NodeArcState{NodeArcStateCanceled, NodeArcStateConnected, NodeArcStateCreating, NodeArcStateDeleted, NodeArcStateDeleting, NodeArcStateDisconnected, NodeArcStateError, NodeArcStateFailed, NodeArcStateMoving, NodeArcStateNotSpecified, NodeArcStateSucceeded, NodeArcStateUpdating}
}

// NodeExtensionState enumerates the values for node extension state.
type NodeExtensionState string

const (
	// NodeExtensionStateCanceled ...
	NodeExtensionStateCanceled NodeExtensionState = "Canceled"
	// NodeExtensionStateConnected ...
	NodeExtensionStateConnected NodeExtensionState = "Connected"
	// NodeExtensionStateCreating ...
	NodeExtensionStateCreating NodeExtensionState = "Creating"
	// NodeExtensionStateDeleted ...
	NodeExtensionStateDeleted NodeExtensionState = "Deleted"
	// NodeExtensionStateDeleting ...
	NodeExtensionStateDeleting NodeExtensionState = "Deleting"
	// NodeExtensionStateDisconnected ...
	NodeExtensionStateDisconnected NodeExtensionState = "Disconnected"
	// NodeExtensionStateError ...
	NodeExtensionStateError NodeExtensionState = "Error"
	// NodeExtensionStateFailed ...
	NodeExtensionStateFailed NodeExtensionState = "Failed"
	// NodeExtensionStateMoving ...
	NodeExtensionStateMoving NodeExtensionState = "Moving"
	// NodeExtensionStateNotSpecified ...
	NodeExtensionStateNotSpecified NodeExtensionState = "NotSpecified"
	// NodeExtensionStateSucceeded ...
	NodeExtensionStateSucceeded NodeExtensionState = "Succeeded"
	// NodeExtensionStateUpdating ...
	NodeExtensionStateUpdating NodeExtensionState = "Updating"
)

// PossibleNodeExtensionStateValues returns an array of possible values for the NodeExtensionState const type.
func PossibleNodeExtensionStateValues() []NodeExtensionState {
	return []NodeExtensionState{NodeExtensionStateCanceled, NodeExtensionStateConnected, NodeExtensionStateCreating, NodeExtensionStateDeleted, NodeExtensionStateDeleting, NodeExtensionStateDisconnected, NodeExtensionStateError, NodeExtensionStateFailed, NodeExtensionStateMoving, NodeExtensionStateNotSpecified, NodeExtensionStateSucceeded, NodeExtensionStateUpdating}
}

// Origin enumerates the values for origin.
type Origin string

const (
	// OriginSystem ...
	OriginSystem Origin = "system"
	// OriginUser ...
	OriginUser Origin = "user"
	// OriginUsersystem ...
	OriginUsersystem Origin = "user,system"
)

// PossibleOriginValues returns an array of possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{OriginSystem, OriginUser, OriginUsersystem}
}

// ProvisioningState enumerates the values for provisioning state.
type ProvisioningState string

const (
	// ProvisioningStateAccepted ...
	ProvisioningStateAccepted ProvisioningState = "Accepted"
	// ProvisioningStateCanceled ...
	ProvisioningStateCanceled ProvisioningState = "Canceled"
	// ProvisioningStateFailed ...
	ProvisioningStateFailed ProvisioningState = "Failed"
	// ProvisioningStateProvisioning ...
	ProvisioningStateProvisioning ProvisioningState = "Provisioning"
	// ProvisioningStateSucceeded ...
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
)

// PossibleProvisioningStateValues returns an array of possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{ProvisioningStateAccepted, ProvisioningStateCanceled, ProvisioningStateFailed, ProvisioningStateProvisioning, ProvisioningStateSucceeded}
}

// Status enumerates the values for status.
type Status string

const (
	// StatusConnectedRecently ...
	StatusConnectedRecently Status = "ConnectedRecently"
	// StatusDisconnected ...
	StatusDisconnected Status = "Disconnected"
	// StatusError ...
	StatusError Status = "Error"
	// StatusNotConnectedRecently ...
	StatusNotConnectedRecently Status = "NotConnectedRecently"
	// StatusNotYetRegistered ...
	StatusNotYetRegistered Status = "NotYetRegistered"
)

// PossibleStatusValues returns an array of possible values for the Status const type.
func PossibleStatusValues() []Status {
	return []Status{StatusConnectedRecently, StatusDisconnected, StatusError, StatusNotConnectedRecently, StatusNotYetRegistered}
}
