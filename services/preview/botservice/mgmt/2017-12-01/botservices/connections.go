package botservice

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"net/http"
)

// ConnectionsClient is the azure Bot Service is a platform for creating smart conversational agents.
type ConnectionsClient struct {
	BaseClient
}

// NewConnectionsClient creates an instance of the ConnectionsClient client.
func NewConnectionsClient(subscriptionID string) ConnectionsClient {
	return NewConnectionsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewConnectionsClientWithBaseURI creates an instance of the ConnectionsClient client.
func NewConnectionsClientWithBaseURI(baseURI string, subscriptionID string) ConnectionsClient {
	return ConnectionsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// ListByBotService returns all the Connection Settings registered to a particular BotService resource
// Parameters:
// resourceGroupName - the name of the resource group within the user's subscription.
// resourceName - the name of the Bot resource.
func (client ConnectionsClient) ListByBotService(ctx context.Context, resourceGroupName string, resourceName string) (result ConnectionSettingResponseListPage, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: resourceName,
			Constraints: []validation.Constraint{{Target: "resourceName", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "resourceName", Name: validation.MinLength, Rule: 2, Chain: nil},
				{Target: "resourceName", Name: validation.Pattern, Rule: `^[a-zA-Z0-9][a-zA-Z0-9_.-]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("botservice.ConnectionsClient", "ListByBotService", err.Error())
	}

	result.fn = client.listByBotServiceNextResults
	req, err := client.ListByBotServicePreparer(ctx, resourceGroupName, resourceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "botservice.ConnectionsClient", "ListByBotService", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByBotServiceSender(req)
	if err != nil {
		result.csrl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "botservice.ConnectionsClient", "ListByBotService", resp, "Failure sending request")
		return
	}

	result.csrl, err = client.ListByBotServiceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "botservice.ConnectionsClient", "ListByBotService", resp, "Failure responding to request")
	}

	return
}

// ListByBotServicePreparer prepares the ListByBotService request.
func (client ConnectionsClient) ListByBotServicePreparer(ctx context.Context, resourceGroupName string, resourceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2017-12-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByBotServiceSender sends the ListByBotService request. The method will close the
// http.Response Body if it receives an error.
func (client ConnectionsClient) ListByBotServiceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// ListByBotServiceResponder handles the response to the ListByBotService request. The method always
// closes the http.Response Body.
func (client ConnectionsClient) ListByBotServiceResponder(resp *http.Response) (result ConnectionSettingResponseList, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByBotServiceNextResults retrieves the next set of results, if any.
func (client ConnectionsClient) listByBotServiceNextResults(lastResults ConnectionSettingResponseList) (result ConnectionSettingResponseList, err error) {
	req, err := lastResults.connectionSettingResponseListPreparer()
	if err != nil {
		return result, autorest.NewErrorWithError(err, "botservice.ConnectionsClient", "listByBotServiceNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByBotServiceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "botservice.ConnectionsClient", "listByBotServiceNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByBotServiceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "botservice.ConnectionsClient", "listByBotServiceNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByBotServiceComplete enumerates all values, automatically crossing page boundaries as required.
func (client ConnectionsClient) ListByBotServiceComplete(ctx context.Context, resourceGroupName string, resourceName string) (result ConnectionSettingResponseListIterator, err error) {
	result.page, err = client.ListByBotService(ctx, resourceGroupName, resourceName)
	return
}
