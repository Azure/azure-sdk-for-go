package anomalydetector

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// TimeSeriesClient is the the Anomaly Detector API detects anomalies automatically in time series data. It supports
// two kinds of mode, one is for stateless using, another is for stateful using. In stateless mode, there are three
// functionalities. Entire Detect is for detecting the whole series with model trained by the time series, Last Detect
// is detecting last point with model trained by points before. ChangePoint Detect is for detecting trend changes in
// time series. In stateful mode, user can store time series, the stored time series will be used for detection
// anomalies. Under this mode, user can still use the above three functionalities by only giving a time range without
// preparing time series in client side. Besides the above three functionalities, stateful model also provide group
// based detection and labeling service. By leveraging labeling service user can provide labels for each detection
// result, these labels will be used for retuning or regenerating detection models. Inconsistency detection is a kind
// of group based detection, this detection will find inconsistency ones in a set of time series. By using anomaly
// detector service, business customers can discover incidents and establish a logic flow for root cause analysis.
type TimeSeriesClient struct {
	BaseClient
}

// NewTimeSeriesClient creates an instance of the TimeSeriesClient client.
func NewTimeSeriesClient(endpoint string) TimeSeriesClient {
	return TimeSeriesClient{New(endpoint)}
}

// ChangePointDetectOnTimestamp evaluate change point score of every series point between start and end.
// Parameters:
// timeSeriesID - unique id for time series.
// body - timestamp is needed. Advanced model parameters can also be set in the request if needed.
func (client TimeSeriesClient) ChangePointDetectOnTimestamp(ctx context.Context, timeSeriesID string, body ChangePointDetectOnTimestampRequest) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesClient.ChangePointDetectOnTimestamp")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesID,
			Constraints: []validation.Constraint{{Target: "timeSeriesID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}},
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body.Timestamp", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesClient", "ChangePointDetectOnTimestamp", err.Error())
	}

	req, err := client.ChangePointDetectOnTimestampPreparer(ctx, timeSeriesID, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "ChangePointDetectOnTimestamp", nil, "Failure preparing request")
		return
	}

	resp, err := client.ChangePointDetectOnTimestampSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "ChangePointDetectOnTimestamp", resp, "Failure sending request")
		return
	}

	result, err = client.ChangePointDetectOnTimestampResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "ChangePointDetectOnTimestamp", resp, "Failure responding to request")
	}

	return
}

// ChangePointDetectOnTimestampPreparer prepares the ChangePointDetectOnTimestamp request.
func (client TimeSeriesClient) ChangePointDetectOnTimestampPreparer(ctx context.Context, timeSeriesID string, body ChangePointDetectOnTimestampRequest) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesId": autorest.Encode("path", timeSeriesID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseries/{timeSeriesId}/changepoint/detect", pathParameters),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ChangePointDetectOnTimestampSender sends the ChangePointDetectOnTimestamp request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesClient) ChangePointDetectOnTimestampSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ChangePointDetectOnTimestampResponder handles the response to the ChangePointDetectOnTimestamp request. The method always
// closes the http.Response Body.
func (client TimeSeriesClient) ChangePointDetectOnTimestampResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Create create series, user need to provide timeSeriesId and granularity, if the series has dimension or name,
// description can be provided through the interface.
// Parameters:
// timeSeriesID - unique id for time series.
func (client TimeSeriesClient) Create(ctx context.Context, timeSeriesID string, body TimeSeriesCreateRequest) (result APIError, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesClient.Create")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesID,
			Constraints: []validation.Constraint{{Target: "timeSeriesID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesClient", "Create", err.Error())
	}

	req, err := client.CreatePreparer(ctx, timeSeriesID, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Create", resp, "Failure responding to request")
	}

	return
}

// CreatePreparer prepares the Create request.
func (client TimeSeriesClient) CreatePreparer(ctx context.Context, timeSeriesID string, body TimeSeriesCreateRequest) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesId": autorest.Encode("path", timeSeriesID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseries/{timeSeriesId}", pathParameters),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesClient) CreateSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client TimeSeriesClient) CreateResponder(resp *http.Response) (result APIError, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated, http.StatusNoContent, http.StatusConflict),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete delete the specified timeseries.
// Parameters:
// timeSeriesID - unique id for time series.
func (client TimeSeriesClient) Delete(ctx context.Context, timeSeriesID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesClient.Delete")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesID,
			Constraints: []validation.Constraint{{Target: "timeSeriesID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesClient", "Delete", err.Error())
	}

	req, err := client.DeletePreparer(ctx, timeSeriesID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Delete", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Delete", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Delete", resp, "Failure responding to request")
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client TimeSeriesClient) DeletePreparer(ctx context.Context, timeSeriesID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesId": autorest.Encode("path", timeSeriesID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseries/{timeSeriesId}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesClient) DeleteSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client TimeSeriesClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DetectOnTimestamp this operation can be used in streaming monitoring scenario, when user would like to monitor a
// time series, the user only need to provide a time range, last detect API will check where last detection ends and
// will return detection results between last detection and the end time
// Parameters:
// timeSeriesID - unique id for time series.
// body - timestamp is required in the request. Advanced model parameters (period, sensitivity,
// maxAnomalyRatio) can also be set in the request.
func (client TimeSeriesClient) DetectOnTimestamp(ctx context.Context, timeSeriesID string, body AnomalyDetectOnTimestampRequest) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesClient.DetectOnTimestamp")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesID,
			Constraints: []validation.Constraint{{Target: "timeSeriesID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}},
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body.Timestamp", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesClient", "DetectOnTimestamp", err.Error())
	}

	req, err := client.DetectOnTimestampPreparer(ctx, timeSeriesID, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "DetectOnTimestamp", nil, "Failure preparing request")
		return
	}

	resp, err := client.DetectOnTimestampSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "DetectOnTimestamp", resp, "Failure sending request")
		return
	}

	result, err = client.DetectOnTimestampResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "DetectOnTimestamp", resp, "Failure responding to request")
	}

	return
}

// DetectOnTimestampPreparer prepares the DetectOnTimestamp request.
func (client TimeSeriesClient) DetectOnTimestampPreparer(ctx context.Context, timeSeriesID string, body AnomalyDetectOnTimestampRequest) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesId": autorest.Encode("path", timeSeriesID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseries/{timeSeriesId}/detect", pathParameters),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DetectOnTimestampSender sends the DetectOnTimestamp request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesClient) DetectOnTimestampSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DetectOnTimestampResponder handles the response to the DetectOnTimestamp request. The method always
// closes the http.Response Body.
func (client TimeSeriesClient) DetectOnTimestampResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get corresponds to create series, get series meta with timeseries id.
// Parameters:
// timeSeriesID - unique id for time series.
func (client TimeSeriesClient) Get(ctx context.Context, timeSeriesID string) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesID,
			Constraints: []validation.Constraint{{Target: "timeSeriesID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesClient", "Get", err.Error())
	}

	req, err := client.GetPreparer(ctx, timeSeriesID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Get", resp, "Failure responding to request")
	}

	return
}

// GetPreparer prepares the Get request.
func (client TimeSeriesClient) GetPreparer(ctx context.Context, timeSeriesID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesId": autorest.Encode("path", timeSeriesID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseries/{timeSeriesId}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesClient) GetSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client TimeSeriesClient) GetResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// InconsistencyDetect this operation helps detect the inconsistent series among a group series with similar trend.
// Parameters:
// body - timestamp is necessary, and a parameter called epsilon is needed to tune the result. Epsilon should
// be within 0 and 1. A list of time series ids need to be provided to the service.
func (client TimeSeriesClient) InconsistencyDetect(ctx context.Context, body InconsistencyDetectRequest) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesClient.InconsistencyDetect")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body.Timestamp", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesClient", "InconsistencyDetect", err.Error())
	}

	req, err := client.InconsistencyDetectPreparer(ctx, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "InconsistencyDetect", nil, "Failure preparing request")
		return
	}

	resp, err := client.InconsistencyDetectSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "InconsistencyDetect", resp, "Failure sending request")
		return
	}

	result, err = client.InconsistencyDetectResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "InconsistencyDetect", resp, "Failure responding to request")
	}

	return
}

// InconsistencyDetectPreparer prepares the InconsistencyDetect request.
func (client TimeSeriesClient) InconsistencyDetectPreparer(ctx context.Context, body InconsistencyDetectRequest) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPath("/timeseries/inconsistency/detect"),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// InconsistencyDetectSender sends the InconsistencyDetect request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesClient) InconsistencyDetectSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// InconsistencyDetectResponder handles the response to the InconsistencyDetect request. The method always
// closes the http.Response Body.
func (client TimeSeriesClient) InconsistencyDetectResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Label this operation is used for users to label Anomaly or ChangePoint states of a certain time stamp, these label
// will be used for regenerate detection model
// Parameters:
// timeSeriesID - unique id for time series.
// body - in Label request, user can set Anomaly|ChangePoint state (true, false, unknown) for a time range
func (client TimeSeriesClient) Label(ctx context.Context, timeSeriesID string, body LabelRequest) (result APIError, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesClient.Label")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesID,
			Constraints: []validation.Constraint{{Target: "timeSeriesID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}},
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body.Begin", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "body.End", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesClient", "Label", err.Error())
	}

	req, err := client.LabelPreparer(ctx, timeSeriesID, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Label", nil, "Failure preparing request")
		return
	}

	resp, err := client.LabelSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Label", resp, "Failure sending request")
		return
	}

	result, err = client.LabelResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Label", resp, "Failure responding to request")
	}

	return
}

// LabelPreparer prepares the Label request.
func (client TimeSeriesClient) LabelPreparer(ctx context.Context, timeSeriesID string, body LabelRequest) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesId": autorest.Encode("path", timeSeriesID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseries/{timeSeriesId}/label", pathParameters),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// LabelSender sends the Label request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesClient) LabelSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// LabelResponder handles the response to the Label request. The method always
// closes the http.Response Body.
func (client TimeSeriesClient) LabelResponder(resp *http.Response) (result APIError, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List list time series of each unique user.
// Parameters:
// next - use "next" as query parameter to get next page data.
func (client TimeSeriesClient) List(ctx context.Context, next string) (result TimeSeriesList, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesClient.List")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListPreparer(ctx, next)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "List", resp, "Failure sending request")
		return
	}

	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "List", resp, "Failure responding to request")
	}

	return
}

// ListPreparer prepares the List request.
func (client TimeSeriesClient) ListPreparer(ctx context.Context, next string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	queryParameters := map[string]interface{}{}
	if len(next) > 0 {
		queryParameters["next"] = autorest.Encode("query", next)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPath("/timeseries"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesClient) ListSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client TimeSeriesClient) ListResponder(resp *http.Response) (result TimeSeriesList, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Query query timeseries with required field in each timestamp.
// Parameters:
// timeSeriesID - unique id for time series.
// body - request body for querying timeseries.
func (client TimeSeriesClient) Query(ctx context.Context, timeSeriesID string, body TimeSeriesQueryRequest) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesClient.Query")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesID,
			Constraints: []validation.Constraint{{Target: "timeSeriesID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}},
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body.Begin", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "body.End", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "body.Fields", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesClient", "Query", err.Error())
	}

	req, err := client.QueryPreparer(ctx, timeSeriesID, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Query", nil, "Failure preparing request")
		return
	}

	resp, err := client.QuerySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Query", resp, "Failure sending request")
		return
	}

	result, err = client.QueryResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Query", resp, "Failure responding to request")
	}

	return
}

// QueryPreparer prepares the Query request.
func (client TimeSeriesClient) QueryPreparer(ctx context.Context, timeSeriesID string, body TimeSeriesQueryRequest) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesId": autorest.Encode("path", timeSeriesID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseries/{timeSeriesId}/query", pathParameters),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// QuerySender sends the Query request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesClient) QuerySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// QueryResponder handles the response to the Query request. The method always
// closes the http.Response Body.
func (client TimeSeriesClient) QueryResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Write insert or replace timeseries data for specified timeSeriesId. Note that this interface only stores data and do
// not detect these data.
// Parameters:
// timeSeriesID - unique id for time series.
// body - request body for writing timeseries.
func (client TimeSeriesClient) Write(ctx context.Context, timeSeriesID string, body []Point) (result APIError, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesClient.Write")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesID,
			Constraints: []validation.Constraint{{Target: "timeSeriesID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}},
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesClient", "Write", err.Error())
	}

	req, err := client.WritePreparer(ctx, timeSeriesID, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Write", nil, "Failure preparing request")
		return
	}

	resp, err := client.WriteSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Write", resp, "Failure sending request")
		return
	}

	result, err = client.WriteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesClient", "Write", resp, "Failure responding to request")
	}

	return
}

// WritePreparer prepares the Write request.
func (client TimeSeriesClient) WritePreparer(ctx context.Context, timeSeriesID string, body []Point) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesId": autorest.Encode("path", timeSeriesID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseries/{timeSeriesId}/write", pathParameters),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// WriteSender sends the Write request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesClient) WriteSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// WriteResponder handles the response to the Write request. The method always
// closes the http.Response Body.
func (client TimeSeriesClient) WriteResponder(resp *http.Response) (result APIError, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
