package anomalydetector

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// TimeSeriesGroupClient is the the Anomaly Detector API detects anomalies automatically in time series data. It
// supports two kinds of mode, one is for stateless using, another is for stateful using. In stateless mode, there are
// three functionalities. Entire Detect is for detecting the whole series with model trained by the time series, Last
// Detect is detecting last point with model trained by points before. ChangePoint Detect is for detecting trend
// changes in time series. In stateful mode, user can store time series, the stored time series will be used for
// detection anomalies. Under this mode, user can still use the aboving three functionalities by only giving a time
// range without preparing time series in client side. Besides the above three functionalities, stateful model also
// provide group based detection and labeling service. By leveraing labeling service user can provide labels for each
// detection result, these labels will be used for retuning or regenerating detection models. Inconsistency detection
// is a kind of group based detection, this detection will find inconsistency ones in a set of time series. By using
// anomaly detector service, business customers can discover incidents and establish a logic flow for root cause
// analysis.
type TimeSeriesGroupClient struct {
	BaseClient
}

// NewTimeSeriesGroupClient creates an instance of the TimeSeriesGroupClient client.
func NewTimeSeriesGroupClient(endpoint string) TimeSeriesGroupClient {
	return TimeSeriesGroupClient{New(endpoint)}
}

// AddTimeSeries add a TimeSeries to TimeSeriesGroup.
// Parameters:
// timeSeriesGroupID - unique id for time series group.
// timeSeriesID - unique id for time series.
func (client TimeSeriesGroupClient) AddTimeSeries(ctx context.Context, timeSeriesGroupID string, timeSeriesID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesGroupClient.AddTimeSeries")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesGroupID,
			Constraints: []validation.Constraint{{Target: "timeSeriesGroupID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesGroupID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}},
		{TargetValue: timeSeriesID,
			Constraints: []validation.Constraint{{Target: "timeSeriesID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesGroupClient", "AddTimeSeries", err.Error())
	}

	req, err := client.AddTimeSeriesPreparer(ctx, timeSeriesGroupID, timeSeriesID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "AddTimeSeries", nil, "Failure preparing request")
		return
	}

	resp, err := client.AddTimeSeriesSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "AddTimeSeries", resp, "Failure sending request")
		return
	}

	result, err = client.AddTimeSeriesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "AddTimeSeries", resp, "Failure responding to request")
	}

	return
}

// AddTimeSeriesPreparer prepares the AddTimeSeries request.
func (client TimeSeriesGroupClient) AddTimeSeriesPreparer(ctx context.Context, timeSeriesGroupID string, timeSeriesID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesGroupId": autorest.Encode("path", timeSeriesGroupID),
		"timeSeriesId":      autorest.Encode("path", timeSeriesID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPut(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseriesgroups/{timeSeriesGroupId}/timeseries/{timeSeriesId}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// AddTimeSeriesSender sends the AddTimeSeries request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesGroupClient) AddTimeSeriesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// AddTimeSeriesResponder handles the response to the AddTimeSeries request. The method always
// closes the http.Response Body.
func (client TimeSeriesGroupClient) AddTimeSeriesResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Create create a time series group.
// Parameters:
// timeSeriesGroupID - unique id for time series group.
// body - groupId and granularity are needed to create a time series group
func (client TimeSeriesGroupClient) Create(ctx context.Context, timeSeriesGroupID string, body TimeSeriesGroupCreateRequest) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesGroupClient.Create")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesGroupID,
			Constraints: []validation.Constraint{{Target: "timeSeriesGroupID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesGroupID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesGroupClient", "Create", err.Error())
	}

	req, err := client.CreatePreparer(ctx, timeSeriesGroupID, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "Create", resp, "Failure responding to request")
	}

	return
}

// CreatePreparer prepares the Create request.
func (client TimeSeriesGroupClient) CreatePreparer(ctx context.Context, timeSeriesGroupID string, body TimeSeriesGroupCreateRequest) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesGroupId": autorest.Encode("path", timeSeriesGroupID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseriesgroups/{timeSeriesGroupId}", pathParameters),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesGroupClient) CreateSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client TimeSeriesGroupClient) CreateResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Delete delete a time series group.
// Parameters:
// timeSeriesGroupID - unique id for time series group.
func (client TimeSeriesGroupClient) Delete(ctx context.Context, timeSeriesGroupID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesGroupClient.Delete")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesGroupID,
			Constraints: []validation.Constraint{{Target: "timeSeriesGroupID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesGroupID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesGroupClient", "Delete", err.Error())
	}

	req, err := client.DeletePreparer(ctx, timeSeriesGroupID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "Delete", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "Delete", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "Delete", resp, "Failure responding to request")
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client TimeSeriesGroupClient) DeletePreparer(ctx context.Context, timeSeriesGroupID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesGroupId": autorest.Encode("path", timeSeriesGroupID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseriesgroups/{timeSeriesGroupId}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesGroupClient) DeleteSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client TimeSeriesGroupClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DeleteTimeSeries remove a TimeSeries from TimeSeriesGroup.
// Parameters:
// timeSeriesGroupID - unique id for time series group.
// timeSeriesID - unique id for time series.
func (client TimeSeriesGroupClient) DeleteTimeSeries(ctx context.Context, timeSeriesGroupID string, timeSeriesID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesGroupClient.DeleteTimeSeries")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesGroupID,
			Constraints: []validation.Constraint{{Target: "timeSeriesGroupID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesGroupID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}},
		{TargetValue: timeSeriesID,
			Constraints: []validation.Constraint{{Target: "timeSeriesID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesGroupClient", "DeleteTimeSeries", err.Error())
	}

	req, err := client.DeleteTimeSeriesPreparer(ctx, timeSeriesGroupID, timeSeriesID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "DeleteTimeSeries", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteTimeSeriesSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "DeleteTimeSeries", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteTimeSeriesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "DeleteTimeSeries", resp, "Failure responding to request")
	}

	return
}

// DeleteTimeSeriesPreparer prepares the DeleteTimeSeries request.
func (client TimeSeriesGroupClient) DeleteTimeSeriesPreparer(ctx context.Context, timeSeriesGroupID string, timeSeriesID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesGroupId": autorest.Encode("path", timeSeriesGroupID),
		"timeSeriesId":      autorest.Encode("path", timeSeriesID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseriesgroups/{timeSeriesGroupId}/timeseries/{timeSeriesId}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteTimeSeriesSender sends the DeleteTimeSeries request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesGroupClient) DeleteTimeSeriesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteTimeSeriesResponder handles the response to the DeleteTimeSeries request. The method always
// closes the http.Response Body.
func (client TimeSeriesGroupClient) DeleteTimeSeriesResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get this operation fetches detailed infomation about the specified time series group.
// Parameters:
// timeSeriesGroupID - unique id for time series group.
func (client TimeSeriesGroupClient) Get(ctx context.Context, timeSeriesGroupID string) (result TimeSeriesGroup, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesGroupClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesGroupID,
			Constraints: []validation.Constraint{{Target: "timeSeriesGroupID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesGroupID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesGroupClient", "Get", err.Error())
	}

	req, err := client.GetPreparer(ctx, timeSeriesGroupID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "Get", resp, "Failure responding to request")
	}

	return
}

// GetPreparer prepares the Get request.
func (client TimeSeriesGroupClient) GetPreparer(ctx context.Context, timeSeriesGroupID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesGroupId": autorest.Encode("path", timeSeriesGroupID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseriesgroups/{timeSeriesGroupId}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesGroupClient) GetSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client TimeSeriesGroupClient) GetResponder(resp *http.Response) (result TimeSeriesGroup, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// InconsistencyDetect this operation helps detect the inconsistent series among a group series with similiar trend.
// Parameters:
// timeSeriesGroupID - unique id for time series group.
// body - start time and end time is necessary, and a parameter called epsilon is needed to tune the result.
// Epsilon should be within 0 and 1.
func (client TimeSeriesGroupClient) InconsistencyDetect(ctx context.Context, timeSeriesGroupID string, body InconsistencyDetectRequest) (result Inconsistency, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesGroupClient.InconsistencyDetect")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesGroupID,
			Constraints: []validation.Constraint{{Target: "timeSeriesGroupID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesGroupID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}},
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body.Begin", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "body.End", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesGroupClient", "InconsistencyDetect", err.Error())
	}

	req, err := client.InconsistencyDetectPreparer(ctx, timeSeriesGroupID, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "InconsistencyDetect", nil, "Failure preparing request")
		return
	}

	resp, err := client.InconsistencyDetectSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "InconsistencyDetect", resp, "Failure sending request")
		return
	}

	result, err = client.InconsistencyDetectResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "InconsistencyDetect", resp, "Failure responding to request")
	}

	return
}

// InconsistencyDetectPreparer prepares the InconsistencyDetect request.
func (client TimeSeriesGroupClient) InconsistencyDetectPreparer(ctx context.Context, timeSeriesGroupID string, body InconsistencyDetectRequest) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesGroupId": autorest.Encode("path", timeSeriesGroupID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseriesgroups/{timeSeriesGroupId}/inconsistency/detect", pathParameters),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// InconsistencyDetectSender sends the InconsistencyDetect request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesGroupClient) InconsistencyDetectSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// InconsistencyDetectResponder handles the response to the InconsistencyDetect request. The method always
// closes the http.Response Body.
func (client TimeSeriesGroupClient) InconsistencyDetectResponder(resp *http.Response) (result Inconsistency, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// InconsistencyQuery this operation helps query properties of one group, for example the inconsistent series among a
// group series with similiar trend.
// Parameters:
// timeSeriesGroupID - unique id for time series group.
// body - start time and end time is necessary.
func (client TimeSeriesGroupClient) InconsistencyQuery(ctx context.Context, timeSeriesGroupID string, body InconsistencyQueryRequest) (result ListInconsistency, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesGroupClient.InconsistencyQuery")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesGroupID,
			Constraints: []validation.Constraint{{Target: "timeSeriesGroupID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesGroupID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}},
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body.Begin", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "body.End", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesGroupClient", "InconsistencyQuery", err.Error())
	}

	req, err := client.InconsistencyQueryPreparer(ctx, timeSeriesGroupID, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "InconsistencyQuery", nil, "Failure preparing request")
		return
	}

	resp, err := client.InconsistencyQuerySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "InconsistencyQuery", resp, "Failure sending request")
		return
	}

	result, err = client.InconsistencyQueryResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "InconsistencyQuery", resp, "Failure responding to request")
	}

	return
}

// InconsistencyQueryPreparer prepares the InconsistencyQuery request.
func (client TimeSeriesGroupClient) InconsistencyQueryPreparer(ctx context.Context, timeSeriesGroupID string, body InconsistencyQueryRequest) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesGroupId": autorest.Encode("path", timeSeriesGroupID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseriesgroups/{timeSeriesGroupId}/inconsistency/query", pathParameters),
		autorest.WithJSON(body))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// InconsistencyQuerySender sends the InconsistencyQuery request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesGroupClient) InconsistencyQuerySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// InconsistencyQueryResponder handles the response to the InconsistencyQuery request. The method always
// closes the http.Response Body.
func (client TimeSeriesGroupClient) InconsistencyQueryResponder(resp *http.Response) (result ListInconsistency, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List list time series groups page by page using the "next" field. It means that all time series groups have been
// returned when the "next" field is null.
// Parameters:
// next - use "next" as query parameter to get next page data.
func (client TimeSeriesGroupClient) List(ctx context.Context, next string) (result TimeSeriesGroupList, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesGroupClient.List")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListPreparer(ctx, next)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "List", resp, "Failure sending request")
		return
	}

	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "List", resp, "Failure responding to request")
	}

	return
}

// ListPreparer prepares the List request.
func (client TimeSeriesGroupClient) ListPreparer(ctx context.Context, next string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	queryParameters := map[string]interface{}{}
	if len(next) > 0 {
		queryParameters["next"] = autorest.Encode("query", next)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPath("/timeseriesgroups"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesGroupClient) ListSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client TimeSeriesGroupClient) ListResponder(resp *http.Response) (result TimeSeriesGroupList, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListSeries list TimeSeries that belongs to a TimeSeriesGroup. One TimeSeriesGroup could have multiple TimeSeries.
// Parameters:
// timeSeriesGroupID - unique id for time series group.
// next - use "next" as query parameter to get next page data.
func (client TimeSeriesGroupClient) ListSeries(ctx context.Context, timeSeriesGroupID string, next string) (result TimeSeriesList, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TimeSeriesGroupClient.ListSeries")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: timeSeriesGroupID,
			Constraints: []validation.Constraint{{Target: "timeSeriesGroupID", Name: validation.MaxLength, Rule: 64, Chain: nil},
				{Target: "timeSeriesGroupID", Name: validation.Pattern, Rule: `^[a-z0-9-_]+$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("anomalydetector.TimeSeriesGroupClient", "ListSeries", err.Error())
	}

	req, err := client.ListSeriesPreparer(ctx, timeSeriesGroupID, next)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "ListSeries", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSeriesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "ListSeries", resp, "Failure sending request")
		return
	}

	result, err = client.ListSeriesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "anomalydetector.TimeSeriesGroupClient", "ListSeries", resp, "Failure responding to request")
	}

	return
}

// ListSeriesPreparer prepares the ListSeries request.
func (client TimeSeriesGroupClient) ListSeriesPreparer(ctx context.Context, timeSeriesGroupID string, next string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"timeSeriesGroupId": autorest.Encode("path", timeSeriesGroupID),
	}

	queryParameters := map[string]interface{}{}
	if len(next) > 0 {
		queryParameters["next"] = autorest.Encode("query", next)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/anomalydetector/v1.0", urlParameters),
		autorest.WithPathParameters("/timeseriesgroups/{timeSeriesGroupId}/timeseries", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSeriesSender sends the ListSeries request. The method will close the
// http.Response Body if it receives an error.
func (client TimeSeriesGroupClient) ListSeriesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListSeriesResponder handles the response to the ListSeries request. The method always
// closes the http.Response Body.
func (client TimeSeriesGroupClient) ListSeriesResponder(resp *http.Response) (result TimeSeriesList, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
