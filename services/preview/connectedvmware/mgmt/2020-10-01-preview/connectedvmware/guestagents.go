package connectedvmware

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// GuestAgentsClient is the self service experience for VMware.
type GuestAgentsClient struct {
	BaseClient
}

// NewGuestAgentsClient creates an instance of the GuestAgentsClient client.
func NewGuestAgentsClient(subscriptionID string) GuestAgentsClient {
	return NewGuestAgentsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewGuestAgentsClientWithBaseURI creates an instance of the GuestAgentsClient client using a custom endpoint.  Use
// this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewGuestAgentsClientWithBaseURI(baseURI string, subscriptionID string) GuestAgentsClient {
	return GuestAgentsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Create create Or Update GuestAgent.
// Parameters:
// resourceGroupName - the Resource Group Name.
// virtualMachineName - name of the vm.
// name - name of the guestAgents.
// body - request payload.
func (client GuestAgentsClient) Create(ctx context.Context, resourceGroupName string, virtualMachineName string, name string, body *GuestAgent) (result GuestAgentsCreateFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/GuestAgentsClient.Create")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "body.GuestAgentProperties", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("connectedvmware.GuestAgentsClient", "Create", err.Error())
	}

	req, err := client.CreatePreparer(ctx, resourceGroupName, virtualMachineName, name, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.GuestAgentsClient", "Create", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.GuestAgentsClient", "Create", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client GuestAgentsClient) CreatePreparer(ctx context.Context, resourceGroupName string, virtualMachineName string, name string, body *GuestAgent) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"name":               autorest.Encode("path", name),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
		"virtualMachineName": autorest.Encode("path", virtualMachineName),
	}

	const APIVersion = "2020-10-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/guestAgents/{name}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client GuestAgentsClient) CreateSender(req *http.Request) (future GuestAgentsCreateFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client GuestAgentsClient) CreateResponder(resp *http.Response) (result GuestAgent, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete implements GuestAgent DELETE method.
// Parameters:
// resourceGroupName - the Resource Group Name.
// virtualMachineName - name of the vm.
// name - name of the GuestAgent.
func (client GuestAgentsClient) Delete(ctx context.Context, resourceGroupName string, virtualMachineName string, name string) (result GuestAgentsDeleteFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/GuestAgentsClient.Delete")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeletePreparer(ctx, resourceGroupName, virtualMachineName, name)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.GuestAgentsClient", "Delete", nil, "Failure preparing request")
		return
	}

	result, err = client.DeleteSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.GuestAgentsClient", "Delete", result.Response(), "Failure sending request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client GuestAgentsClient) DeletePreparer(ctx context.Context, resourceGroupName string, virtualMachineName string, name string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"name":               autorest.Encode("path", name),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
		"virtualMachineName": autorest.Encode("path", virtualMachineName),
	}

	const APIVersion = "2020-10-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/guestAgents/{name}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client GuestAgentsClient) DeleteSender(req *http.Request) (future GuestAgentsDeleteFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client GuestAgentsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get implements GuestAgent GET method.
// Parameters:
// resourceGroupName - the Resource Group Name.
// virtualMachineName - name of the vm.
// name - name of the GuestAgent.
func (client GuestAgentsClient) Get(ctx context.Context, resourceGroupName string, virtualMachineName string, name string) (result GuestAgent, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/GuestAgentsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, resourceGroupName, virtualMachineName, name)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.GuestAgentsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "connectedvmware.GuestAgentsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.GuestAgentsClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client GuestAgentsClient) GetPreparer(ctx context.Context, resourceGroupName string, virtualMachineName string, name string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"name":               autorest.Encode("path", name),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
		"virtualMachineName": autorest.Encode("path", virtualMachineName),
	}

	const APIVersion = "2020-10-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/guestAgents/{name}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client GuestAgentsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client GuestAgentsClient) GetResponder(resp *http.Response) (result GuestAgent, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByVM returns the list of GuestAgent of the given vm.
// Parameters:
// resourceGroupName - the Resource Group Name.
// virtualMachineName - name of the vm.
func (client GuestAgentsClient) ListByVM(ctx context.Context, resourceGroupName string, virtualMachineName string) (result GuestAgentListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/GuestAgentsClient.ListByVM")
		defer func() {
			sc := -1
			if result.gal.Response.Response != nil {
				sc = result.gal.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByVMNextResults
	req, err := client.ListByVMPreparer(ctx, resourceGroupName, virtualMachineName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.GuestAgentsClient", "ListByVM", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByVMSender(req)
	if err != nil {
		result.gal.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "connectedvmware.GuestAgentsClient", "ListByVM", resp, "Failure sending request")
		return
	}

	result.gal, err = client.ListByVMResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.GuestAgentsClient", "ListByVM", resp, "Failure responding to request")
		return
	}
	if result.gal.hasNextLink() && result.gal.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByVMPreparer prepares the ListByVM request.
func (client GuestAgentsClient) ListByVMPreparer(ctx context.Context, resourceGroupName string, virtualMachineName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
		"virtualMachineName": autorest.Encode("path", virtualMachineName),
	}

	const APIVersion = "2020-10-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/guestAgents", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByVMSender sends the ListByVM request. The method will close the
// http.Response Body if it receives an error.
func (client GuestAgentsClient) ListByVMSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByVMResponder handles the response to the ListByVM request. The method always
// closes the http.Response Body.
func (client GuestAgentsClient) ListByVMResponder(resp *http.Response) (result GuestAgentList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByVMNextResults retrieves the next set of results, if any.
func (client GuestAgentsClient) listByVMNextResults(ctx context.Context, lastResults GuestAgentList) (result GuestAgentList, err error) {
	req, err := lastResults.guestAgentListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "connectedvmware.GuestAgentsClient", "listByVMNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByVMSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "connectedvmware.GuestAgentsClient", "listByVMNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByVMResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.GuestAgentsClient", "listByVMNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByVMComplete enumerates all values, automatically crossing page boundaries as required.
func (client GuestAgentsClient) ListByVMComplete(ctx context.Context, resourceGroupName string, virtualMachineName string) (result GuestAgentListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/GuestAgentsClient.ListByVM")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByVM(ctx, resourceGroupName, virtualMachineName)
	return
}
