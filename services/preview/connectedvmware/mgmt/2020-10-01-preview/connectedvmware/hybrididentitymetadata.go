package connectedvmware

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// HybridIdentityMetadataClient is the self service experience for VMware.
type HybridIdentityMetadataClient struct {
	BaseClient
}

// NewHybridIdentityMetadataClient creates an instance of the HybridIdentityMetadataClient client.
func NewHybridIdentityMetadataClient(subscriptionID string) HybridIdentityMetadataClient {
	return NewHybridIdentityMetadataClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewHybridIdentityMetadataClientWithBaseURI creates an instance of the HybridIdentityMetadataClient client using a
// custom endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds,
// Azure stack).
func NewHybridIdentityMetadataClientWithBaseURI(baseURI string, subscriptionID string) HybridIdentityMetadataClient {
	return HybridIdentityMetadataClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Create create Or Update HybridIdentityMetadata.
// Parameters:
// resourceGroupName - the Resource Group Name.
// virtualMachineName - name of the vm.
// metadataName - name of the hybridIdentityMetadata.
// body - request payload.
func (client HybridIdentityMetadataClient) Create(ctx context.Context, resourceGroupName string, virtualMachineName string, metadataName string, body *HybridIdentityMetadata) (result HybridIdentityMetadata, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/HybridIdentityMetadataClient.Create")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "body.HybridIdentityMetadataProperties", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("connectedvmware.HybridIdentityMetadataClient", "Create", err.Error())
	}

	req, err := client.CreatePreparer(ctx, resourceGroupName, virtualMachineName, metadataName, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.HybridIdentityMetadataClient", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "connectedvmware.HybridIdentityMetadataClient", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.HybridIdentityMetadataClient", "Create", resp, "Failure responding to request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client HybridIdentityMetadataClient) CreatePreparer(ctx context.Context, resourceGroupName string, virtualMachineName string, metadataName string, body *HybridIdentityMetadata) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"metadataName":       autorest.Encode("path", metadataName),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
		"virtualMachineName": autorest.Encode("path", virtualMachineName),
	}

	const APIVersion = "2020-10-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/hybridIdentityMetadata/{metadataName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client HybridIdentityMetadataClient) CreateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client HybridIdentityMetadataClient) CreateResponder(resp *http.Response) (result HybridIdentityMetadata, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete implements HybridIdentityMetadata DELETE method.
// Parameters:
// resourceGroupName - the Resource Group Name.
// virtualMachineName - name of the vm.
// metadataName - name of the HybridIdentityMetadata.
func (client HybridIdentityMetadataClient) Delete(ctx context.Context, resourceGroupName string, virtualMachineName string, metadataName string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/HybridIdentityMetadataClient.Delete")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeletePreparer(ctx, resourceGroupName, virtualMachineName, metadataName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.HybridIdentityMetadataClient", "Delete", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "connectedvmware.HybridIdentityMetadataClient", "Delete", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.HybridIdentityMetadataClient", "Delete", resp, "Failure responding to request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client HybridIdentityMetadataClient) DeletePreparer(ctx context.Context, resourceGroupName string, virtualMachineName string, metadataName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"metadataName":       autorest.Encode("path", metadataName),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
		"virtualMachineName": autorest.Encode("path", virtualMachineName),
	}

	const APIVersion = "2020-10-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/hybridIdentityMetadata/{metadataName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client HybridIdentityMetadataClient) DeleteSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client HybridIdentityMetadataClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get implements HybridIdentityMetadata GET method.
// Parameters:
// resourceGroupName - the Resource Group Name.
// virtualMachineName - name of the vm.
// metadataName - name of the HybridIdentityMetadata.
func (client HybridIdentityMetadataClient) Get(ctx context.Context, resourceGroupName string, virtualMachineName string, metadataName string) (result HybridIdentityMetadata, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/HybridIdentityMetadataClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, resourceGroupName, virtualMachineName, metadataName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.HybridIdentityMetadataClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "connectedvmware.HybridIdentityMetadataClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.HybridIdentityMetadataClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client HybridIdentityMetadataClient) GetPreparer(ctx context.Context, resourceGroupName string, virtualMachineName string, metadataName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"metadataName":       autorest.Encode("path", metadataName),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
		"virtualMachineName": autorest.Encode("path", virtualMachineName),
	}

	const APIVersion = "2020-10-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/hybridIdentityMetadata/{metadataName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client HybridIdentityMetadataClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client HybridIdentityMetadataClient) GetResponder(resp *http.Response) (result HybridIdentityMetadata, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByVM returns the list of HybridIdentityMetadata of the given vm.
// Parameters:
// resourceGroupName - the Resource Group Name.
// virtualMachineName - name of the vm.
func (client HybridIdentityMetadataClient) ListByVM(ctx context.Context, resourceGroupName string, virtualMachineName string) (result HybridIdentityMetadataListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/HybridIdentityMetadataClient.ListByVM")
		defer func() {
			sc := -1
			if result.himl.Response.Response != nil {
				sc = result.himl.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByVMNextResults
	req, err := client.ListByVMPreparer(ctx, resourceGroupName, virtualMachineName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.HybridIdentityMetadataClient", "ListByVM", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByVMSender(req)
	if err != nil {
		result.himl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "connectedvmware.HybridIdentityMetadataClient", "ListByVM", resp, "Failure sending request")
		return
	}

	result.himl, err = client.ListByVMResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.HybridIdentityMetadataClient", "ListByVM", resp, "Failure responding to request")
		return
	}
	if result.himl.hasNextLink() && result.himl.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByVMPreparer prepares the ListByVM request.
func (client HybridIdentityMetadataClient) ListByVMPreparer(ctx context.Context, resourceGroupName string, virtualMachineName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
		"virtualMachineName": autorest.Encode("path", virtualMachineName),
	}

	const APIVersion = "2020-10-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/hybridIdentityMetadata", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByVMSender sends the ListByVM request. The method will close the
// http.Response Body if it receives an error.
func (client HybridIdentityMetadataClient) ListByVMSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByVMResponder handles the response to the ListByVM request. The method always
// closes the http.Response Body.
func (client HybridIdentityMetadataClient) ListByVMResponder(resp *http.Response) (result HybridIdentityMetadataList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByVMNextResults retrieves the next set of results, if any.
func (client HybridIdentityMetadataClient) listByVMNextResults(ctx context.Context, lastResults HybridIdentityMetadataList) (result HybridIdentityMetadataList, err error) {
	req, err := lastResults.hybridIdentityMetadataListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "connectedvmware.HybridIdentityMetadataClient", "listByVMNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByVMSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "connectedvmware.HybridIdentityMetadataClient", "listByVMNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByVMResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.HybridIdentityMetadataClient", "listByVMNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByVMComplete enumerates all values, automatically crossing page boundaries as required.
func (client HybridIdentityMetadataClient) ListByVMComplete(ctx context.Context, resourceGroupName string, virtualMachineName string) (result HybridIdentityMetadataListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/HybridIdentityMetadataClient.ListByVM")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByVM(ctx, resourceGroupName, virtualMachineName)
	return
}
