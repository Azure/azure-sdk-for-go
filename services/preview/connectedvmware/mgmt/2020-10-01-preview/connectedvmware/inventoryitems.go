package connectedvmware

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// InventoryItemsClient is the self service experience for VMware.
type InventoryItemsClient struct {
	BaseClient
}

// NewInventoryItemsClient creates an instance of the InventoryItemsClient client.
func NewInventoryItemsClient(subscriptionID string) InventoryItemsClient {
	return NewInventoryItemsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewInventoryItemsClientWithBaseURI creates an instance of the InventoryItemsClient client using a custom endpoint.
// Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewInventoryItemsClientWithBaseURI(baseURI string, subscriptionID string) InventoryItemsClient {
	return InventoryItemsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Create create Or Update InventoryItem.
// Parameters:
// resourceGroupName - the Resource Group Name.
// vcenterName - name of the vCenter.
// inventoryItemName - name of the inventoryItem.
// body - request payload.
func (client InventoryItemsClient) Create(ctx context.Context, resourceGroupName string, vcenterName string, inventoryItemName string, body *InventoryItem) (result InventoryItem, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/InventoryItemsClient.Create")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreatePreparer(ctx, resourceGroupName, vcenterName, inventoryItemName, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.InventoryItemsClient", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "connectedvmware.InventoryItemsClient", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.InventoryItemsClient", "Create", resp, "Failure responding to request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client InventoryItemsClient) CreatePreparer(ctx context.Context, resourceGroupName string, vcenterName string, inventoryItemName string, body *InventoryItem) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"inventoryItemName": autorest.Encode("path", inventoryItemName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"vcenterName":       autorest.Encode("path", vcenterName),
	}

	const APIVersion = "2020-10-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters/{vcenterName}/inventoryItems/{inventoryItemName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client InventoryItemsClient) CreateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client InventoryItemsClient) CreateResponder(resp *http.Response) (result InventoryItem, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete implements inventoryItem DELETE method.
// Parameters:
// resourceGroupName - the Resource Group Name.
// vcenterName - name of the vCenter.
// inventoryItemName - name of the inventoryItem.
func (client InventoryItemsClient) Delete(ctx context.Context, resourceGroupName string, vcenterName string, inventoryItemName string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/InventoryItemsClient.Delete")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeletePreparer(ctx, resourceGroupName, vcenterName, inventoryItemName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.InventoryItemsClient", "Delete", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "connectedvmware.InventoryItemsClient", "Delete", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.InventoryItemsClient", "Delete", resp, "Failure responding to request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client InventoryItemsClient) DeletePreparer(ctx context.Context, resourceGroupName string, vcenterName string, inventoryItemName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"inventoryItemName": autorest.Encode("path", inventoryItemName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"vcenterName":       autorest.Encode("path", vcenterName),
	}

	const APIVersion = "2020-10-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters/{vcenterName}/inventoryItems/{inventoryItemName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client InventoryItemsClient) DeleteSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client InventoryItemsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get implements InventoryItem GET method.
// Parameters:
// resourceGroupName - the Resource Group Name.
// vcenterName - name of the vCenter.
// inventoryItemName - name of the inventoryItem.
func (client InventoryItemsClient) Get(ctx context.Context, resourceGroupName string, vcenterName string, inventoryItemName string) (result InventoryItem, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/InventoryItemsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, resourceGroupName, vcenterName, inventoryItemName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.InventoryItemsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "connectedvmware.InventoryItemsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.InventoryItemsClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client InventoryItemsClient) GetPreparer(ctx context.Context, resourceGroupName string, vcenterName string, inventoryItemName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"inventoryItemName": autorest.Encode("path", inventoryItemName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"vcenterName":       autorest.Encode("path", vcenterName),
	}

	const APIVersion = "2020-10-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters/{vcenterName}/inventoryItems/{inventoryItemName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client InventoryItemsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client InventoryItemsClient) GetResponder(resp *http.Response) (result InventoryItem, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByVCenter returns the list of inventoryItems of the given vCenter.
// Parameters:
// resourceGroupName - the Resource Group Name.
// vcenterName - name of the vCenter.
func (client InventoryItemsClient) ListByVCenter(ctx context.Context, resourceGroupName string, vcenterName string) (result InventoryItemsListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/InventoryItemsClient.ListByVCenter")
		defer func() {
			sc := -1
			if result.iil.Response.Response != nil {
				sc = result.iil.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByVCenterNextResults
	req, err := client.ListByVCenterPreparer(ctx, resourceGroupName, vcenterName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.InventoryItemsClient", "ListByVCenter", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByVCenterSender(req)
	if err != nil {
		result.iil.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "connectedvmware.InventoryItemsClient", "ListByVCenter", resp, "Failure sending request")
		return
	}

	result.iil, err = client.ListByVCenterResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.InventoryItemsClient", "ListByVCenter", resp, "Failure responding to request")
		return
	}
	if result.iil.hasNextLink() && result.iil.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByVCenterPreparer prepares the ListByVCenter request.
func (client InventoryItemsClient) ListByVCenterPreparer(ctx context.Context, resourceGroupName string, vcenterName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"vcenterName":       autorest.Encode("path", vcenterName),
	}

	const APIVersion = "2020-10-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters/{vcenterName}/inventoryItems", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByVCenterSender sends the ListByVCenter request. The method will close the
// http.Response Body if it receives an error.
func (client InventoryItemsClient) ListByVCenterSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByVCenterResponder handles the response to the ListByVCenter request. The method always
// closes the http.Response Body.
func (client InventoryItemsClient) ListByVCenterResponder(resp *http.Response) (result InventoryItemsList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByVCenterNextResults retrieves the next set of results, if any.
func (client InventoryItemsClient) listByVCenterNextResults(ctx context.Context, lastResults InventoryItemsList) (result InventoryItemsList, err error) {
	req, err := lastResults.inventoryItemsListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "connectedvmware.InventoryItemsClient", "listByVCenterNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByVCenterSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "connectedvmware.InventoryItemsClient", "listByVCenterNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByVCenterResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "connectedvmware.InventoryItemsClient", "listByVCenterNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByVCenterComplete enumerates all values, automatically crossing page boundaries as required.
func (client InventoryItemsClient) ListByVCenterComplete(ctx context.Context, resourceGroupName string, vcenterName string) (result InventoryItemsListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/InventoryItemsClient.ListByVCenter")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByVCenter(ctx, resourceGroupName, vcenterName)
	return
}
