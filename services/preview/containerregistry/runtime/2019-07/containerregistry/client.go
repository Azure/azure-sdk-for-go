// Package containerregistry implements the Azure ARM Containerregistry service API version 2019-07-15-preview.
//
// Metadata API definition for the Azure Container Registry runtime
package containerregistry

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"io"
	"net/http"
)

// BaseClient is the base client for Containerregistry.
type BaseClient struct {
	autorest.Client
	LoginURI string
}

// New creates an instance of the BaseClient client.
func New(loginURI string) BaseClient {
	return NewWithoutDefaults(loginURI)
}

// NewWithoutDefaults creates an instance of the BaseClient client.
func NewWithoutDefaults(loginURI string) BaseClient {
	return BaseClient{
		Client:   autorest.NewClientWithUserAgent(UserAgent()),
		LoginURI: loginURI,
	}
}

// CancelBlobUpload cancel outstanding upload processes, releasing associated resources. If this is not called, the
// unfinished uploads will eventually timeout.
// Parameters:
// name - name of the image (including the namespace)
// UUID - a uuid identifying the upload.
func (client BaseClient) CancelBlobUpload(ctx context.Context, name string, UUID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CancelBlobUpload")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CancelBlobUploadPreparer(ctx, name, UUID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "CancelBlobUpload", nil, "Failure preparing request")
		return
	}

	resp, err := client.CancelBlobUploadSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "CancelBlobUpload", resp, "Failure sending request")
		return
	}

	result, err = client.CancelBlobUploadResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "CancelBlobUpload", resp, "Failure responding to request")
	}

	return
}

// CancelBlobUploadPreparer prepares the CancelBlobUpload request.
func (client BaseClient) CancelBlobUploadPreparer(ctx context.Context, name string, UUID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name": autorest.Encode("path", name),
		"uuid": autorest.Encode("path", UUID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/v2/{name}/blobs/uploads/{uuid}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CancelBlobUploadSender sends the CancelBlobUpload request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CancelBlobUploadSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// CancelBlobUploadResponder handles the response to the CancelBlobUpload request. The method always
// closes the http.Response Body.
func (client BaseClient) CancelBlobUploadResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// CheckBlobExistence same as GET, except only the headers are returned.
// Parameters:
// name - name of the image (including the namespace)
// digest - digest of a BLOB
func (client BaseClient) CheckBlobExistence(ctx context.Context, name string, digest string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CheckBlobExistence")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CheckBlobExistencePreparer(ctx, name, digest)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "CheckBlobExistence", nil, "Failure preparing request")
		return
	}

	resp, err := client.CheckBlobExistenceSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "CheckBlobExistence", resp, "Failure sending request")
		return
	}

	result, err = client.CheckBlobExistenceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "CheckBlobExistence", resp, "Failure responding to request")
	}

	return
}

// CheckBlobExistencePreparer prepares the CheckBlobExistence request.
func (client BaseClient) CheckBlobExistencePreparer(ctx context.Context, name string, digest string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"digest": autorest.Encode("path", digest),
		"name":   autorest.Encode("path", name),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsHead(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/v2/{name}/blobs/{digest}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CheckBlobExistenceSender sends the CheckBlobExistence request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CheckBlobExistenceSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// CheckBlobExistenceResponder handles the response to the CheckBlobExistence request. The method always
// closes the http.Response Body.
func (client BaseClient) CheckBlobExistenceResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusTemporaryRedirect),
		autorest.ByClosing())
	result.Response = resp
	return
}

// CheckBlobPartExistence same as GET, except only the headers are returned.
// Parameters:
// name - name of the image (including the namespace)
// digest - digest of a BLOB
// rangeParameter - format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.
// part - acquire only part of a blob. This endpoint may also support RFC7233 compliant range requests. Support
// can be detected by issuing a HEAD request. If the header `Accept-Range: bytes` is returned, range requests
// can be used to fetch partial content
func (client BaseClient) CheckBlobPartExistence(ctx context.Context, name string, digest string, rangeParameter string, part string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CheckBlobPartExistence")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CheckBlobPartExistencePreparer(ctx, name, digest, rangeParameter, part)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "CheckBlobPartExistence", nil, "Failure preparing request")
		return
	}

	resp, err := client.CheckBlobPartExistenceSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "CheckBlobPartExistence", resp, "Failure sending request")
		return
	}

	result, err = client.CheckBlobPartExistenceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "CheckBlobPartExistence", resp, "Failure responding to request")
	}

	return
}

// CheckBlobPartExistencePreparer prepares the CheckBlobPartExistence request.
func (client BaseClient) CheckBlobPartExistencePreparer(ctx context.Context, name string, digest string, rangeParameter string, part string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"digest": autorest.Encode("path", digest),
		"name":   autorest.Encode("path", name),
	}

	queryParameters := map[string]interface{}{}
	if len(part) > 0 {
		queryParameters["part"] = autorest.Encode("query", part)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsHead(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/v2/{name}/blobs/{digest}", pathParameters),
		autorest.WithQueryParameters(queryParameters),
		autorest.WithHeader("Range", autorest.String(rangeParameter)))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CheckBlobPartExistenceSender sends the CheckBlobPartExistence request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CheckBlobPartExistenceSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// CheckBlobPartExistenceResponder handles the response to the CheckBlobPartExistence request. The method always
// closes the http.Response Body.
func (client BaseClient) CheckBlobPartExistenceResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusPartialContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// CheckV2Support tells whether this Docker Registry instance supports Docker Registry HTTP API v2
func (client BaseClient) CheckV2Support(ctx context.Context) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CheckV2Support")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CheckV2SupportPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "CheckV2Support", nil, "Failure preparing request")
		return
	}

	resp, err := client.CheckV2SupportSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "CheckV2Support", resp, "Failure sending request")
		return
	}

	result, err = client.CheckV2SupportResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "CheckV2Support", resp, "Failure responding to request")
	}

	return
}

// CheckV2SupportPreparer prepares the CheckV2Support request.
func (client BaseClient) CheckV2SupportPreparer(ctx context.Context) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPath("/v2/"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CheckV2SupportSender sends the CheckV2Support request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CheckV2SupportSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// CheckV2SupportResponder handles the response to the CheckV2Support request. The method always
// closes the http.Response Body.
func (client BaseClient) CheckV2SupportResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateManifest put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
// Parameters:
// name - name of the image (including the namespace)
// reference - a tag or a digest, pointing to a specific image
// payload - manifest body, can take v1 or v2 values depending on accept header
func (client BaseClient) CreateManifest(ctx context.Context, name string, reference string, payload Manifest) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CreateManifest")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreateManifestPreparer(ctx, name, reference, payload)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "CreateManifest", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateManifestSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "CreateManifest", resp, "Failure sending request")
		return
	}

	result, err = client.CreateManifestResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "CreateManifest", resp, "Failure responding to request")
	}

	return
}

// CreateManifestPreparer prepares the CreateManifest request.
func (client BaseClient) CreateManifestPreparer(ctx context.Context, name string, reference string, payload Manifest) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name":      autorest.Encode("path", name),
		"reference": autorest.Encode("path", reference),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/vnd.docker.distribution.manifest.v2+json"),
		autorest.AsPut(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/v2/{name}/manifests/{reference}", pathParameters),
		autorest.WithJSON(payload))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateManifestSender sends the CreateManifest request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CreateManifestSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// CreateManifestResponder handles the response to the CreateManifest request. The method always
// closes the http.Response Body.
func (client BaseClient) CreateManifestResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteBlob sends the delete blob request.
// Parameters:
// name - name of the image (including the namespace)
// digest - digest of a BLOB
func (client BaseClient) DeleteBlob(ctx context.Context, name string, digest string) (result ReadCloser, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.DeleteBlob")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeleteBlobPreparer(ctx, name, digest)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "DeleteBlob", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteBlobSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "DeleteBlob", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteBlobResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "DeleteBlob", resp, "Failure responding to request")
	}

	return
}

// DeleteBlobPreparer prepares the DeleteBlob request.
func (client BaseClient) DeleteBlobPreparer(ctx context.Context, name string, digest string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"digest": autorest.Encode("path", digest),
		"name":   autorest.Encode("path", name),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/v2/{name}/blobs/{digest}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteBlobSender sends the DeleteBlob request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DeleteBlobSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// DeleteBlobResponder handles the response to the DeleteBlob request. The method always
// closes the http.Response Body.
func (client BaseClient) DeleteBlobResponder(resp *http.Response) (result ReadCloser, err error) {
	result.Value = &resp.Body
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK))
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteManifest delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted
// by `digest`.
// Parameters:
// name - name of the image (including the namespace)
// reference - a tag or a digest, pointing to a specific image
func (client BaseClient) DeleteManifest(ctx context.Context, name string, reference string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.DeleteManifest")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeleteManifestPreparer(ctx, name, reference)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "DeleteManifest", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteManifestSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "DeleteManifest", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteManifestResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "DeleteManifest", resp, "Failure responding to request")
	}

	return
}

// DeleteManifestPreparer prepares the DeleteManifest request.
func (client BaseClient) DeleteManifestPreparer(ctx context.Context, name string, reference string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name":      autorest.Encode("path", name),
		"reference": autorest.Encode("path", reference),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/v2/{name}/manifests/{reference}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteManifestSender sends the DeleteManifest request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DeleteManifestSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// DeleteManifestResponder handles the response to the DeleteManifest request. The method always
// closes the http.Response Body.
func (client BaseClient) DeleteManifestResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DeleteRepository delete the repository identified by `name`
// Parameters:
// name - name of the image (including the namespace)
func (client BaseClient) DeleteRepository(ctx context.Context, name string) (result DeletedRepository, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.DeleteRepository")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeleteRepositoryPreparer(ctx, name)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "DeleteRepository", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteRepositorySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "DeleteRepository", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteRepositoryResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "DeleteRepository", resp, "Failure responding to request")
	}

	return
}

// DeleteRepositoryPreparer prepares the DeleteRepository request.
func (client BaseClient) DeleteRepositoryPreparer(ctx context.Context, name string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name": autorest.Encode("path", name),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/acr/v1/{name}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteRepositorySender sends the DeleteRepository request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DeleteRepositorySender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// DeleteRepositoryResponder handles the response to the DeleteRepository request. The method always
// closes the http.Response Body.
func (client BaseClient) DeleteRepositoryResponder(resp *http.Response) (result DeletedRepository, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteTag delete tag
// Parameters:
// name - name of the image (including the namespace)
// reference - tag or digest of the target manifest
func (client BaseClient) DeleteTag(ctx context.Context, name string, reference string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.DeleteTag")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeleteTagPreparer(ctx, name, reference)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "DeleteTag", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteTagSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "DeleteTag", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteTagResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "DeleteTag", resp, "Failure responding to request")
	}

	return
}

// DeleteTagPreparer prepares the DeleteTag request.
func (client BaseClient) DeleteTagPreparer(ctx context.Context, name string, reference string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name":      autorest.Encode("path", name),
		"reference": autorest.Encode("path", reference),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/acr/v1/{name}/_tags/{reference}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteTagSender sends the DeleteTag request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DeleteTagSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// DeleteTagResponder handles the response to the DeleteTag request. The method always
// closes the http.Response Body.
func (client BaseClient) DeleteTagResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}

// EndBlobUploadFromNext complete the upload, providing all the data in the body, if necessary. A request without a
// body will just complete the upload with previously uploaded content.
// Parameters:
// digest - digest of a BLOB
// location - link acquired from upload start or previous chunk. Note, do not include initial / (must do
// substring(1) )
func (client BaseClient) EndBlobUploadFromNext(ctx context.Context, digest string, location string, value io.ReadCloser) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.EndBlobUploadFromNext")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.EndBlobUploadFromNextPreparer(ctx, digest, location, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "EndBlobUploadFromNext", nil, "Failure preparing request")
		return
	}

	resp, err := client.EndBlobUploadFromNextSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "EndBlobUploadFromNext", resp, "Failure sending request")
		return
	}

	result, err = client.EndBlobUploadFromNextResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "EndBlobUploadFromNext", resp, "Failure responding to request")
	}

	return
}

// EndBlobUploadFromNextPreparer prepares the EndBlobUploadFromNext request.
func (client BaseClient) EndBlobUploadFromNextPreparer(ctx context.Context, digest string, location string, value io.ReadCloser) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"nextBlobUuidLink": location,
	}

	queryParameters := map[string]interface{}{
		"digest": autorest.Encode("query", digest),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/octet-stream"),
		autorest.AsPut(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/{nextBlobUuidLink}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	if value != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithFile(value))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// EndBlobUploadFromNextSender sends the EndBlobUploadFromNext request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) EndBlobUploadFromNextSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// EndBlobUploadFromNextResponder handles the response to the EndBlobUploadFromNext request. The method always
// closes the http.Response Body.
func (client BaseClient) EndBlobUploadFromNextResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByClosing())
	result.Response = resp
	return
}

// EndBlobUploadSpecified complete the upload, providing all the data in the body, if necessary. A request without a
// body will just complete the upload with previously uploaded content.
// Parameters:
// digest - digest of a BLOB
// name - name of the image (including the namespace)
// UUID - a uuid identifying the upload.
// _state - acquired from NextLink
// _nouploadcache - acquired from NextLink
func (client BaseClient) EndBlobUploadSpecified(ctx context.Context, digest string, name string, UUID string, _state string, _nouploadcache *bool, value io.ReadCloser) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.EndBlobUploadSpecified")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.EndBlobUploadSpecifiedPreparer(ctx, digest, name, UUID, _state, _nouploadcache, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "EndBlobUploadSpecified", nil, "Failure preparing request")
		return
	}

	resp, err := client.EndBlobUploadSpecifiedSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "EndBlobUploadSpecified", resp, "Failure sending request")
		return
	}

	result, err = client.EndBlobUploadSpecifiedResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "EndBlobUploadSpecified", resp, "Failure responding to request")
	}

	return
}

// EndBlobUploadSpecifiedPreparer prepares the EndBlobUploadSpecified request.
func (client BaseClient) EndBlobUploadSpecifiedPreparer(ctx context.Context, digest string, name string, UUID string, _state string, _nouploadcache *bool, value io.ReadCloser) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name": autorest.Encode("path", name),
		"uuid": autorest.Encode("path", UUID),
	}

	queryParameters := map[string]interface{}{
		"digest": autorest.Encode("query", digest),
	}
	if len(_state) > 0 {
		queryParameters["_state"] = autorest.Encode("query", _state)
	}
	if _nouploadcache != nil {
		queryParameters["_nouploadcache"] = autorest.Encode("query", *_nouploadcache)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/octet-stream"),
		autorest.AsPut(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/v2/{name}/blobs/uploads/{uuid}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	if value != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithFile(value))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// EndBlobUploadSpecifiedSender sends the EndBlobUploadSpecified request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) EndBlobUploadSpecifiedSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// EndBlobUploadSpecifiedResponder handles the response to the EndBlobUploadSpecified request. The method always
// closes the http.Response Body.
func (client BaseClient) EndBlobUploadSpecifiedResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetAccessToken exchange ACR Refresh token for an ACR Access Token
// Parameters:
// service - indicates the name of your Azure container registry.
// scope - which is expected to be a valid scope, and can be specified more than once for multiple scope
// requests. You obtained this from the Www-Authenticate response header from the challenge.
// refreshToken - must be a valid ACR refresh token
func (client BaseClient) GetAccessToken(ctx context.Context, service string, scope string, refreshToken string) (result AccessToken, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetAccessToken")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetAccessTokenPreparer(ctx, service, scope, refreshToken)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetAccessToken", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAccessTokenSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetAccessToken", resp, "Failure sending request")
		return
	}

	result, err = client.GetAccessTokenResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetAccessToken", resp, "Failure responding to request")
	}

	return
}

// GetAccessTokenPreparer prepares the GetAccessToken request.
func (client BaseClient) GetAccessTokenPreparer(ctx context.Context, service string, scope string, refreshToken string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	formDataParameters := map[string]interface{}{
		"grant_type":    "refresh_token",
		"refresh_token": refreshToken,
		"scope":         scope,
		"service":       service,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPath("/oauth2/token"),
		autorest.WithFormData(autorest.MapToValues(formDataParameters)))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAccessTokenSender sends the GetAccessToken request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetAccessTokenSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetAccessTokenResponder handles the response to the GetAccessToken request. The method always
// closes the http.Response Body.
func (client BaseClient) GetAccessTokenResponder(resp *http.Response) (result AccessToken, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAccessTokenFromLogin exchange Username, Password and Scope an ACR Access Token
// Parameters:
// service - indicates the name of your Azure container registry.
// scope - expected to be a valid scope, and can be specified more than once for multiple scope requests. You
// can obtain this from the Www-Authenticate response header from the challenge.
func (client BaseClient) GetAccessTokenFromLogin(ctx context.Context, service string, scope string) (result AccessToken, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetAccessTokenFromLogin")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetAccessTokenFromLoginPreparer(ctx, service, scope)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetAccessTokenFromLogin", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAccessTokenFromLoginSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetAccessTokenFromLogin", resp, "Failure sending request")
		return
	}

	result, err = client.GetAccessTokenFromLoginResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetAccessTokenFromLogin", resp, "Failure responding to request")
	}

	return
}

// GetAccessTokenFromLoginPreparer prepares the GetAccessTokenFromLogin request.
func (client BaseClient) GetAccessTokenFromLoginPreparer(ctx context.Context, service string, scope string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	queryParameters := map[string]interface{}{
		"scope":   autorest.Encode("query", scope),
		"service": autorest.Encode("query", service),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPath("/oauth2/token"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAccessTokenFromLoginSender sends the GetAccessTokenFromLogin request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetAccessTokenFromLoginSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetAccessTokenFromLoginResponder handles the response to the GetAccessTokenFromLogin request. The method always
// closes the http.Response Body.
func (client BaseClient) GetAccessTokenFromLoginResponder(resp *http.Response) (result AccessToken, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAcrTagList list tags of a repository
// Parameters:
// name - name of the image (including the namespace)
// last - query parameter for the last item in previous query. Result set will include values lexically after
// last.
// n - query parameter for max number of items
// orderby - orderby query parameter
// digest - filter by digest
func (client BaseClient) GetAcrTagList(ctx context.Context, name string, last string, n *int32, orderby string, digest string) (result TagList, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetAcrTagList")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetAcrTagListPreparer(ctx, name, last, n, orderby, digest)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetAcrTagList", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAcrTagListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetAcrTagList", resp, "Failure sending request")
		return
	}

	result, err = client.GetAcrTagListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetAcrTagList", resp, "Failure responding to request")
	}

	return
}

// GetAcrTagListPreparer prepares the GetAcrTagList request.
func (client BaseClient) GetAcrTagListPreparer(ctx context.Context, name string, last string, n *int32, orderby string, digest string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name": autorest.Encode("path", name),
	}

	queryParameters := map[string]interface{}{}
	if len(last) > 0 {
		queryParameters["last"] = autorest.Encode("query", last)
	}
	if n != nil {
		queryParameters["n"] = autorest.Encode("query", *n)
	}
	if len(orderby) > 0 {
		queryParameters["orderby"] = autorest.Encode("query", orderby)
	}
	if len(digest) > 0 {
		queryParameters["digest"] = autorest.Encode("query", digest)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/acr/v1/{name}/_tags", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAcrTagListSender sends the GetAcrTagList request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetAcrTagListSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetAcrTagListResponder handles the response to the GetAcrTagList request. The method always
// closes the http.Response Body.
func (client BaseClient) GetAcrTagListResponder(resp *http.Response) (result TagList, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetBlob retrieve the blob from the registry identified by digest.
// Parameters:
// name - name of the image (including the namespace)
// digest - digest of a BLOB
func (client BaseClient) GetBlob(ctx context.Context, name string, digest string) (result ReadCloser, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetBlob")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetBlobPreparer(ctx, name, digest)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetBlob", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetBlobSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetBlob", resp, "Failure sending request")
		return
	}

	result, err = client.GetBlobResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetBlob", resp, "Failure responding to request")
	}

	return
}

// GetBlobPreparer prepares the GetBlob request.
func (client BaseClient) GetBlobPreparer(ctx context.Context, name string, digest string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"digest": autorest.Encode("path", digest),
		"name":   autorest.Encode("path", name),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/v2/{name}/blobs/{digest}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetBlobSender sends the GetBlob request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetBlobSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetBlobResponder handles the response to the GetBlob request. The method always
// closes the http.Response Body.
func (client BaseClient) GetBlobResponder(resp *http.Response) (result ReadCloser, err error) {
	result.Value = &resp.Body
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusTemporaryRedirect))
	result.Response = autorest.Response{Response: resp}
	return
}

// GetBlobPart retrieve the blob from the registry identified by `digest`. This endpoint may also support RFC7233
// compliant range requests. Support can be detected by issuing a HEAD request. If the header `Accept-Range: bytes` is
// returned, range requests can be used to fetch partial content.
// Parameters:
// name - name of the image (including the namespace)
// digest - digest of a BLOB
// rangeParameter - format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.
// part - acquire only part of a blob. This endpoint may also support RFC7233 compliant range requests. Support
// can be detected by issuing a HEAD request. If the header `Accept-Range: bytes` is returned, range requests
// can be used to fetch partial content
func (client BaseClient) GetBlobPart(ctx context.Context, name string, digest string, rangeParameter string, part string) (result ReadCloser, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetBlobPart")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetBlobPartPreparer(ctx, name, digest, rangeParameter, part)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetBlobPart", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetBlobPartSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetBlobPart", resp, "Failure sending request")
		return
	}

	result, err = client.GetBlobPartResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetBlobPart", resp, "Failure responding to request")
	}

	return
}

// GetBlobPartPreparer prepares the GetBlobPart request.
func (client BaseClient) GetBlobPartPreparer(ctx context.Context, name string, digest string, rangeParameter string, part string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"digest": autorest.Encode("path", digest),
		"name":   autorest.Encode("path", name),
	}

	queryParameters := map[string]interface{}{}
	if len(part) > 0 {
		queryParameters["part"] = autorest.Encode("query", part)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/v2/{name}/blobs/{digest}", pathParameters),
		autorest.WithQueryParameters(queryParameters),
		autorest.WithHeader("Range", autorest.String(rangeParameter)))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetBlobPartSender sends the GetBlobPart request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetBlobPartSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetBlobPartResponder handles the response to the GetBlobPart request. The method always
// closes the http.Response Body.
func (client BaseClient) GetBlobPartResponder(resp *http.Response) (result ReadCloser, err error) {
	result.Value = &resp.Body
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusPartialContent))
	result.Response = autorest.Response{Response: resp}
	return
}

// GetBlobUploadStatusFromNext retrieve status of upload identified by uuid. The primary purpose of this endpoint is to
// resolve the current status of a resumable upload.
// Parameters:
// location - link acquired from upload start or previous chunk. Note, do not include initial / (must do
// substring(1) )
// _state - acquired from NextLink
// _nouploadcache - acquired from NextLink
func (client BaseClient) GetBlobUploadStatusFromNext(ctx context.Context, location string, _state string, _nouploadcache *bool) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetBlobUploadStatusFromNext")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetBlobUploadStatusFromNextPreparer(ctx, location, _state, _nouploadcache)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetBlobUploadStatusFromNext", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetBlobUploadStatusFromNextSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetBlobUploadStatusFromNext", resp, "Failure sending request")
		return
	}

	result, err = client.GetBlobUploadStatusFromNextResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetBlobUploadStatusFromNext", resp, "Failure responding to request")
	}

	return
}

// GetBlobUploadStatusFromNextPreparer prepares the GetBlobUploadStatusFromNext request.
func (client BaseClient) GetBlobUploadStatusFromNextPreparer(ctx context.Context, location string, _state string, _nouploadcache *bool) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"nextBlobUuidLink": location,
	}

	queryParameters := map[string]interface{}{}
	if len(_state) > 0 {
		queryParameters["_state"] = autorest.Encode("query", _state)
	}
	if _nouploadcache != nil {
		queryParameters["_nouploadcache"] = autorest.Encode("query", *_nouploadcache)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/{nextBlobUuidLink}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetBlobUploadStatusFromNextSender sends the GetBlobUploadStatusFromNext request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetBlobUploadStatusFromNextSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetBlobUploadStatusFromNextResponder handles the response to the GetBlobUploadStatusFromNext request. The method always
// closes the http.Response Body.
func (client BaseClient) GetBlobUploadStatusFromNextResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetBlobUploadStatusSpecified retrieve status of upload identified by uuid. The primary purpose of this endpoint is
// to resolve the current status of a resumable upload.
// Parameters:
// name - name of the image (including the namespace)
// UUID - a uuid identifying the upload.
// _state - acquired from NextLink
// _nouploadcache - acquired from NextLink
func (client BaseClient) GetBlobUploadStatusSpecified(ctx context.Context, name string, UUID string, _state string, _nouploadcache *bool) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetBlobUploadStatusSpecified")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetBlobUploadStatusSpecifiedPreparer(ctx, name, UUID, _state, _nouploadcache)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetBlobUploadStatusSpecified", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetBlobUploadStatusSpecifiedSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetBlobUploadStatusSpecified", resp, "Failure sending request")
		return
	}

	result, err = client.GetBlobUploadStatusSpecifiedResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetBlobUploadStatusSpecified", resp, "Failure responding to request")
	}

	return
}

// GetBlobUploadStatusSpecifiedPreparer prepares the GetBlobUploadStatusSpecified request.
func (client BaseClient) GetBlobUploadStatusSpecifiedPreparer(ctx context.Context, name string, UUID string, _state string, _nouploadcache *bool) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name": autorest.Encode("path", name),
		"uuid": autorest.Encode("path", UUID),
	}

	queryParameters := map[string]interface{}{}
	if len(_state) > 0 {
		queryParameters["_state"] = autorest.Encode("query", _state)
	}
	if _nouploadcache != nil {
		queryParameters["_nouploadcache"] = autorest.Encode("query", *_nouploadcache)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/v2/{name}/blobs/uploads/{uuid}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetBlobUploadStatusSpecifiedSender sends the GetBlobUploadStatusSpecified request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetBlobUploadStatusSpecifiedSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetBlobUploadStatusSpecifiedResponder handles the response to the GetBlobUploadStatusSpecified request. The method always
// closes the http.Response Body.
func (client BaseClient) GetBlobUploadStatusSpecifiedResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetManifest pulls the image manifest file associated with the specified name and reference. Reference may be a tag
// or a digest
// Parameters:
// name - name of the image (including the namespace)
// reference - a tag or a digest, pointing to a specific image
// accept - accept header string delimited by comma. For example,
// application/vnd.docker.distribution.manifest.v2+json
func (client BaseClient) GetManifest(ctx context.Context, name string, reference string, accept string) (result Manifest, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetManifest")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetManifestPreparer(ctx, name, reference, accept)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetManifest", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetManifestSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetManifest", resp, "Failure sending request")
		return
	}

	result, err = client.GetManifestResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetManifest", resp, "Failure responding to request")
	}

	return
}

// GetManifestPreparer prepares the GetManifest request.
func (client BaseClient) GetManifestPreparer(ctx context.Context, name string, reference string, accept string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name":      autorest.Encode("path", name),
		"reference": autorest.Encode("path", reference),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/v2/{name}/manifests/{reference}", pathParameters))
	if len(accept) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithHeader("accept", autorest.String(accept)))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetManifestSender sends the GetManifest request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetManifestSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetManifestResponder handles the response to the GetManifest request. The method always
// closes the http.Response Body.
func (client BaseClient) GetManifestResponder(resp *http.Response) (result Manifest, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetManifestAttributes get manifest attributes
// Parameters:
// name - name of the image (including the namespace)
// reference - a tag or a digest, pointing to a specific image
func (client BaseClient) GetManifestAttributes(ctx context.Context, name string, reference string) (result ManifestAttributes, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetManifestAttributes")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetManifestAttributesPreparer(ctx, name, reference)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetManifestAttributes", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetManifestAttributesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetManifestAttributes", resp, "Failure sending request")
		return
	}

	result, err = client.GetManifestAttributesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetManifestAttributes", resp, "Failure responding to request")
	}

	return
}

// GetManifestAttributesPreparer prepares the GetManifestAttributes request.
func (client BaseClient) GetManifestAttributesPreparer(ctx context.Context, name string, reference string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name":      autorest.Encode("path", name),
		"reference": autorest.Encode("path", reference),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/acr/v1/{name}/_manifests/{reference}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetManifestAttributesSender sends the GetManifestAttributes request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetManifestAttributesSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetManifestAttributesResponder handles the response to the GetManifestAttributes request. The method always
// closes the http.Response Body.
func (client BaseClient) GetManifestAttributesResponder(resp *http.Response) (result ManifestAttributes, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetManifestList list manifests of a repository
// Parameters:
// name - name of the image (including the namespace)
// last - query parameter for the last item in previous query. Result set will include values lexically after
// last.
// n - query parameter for max number of items
// orderby - orderby query parameter
func (client BaseClient) GetManifestList(ctx context.Context, name string, last string, n *int32, orderby string) (result AcrManifests, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetManifestList")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetManifestListPreparer(ctx, name, last, n, orderby)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetManifestList", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetManifestListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetManifestList", resp, "Failure sending request")
		return
	}

	result, err = client.GetManifestListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetManifestList", resp, "Failure responding to request")
	}

	return
}

// GetManifestListPreparer prepares the GetManifestList request.
func (client BaseClient) GetManifestListPreparer(ctx context.Context, name string, last string, n *int32, orderby string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name": autorest.Encode("path", name),
	}

	queryParameters := map[string]interface{}{}
	if len(last) > 0 {
		queryParameters["last"] = autorest.Encode("query", last)
	}
	if n != nil {
		queryParameters["n"] = autorest.Encode("query", *n)
	}
	if len(orderby) > 0 {
		queryParameters["orderby"] = autorest.Encode("query", orderby)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/acr/v1/{name}/_manifests", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetManifestListSender sends the GetManifestList request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetManifestListSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetManifestListResponder handles the response to the GetManifestList request. The method always
// closes the http.Response Body.
func (client BaseClient) GetManifestListResponder(resp *http.Response) (result AcrManifests, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetRefreshTokenFromExchange exchange AAD tokens for an ACR refresh Token
// Parameters:
// grantType - can take a value of access_token_refresh_token, or access_token, or refresh_token
// service - indicates the name of your Azure container registry.
// tenant - AAD tenant associated to the AAD credentials.
// refreshToken - AAD refresh token, mandatory when grant_type is access_token_refresh_token or refresh_token
// accessToken - AAD access token, mandatory when grant_type is access_token_refresh_token or access_token.
func (client BaseClient) GetRefreshTokenFromExchange(ctx context.Context, grantType string, service string, tenant string, refreshToken string, accessToken string) (result RefreshToken, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetRefreshTokenFromExchange")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetRefreshTokenFromExchangePreparer(ctx, grantType, service, tenant, refreshToken, accessToken)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetRefreshTokenFromExchange", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetRefreshTokenFromExchangeSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetRefreshTokenFromExchange", resp, "Failure sending request")
		return
	}

	result, err = client.GetRefreshTokenFromExchangeResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetRefreshTokenFromExchange", resp, "Failure responding to request")
	}

	return
}

// GetRefreshTokenFromExchangePreparer prepares the GetRefreshTokenFromExchange request.
func (client BaseClient) GetRefreshTokenFromExchangePreparer(ctx context.Context, grantType string, service string, tenant string, refreshToken string, accessToken string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	formDataParameters := map[string]interface{}{
		"grant_type": grantType,
		"service":    service,
	}
	if len(tenant) > 0 {
		formDataParameters["tenant"] = tenant
	}
	if len(refreshToken) > 0 {
		formDataParameters["refresh_token"] = refreshToken
	}
	if len(accessToken) > 0 {
		formDataParameters["access_token"] = accessToken
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPath("/oauth2/exchange"),
		autorest.WithFormData(autorest.MapToValues(formDataParameters)))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetRefreshTokenFromExchangeSender sends the GetRefreshTokenFromExchange request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetRefreshTokenFromExchangeSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetRefreshTokenFromExchangeResponder handles the response to the GetRefreshTokenFromExchange request. The method always
// closes the http.Response Body.
func (client BaseClient) GetRefreshTokenFromExchangeResponder(resp *http.Response) (result RefreshToken, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetRepositoryAttributes get repository attributes
// Parameters:
// name - name of the image (including the namespace)
func (client BaseClient) GetRepositoryAttributes(ctx context.Context, name string) (result RepositoryAttributes, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetRepositoryAttributes")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetRepositoryAttributesPreparer(ctx, name)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetRepositoryAttributes", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetRepositoryAttributesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetRepositoryAttributes", resp, "Failure sending request")
		return
	}

	result, err = client.GetRepositoryAttributesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetRepositoryAttributes", resp, "Failure responding to request")
	}

	return
}

// GetRepositoryAttributesPreparer prepares the GetRepositoryAttributes request.
func (client BaseClient) GetRepositoryAttributesPreparer(ctx context.Context, name string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name": autorest.Encode("path", name),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/acr/v1/{name}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetRepositoryAttributesSender sends the GetRepositoryAttributes request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetRepositoryAttributesSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetRepositoryAttributesResponder handles the response to the GetRepositoryAttributes request. The method always
// closes the http.Response Body.
func (client BaseClient) GetRepositoryAttributesResponder(resp *http.Response) (result RepositoryAttributes, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetRepositoryList list repositories
// Parameters:
// last - query parameter for the last item in previous query. Result set will include values lexically after
// last.
// n - query parameter for max number of items
func (client BaseClient) GetRepositoryList(ctx context.Context, last string, n *int32) (result Repositories, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetRepositoryList")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetRepositoryListPreparer(ctx, last, n)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetRepositoryList", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetRepositoryListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetRepositoryList", resp, "Failure sending request")
		return
	}

	result, err = client.GetRepositoryListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetRepositoryList", resp, "Failure responding to request")
	}

	return
}

// GetRepositoryListPreparer prepares the GetRepositoryList request.
func (client BaseClient) GetRepositoryListPreparer(ctx context.Context, last string, n *int32) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	queryParameters := map[string]interface{}{}
	if len(last) > 0 {
		queryParameters["last"] = autorest.Encode("query", last)
	}
	if n != nil {
		queryParameters["n"] = autorest.Encode("query", *n)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPath("/acr/v1/_catalog"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetRepositoryListSender sends the GetRepositoryList request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetRepositoryListSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetRepositoryListResponder handles the response to the GetRepositoryList request. The method always
// closes the http.Response Body.
func (client BaseClient) GetRepositoryListResponder(resp *http.Response) (result Repositories, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetTagAttributes get tag attributes by tag
// Parameters:
// name - name of the image (including the namespace)
// reference - tag or digest of the target manifest
func (client BaseClient) GetTagAttributes(ctx context.Context, name string, reference string) (result TagAttributes, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetTagAttributes")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetTagAttributesPreparer(ctx, name, reference)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetTagAttributes", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetTagAttributesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetTagAttributes", resp, "Failure sending request")
		return
	}

	result, err = client.GetTagAttributesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "GetTagAttributes", resp, "Failure responding to request")
	}

	return
}

// GetTagAttributesPreparer prepares the GetTagAttributes request.
func (client BaseClient) GetTagAttributesPreparer(ctx context.Context, name string, reference string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name":      autorest.Encode("path", name),
		"reference": autorest.Encode("path", reference),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/acr/v1/{name}/_tags/{reference}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetTagAttributesSender sends the GetTagAttributes request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetTagAttributesSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetTagAttributesResponder handles the response to the GetTagAttributes request. The method always
// closes the http.Response Body.
func (client BaseClient) GetTagAttributesResponder(resp *http.Response) (result TagAttributes, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// StartBlobUpload mount a blob identified by the `mount` parameter from another repository.
// Parameters:
// name - name of the image (including the namespace)
// from - name of the source repository.
// mount - digest of blob to mount from the source repository.
func (client BaseClient) StartBlobUpload(ctx context.Context, name string, from string, mount string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.StartBlobUpload")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.StartBlobUploadPreparer(ctx, name, from, mount)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "StartBlobUpload", nil, "Failure preparing request")
		return
	}

	resp, err := client.StartBlobUploadSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "StartBlobUpload", resp, "Failure sending request")
		return
	}

	result, err = client.StartBlobUploadResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "StartBlobUpload", resp, "Failure responding to request")
	}

	return
}

// StartBlobUploadPreparer prepares the StartBlobUpload request.
func (client BaseClient) StartBlobUploadPreparer(ctx context.Context, name string, from string, mount string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name": autorest.Encode("path", name),
	}

	queryParameters := map[string]interface{}{
		"from":  autorest.Encode("query", from),
		"mount": autorest.Encode("query", mount),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/v2/{name}/blobs/uploads/", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// StartBlobUploadSender sends the StartBlobUpload request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) StartBlobUploadSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// StartBlobUploadResponder handles the response to the StartBlobUpload request. The method always
// closes the http.Response Body.
func (client BaseClient) StartBlobUploadResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByClosing())
	result.Response = resp
	return
}

// StartEmptyResumableBlobUpload initiate a resumable blob upload with an empty request body.
// Parameters:
// name - name of the image (including the namespace)
// resumable - initiate Resumable Blob Upload
func (client BaseClient) StartEmptyResumableBlobUpload(ctx context.Context, name string, resumable string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.StartEmptyResumableBlobUpload")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.StartEmptyResumableBlobUploadPreparer(ctx, name, resumable)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "StartEmptyResumableBlobUpload", nil, "Failure preparing request")
		return
	}

	resp, err := client.StartEmptyResumableBlobUploadSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "StartEmptyResumableBlobUpload", resp, "Failure sending request")
		return
	}

	result, err = client.StartEmptyResumableBlobUploadResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "StartEmptyResumableBlobUpload", resp, "Failure responding to request")
	}

	return
}

// StartEmptyResumableBlobUploadPreparer prepares the StartEmptyResumableBlobUpload request.
func (client BaseClient) StartEmptyResumableBlobUploadPreparer(ctx context.Context, name string, resumable string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name": autorest.Encode("path", name),
	}

	queryParameters := map[string]interface{}{}
	if len(resumable) > 0 {
		queryParameters["resumable"] = autorest.Encode("query", resumable)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/v2/{name}/blobs/uploads/", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// StartEmptyResumableBlobUploadSender sends the StartEmptyResumableBlobUpload request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) StartEmptyResumableBlobUploadSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// StartEmptyResumableBlobUploadResponder handles the response to the StartEmptyResumableBlobUpload request. The method always
// closes the http.Response Body.
func (client BaseClient) StartEmptyResumableBlobUploadResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}

// UpdateManifestAttributes update attributes of a manifest
// Parameters:
// name - name of the image (including the namespace)
// reference - a tag or a digest, pointing to a specific image
// value - repository attribute value
func (client BaseClient) UpdateManifestAttributes(ctx context.Context, name string, reference string, value *ChangeableAttributes) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.UpdateManifestAttributes")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UpdateManifestAttributesPreparer(ctx, name, reference, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UpdateManifestAttributes", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateManifestAttributesSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UpdateManifestAttributes", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateManifestAttributesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UpdateManifestAttributes", resp, "Failure responding to request")
	}

	return
}

// UpdateManifestAttributesPreparer prepares the UpdateManifestAttributes request.
func (client BaseClient) UpdateManifestAttributesPreparer(ctx context.Context, name string, reference string, value *ChangeableAttributes) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name":      autorest.Encode("path", name),
		"reference": autorest.Encode("path", reference),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/acr/v1/{name}/_manifests/{reference}", pathParameters))
	if value != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(value))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateManifestAttributesSender sends the UpdateManifestAttributes request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) UpdateManifestAttributesSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// UpdateManifestAttributesResponder handles the response to the UpdateManifestAttributes request. The method always
// closes the http.Response Body.
func (client BaseClient) UpdateManifestAttributesResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// UpdateRepositoryAttributes update the attribute identified by `name` where `reference` is the name of the
// repository.
// Parameters:
// name - name of the image (including the namespace)
// value - repository attribute value
func (client BaseClient) UpdateRepositoryAttributes(ctx context.Context, name string, value *ChangeableAttributes) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.UpdateRepositoryAttributes")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UpdateRepositoryAttributesPreparer(ctx, name, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UpdateRepositoryAttributes", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateRepositoryAttributesSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UpdateRepositoryAttributes", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateRepositoryAttributesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UpdateRepositoryAttributes", resp, "Failure responding to request")
	}

	return
}

// UpdateRepositoryAttributesPreparer prepares the UpdateRepositoryAttributes request.
func (client BaseClient) UpdateRepositoryAttributesPreparer(ctx context.Context, name string, value *ChangeableAttributes) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name": autorest.Encode("path", name),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/acr/v1/{name}", pathParameters))
	if value != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(value))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateRepositoryAttributesSender sends the UpdateRepositoryAttributes request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) UpdateRepositoryAttributesSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// UpdateRepositoryAttributesResponder handles the response to the UpdateRepositoryAttributes request. The method always
// closes the http.Response Body.
func (client BaseClient) UpdateRepositoryAttributesResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// UpdateTagAttributes update tag attributes
// Parameters:
// name - name of the image (including the namespace)
// reference - tag or digest of the target manifest
// value - repository attribute value
func (client BaseClient) UpdateTagAttributes(ctx context.Context, name string, reference string, value *ChangeableAttributes) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.UpdateTagAttributes")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UpdateTagAttributesPreparer(ctx, name, reference, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UpdateTagAttributes", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateTagAttributesSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UpdateTagAttributes", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateTagAttributesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UpdateTagAttributes", resp, "Failure responding to request")
	}

	return
}

// UpdateTagAttributesPreparer prepares the UpdateTagAttributes request.
func (client BaseClient) UpdateTagAttributesPreparer(ctx context.Context, name string, reference string, value *ChangeableAttributes) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name":      autorest.Encode("path", name),
		"reference": autorest.Encode("path", reference),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/acr/v1/{name}/_tags/{reference}", pathParameters))
	if value != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(value))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateTagAttributesSender sends the UpdateTagAttributes request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) UpdateTagAttributesSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// UpdateTagAttributesResponder handles the response to the UpdateTagAttributes request. The method always
// closes the http.Response Body.
func (client BaseClient) UpdateTagAttributesResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// UploadBlobContentChunk upload a chunk of data to specified upload without completing the upload. The data will be
// uploaded to the specified Content Range.
// Parameters:
// contentRange - range of bytes identifying the desired block of content represented by the body. Start must
// the end offset retrieved via status check plus one. Note that this is a non-standard use of the
// `Content-Range` header.
// name - name of the image (including the namespace)
// UUID - a uuid identifying the upload.
// chunk - initiate Chunk Blob Upload
func (client BaseClient) UploadBlobContentChunk(ctx context.Context, value io.ReadCloser, contentRange string, name string, UUID string, chunk string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.UploadBlobContentChunk")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UploadBlobContentChunkPreparer(ctx, value, contentRange, name, UUID, chunk)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UploadBlobContentChunk", nil, "Failure preparing request")
		return
	}

	resp, err := client.UploadBlobContentChunkSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UploadBlobContentChunk", resp, "Failure sending request")
		return
	}

	result, err = client.UploadBlobContentChunkResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UploadBlobContentChunk", resp, "Failure responding to request")
	}

	return
}

// UploadBlobContentChunkPreparer prepares the UploadBlobContentChunk request.
func (client BaseClient) UploadBlobContentChunkPreparer(ctx context.Context, value io.ReadCloser, contentRange string, name string, UUID string, chunk string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name": autorest.Encode("path", name),
		"uuid": autorest.Encode("path", UUID),
	}

	queryParameters := map[string]interface{}{}
	if len(chunk) > 0 {
		queryParameters["chunk"] = autorest.Encode("query", chunk)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/octet-stream"),
		autorest.AsPatch(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/v2/{name}/blobs/uploads/{uuid}", pathParameters),
		autorest.WithFile(value),
		autorest.WithQueryParameters(queryParameters),
		autorest.WithHeader("Content-Range", autorest.String(contentRange)))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UploadBlobContentChunkSender sends the UploadBlobContentChunk request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) UploadBlobContentChunkSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// UploadBlobContentChunkResponder handles the response to the UploadBlobContentChunk request. The method always
// closes the http.Response Body.
func (client BaseClient) UploadBlobContentChunkResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}

// UploadBlobContentFromNext upload a stream of data without completing the upload.
// Parameters:
// location - link acquired from upload start or previous chunk. Note, do not include initial / (must do
// substring(1) )
func (client BaseClient) UploadBlobContentFromNext(ctx context.Context, value io.ReadCloser, location string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.UploadBlobContentFromNext")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UploadBlobContentFromNextPreparer(ctx, value, location)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UploadBlobContentFromNext", nil, "Failure preparing request")
		return
	}

	resp, err := client.UploadBlobContentFromNextSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UploadBlobContentFromNext", resp, "Failure sending request")
		return
	}

	result, err = client.UploadBlobContentFromNextResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UploadBlobContentFromNext", resp, "Failure responding to request")
	}

	return
}

// UploadBlobContentFromNextPreparer prepares the UploadBlobContentFromNext request.
func (client BaseClient) UploadBlobContentFromNextPreparer(ctx context.Context, value io.ReadCloser, location string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"nextBlobUuidLink": location,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/octet-stream"),
		autorest.AsPatch(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/{nextBlobUuidLink}", pathParameters),
		autorest.WithFile(value))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UploadBlobContentFromNextSender sends the UploadBlobContentFromNext request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) UploadBlobContentFromNextSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// UploadBlobContentFromNextResponder handles the response to the UploadBlobContentFromNext request. The method always
// closes the http.Response Body.
func (client BaseClient) UploadBlobContentFromNextResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}

// UploadBlobContentSpecified upload a stream of data without completing the upload. (Complete path definition)
// Parameters:
// name - name of the image (including the namespace)
// UUID - a uuid identifying the upload.
// _state - acquired from NextLink
// _nouploadcache - acquired from NextLink
func (client BaseClient) UploadBlobContentSpecified(ctx context.Context, value io.ReadCloser, name string, UUID string, _state string, _nouploadcache *bool) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.UploadBlobContentSpecified")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UploadBlobContentSpecifiedPreparer(ctx, value, name, UUID, _state, _nouploadcache)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UploadBlobContentSpecified", nil, "Failure preparing request")
		return
	}

	resp, err := client.UploadBlobContentSpecifiedSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UploadBlobContentSpecified", resp, "Failure sending request")
		return
	}

	result, err = client.UploadBlobContentSpecifiedResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "containerregistry.BaseClient", "UploadBlobContentSpecified", resp, "Failure responding to request")
	}

	return
}

// UploadBlobContentSpecifiedPreparer prepares the UploadBlobContentSpecified request.
func (client BaseClient) UploadBlobContentSpecifiedPreparer(ctx context.Context, value io.ReadCloser, name string, UUID string, _state string, _nouploadcache *bool) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"url": client.LoginURI,
	}

	pathParameters := map[string]interface{}{
		"name": autorest.Encode("path", name),
		"uuid": autorest.Encode("path", UUID),
	}

	queryParameters := map[string]interface{}{}
	if len(_state) > 0 {
		queryParameters["_state"] = autorest.Encode("query", _state)
	}
	if _nouploadcache != nil {
		queryParameters["_nouploadcache"] = autorest.Encode("query", *_nouploadcache)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/octet-stream"),
		autorest.AsPatch(),
		autorest.WithCustomBaseURL("{url}", urlParameters),
		autorest.WithPathParameters("/v2/{name}/blobs/uploads/{uuid}", pathParameters),
		autorest.WithFile(value),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UploadBlobContentSpecifiedSender sends the UploadBlobContentSpecified request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) UploadBlobContentSpecifiedSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// UploadBlobContentSpecifiedResponder handles the response to the UploadBlobContentSpecified request. The method always
// closes the http.Response Body.
func (client BaseClient) UploadBlobContentSpecifiedResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}
