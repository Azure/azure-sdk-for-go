package desktopvirtualization

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// ApplicationGroupType enumerates the values for application group type.
type ApplicationGroupType string

const (
	// ApplicationGroupTypeDesktop ...
	ApplicationGroupTypeDesktop ApplicationGroupType = "Desktop"
	// ApplicationGroupTypeRemoteApp ...
	ApplicationGroupTypeRemoteApp ApplicationGroupType = "RemoteApp"
)

// PossibleApplicationGroupTypeValues returns an array of possible values for the ApplicationGroupType const type.
func PossibleApplicationGroupTypeValues() []ApplicationGroupType {
	return []ApplicationGroupType{ApplicationGroupTypeDesktop, ApplicationGroupTypeRemoteApp}
}

// ApplicationType enumerates the values for application type.
type ApplicationType string

const (
	// ApplicationTypeDesktop ...
	ApplicationTypeDesktop ApplicationType = "Desktop"
	// ApplicationTypeRemoteApp ...
	ApplicationTypeRemoteApp ApplicationType = "RemoteApp"
)

// PossibleApplicationTypeValues returns an array of possible values for the ApplicationType const type.
func PossibleApplicationTypeValues() []ApplicationType {
	return []ApplicationType{ApplicationTypeDesktop, ApplicationTypeRemoteApp}
}

// CommandLineSetting enumerates the values for command line setting.
type CommandLineSetting string

const (
	// Allow ...
	Allow CommandLineSetting = "Allow"
	// DoNotAllow ...
	DoNotAllow CommandLineSetting = "DoNotAllow"
	// Require ...
	Require CommandLineSetting = "Require"
)

// PossibleCommandLineSettingValues returns an array of possible values for the CommandLineSetting const type.
func PossibleCommandLineSettingValues() []CommandLineSetting {
	return []CommandLineSetting{Allow, DoNotAllow, Require}
}

// CreatedByType enumerates the values for created by type.
type CreatedByType string

const (
	// CreatedByTypeApplication ...
	CreatedByTypeApplication CreatedByType = "Application"
	// CreatedByTypeKey ...
	CreatedByTypeKey CreatedByType = "Key"
	// CreatedByTypeManagedIdentity ...
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	// CreatedByTypeUser ...
	CreatedByTypeUser CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns an array of possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{CreatedByTypeApplication, CreatedByTypeKey, CreatedByTypeManagedIdentity, CreatedByTypeUser}
}

// HealthCheckName enumerates the values for health check name.
type HealthCheckName string

const (
	// AppAttachHealthCheck Verifies that the AppAttachService is healthy (there were no issues during package
	// staging). The AppAttachService is used to enable the staging/registration (and eventual
	// deregistration/destaging) of MSIX apps that have been set up by the tenant admin. This checks whether
	// the component had any failures during package staging. Failures in staging will prevent some MSIX apps
	// from working properly for the end user. If this check fails, it is non fatal and the machine still can
	// service connections, main issue may be certain apps will not work for end-users.
	AppAttachHealthCheck HealthCheckName = "AppAttachHealthCheck"
	// DomainJoinedCheck Verifies the SessionHost is joined to a domain. If this check fails is classified as
	// fatal as no connection can succeed if the SessionHost is not joined to the domain.
	DomainJoinedCheck HealthCheckName = "DomainJoinedCheck"
	// DomainReachable Verifies the domain the SessionHost is joined to is still reachable. If this check fails
	// is classified as fatal as no connection can succeed if the domain the SessionHost is joined is not
	// reachable at the time of connection.
	DomainReachable HealthCheckName = "DomainReachable"
	// DomainTrustCheck Verifies the SessionHost is not experiencing domain trust issues that will prevent
	// authentication on SessionHost at connection time when session is created. If this check fails is
	// classified as fatal as no connection can succeed if we cannot reach the domain for authentication on the
	// SessionHost.
	DomainTrustCheck HealthCheckName = "DomainTrustCheck"
	// FSLogixHealthCheck Verifies the FSLogix service is up and running to make sure users' profiles are
	// loaded in the session. If this check fails is classified as fatal as even if the connection can succeed,
	// user experience is bad as the user profile cannot be loaded and user will get a temporary profile in the
	// session.
	FSLogixHealthCheck HealthCheckName = "FSLogixHealthCheck"
	// MetaDataServiceCheck Verifies the metadata service is accessible and return compute properties.
	MetaDataServiceCheck HealthCheckName = "MetaDataServiceCheck"
	// MonitoringAgentCheck Verifies that the required Geneva agent is running. If this check fails, it is non
	// fatal and the machine still can service connections, main issue may be that monitoring agent is missing
	// or running (possibly) older version.
	MonitoringAgentCheck HealthCheckName = "MonitoringAgentCheck"
	// SupportedEncryptionCheck Verifies the value of SecurityLayer registration key. If the value is 0
	// (SecurityLayer.RDP) this check fails with Error code = NativeMethodErrorCode.E_FAIL and is fatal. If the
	// value is 1 (SecurityLayer.Negotiate) this check fails with Error code =
	// NativeMethodErrorCode.ERROR_SUCCESS and is non fatal.
	SupportedEncryptionCheck HealthCheckName = "SupportedEncryptionCheck"
	// SxSStackListenerCheck Verifies that the SxS stack is up and running so connections can succeed. If this
	// check fails is classified as fatal as no connection can succeed if the SxS stack is not ready.
	SxSStackListenerCheck HealthCheckName = "SxSStackListenerCheck"
	// UrlsAccessibleCheck Verifies that the required WVD service and Geneva URLs are reachable from the
	// SessionHost. These URLs are: RdTokenUri, RdBrokerURI, RdDiagnosticsUri and storage blob URLs for agent
	// monitoring (geneva). If this check fails, it is non fatal and the machine still can service connections,
	// main issue may be that monitoring agent is unable to store warm path data (logs, operations ...).
	UrlsAccessibleCheck HealthCheckName = "UrlsAccessibleCheck"
	// WebRTCRedirectorCheck Verifies whether the WebRTCRedirector component is healthy. The WebRTCRedirector
	// component is used to optimize video and audio performance in Microsoft Teams. This checks whether the
	// component is still running, and whether there is a higher version available. If this check fails, it is
	// non fatal and the machine still can service connections, main issue may be the WebRTCRedirector
	// component has to be restarted or updated.
	WebRTCRedirectorCheck HealthCheckName = "WebRTCRedirectorCheck"
)

// PossibleHealthCheckNameValues returns an array of possible values for the HealthCheckName const type.
func PossibleHealthCheckNameValues() []HealthCheckName {
	return []HealthCheckName{AppAttachHealthCheck, DomainJoinedCheck, DomainReachable, DomainTrustCheck, FSLogixHealthCheck, MetaDataServiceCheck, MonitoringAgentCheck, SupportedEncryptionCheck, SxSStackListenerCheck, UrlsAccessibleCheck, WebRTCRedirectorCheck}
}

// HealthCheckResult enumerates the values for health check result.
type HealthCheckResult string

const (
	// HealthCheckFailed Health check failed.
	HealthCheckFailed HealthCheckResult = "HealthCheckFailed"
	// HealthCheckSucceeded Health check passed.
	HealthCheckSucceeded HealthCheckResult = "HealthCheckSucceeded"
	// SessionHostShutdown We received a Shutdown notification.
	SessionHostShutdown HealthCheckResult = "SessionHostShutdown"
	// Unknown Health check result is not currently known.
	Unknown HealthCheckResult = "Unknown"
)

// PossibleHealthCheckResultValues returns an array of possible values for the HealthCheckResult const type.
func PossibleHealthCheckResultValues() []HealthCheckResult {
	return []HealthCheckResult{HealthCheckFailed, HealthCheckSucceeded, SessionHostShutdown, Unknown}
}

// HostPoolType enumerates the values for host pool type.
type HostPoolType string

const (
	// BYODesktop Users assign their own machines, load balancing logic remains the same as Personal.
	// PersonalDesktopAssignmentType must be Direct.
	BYODesktop HostPoolType = "BYODesktop"
	// Personal Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType =
	// Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be
	// redirected to their assigned SessionHost.
	Personal HostPoolType = "Personal"
	// Pooled Users get a new (random) SessionHost every time it connects to the HostPool.
	Pooled HostPoolType = "Pooled"
)

// PossibleHostPoolTypeValues returns an array of possible values for the HostPoolType const type.
func PossibleHostPoolTypeValues() []HostPoolType {
	return []HostPoolType{BYODesktop, Personal, Pooled}
}

// LoadBalancerType enumerates the values for load balancer type.
type LoadBalancerType string

const (
	// BreadthFirst ...
	BreadthFirst LoadBalancerType = "BreadthFirst"
	// DepthFirst ...
	DepthFirst LoadBalancerType = "DepthFirst"
	// Persistent ...
	Persistent LoadBalancerType = "Persistent"
)

// PossibleLoadBalancerTypeValues returns an array of possible values for the LoadBalancerType const type.
func PossibleLoadBalancerTypeValues() []LoadBalancerType {
	return []LoadBalancerType{BreadthFirst, DepthFirst, Persistent}
}

// Operation enumerates the values for operation.
type Operation string

const (
	// Complete Complete the migration.
	Complete Operation = "Complete"
	// Hide Hide the hostpool.
	Hide Operation = "Hide"
	// Revoke Revoke the migration.
	Revoke Operation = "Revoke"
	// Start Start the migration.
	Start Operation = "Start"
	// Unhide Unhide the hostpool.
	Unhide Operation = "Unhide"
)

// PossibleOperationValues returns an array of possible values for the Operation const type.
func PossibleOperationValues() []Operation {
	return []Operation{Complete, Hide, Revoke, Start, Unhide}
}

// PersonalDesktopAssignmentType enumerates the values for personal desktop assignment type.
type PersonalDesktopAssignmentType string

const (
	// Automatic ...
	Automatic PersonalDesktopAssignmentType = "Automatic"
	// Direct ...
	Direct PersonalDesktopAssignmentType = "Direct"
)

// PossiblePersonalDesktopAssignmentTypeValues returns an array of possible values for the PersonalDesktopAssignmentType const type.
func PossiblePersonalDesktopAssignmentTypeValues() []PersonalDesktopAssignmentType {
	return []PersonalDesktopAssignmentType{Automatic, Direct}
}

// PreferredAppGroupType enumerates the values for preferred app group type.
type PreferredAppGroupType string

const (
	// PreferredAppGroupTypeDesktop ...
	PreferredAppGroupTypeDesktop PreferredAppGroupType = "Desktop"
	// PreferredAppGroupTypeNone ...
	PreferredAppGroupTypeNone PreferredAppGroupType = "None"
	// PreferredAppGroupTypeRailApplications ...
	PreferredAppGroupTypeRailApplications PreferredAppGroupType = "RailApplications"
)

// PossiblePreferredAppGroupTypeValues returns an array of possible values for the PreferredAppGroupType const type.
func PossiblePreferredAppGroupTypeValues() []PreferredAppGroupType {
	return []PreferredAppGroupType{PreferredAppGroupTypeDesktop, PreferredAppGroupTypeNone, PreferredAppGroupTypeRailApplications}
}

// PrivateEndpointConnectionProvisioningState enumerates the values for private endpoint connection
// provisioning state.
type PrivateEndpointConnectionProvisioningState string

const (
	// Creating ...
	Creating PrivateEndpointConnectionProvisioningState = "Creating"
	// Deleting ...
	Deleting PrivateEndpointConnectionProvisioningState = "Deleting"
	// Failed ...
	Failed PrivateEndpointConnectionProvisioningState = "Failed"
	// Succeeded ...
	Succeeded PrivateEndpointConnectionProvisioningState = "Succeeded"
)

// PossiblePrivateEndpointConnectionProvisioningStateValues returns an array of possible values for the PrivateEndpointConnectionProvisioningState const type.
func PossiblePrivateEndpointConnectionProvisioningStateValues() []PrivateEndpointConnectionProvisioningState {
	return []PrivateEndpointConnectionProvisioningState{Creating, Deleting, Failed, Succeeded}
}

// PrivateEndpointServiceConnectionStatus enumerates the values for private endpoint service connection status.
type PrivateEndpointServiceConnectionStatus string

const (
	// Approved ...
	Approved PrivateEndpointServiceConnectionStatus = "Approved"
	// Pending ...
	Pending PrivateEndpointServiceConnectionStatus = "Pending"
	// Rejected ...
	Rejected PrivateEndpointServiceConnectionStatus = "Rejected"
)

// PossiblePrivateEndpointServiceConnectionStatusValues returns an array of possible values for the PrivateEndpointServiceConnectionStatus const type.
func PossiblePrivateEndpointServiceConnectionStatusValues() []PrivateEndpointServiceConnectionStatus {
	return []PrivateEndpointServiceConnectionStatus{Approved, Pending, Rejected}
}

// PublicNetworkAccess enumerates the values for public network access.
type PublicNetworkAccess string

const (
	// Disabled ...
	Disabled PublicNetworkAccess = "Disabled"
	// Enabled ...
	Enabled PublicNetworkAccess = "Enabled"
)

// PossiblePublicNetworkAccessValues returns an array of possible values for the PublicNetworkAccess const type.
func PossiblePublicNetworkAccessValues() []PublicNetworkAccess {
	return []PublicNetworkAccess{Disabled, Enabled}
}

// RegistrationTokenOperation enumerates the values for registration token operation.
type RegistrationTokenOperation string

const (
	// Delete ...
	Delete RegistrationTokenOperation = "Delete"
	// None ...
	None RegistrationTokenOperation = "None"
	// Update ...
	Update RegistrationTokenOperation = "Update"
)

// PossibleRegistrationTokenOperationValues returns an array of possible values for the RegistrationTokenOperation const type.
func PossibleRegistrationTokenOperationValues() []RegistrationTokenOperation {
	return []RegistrationTokenOperation{Delete, None, Update}
}

// RemoteApplicationType enumerates the values for remote application type.
type RemoteApplicationType string

const (
	// InBuilt ...
	InBuilt RemoteApplicationType = "InBuilt"
	// MsixApplication ...
	MsixApplication RemoteApplicationType = "MsixApplication"
)

// PossibleRemoteApplicationTypeValues returns an array of possible values for the RemoteApplicationType const type.
func PossibleRemoteApplicationTypeValues() []RemoteApplicationType {
	return []RemoteApplicationType{InBuilt, MsixApplication}
}

// ResourceIdentityType enumerates the values for resource identity type.
type ResourceIdentityType string

const (
	// SystemAssigned ...
	SystemAssigned ResourceIdentityType = "SystemAssigned"
)

// PossibleResourceIdentityTypeValues returns an array of possible values for the ResourceIdentityType const type.
func PossibleResourceIdentityTypeValues() []ResourceIdentityType {
	return []ResourceIdentityType{SystemAssigned}
}

// SessionHostLoadBalancingAlgorithm enumerates the values for session host load balancing algorithm.
type SessionHostLoadBalancingAlgorithm string

const (
	// SessionHostLoadBalancingAlgorithmBreadthFirst ...
	SessionHostLoadBalancingAlgorithmBreadthFirst SessionHostLoadBalancingAlgorithm = "BreadthFirst"
	// SessionHostLoadBalancingAlgorithmDepthFirst ...
	SessionHostLoadBalancingAlgorithmDepthFirst SessionHostLoadBalancingAlgorithm = "DepthFirst"
)

// PossibleSessionHostLoadBalancingAlgorithmValues returns an array of possible values for the SessionHostLoadBalancingAlgorithm const type.
func PossibleSessionHostLoadBalancingAlgorithmValues() []SessionHostLoadBalancingAlgorithm {
	return []SessionHostLoadBalancingAlgorithm{SessionHostLoadBalancingAlgorithmBreadthFirst, SessionHostLoadBalancingAlgorithmDepthFirst}
}

// SessionState enumerates the values for session state.
type SessionState string

const (
	// SessionStateActive ...
	SessionStateActive SessionState = "Active"
	// SessionStateDisconnected ...
	SessionStateDisconnected SessionState = "Disconnected"
	// SessionStateLogOff ...
	SessionStateLogOff SessionState = "LogOff"
	// SessionStatePending ...
	SessionStatePending SessionState = "Pending"
	// SessionStateUnknown ...
	SessionStateUnknown SessionState = "Unknown"
	// SessionStateUserProfileDiskMounted ...
	SessionStateUserProfileDiskMounted SessionState = "UserProfileDiskMounted"
)

// PossibleSessionStateValues returns an array of possible values for the SessionState const type.
func PossibleSessionStateValues() []SessionState {
	return []SessionState{SessionStateActive, SessionStateDisconnected, SessionStateLogOff, SessionStatePending, SessionStateUnknown, SessionStateUserProfileDiskMounted}
}

// SkuTier enumerates the values for sku tier.
type SkuTier string

const (
	// Basic ...
	Basic SkuTier = "Basic"
	// Free ...
	Free SkuTier = "Free"
	// Premium ...
	Premium SkuTier = "Premium"
	// Standard ...
	Standard SkuTier = "Standard"
)

// PossibleSkuTierValues returns an array of possible values for the SkuTier const type.
func PossibleSkuTierValues() []SkuTier {
	return []SkuTier{Basic, Free, Premium, Standard}
}

// SSOSecretType enumerates the values for sso secret type.
type SSOSecretType string

const (
	// Certificate ...
	Certificate SSOSecretType = "Certificate"
	// CertificateInKeyVault ...
	CertificateInKeyVault SSOSecretType = "CertificateInKeyVault"
	// SharedKey ...
	SharedKey SSOSecretType = "SharedKey"
	// SharedKeyInKeyVault ...
	SharedKeyInKeyVault SSOSecretType = "SharedKeyInKeyVault"
)

// PossibleSSOSecretTypeValues returns an array of possible values for the SSOSecretType const type.
func PossibleSSOSecretTypeValues() []SSOSecretType {
	return []SSOSecretType{Certificate, CertificateInKeyVault, SharedKey, SharedKeyInKeyVault}
}

// Status enumerates the values for status.
type Status string

const (
	// Available Session Host has passed all the health checks and is available to handle connections.
	Available Status = "Available"
	// Disconnected The Session Host is unavailable because it is currently disconnected.
	Disconnected Status = "Disconnected"
	// DomainTrustRelationshipLost SessionHost's domain trust relationship lost
	DomainTrustRelationshipLost Status = "DomainTrustRelationshipLost"
	// FSLogixNotHealthy FSLogix is in an unhealthy state on the session host.
	FSLogixNotHealthy Status = "FSLogixNotHealthy"
	// NeedsAssistance New status to inform admins that the health on their endpoint needs to be fixed. The
	// connections might not fail, as these issues are not fatal.
	NeedsAssistance Status = "NeedsAssistance"
	// NoHeartbeat The Session Host is not heart beating.
	NoHeartbeat Status = "NoHeartbeat"
	// NotJoinedToDomain SessionHost is not joined to domain.
	NotJoinedToDomain Status = "NotJoinedToDomain"
	// Shutdown Session Host is shutdown - RD Agent reported session host to be stopped or deallocated.
	Shutdown Status = "Shutdown"
	// SxSStackListenerNotReady SxS stack installed on the SessionHost is not ready to receive connections.
	SxSStackListenerNotReady Status = "SxSStackListenerNotReady"
	// Unavailable Session Host is either turned off or has failed critical health checks which is causing
	// service not to be able to route connections to this session host. Note this replaces previous
	// 'NoHeartBeat' status.
	Unavailable Status = "Unavailable"
	// UpgradeFailed Session Host is unavailable because the critical component upgrade (agent, side-by-side
	// stack, etc.) failed.
	UpgradeFailed Status = "UpgradeFailed"
	// Upgrading Session Host is unavailable because currently an upgrade of RDAgent/side-by-side stack is in
	// progress. Note: this state will be removed once the upgrade completes and the host is able to accept
	// connections.
	Upgrading Status = "Upgrading"
)

// PossibleStatusValues returns an array of possible values for the Status const type.
func PossibleStatusValues() []Status {
	return []Status{Available, Disconnected, DomainTrustRelationshipLost, FSLogixNotHealthy, NeedsAssistance, NoHeartbeat, NotJoinedToDomain, Shutdown, SxSStackListenerNotReady, Unavailable, UpgradeFailed, Upgrading}
}

// StopHostsWhen enumerates the values for stop hosts when.
type StopHostsWhen string

const (
	// ZeroActiveSessions ...
	ZeroActiveSessions StopHostsWhen = "ZeroActiveSessions"
	// ZeroSessions ...
	ZeroSessions StopHostsWhen = "ZeroSessions"
)

// PossibleStopHostsWhenValues returns an array of possible values for the StopHostsWhen const type.
func PossibleStopHostsWhenValues() []StopHostsWhen {
	return []StopHostsWhen{ZeroActiveSessions, ZeroSessions}
}

// UpdateState enumerates the values for update state.
type UpdateState string

const (
	// UpdateStateFailed ...
	UpdateStateFailed UpdateState = "Failed"
	// UpdateStateInitial ...
	UpdateStateInitial UpdateState = "Initial"
	// UpdateStatePending ...
	UpdateStatePending UpdateState = "Pending"
	// UpdateStateStarted ...
	UpdateStateStarted UpdateState = "Started"
	// UpdateStateSucceeded ...
	UpdateStateSucceeded UpdateState = "Succeeded"
)

// PossibleUpdateStateValues returns an array of possible values for the UpdateState const type.
func PossibleUpdateStateValues() []UpdateState {
	return []UpdateState{UpdateStateFailed, UpdateStateInitial, UpdateStatePending, UpdateStateStarted, UpdateStateSucceeded}
}
