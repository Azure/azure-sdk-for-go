package digitaltwins

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// QueryClient is the a service for managing and querying digital twins and digital twin models.
type QueryClient struct {
	BaseClient
}

// NewQueryClient creates an instance of the QueryClient client.
func NewQueryClient() QueryClient {
	return NewQueryClientWithBaseURI(DefaultBaseURI)
}

// NewQueryClientWithBaseURI creates an instance of the QueryClient client using a custom endpoint.  Use this when
// interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewQueryClientWithBaseURI(baseURI string) QueryClient {
	return QueryClient{NewWithBaseURI(baseURI)}
}

// QueryTwins executes a query that allows traversing relationships and filtering by property values.
// Status codes:
// * 200 OK
// * 400 Bad Request
// * BadRequest - The continuation token is invalid.
// * SqlQueryError - The query contains some errors.
// * TimeoutError - The query execution timed out after 60 seconds. Try simplifying the query or adding conditions to
// reduce the result size.
// * 429 Too Many Requests
// * QuotaReachedError - The maximum query rate limit has been reached.
// Parameters:
// querySpecification - the query specification to execute.
// maxItemsPerPage - the maximum number of items to retrieve per request. The server may choose to return less
// than the requested number.
// traceparent - identifies the request in a distributed tracing system.
// tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client QueryClient) QueryTwins(ctx context.Context, querySpecification QuerySpecification, maxItemsPerPage *int32, traceparent string, tracestate string) (result QueryResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/QueryClient.QueryTwins")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.QueryTwinsPreparer(ctx, querySpecification, maxItemsPerPage, traceparent, tracestate)
	if err != nil {
		err = autorest.NewErrorWithError(err, "digitaltwins.QueryClient", "QueryTwins", nil, "Failure preparing request")
		return
	}

	resp, err := client.QueryTwinsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "digitaltwins.QueryClient", "QueryTwins", resp, "Failure sending request")
		return
	}

	result, err = client.QueryTwinsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "digitaltwins.QueryClient", "QueryTwins", resp, "Failure responding to request")
		return
	}

	return
}

// QueryTwinsPreparer prepares the QueryTwins request.
func (client QueryClient) QueryTwinsPreparer(ctx context.Context, querySpecification QuerySpecification, maxItemsPerPage *int32, traceparent string, tracestate string) (*http.Request, error) {
	const APIVersion = "2021-06-30-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/query"),
		autorest.WithJSON(querySpecification),
		autorest.WithQueryParameters(queryParameters))
	if maxItemsPerPage != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithHeader("max-items-per-page", autorest.String(*maxItemsPerPage)))
	}
	if len(traceparent) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithHeader("traceparent", autorest.String(traceparent)))
	}
	if len(tracestate) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithHeader("tracestate", autorest.String(tracestate)))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// QueryTwinsSender sends the QueryTwins request. The method will close the
// http.Response Body if it receives an error.
func (client QueryClient) QueryTwinsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// QueryTwinsResponder handles the response to the QueryTwins request. The method always
// closes the http.Response Body.
func (client QueryClient) QueryTwinsResponder(resp *http.Response) (result QueryResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
