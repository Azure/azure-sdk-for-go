package labservices

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// ActionType enumerates the values for action type.
type ActionType string

const (
	// Internal ...
	Internal ActionType = "Internal"
)

// PossibleActionTypeValues returns an array of possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{Internal}
}

// ConnectionType enumerates the values for connection type.
type ConnectionType string

const (
	// None ...
	None ConnectionType = "None"
	// Private ...
	Private ConnectionType = "Private"
	// Public ...
	Public ConnectionType = "Public"
)

// PossibleConnectionTypeValues returns an array of possible values for the ConnectionType const type.
func PossibleConnectionTypeValues() []ConnectionType {
	return []ConnectionType{None, Private, Public}
}

// CreatedByType enumerates the values for created by type.
type CreatedByType string

const (
	// CreatedByTypeApplication ...
	CreatedByTypeApplication CreatedByType = "Application"
	// CreatedByTypeKey ...
	CreatedByTypeKey CreatedByType = "Key"
	// CreatedByTypeManagedIdentity ...
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	// CreatedByTypeUser ...
	CreatedByTypeUser CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns an array of possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{CreatedByTypeApplication, CreatedByTypeKey, CreatedByTypeManagedIdentity, CreatedByTypeUser}
}

// CreateOption enumerates the values for create option.
type CreateOption string

const (
	// CreateOptionImage An image is used to create all lab user virtual machines. When this option is set, no
	// template VM will be created.
	CreateOptionImage CreateOption = "Image"
	// CreateOptionTemplateVM A template VM will be used to create all lab user virtual machines.
	CreateOptionTemplateVM CreateOption = "TemplateVM"
)

// PossibleCreateOptionValues returns an array of possible values for the CreateOption const type.
func PossibleCreateOptionValues() []CreateOption {
	return []CreateOption{CreateOptionImage, CreateOptionTemplateVM}
}

// EnableState enumerates the values for enable state.
type EnableState string

const (
	// Disabled ...
	Disabled EnableState = "Disabled"
	// Enabled ...
	Enabled EnableState = "Enabled"
)

// PossibleEnableStateValues returns an array of possible values for the EnableState const type.
func PossibleEnableStateValues() []EnableState {
	return []EnableState{Disabled, Enabled}
}

// InvitationState enumerates the values for invitation state.
type InvitationState string

const (
	// Failed There was an error while sending the invitation.
	Failed InvitationState = "Failed"
	// NotSent The invitation has not been sent.
	NotSent InvitationState = "NotSent"
	// Sending Currently sending the invitation.
	Sending InvitationState = "Sending"
	// Sent The invitation has been successfully sent.
	Sent InvitationState = "Sent"
)

// PossibleInvitationStateValues returns an array of possible values for the InvitationState const type.
func PossibleInvitationStateValues() []InvitationState {
	return []InvitationState{Failed, NotSent, Sending, Sent}
}

// LabState enumerates the values for lab state.
type LabState string

const (
	// Draft The lab is currently in draft (has not been published).
	Draft LabState = "Draft"
	// Published The lab has been published.
	Published LabState = "Published"
	// Publishing The lab is publishing.
	Publishing LabState = "Publishing"
	// Scaling The lab is scaling.
	Scaling LabState = "Scaling"
	// Syncing The lab is syncing users.
	Syncing LabState = "Syncing"
)

// PossibleLabStateValues returns an array of possible values for the LabState const type.
func PossibleLabStateValues() []LabState {
	return []LabState{Draft, Published, Publishing, Scaling, Syncing}
}

// OperationStatus enumerates the values for operation status.
type OperationStatus string

const (
	// OperationStatusCanceled Not supported yet
	OperationStatusCanceled OperationStatus = "Canceled"
	// OperationStatusFailed The operation failed
	OperationStatusFailed OperationStatus = "Failed"
	// OperationStatusInProgress The operation is running
	OperationStatusInProgress OperationStatus = "InProgress"
	// OperationStatusNotStarted The operation has been accepted but hasn't started.
	OperationStatusNotStarted OperationStatus = "NotStarted"
	// OperationStatusSucceeded The operation Succeeded
	OperationStatusSucceeded OperationStatus = "Succeeded"
)

// PossibleOperationStatusValues returns an array of possible values for the OperationStatus const type.
func PossibleOperationStatusValues() []OperationStatus {
	return []OperationStatus{OperationStatusCanceled, OperationStatusFailed, OperationStatusInProgress, OperationStatusNotStarted, OperationStatusSucceeded}
}

// Origin enumerates the values for origin.
type Origin string

const (
	// OriginSystem ...
	OriginSystem Origin = "system"
	// OriginUser ...
	OriginUser Origin = "user"
	// OriginUsersystem ...
	OriginUsersystem Origin = "user,system"
)

// PossibleOriginValues returns an array of possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{OriginSystem, OriginUser, OriginUsersystem}
}

// OsState enumerates the values for os state.
type OsState string

const (
	// Generalized Image does not contain any machine and user specific information.
	Generalized OsState = "Generalized"
	// Specialized Image contains machine and user specific information.
	Specialized OsState = "Specialized"
)

// PossibleOsStateValues returns an array of possible values for the OsState const type.
func PossibleOsStateValues() []OsState {
	return []OsState{Generalized, Specialized}
}

// OsType enumerates the values for os type.
type OsType string

const (
	// Linux ...
	Linux OsType = "Linux"
	// Windows ...
	Windows OsType = "Windows"
)

// PossibleOsTypeValues returns an array of possible values for the OsType const type.
func PossibleOsTypeValues() []OsType {
	return []OsType{Linux, Windows}
}

// ProvisioningState enumerates the values for provisioning state.
type ProvisioningState string

const (
	// ProvisioningStateCreating Resource is in the process of being created.
	ProvisioningStateCreating ProvisioningState = "Creating"
	// ProvisioningStateDeleting Resource is in the process of being deleted.
	ProvisioningStateDeleting ProvisioningState = "Deleting"
	// ProvisioningStateFailed Previous operation on the resource has failed leaving resource in unhealthy
	// state.
	ProvisioningStateFailed ProvisioningState = "Failed"
	// ProvisioningStateLocked The resource is locked and changes are currently blocked. This could be due to
	// maintenance or a scheduled operation. The state will go back to succeeded once the locking operation has
	// finished.
	ProvisioningStateLocked ProvisioningState = "Locked"
	// ProvisioningStateSucceeded Resource is in healthy state after creation or update operation.
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
	// ProvisioningStateUpdating New property values are being applied to the resource.
	ProvisioningStateUpdating ProvisioningState = "Updating"
)

// PossibleProvisioningStateValues returns an array of possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{ProvisioningStateCreating, ProvisioningStateDeleting, ProvisioningStateFailed, ProvisioningStateLocked, ProvisioningStateSucceeded, ProvisioningStateUpdating}
}

// RecurrenceFrequency enumerates the values for recurrence frequency.
type RecurrenceFrequency string

const (
	// Daily Schedule will run every days.
	Daily RecurrenceFrequency = "Daily"
	// Weekly Schedule will run every week on days specified in weekDays.
	Weekly RecurrenceFrequency = "Weekly"
)

// PossibleRecurrenceFrequencyValues returns an array of possible values for the RecurrenceFrequency const type.
func PossibleRecurrenceFrequencyValues() []RecurrenceFrequency {
	return []RecurrenceFrequency{Daily, Weekly}
}

// RegistrationState enumerates the values for registration state.
type RegistrationState string

const (
	// NotRegistered User has registered with the lab.
	NotRegistered RegistrationState = "NotRegistered"
	// Registered User has not yet registered with the lab.
	Registered RegistrationState = "Registered"
)

// PossibleRegistrationStateValues returns an array of possible values for the RegistrationState const type.
func PossibleRegistrationStateValues() []RegistrationState {
	return []RegistrationState{NotRegistered, Registered}
}

// ResourceIdentityType enumerates the values for resource identity type.
type ResourceIdentityType string

const (
	// SystemAssigned ...
	SystemAssigned ResourceIdentityType = "SystemAssigned"
)

// PossibleResourceIdentityTypeValues returns an array of possible values for the ResourceIdentityType const type.
func PossibleResourceIdentityTypeValues() []ResourceIdentityType {
	return []ResourceIdentityType{SystemAssigned}
}

// RestrictionReasonCode enumerates the values for restriction reason code.
type RestrictionReasonCode string

const (
	// NotAvailableForSubscription ...
	NotAvailableForSubscription RestrictionReasonCode = "NotAvailableForSubscription"
	// QuotaID ...
	QuotaID RestrictionReasonCode = "QuotaId"
)

// PossibleRestrictionReasonCodeValues returns an array of possible values for the RestrictionReasonCode const type.
func PossibleRestrictionReasonCodeValues() []RestrictionReasonCode {
	return []RestrictionReasonCode{NotAvailableForSubscription, QuotaID}
}

// RestrictionType enumerates the values for restriction type.
type RestrictionType string

const (
	// Location ...
	Location RestrictionType = "Location"
)

// PossibleRestrictionTypeValues returns an array of possible values for the RestrictionType const type.
func PossibleRestrictionTypeValues() []RestrictionType {
	return []RestrictionType{Location}
}

// ScaleType enumerates the values for scale type.
type ScaleType string

const (
	// ScaleTypeAutomatic The user is permitted to scale this SKU in and out.
	ScaleTypeAutomatic ScaleType = "Automatic"
	// ScaleTypeManual The user must manually scale this SKU in and out.
	ScaleTypeManual ScaleType = "Manual"
	// ScaleTypeNone The capacity is not adjustable in any way.
	ScaleTypeNone ScaleType = "None"
)

// PossibleScaleTypeValues returns an array of possible values for the ScaleType const type.
func PossibleScaleTypeValues() []ScaleType {
	return []ScaleType{ScaleTypeAutomatic, ScaleTypeManual, ScaleTypeNone}
}

// ShutdownOnIdleMode enumerates the values for shutdown on idle mode.
type ShutdownOnIdleMode string

const (
	// ShutdownOnIdleModeLowUsage The VM will be considered as idle when user is absent and the resource (CPU
	// and disk) consumption is low.
	ShutdownOnIdleModeLowUsage ShutdownOnIdleMode = "LowUsage"
	// ShutdownOnIdleModeNone The VM won't be shut down when it is idle.
	ShutdownOnIdleModeNone ShutdownOnIdleMode = "None"
	// ShutdownOnIdleModeUserAbsence The VM will be considered as idle when there is no keyboard or mouse
	// input.
	ShutdownOnIdleModeUserAbsence ShutdownOnIdleMode = "UserAbsence"
)

// PossibleShutdownOnIdleModeValues returns an array of possible values for the ShutdownOnIdleMode const type.
func PossibleShutdownOnIdleModeValues() []ShutdownOnIdleMode {
	return []ShutdownOnIdleMode{ShutdownOnIdleModeLowUsage, ShutdownOnIdleModeNone, ShutdownOnIdleModeUserAbsence}
}

// SkuTier enumerates the values for sku tier.
type SkuTier string

const (
	// Basic ...
	Basic SkuTier = "Basic"
	// Free ...
	Free SkuTier = "Free"
	// Premium ...
	Premium SkuTier = "Premium"
	// Standard ...
	Standard SkuTier = "Standard"
)

// PossibleSkuTierValues returns an array of possible values for the SkuTier const type.
func PossibleSkuTierValues() []SkuTier {
	return []SkuTier{Basic, Free, Premium, Standard}
}

// SkuTierEnum enumerates the values for sku tier enum.
type SkuTierEnum string

const (
	// SkuTierEnumPremium ...
	SkuTierEnumPremium SkuTierEnum = "Premium"
	// SkuTierEnumStandard ...
	SkuTierEnumStandard SkuTierEnum = "Standard"
)

// PossibleSkuTierEnumValues returns an array of possible values for the SkuTierEnum const type.
func PossibleSkuTierEnumValues() []SkuTierEnum {
	return []SkuTierEnum{SkuTierEnumPremium, SkuTierEnumStandard}
}

// UsageUnit enumerates the values for usage unit.
type UsageUnit string

const (
	// Count ...
	Count UsageUnit = "Count"
)

// PossibleUsageUnitValues returns an array of possible values for the UsageUnit const type.
func PossibleUsageUnitValues() []UsageUnit {
	return []UsageUnit{Count}
}

// VirtualMachineState enumerates the values for virtual machine state.
type VirtualMachineState string

const (
	// Redeploying The VM is being redeployed.
	Redeploying VirtualMachineState = "Redeploying"
	// Reimaging The VM is being reimaged.
	Reimaging VirtualMachineState = "Reimaging"
	// ResettingPassword The VM password is being reset.
	ResettingPassword VirtualMachineState = "ResettingPassword"
	// Running The VM is running.
	Running VirtualMachineState = "Running"
	// Starting The VM is starting.
	Starting VirtualMachineState = "Starting"
	// Stopped The VM is currently stopped.
	Stopped VirtualMachineState = "Stopped"
	// Stopping The VM is stopping.
	Stopping VirtualMachineState = "Stopping"
)

// PossibleVirtualMachineStateValues returns an array of possible values for the VirtualMachineState const type.
func PossibleVirtualMachineStateValues() []VirtualMachineState {
	return []VirtualMachineState{Redeploying, Reimaging, ResettingPassword, Running, Starting, Stopped, Stopping}
}

// VirtualMachineType enumerates the values for virtual machine type.
type VirtualMachineType string

const (
	// VirtualMachineTypeTemplate A template VM
	VirtualMachineTypeTemplate VirtualMachineType = "Template"
	// VirtualMachineTypeUser A user VM
	VirtualMachineTypeUser VirtualMachineType = "User"
)

// PossibleVirtualMachineTypeValues returns an array of possible values for the VirtualMachineType const type.
func PossibleVirtualMachineTypeValues() []VirtualMachineType {
	return []VirtualMachineType{VirtualMachineTypeTemplate, VirtualMachineTypeUser}
}

// WeekDay enumerates the values for week day.
type WeekDay string

const (
	// Friday Schedule will run on Friday
	Friday WeekDay = "Friday"
	// Monday Schedule will run on Monday
	Monday WeekDay = "Monday"
	// Saturday Schedule will run on Saturday
	Saturday WeekDay = "Saturday"
	// Sunday Schedule will run on Sunday
	Sunday WeekDay = "Sunday"
	// Thursday Schedule will run on Thursday
	Thursday WeekDay = "Thursday"
	// Tuesday Schedule will run on Tuesday
	Tuesday WeekDay = "Tuesday"
	// Wednesday Schedule will run on Wednesday
	Wednesday WeekDay = "Wednesday"
)

// PossibleWeekDayValues returns an array of possible values for the WeekDay const type.
func PossibleWeekDayValues() []WeekDay {
	return []WeekDay{Friday, Monday, Saturday, Sunday, Thursday, Tuesday, Wednesday}
}
