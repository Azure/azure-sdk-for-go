package machinelearningservices

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// AllocationState enumerates the values for allocation state.
type AllocationState string

const (
	// Resizing ...
	Resizing AllocationState = "Resizing"
	// Steady ...
	Steady AllocationState = "Steady"
)

// PossibleAllocationStateValues returns an array of possible values for the AllocationState const type.
func PossibleAllocationStateValues() []AllocationState {
	return []AllocationState{Resizing, Steady}
}

// ApplicationSharingPolicy enumerates the values for application sharing policy.
type ApplicationSharingPolicy string

const (
	// Personal ...
	Personal ApplicationSharingPolicy = "Personal"
	// Shared ...
	Shared ApplicationSharingPolicy = "Shared"
)

// PossibleApplicationSharingPolicyValues returns an array of possible values for the ApplicationSharingPolicy const type.
func PossibleApplicationSharingPolicyValues() []ApplicationSharingPolicy {
	return []ApplicationSharingPolicy{Personal, Shared}
}

// BatchLoggingLevel enumerates the values for batch logging level.
type BatchLoggingLevel string

const (
	// Debug ...
	Debug BatchLoggingLevel = "Debug"
	// Info ...
	Info BatchLoggingLevel = "Info"
	// Warning ...
	Warning BatchLoggingLevel = "Warning"
)

// PossibleBatchLoggingLevelValues returns an array of possible values for the BatchLoggingLevel const type.
func PossibleBatchLoggingLevelValues() []BatchLoggingLevel {
	return []BatchLoggingLevel{Debug, Info, Warning}
}

// BatchOutputAction enumerates the values for batch output action.
type BatchOutputAction string

const (
	// AppendRow ...
	AppendRow BatchOutputAction = "AppendRow"
	// SummaryOnly ...
	SummaryOnly BatchOutputAction = "SummaryOnly"
)

// PossibleBatchOutputActionValues returns an array of possible values for the BatchOutputAction const type.
func PossibleBatchOutputActionValues() []BatchOutputAction {
	return []BatchOutputAction{AppendRow, SummaryOnly}
}

// ClusterPurpose enumerates the values for cluster purpose.
type ClusterPurpose string

const (
	// DenseProd ...
	DenseProd ClusterPurpose = "DenseProd"
	// DevTest ...
	DevTest ClusterPurpose = "DevTest"
	// FastProd ...
	FastProd ClusterPurpose = "FastProd"
)

// PossibleClusterPurposeValues returns an array of possible values for the ClusterPurpose const type.
func PossibleClusterPurposeValues() []ClusterPurpose {
	return []ClusterPurpose{DenseProd, DevTest, FastProd}
}

// ComputeInstanceAuthorizationType enumerates the values for compute instance authorization type.
type ComputeInstanceAuthorizationType string

const (
	// ComputeInstanceAuthorizationTypePersonal ...
	ComputeInstanceAuthorizationTypePersonal ComputeInstanceAuthorizationType = "personal"
)

// PossibleComputeInstanceAuthorizationTypeValues returns an array of possible values for the ComputeInstanceAuthorizationType const type.
func PossibleComputeInstanceAuthorizationTypeValues() []ComputeInstanceAuthorizationType {
	return []ComputeInstanceAuthorizationType{ComputeInstanceAuthorizationTypePersonal}
}

// ComputeInstanceState enumerates the values for compute instance state.
type ComputeInstanceState string

const (
	// CreateFailed ...
	CreateFailed ComputeInstanceState = "CreateFailed"
	// Creating ...
	Creating ComputeInstanceState = "Creating"
	// Deleting ...
	Deleting ComputeInstanceState = "Deleting"
	// JobRunning ...
	JobRunning ComputeInstanceState = "JobRunning"
	// Restarting ...
	Restarting ComputeInstanceState = "Restarting"
	// Running ...
	Running ComputeInstanceState = "Running"
	// SettingUp ...
	SettingUp ComputeInstanceState = "SettingUp"
	// SetupFailed ...
	SetupFailed ComputeInstanceState = "SetupFailed"
	// Starting ...
	Starting ComputeInstanceState = "Starting"
	// Stopped ...
	Stopped ComputeInstanceState = "Stopped"
	// Stopping ...
	Stopping ComputeInstanceState = "Stopping"
	// Unknown ...
	Unknown ComputeInstanceState = "Unknown"
	// Unusable ...
	Unusable ComputeInstanceState = "Unusable"
	// UserSettingUp ...
	UserSettingUp ComputeInstanceState = "UserSettingUp"
	// UserSetupFailed ...
	UserSetupFailed ComputeInstanceState = "UserSetupFailed"
)

// PossibleComputeInstanceStateValues returns an array of possible values for the ComputeInstanceState const type.
func PossibleComputeInstanceStateValues() []ComputeInstanceState {
	return []ComputeInstanceState{CreateFailed, Creating, Deleting, JobRunning, Restarting, Running, SettingUp, SetupFailed, Starting, Stopped, Stopping, Unknown, Unusable, UserSettingUp, UserSetupFailed}
}

// ComputePowerAction enumerates the values for compute power action.
type ComputePowerAction string

const (
	// Start ...
	Start ComputePowerAction = "Start"
	// Stop ...
	Stop ComputePowerAction = "Stop"
)

// PossibleComputePowerActionValues returns an array of possible values for the ComputePowerAction const type.
func PossibleComputePowerActionValues() []ComputePowerAction {
	return []ComputePowerAction{Start, Stop}
}

// ComputeType enumerates the values for compute type.
type ComputeType string

const (
	// ComputeTypeAKS ...
	ComputeTypeAKS ComputeType = "AKS"
	// ComputeTypeAmlCompute ...
	ComputeTypeAmlCompute ComputeType = "AmlCompute"
	// ComputeTypeComputeInstance ...
	ComputeTypeComputeInstance ComputeType = "ComputeInstance"
	// ComputeTypeDatabricks ...
	ComputeTypeDatabricks ComputeType = "Databricks"
	// ComputeTypeDataFactory ...
	ComputeTypeDataFactory ComputeType = "DataFactory"
	// ComputeTypeDataLakeAnalytics ...
	ComputeTypeDataLakeAnalytics ComputeType = "DataLakeAnalytics"
	// ComputeTypeHDInsight ...
	ComputeTypeHDInsight ComputeType = "HDInsight"
	// ComputeTypeSynapseSpark ...
	ComputeTypeSynapseSpark ComputeType = "SynapseSpark"
	// ComputeTypeVirtualMachine ...
	ComputeTypeVirtualMachine ComputeType = "VirtualMachine"
)

// PossibleComputeTypeValues returns an array of possible values for the ComputeType const type.
func PossibleComputeTypeValues() []ComputeType {
	return []ComputeType{ComputeTypeAKS, ComputeTypeAmlCompute, ComputeTypeComputeInstance, ComputeTypeDatabricks, ComputeTypeDataFactory, ComputeTypeDataLakeAnalytics, ComputeTypeHDInsight, ComputeTypeSynapseSpark, ComputeTypeVirtualMachine}
}

// ComputeTypeBasicCompute enumerates the values for compute type basic compute.
type ComputeTypeBasicCompute string

const (
	// ComputeTypeAKS1 ...
	ComputeTypeAKS1 ComputeTypeBasicCompute = "AKS"
	// ComputeTypeAmlCompute1 ...
	ComputeTypeAmlCompute1 ComputeTypeBasicCompute = "AmlCompute"
	// ComputeTypeCompute ...
	ComputeTypeCompute ComputeTypeBasicCompute = "Compute"
	// ComputeTypeComputeInstance1 ...
	ComputeTypeComputeInstance1 ComputeTypeBasicCompute = "ComputeInstance"
	// ComputeTypeDatabricks1 ...
	ComputeTypeDatabricks1 ComputeTypeBasicCompute = "Databricks"
	// ComputeTypeDataFactory1 ...
	ComputeTypeDataFactory1 ComputeTypeBasicCompute = "DataFactory"
	// ComputeTypeDataLakeAnalytics1 ...
	ComputeTypeDataLakeAnalytics1 ComputeTypeBasicCompute = "DataLakeAnalytics"
	// ComputeTypeHDInsight1 ...
	ComputeTypeHDInsight1 ComputeTypeBasicCompute = "HDInsight"
	// ComputeTypeVirtualMachine1 ...
	ComputeTypeVirtualMachine1 ComputeTypeBasicCompute = "VirtualMachine"
)

// PossibleComputeTypeBasicComputeValues returns an array of possible values for the ComputeTypeBasicCompute const type.
func PossibleComputeTypeBasicComputeValues() []ComputeTypeBasicCompute {
	return []ComputeTypeBasicCompute{ComputeTypeAKS1, ComputeTypeAmlCompute1, ComputeTypeCompute, ComputeTypeComputeInstance1, ComputeTypeDatabricks1, ComputeTypeDataFactory1, ComputeTypeDataLakeAnalytics1, ComputeTypeHDInsight1, ComputeTypeVirtualMachine1}
}

// ComputeTypeBasicComputeNodesInformation enumerates the values for compute type basic compute nodes
// information.
type ComputeTypeBasicComputeNodesInformation string

const (
	// ComputeTypeBasicComputeNodesInformationComputeTypeAmlCompute ...
	ComputeTypeBasicComputeNodesInformationComputeTypeAmlCompute ComputeTypeBasicComputeNodesInformation = "AmlCompute"
	// ComputeTypeBasicComputeNodesInformationComputeTypeComputeNodesInformation ...
	ComputeTypeBasicComputeNodesInformationComputeTypeComputeNodesInformation ComputeTypeBasicComputeNodesInformation = "ComputeNodesInformation"
)

// PossibleComputeTypeBasicComputeNodesInformationValues returns an array of possible values for the ComputeTypeBasicComputeNodesInformation const type.
func PossibleComputeTypeBasicComputeNodesInformationValues() []ComputeTypeBasicComputeNodesInformation {
	return []ComputeTypeBasicComputeNodesInformation{ComputeTypeBasicComputeNodesInformationComputeTypeAmlCompute, ComputeTypeBasicComputeNodesInformationComputeTypeComputeNodesInformation}
}

// ComputeTypeBasicComputeSecrets enumerates the values for compute type basic compute secrets.
type ComputeTypeBasicComputeSecrets string

const (
	// ComputeTypeBasicComputeSecretsComputeTypeAKS ...
	ComputeTypeBasicComputeSecretsComputeTypeAKS ComputeTypeBasicComputeSecrets = "AKS"
	// ComputeTypeBasicComputeSecretsComputeTypeComputeSecrets ...
	ComputeTypeBasicComputeSecretsComputeTypeComputeSecrets ComputeTypeBasicComputeSecrets = "ComputeSecrets"
	// ComputeTypeBasicComputeSecretsComputeTypeDatabricks ...
	ComputeTypeBasicComputeSecretsComputeTypeDatabricks ComputeTypeBasicComputeSecrets = "Databricks"
	// ComputeTypeBasicComputeSecretsComputeTypeVirtualMachine ...
	ComputeTypeBasicComputeSecretsComputeTypeVirtualMachine ComputeTypeBasicComputeSecrets = "VirtualMachine"
)

// PossibleComputeTypeBasicComputeSecretsValues returns an array of possible values for the ComputeTypeBasicComputeSecrets const type.
func PossibleComputeTypeBasicComputeSecretsValues() []ComputeTypeBasicComputeSecrets {
	return []ComputeTypeBasicComputeSecrets{ComputeTypeBasicComputeSecretsComputeTypeAKS, ComputeTypeBasicComputeSecretsComputeTypeComputeSecrets, ComputeTypeBasicComputeSecretsComputeTypeDatabricks, ComputeTypeBasicComputeSecretsComputeTypeVirtualMachine}
}

// ContainerType enumerates the values for container type.
type ContainerType string

const (
	// InferenceServer ...
	InferenceServer ContainerType = "InferenceServer"
	// StorageInitializer ...
	StorageInitializer ContainerType = "StorageInitializer"
)

// PossibleContainerTypeValues returns an array of possible values for the ContainerType const type.
func PossibleContainerTypeValues() []ContainerType {
	return []ContainerType{InferenceServer, StorageInitializer}
}

// ContentsType enumerates the values for contents type.
type ContentsType string

const (
	// AzureBlob ...
	AzureBlob ContentsType = "AzureBlob"
	// AzureDataLakeGen1 ...
	AzureDataLakeGen1 ContentsType = "AzureDataLakeGen1"
	// AzureDataLakeGen2 ...
	AzureDataLakeGen2 ContentsType = "AzureDataLakeGen2"
	// AzureFile ...
	AzureFile ContentsType = "AzureFile"
	// AzureMySQL ...
	AzureMySQL ContentsType = "AzureMySql"
	// AzurePostgreSQL ...
	AzurePostgreSQL ContentsType = "AzurePostgreSql"
	// AzureSQLDatabase ...
	AzureSQLDatabase ContentsType = "AzureSqlDatabase"
	// GlusterFs ...
	GlusterFs ContentsType = "GlusterFs"
)

// PossibleContentsTypeValues returns an array of possible values for the ContentsType const type.
func PossibleContentsTypeValues() []ContentsType {
	return []ContentsType{AzureBlob, AzureDataLakeGen1, AzureDataLakeGen2, AzureFile, AzureMySQL, AzurePostgreSQL, AzureSQLDatabase, GlusterFs}
}

// ContentsTypeBasicDatastoreContents enumerates the values for contents type basic datastore contents.
type ContentsTypeBasicDatastoreContents string

const (
	// ContentsTypeAzureBlob ...
	ContentsTypeAzureBlob ContentsTypeBasicDatastoreContents = "AzureBlob"
	// ContentsTypeAzureDataLakeGen1 ...
	ContentsTypeAzureDataLakeGen1 ContentsTypeBasicDatastoreContents = "AzureDataLakeGen1"
	// ContentsTypeAzureDataLakeGen2 ...
	ContentsTypeAzureDataLakeGen2 ContentsTypeBasicDatastoreContents = "AzureDataLakeGen2"
	// ContentsTypeAzureFile ...
	ContentsTypeAzureFile ContentsTypeBasicDatastoreContents = "AzureFile"
	// ContentsTypeAzurePostgreSQL ...
	ContentsTypeAzurePostgreSQL ContentsTypeBasicDatastoreContents = "AzurePostgreSql"
	// ContentsTypeAzureSQLDatabase ...
	ContentsTypeAzureSQLDatabase ContentsTypeBasicDatastoreContents = "AzureSqlDatabase"
	// ContentsTypeDatastoreContents ...
	ContentsTypeDatastoreContents ContentsTypeBasicDatastoreContents = "DatastoreContents"
	// ContentsTypeGlusterFs ...
	ContentsTypeGlusterFs ContentsTypeBasicDatastoreContents = "GlusterFs"
)

// PossibleContentsTypeBasicDatastoreContentsValues returns an array of possible values for the ContentsTypeBasicDatastoreContents const type.
func PossibleContentsTypeBasicDatastoreContentsValues() []ContentsTypeBasicDatastoreContents {
	return []ContentsTypeBasicDatastoreContents{ContentsTypeAzureBlob, ContentsTypeAzureDataLakeGen1, ContentsTypeAzureDataLakeGen2, ContentsTypeAzureFile, ContentsTypeAzurePostgreSQL, ContentsTypeAzureSQLDatabase, ContentsTypeDatastoreContents, ContentsTypeGlusterFs}
}

// CreatedByType enumerates the values for created by type.
type CreatedByType string

const (
	// CreatedByTypeApplication ...
	CreatedByTypeApplication CreatedByType = "Application"
	// CreatedByTypeKey ...
	CreatedByTypeKey CreatedByType = "Key"
	// CreatedByTypeManagedIdentity ...
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	// CreatedByTypeUser ...
	CreatedByTypeUser CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns an array of possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{CreatedByTypeApplication, CreatedByTypeKey, CreatedByTypeManagedIdentity, CreatedByTypeUser}
}

// CredentialsType enumerates the values for credentials type.
type CredentialsType string

const (
	// AccountKey ...
	AccountKey CredentialsType = "AccountKey"
	// Certificate ...
	Certificate CredentialsType = "Certificate"
	// None ...
	None CredentialsType = "None"
	// Sas ...
	Sas CredentialsType = "Sas"
	// ServicePrincipal ...
	ServicePrincipal CredentialsType = "ServicePrincipal"
	// SQLAdmin ...
	SQLAdmin CredentialsType = "SqlAdmin"
)

// PossibleCredentialsTypeValues returns an array of possible values for the CredentialsType const type.
func PossibleCredentialsTypeValues() []CredentialsType {
	return []CredentialsType{AccountKey, Certificate, None, Sas, ServicePrincipal, SQLAdmin}
}

// CredentialsTypeBasicDatastoreCredentials enumerates the values for credentials type basic datastore
// credentials.
type CredentialsTypeBasicDatastoreCredentials string

const (
	// CredentialsTypeAccountKey ...
	CredentialsTypeAccountKey CredentialsTypeBasicDatastoreCredentials = "AccountKey"
	// CredentialsTypeCertificate ...
	CredentialsTypeCertificate CredentialsTypeBasicDatastoreCredentials = "Certificate"
	// CredentialsTypeDatastoreCredentials ...
	CredentialsTypeDatastoreCredentials CredentialsTypeBasicDatastoreCredentials = "DatastoreCredentials"
	// CredentialsTypeNone ...
	CredentialsTypeNone CredentialsTypeBasicDatastoreCredentials = "None"
	// CredentialsTypeSas ...
	CredentialsTypeSas CredentialsTypeBasicDatastoreCredentials = "Sas"
	// CredentialsTypeServicePrincipal ...
	CredentialsTypeServicePrincipal CredentialsTypeBasicDatastoreCredentials = "ServicePrincipal"
	// CredentialsTypeSQLAdmin ...
	CredentialsTypeSQLAdmin CredentialsTypeBasicDatastoreCredentials = "SqlAdmin"
)

// PossibleCredentialsTypeBasicDatastoreCredentialsValues returns an array of possible values for the CredentialsTypeBasicDatastoreCredentials const type.
func PossibleCredentialsTypeBasicDatastoreCredentialsValues() []CredentialsTypeBasicDatastoreCredentials {
	return []CredentialsTypeBasicDatastoreCredentials{CredentialsTypeAccountKey, CredentialsTypeCertificate, CredentialsTypeDatastoreCredentials, CredentialsTypeNone, CredentialsTypeSas, CredentialsTypeServicePrincipal, CredentialsTypeSQLAdmin}
}

// DataBindingMode enumerates the values for data binding mode.
type DataBindingMode string

const (
	// Download ...
	Download DataBindingMode = "Download"
	// Mount ...
	Mount DataBindingMode = "Mount"
	// Upload ...
	Upload DataBindingMode = "Upload"
)

// PossibleDataBindingModeValues returns an array of possible values for the DataBindingMode const type.
func PossibleDataBindingModeValues() []DataBindingMode {
	return []DataBindingMode{Download, Mount, Upload}
}

// DatasetType enumerates the values for dataset type.
type DatasetType string

const (
	// Dataflow ...
	Dataflow DatasetType = "Dataflow"
	// Simple ...
	Simple DatasetType = "Simple"
)

// PossibleDatasetTypeValues returns an array of possible values for the DatasetType const type.
func PossibleDatasetTypeValues() []DatasetType {
	return []DatasetType{Dataflow, Simple}
}

// DaysOfWeek enumerates the values for days of week.
type DaysOfWeek string

const (
	// Friday ...
	Friday DaysOfWeek = "Friday"
	// Monday ...
	Monday DaysOfWeek = "Monday"
	// Saturday ...
	Saturday DaysOfWeek = "Saturday"
	// Sunday ...
	Sunday DaysOfWeek = "Sunday"
	// Thursday ...
	Thursday DaysOfWeek = "Thursday"
	// Tuesday ...
	Tuesday DaysOfWeek = "Tuesday"
	// Wednesday ...
	Wednesday DaysOfWeek = "Wednesday"
)

// PossibleDaysOfWeekValues returns an array of possible values for the DaysOfWeek const type.
func PossibleDaysOfWeekValues() []DaysOfWeek {
	return []DaysOfWeek{Friday, Monday, Saturday, Sunday, Thursday, Tuesday, Wednesday}
}

// DeploymentProvisioningState enumerates the values for deployment provisioning state.
type DeploymentProvisioningState string

const (
	// DeploymentProvisioningStateCanceled ...
	DeploymentProvisioningStateCanceled DeploymentProvisioningState = "Canceled"
	// DeploymentProvisioningStateCreating ...
	DeploymentProvisioningStateCreating DeploymentProvisioningState = "Creating"
	// DeploymentProvisioningStateDeleting ...
	DeploymentProvisioningStateDeleting DeploymentProvisioningState = "Deleting"
	// DeploymentProvisioningStateFailed ...
	DeploymentProvisioningStateFailed DeploymentProvisioningState = "Failed"
	// DeploymentProvisioningStateScaling ...
	DeploymentProvisioningStateScaling DeploymentProvisioningState = "Scaling"
	// DeploymentProvisioningStateSucceeded ...
	DeploymentProvisioningStateSucceeded DeploymentProvisioningState = "Succeeded"
	// DeploymentProvisioningStateUpdating ...
	DeploymentProvisioningStateUpdating DeploymentProvisioningState = "Updating"
)

// PossibleDeploymentProvisioningStateValues returns an array of possible values for the DeploymentProvisioningState const type.
func PossibleDeploymentProvisioningStateValues() []DeploymentProvisioningState {
	return []DeploymentProvisioningState{DeploymentProvisioningStateCanceled, DeploymentProvisioningStateCreating, DeploymentProvisioningStateDeleting, DeploymentProvisioningStateFailed, DeploymentProvisioningStateScaling, DeploymentProvisioningStateSucceeded, DeploymentProvisioningStateUpdating}
}

// DistributionType enumerates the values for distribution type.
type DistributionType string

const (
	// DistributionTypeMpi ...
	DistributionTypeMpi DistributionType = "Mpi"
	// DistributionTypePyTorch ...
	DistributionTypePyTorch DistributionType = "PyTorch"
	// DistributionTypeTensorFlow ...
	DistributionTypeTensorFlow DistributionType = "TensorFlow"
)

// PossibleDistributionTypeValues returns an array of possible values for the DistributionType const type.
func PossibleDistributionTypeValues() []DistributionType {
	return []DistributionType{DistributionTypeMpi, DistributionTypePyTorch, DistributionTypeTensorFlow}
}

// DistributionTypeBasicDistributionConfiguration enumerates the values for distribution type basic
// distribution configuration.
type DistributionTypeBasicDistributionConfiguration string

const (
	// DistributionTypeDistributionConfiguration ...
	DistributionTypeDistributionConfiguration DistributionTypeBasicDistributionConfiguration = "DistributionConfiguration"
	// DistributionTypeMpi1 ...
	DistributionTypeMpi1 DistributionTypeBasicDistributionConfiguration = "Mpi"
	// DistributionTypePyTorch1 ...
	DistributionTypePyTorch1 DistributionTypeBasicDistributionConfiguration = "PyTorch"
	// DistributionTypeTensorFlow1 ...
	DistributionTypeTensorFlow1 DistributionTypeBasicDistributionConfiguration = "TensorFlow"
)

// PossibleDistributionTypeBasicDistributionConfigurationValues returns an array of possible values for the DistributionTypeBasicDistributionConfiguration const type.
func PossibleDistributionTypeBasicDistributionConfigurationValues() []DistributionTypeBasicDistributionConfiguration {
	return []DistributionTypeBasicDistributionConfiguration{DistributionTypeDistributionConfiguration, DistributionTypeMpi1, DistributionTypePyTorch1, DistributionTypeTensorFlow1}
}

// DockerSpecificationType enumerates the values for docker specification type.
type DockerSpecificationType string

const (
	// Build ...
	Build DockerSpecificationType = "Build"
	// Image ...
	Image DockerSpecificationType = "Image"
)

// PossibleDockerSpecificationTypeValues returns an array of possible values for the DockerSpecificationType const type.
func PossibleDockerSpecificationTypeValues() []DockerSpecificationType {
	return []DockerSpecificationType{Build, Image}
}

// DockerSpecificationTypeBasicDockerSpecification enumerates the values for docker specification type basic
// docker specification.
type DockerSpecificationTypeBasicDockerSpecification string

const (
	// DockerSpecificationTypeBuild ...
	DockerSpecificationTypeBuild DockerSpecificationTypeBasicDockerSpecification = "Build"
	// DockerSpecificationTypeDockerSpecification ...
	DockerSpecificationTypeDockerSpecification DockerSpecificationTypeBasicDockerSpecification = "DockerSpecification"
	// DockerSpecificationTypeImage ...
	DockerSpecificationTypeImage DockerSpecificationTypeBasicDockerSpecification = "Image"
)

// PossibleDockerSpecificationTypeBasicDockerSpecificationValues returns an array of possible values for the DockerSpecificationTypeBasicDockerSpecification const type.
func PossibleDockerSpecificationTypeBasicDockerSpecificationValues() []DockerSpecificationTypeBasicDockerSpecification {
	return []DockerSpecificationTypeBasicDockerSpecification{DockerSpecificationTypeBuild, DockerSpecificationTypeDockerSpecification, DockerSpecificationTypeImage}
}

// EarlyTerminationPolicyType enumerates the values for early termination policy type.
type EarlyTerminationPolicyType string

const (
	// Bandit ...
	Bandit EarlyTerminationPolicyType = "Bandit"
	// MedianStopping ...
	MedianStopping EarlyTerminationPolicyType = "MedianStopping"
	// TruncationSelection ...
	TruncationSelection EarlyTerminationPolicyType = "TruncationSelection"
)

// PossibleEarlyTerminationPolicyTypeValues returns an array of possible values for the EarlyTerminationPolicyType const type.
func PossibleEarlyTerminationPolicyTypeValues() []EarlyTerminationPolicyType {
	return []EarlyTerminationPolicyType{Bandit, MedianStopping, TruncationSelection}
}

// EncryptionStatus enumerates the values for encryption status.
type EncryptionStatus string

const (
	// Disabled ...
	Disabled EncryptionStatus = "Disabled"
	// Enabled ...
	Enabled EncryptionStatus = "Enabled"
)

// PossibleEncryptionStatusValues returns an array of possible values for the EncryptionStatus const type.
func PossibleEncryptionStatusValues() []EncryptionStatus {
	return []EncryptionStatus{Disabled, Enabled}
}

// EndpointAuthMode enumerates the values for endpoint auth mode.
type EndpointAuthMode string

const (
	// AADToken ...
	AADToken EndpointAuthMode = "AADToken"
	// AMLToken ...
	AMLToken EndpointAuthMode = "AMLToken"
	// Key ...
	Key EndpointAuthMode = "Key"
)

// PossibleEndpointAuthModeValues returns an array of possible values for the EndpointAuthMode const type.
func PossibleEndpointAuthModeValues() []EndpointAuthMode {
	return []EndpointAuthMode{AADToken, AMLToken, Key}
}

// EndpointComputeType enumerates the values for endpoint compute type.
type EndpointComputeType string

const (
	// AzureMLCompute ...
	AzureMLCompute EndpointComputeType = "AzureMLCompute"
	// K8S ...
	K8S EndpointComputeType = "K8S"
	// Managed ...
	Managed EndpointComputeType = "Managed"
)

// PossibleEndpointComputeTypeValues returns an array of possible values for the EndpointComputeType const type.
func PossibleEndpointComputeTypeValues() []EndpointComputeType {
	return []EndpointComputeType{AzureMLCompute, K8S, Managed}
}

// EndpointComputeTypeBasicOnlineDeployment enumerates the values for endpoint compute type basic online
// deployment.
type EndpointComputeTypeBasicOnlineDeployment string

const (
	// EndpointComputeTypeK8S ...
	EndpointComputeTypeK8S EndpointComputeTypeBasicOnlineDeployment = "K8S"
	// EndpointComputeTypeManaged ...
	EndpointComputeTypeManaged EndpointComputeTypeBasicOnlineDeployment = "Managed"
	// EndpointComputeTypeOnlineDeployment ...
	EndpointComputeTypeOnlineDeployment EndpointComputeTypeBasicOnlineDeployment = "OnlineDeployment"
)

// PossibleEndpointComputeTypeBasicOnlineDeploymentValues returns an array of possible values for the EndpointComputeTypeBasicOnlineDeployment const type.
func PossibleEndpointComputeTypeBasicOnlineDeploymentValues() []EndpointComputeTypeBasicOnlineDeployment {
	return []EndpointComputeTypeBasicOnlineDeployment{EndpointComputeTypeK8S, EndpointComputeTypeManaged, EndpointComputeTypeOnlineDeployment}
}

// EndpointComputeTypeBasicPartialOnlineDeployment enumerates the values for endpoint compute type basic
// partial online deployment.
type EndpointComputeTypeBasicPartialOnlineDeployment string

const (
	// EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypeK8S ...
	EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypeK8S EndpointComputeTypeBasicPartialOnlineDeployment = "K8S"
	// EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypeManaged ...
	EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypeManaged EndpointComputeTypeBasicPartialOnlineDeployment = "Managed"
	// EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypePartialOnlineDeployment ...
	EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypePartialOnlineDeployment EndpointComputeTypeBasicPartialOnlineDeployment = "PartialOnlineDeployment"
)

// PossibleEndpointComputeTypeBasicPartialOnlineDeploymentValues returns an array of possible values for the EndpointComputeTypeBasicPartialOnlineDeployment const type.
func PossibleEndpointComputeTypeBasicPartialOnlineDeploymentValues() []EndpointComputeTypeBasicPartialOnlineDeployment {
	return []EndpointComputeTypeBasicPartialOnlineDeployment{EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypeK8S, EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypeManaged, EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypePartialOnlineDeployment}
}

// EndpointProvisioningState enumerates the values for endpoint provisioning state.
type EndpointProvisioningState string

const (
	// EndpointProvisioningStateCanceled ...
	EndpointProvisioningStateCanceled EndpointProvisioningState = "Canceled"
	// EndpointProvisioningStateCreating ...
	EndpointProvisioningStateCreating EndpointProvisioningState = "Creating"
	// EndpointProvisioningStateDeleting ...
	EndpointProvisioningStateDeleting EndpointProvisioningState = "Deleting"
	// EndpointProvisioningStateFailed ...
	EndpointProvisioningStateFailed EndpointProvisioningState = "Failed"
	// EndpointProvisioningStateSucceeded ...
	EndpointProvisioningStateSucceeded EndpointProvisioningState = "Succeeded"
	// EndpointProvisioningStateUpdating ...
	EndpointProvisioningStateUpdating EndpointProvisioningState = "Updating"
)

// PossibleEndpointProvisioningStateValues returns an array of possible values for the EndpointProvisioningState const type.
func PossibleEndpointProvisioningStateValues() []EndpointProvisioningState {
	return []EndpointProvisioningState{EndpointProvisioningStateCanceled, EndpointProvisioningStateCreating, EndpointProvisioningStateDeleting, EndpointProvisioningStateFailed, EndpointProvisioningStateSucceeded, EndpointProvisioningStateUpdating}
}

// EnvironmentSpecificationType enumerates the values for environment specification type.
type EnvironmentSpecificationType string

const (
	// Curated ...
	Curated EnvironmentSpecificationType = "Curated"
	// UserCreated ...
	UserCreated EnvironmentSpecificationType = "UserCreated"
)

// PossibleEnvironmentSpecificationTypeValues returns an array of possible values for the EnvironmentSpecificationType const type.
func PossibleEnvironmentSpecificationTypeValues() []EnvironmentSpecificationType {
	return []EnvironmentSpecificationType{Curated, UserCreated}
}

// ExportFormatType enumerates the values for export format type.
type ExportFormatType string

const (
	// Coco ...
	Coco ExportFormatType = "Coco"
	// CSV ...
	CSV ExportFormatType = "CSV"
	// Dataset ...
	Dataset ExportFormatType = "Dataset"
)

// PossibleExportFormatTypeValues returns an array of possible values for the ExportFormatType const type.
func PossibleExportFormatTypeValues() []ExportFormatType {
	return []ExportFormatType{Coco, CSV, Dataset}
}

// Format enumerates the values for format.
type Format string

const (
	// FormatCoco ...
	FormatCoco Format = "Coco"
	// FormatCSV ...
	FormatCSV Format = "CSV"
	// FormatDataset ...
	FormatDataset Format = "Dataset"
	// FormatExportSummary ...
	FormatExportSummary Format = "ExportSummary"
)

// PossibleFormatValues returns an array of possible values for the Format const type.
func PossibleFormatValues() []Format {
	return []Format{FormatCoco, FormatCSV, FormatDataset, FormatExportSummary}
}

// Goal enumerates the values for goal.
type Goal string

const (
	// Maximize ...
	Maximize Goal = "Maximize"
	// Minimize ...
	Minimize Goal = "Minimize"
)

// PossibleGoalValues returns an array of possible values for the Goal const type.
func PossibleGoalValues() []Goal {
	return []Goal{Maximize, Minimize}
}

// IdentityConfigurationType enumerates the values for identity configuration type.
type IdentityConfigurationType string

const (
	// IdentityConfigurationTypeAMLToken ...
	IdentityConfigurationTypeAMLToken IdentityConfigurationType = "AMLToken"
	// IdentityConfigurationTypeManaged ...
	IdentityConfigurationTypeManaged IdentityConfigurationType = "Managed"
)

// PossibleIdentityConfigurationTypeValues returns an array of possible values for the IdentityConfigurationType const type.
func PossibleIdentityConfigurationTypeValues() []IdentityConfigurationType {
	return []IdentityConfigurationType{IdentityConfigurationTypeAMLToken, IdentityConfigurationTypeManaged}
}

// IdentityType enumerates the values for identity type.
type IdentityType string

const (
	// IdentityTypeAMLToken ...
	IdentityTypeAMLToken IdentityType = "AMLToken"
	// IdentityTypeIdentityConfiguration ...
	IdentityTypeIdentityConfiguration IdentityType = "IdentityConfiguration"
	// IdentityTypeManaged ...
	IdentityTypeManaged IdentityType = "Managed"
)

// PossibleIdentityTypeValues returns an array of possible values for the IdentityType const type.
func PossibleIdentityTypeValues() []IdentityType {
	return []IdentityType{IdentityTypeAMLToken, IdentityTypeIdentityConfiguration, IdentityTypeManaged}
}

// ImageAnnotationType enumerates the values for image annotation type.
type ImageAnnotationType string

const (
	// BoundingBox ...
	BoundingBox ImageAnnotationType = "BoundingBox"
	// Classification ...
	Classification ImageAnnotationType = "Classification"
	// InstanceSegmentation ...
	InstanceSegmentation ImageAnnotationType = "InstanceSegmentation"
)

// PossibleImageAnnotationTypeValues returns an array of possible values for the ImageAnnotationType const type.
func PossibleImageAnnotationTypeValues() []ImageAnnotationType {
	return []ImageAnnotationType{BoundingBox, Classification, InstanceSegmentation}
}

// JobProvisioningState enumerates the values for job provisioning state.
type JobProvisioningState string

const (
	// Canceled ...
	Canceled JobProvisioningState = "Canceled"
	// Failed ...
	Failed JobProvisioningState = "Failed"
	// InProgress ...
	InProgress JobProvisioningState = "InProgress"
	// Succeeded ...
	Succeeded JobProvisioningState = "Succeeded"
)

// PossibleJobProvisioningStateValues returns an array of possible values for the JobProvisioningState const type.
func PossibleJobProvisioningStateValues() []JobProvisioningState {
	return []JobProvisioningState{Canceled, Failed, InProgress, Succeeded}
}

// JobStatus enumerates the values for job status.
type JobStatus string

const (
	// JobStatusCanceled ...
	JobStatusCanceled JobStatus = "Canceled"
	// JobStatusCancelRequested ...
	JobStatusCancelRequested JobStatus = "CancelRequested"
	// JobStatusCompleted ...
	JobStatusCompleted JobStatus = "Completed"
	// JobStatusFailed ...
	JobStatusFailed JobStatus = "Failed"
	// JobStatusFinalizing ...
	JobStatusFinalizing JobStatus = "Finalizing"
	// JobStatusNotResponding ...
	JobStatusNotResponding JobStatus = "NotResponding"
	// JobStatusNotStarted ...
	JobStatusNotStarted JobStatus = "NotStarted"
	// JobStatusPaused ...
	JobStatusPaused JobStatus = "Paused"
	// JobStatusPreparing ...
	JobStatusPreparing JobStatus = "Preparing"
	// JobStatusProvisioning ...
	JobStatusProvisioning JobStatus = "Provisioning"
	// JobStatusQueued ...
	JobStatusQueued JobStatus = "Queued"
	// JobStatusRunning ...
	JobStatusRunning JobStatus = "Running"
	// JobStatusStarting ...
	JobStatusStarting JobStatus = "Starting"
	// JobStatusUnknown ...
	JobStatusUnknown JobStatus = "Unknown"
)

// PossibleJobStatusValues returns an array of possible values for the JobStatus const type.
func PossibleJobStatusValues() []JobStatus {
	return []JobStatus{JobStatusCanceled, JobStatusCancelRequested, JobStatusCompleted, JobStatusFailed, JobStatusFinalizing, JobStatusNotResponding, JobStatusNotStarted, JobStatusPaused, JobStatusPreparing, JobStatusProvisioning, JobStatusQueued, JobStatusRunning, JobStatusStarting, JobStatusUnknown}
}

// JobType enumerates the values for job type.
type JobType string

const (
	// Command ...
	Command JobType = "Command"
	// Labeling ...
	Labeling JobType = "Labeling"
	// Sweep ...
	Sweep JobType = "Sweep"
)

// PossibleJobTypeValues returns an array of possible values for the JobType const type.
func PossibleJobTypeValues() []JobType {
	return []JobType{Command, Labeling, Sweep}
}

// JobTypeBasicJobBase enumerates the values for job type basic job base.
type JobTypeBasicJobBase string

const (
	// JobTypeCommand ...
	JobTypeCommand JobTypeBasicJobBase = "Command"
	// JobTypeJobBase ...
	JobTypeJobBase JobTypeBasicJobBase = "JobBase"
	// JobTypeSweep ...
	JobTypeSweep JobTypeBasicJobBase = "Sweep"
)

// PossibleJobTypeBasicJobBaseValues returns an array of possible values for the JobTypeBasicJobBase const type.
func PossibleJobTypeBasicJobBaseValues() []JobTypeBasicJobBase {
	return []JobTypeBasicJobBase{JobTypeCommand, JobTypeJobBase, JobTypeSweep}
}

// KeyType enumerates the values for key type.
type KeyType string

const (
	// Primary ...
	Primary KeyType = "Primary"
	// Secondary ...
	Secondary KeyType = "Secondary"
)

// PossibleKeyTypeValues returns an array of possible values for the KeyType const type.
func PossibleKeyTypeValues() []KeyType {
	return []KeyType{Primary, Secondary}
}

// LoadBalancerType enumerates the values for load balancer type.
type LoadBalancerType string

const (
	// InternalLoadBalancer ...
	InternalLoadBalancer LoadBalancerType = "InternalLoadBalancer"
	// PublicIP ...
	PublicIP LoadBalancerType = "PublicIp"
)

// PossibleLoadBalancerTypeValues returns an array of possible values for the LoadBalancerType const type.
func PossibleLoadBalancerTypeValues() []LoadBalancerType {
	return []LoadBalancerType{InternalLoadBalancer, PublicIP}
}

// MediaType enumerates the values for media type.
type MediaType string

const (
	// MediaTypeImage ...
	MediaTypeImage MediaType = "Image"
	// MediaTypeText ...
	MediaTypeText MediaType = "Text"
)

// PossibleMediaTypeValues returns an array of possible values for the MediaType const type.
func PossibleMediaTypeValues() []MediaType {
	return []MediaType{MediaTypeImage, MediaTypeText}
}

// MediaTypeBasicLabelingJobMediaProperties enumerates the values for media type basic labeling job media
// properties.
type MediaTypeBasicLabelingJobMediaProperties string

const (
	// MediaTypeImage1 ...
	MediaTypeImage1 MediaTypeBasicLabelingJobMediaProperties = "Image"
	// MediaTypeLabelingJobMediaProperties ...
	MediaTypeLabelingJobMediaProperties MediaTypeBasicLabelingJobMediaProperties = "LabelingJobMediaProperties"
	// MediaTypeText1 ...
	MediaTypeText1 MediaTypeBasicLabelingJobMediaProperties = "Text"
)

// PossibleMediaTypeBasicLabelingJobMediaPropertiesValues returns an array of possible values for the MediaTypeBasicLabelingJobMediaProperties const type.
func PossibleMediaTypeBasicLabelingJobMediaPropertiesValues() []MediaTypeBasicLabelingJobMediaProperties {
	return []MediaTypeBasicLabelingJobMediaProperties{MediaTypeImage1, MediaTypeLabelingJobMediaProperties, MediaTypeText1}
}

// NodeState enumerates the values for node state.
type NodeState string

const (
	// NodeStateIdle ...
	NodeStateIdle NodeState = "idle"
	// NodeStateLeaving ...
	NodeStateLeaving NodeState = "leaving"
	// NodeStatePreempted ...
	NodeStatePreempted NodeState = "preempted"
	// NodeStatePreparing ...
	NodeStatePreparing NodeState = "preparing"
	// NodeStateRunning ...
	NodeStateRunning NodeState = "running"
	// NodeStateUnusable ...
	NodeStateUnusable NodeState = "unusable"
)

// PossibleNodeStateValues returns an array of possible values for the NodeState const type.
func PossibleNodeStateValues() []NodeState {
	return []NodeState{NodeStateIdle, NodeStateLeaving, NodeStatePreempted, NodeStatePreparing, NodeStateRunning, NodeStateUnusable}
}

// OperatingSystemType enumerates the values for operating system type.
type OperatingSystemType string

const (
	// Linux ...
	Linux OperatingSystemType = "Linux"
	// Windows ...
	Windows OperatingSystemType = "Windows"
)

// PossibleOperatingSystemTypeValues returns an array of possible values for the OperatingSystemType const type.
func PossibleOperatingSystemTypeValues() []OperatingSystemType {
	return []OperatingSystemType{Linux, Windows}
}

// OperationName enumerates the values for operation name.
type OperationName string

const (
	// OperationNameCreate ...
	OperationNameCreate OperationName = "Create"
	// OperationNameDelete ...
	OperationNameDelete OperationName = "Delete"
	// OperationNameReimage ...
	OperationNameReimage OperationName = "Reimage"
	// OperationNameRestart ...
	OperationNameRestart OperationName = "Restart"
	// OperationNameStart ...
	OperationNameStart OperationName = "Start"
	// OperationNameStop ...
	OperationNameStop OperationName = "Stop"
)

// PossibleOperationNameValues returns an array of possible values for the OperationName const type.
func PossibleOperationNameValues() []OperationName {
	return []OperationName{OperationNameCreate, OperationNameDelete, OperationNameReimage, OperationNameRestart, OperationNameStart, OperationNameStop}
}

// OperationStatus enumerates the values for operation status.
type OperationStatus string

const (
	// OperationStatusCreateFailed ...
	OperationStatusCreateFailed OperationStatus = "CreateFailed"
	// OperationStatusDeleteFailed ...
	OperationStatusDeleteFailed OperationStatus = "DeleteFailed"
	// OperationStatusInProgress ...
	OperationStatusInProgress OperationStatus = "InProgress"
	// OperationStatusReimageFailed ...
	OperationStatusReimageFailed OperationStatus = "ReimageFailed"
	// OperationStatusRestartFailed ...
	OperationStatusRestartFailed OperationStatus = "RestartFailed"
	// OperationStatusStartFailed ...
	OperationStatusStartFailed OperationStatus = "StartFailed"
	// OperationStatusStopFailed ...
	OperationStatusStopFailed OperationStatus = "StopFailed"
	// OperationStatusSucceeded ...
	OperationStatusSucceeded OperationStatus = "Succeeded"
)

// PossibleOperationStatusValues returns an array of possible values for the OperationStatus const type.
func PossibleOperationStatusValues() []OperationStatus {
	return []OperationStatus{OperationStatusCreateFailed, OperationStatusDeleteFailed, OperationStatusInProgress, OperationStatusReimageFailed, OperationStatusRestartFailed, OperationStatusStartFailed, OperationStatusStopFailed, OperationStatusSucceeded}
}

// OrderString enumerates the values for order string.
type OrderString string

const (
	// CreatedAtAsc ...
	CreatedAtAsc OrderString = "CreatedAtAsc"
	// CreatedAtDesc ...
	CreatedAtDesc OrderString = "CreatedAtDesc"
	// UpdatedAtAsc ...
	UpdatedAtAsc OrderString = "UpdatedAtAsc"
	// UpdatedAtDesc ...
	UpdatedAtDesc OrderString = "UpdatedAtDesc"
)

// PossibleOrderStringValues returns an array of possible values for the OrderString const type.
func PossibleOrderStringValues() []OrderString {
	return []OrderString{CreatedAtAsc, CreatedAtDesc, UpdatedAtAsc, UpdatedAtDesc}
}

// OriginType enumerates the values for origin type.
type OriginType string

const (
	// Synapse ...
	Synapse OriginType = "Synapse"
)

// PossibleOriginTypeValues returns an array of possible values for the OriginType const type.
func PossibleOriginTypeValues() []OriginType {
	return []OriginType{Synapse}
}

// OsType enumerates the values for os type.
type OsType string

const (
	// OsTypeLinux ...
	OsTypeLinux OsType = "Linux"
	// OsTypeWindows ...
	OsTypeWindows OsType = "Windows"
)

// PossibleOsTypeValues returns an array of possible values for the OsType const type.
func PossibleOsTypeValues() []OsType {
	return []OsType{OsTypeLinux, OsTypeWindows}
}

// PolicyType enumerates the values for policy type.
type PolicyType string

const (
	// PolicyTypeBandit ...
	PolicyTypeBandit PolicyType = "Bandit"
	// PolicyTypeEarlyTerminationPolicy ...
	PolicyTypeEarlyTerminationPolicy PolicyType = "EarlyTerminationPolicy"
	// PolicyTypeMedianStopping ...
	PolicyTypeMedianStopping PolicyType = "MedianStopping"
	// PolicyTypeTruncationSelection ...
	PolicyTypeTruncationSelection PolicyType = "TruncationSelection"
)

// PossiblePolicyTypeValues returns an array of possible values for the PolicyType const type.
func PossiblePolicyTypeValues() []PolicyType {
	return []PolicyType{PolicyTypeBandit, PolicyTypeEarlyTerminationPolicy, PolicyTypeMedianStopping, PolicyTypeTruncationSelection}
}

// PrivateEndpointConnectionProvisioningState enumerates the values for private endpoint connection
// provisioning state.
type PrivateEndpointConnectionProvisioningState string

const (
	// PrivateEndpointConnectionProvisioningStateCreating ...
	PrivateEndpointConnectionProvisioningStateCreating PrivateEndpointConnectionProvisioningState = "Creating"
	// PrivateEndpointConnectionProvisioningStateDeleting ...
	PrivateEndpointConnectionProvisioningStateDeleting PrivateEndpointConnectionProvisioningState = "Deleting"
	// PrivateEndpointConnectionProvisioningStateFailed ...
	PrivateEndpointConnectionProvisioningStateFailed PrivateEndpointConnectionProvisioningState = "Failed"
	// PrivateEndpointConnectionProvisioningStateSucceeded ...
	PrivateEndpointConnectionProvisioningStateSucceeded PrivateEndpointConnectionProvisioningState = "Succeeded"
)

// PossiblePrivateEndpointConnectionProvisioningStateValues returns an array of possible values for the PrivateEndpointConnectionProvisioningState const type.
func PossiblePrivateEndpointConnectionProvisioningStateValues() []PrivateEndpointConnectionProvisioningState {
	return []PrivateEndpointConnectionProvisioningState{PrivateEndpointConnectionProvisioningStateCreating, PrivateEndpointConnectionProvisioningStateDeleting, PrivateEndpointConnectionProvisioningStateFailed, PrivateEndpointConnectionProvisioningStateSucceeded}
}

// PrivateEndpointServiceConnectionStatus enumerates the values for private endpoint service connection status.
type PrivateEndpointServiceConnectionStatus string

const (
	// Approved ...
	Approved PrivateEndpointServiceConnectionStatus = "Approved"
	// Disconnected ...
	Disconnected PrivateEndpointServiceConnectionStatus = "Disconnected"
	// Pending ...
	Pending PrivateEndpointServiceConnectionStatus = "Pending"
	// Rejected ...
	Rejected PrivateEndpointServiceConnectionStatus = "Rejected"
	// Timeout ...
	Timeout PrivateEndpointServiceConnectionStatus = "Timeout"
)

// PossiblePrivateEndpointServiceConnectionStatusValues returns an array of possible values for the PrivateEndpointServiceConnectionStatus const type.
func PossiblePrivateEndpointServiceConnectionStatusValues() []PrivateEndpointServiceConnectionStatus {
	return []PrivateEndpointServiceConnectionStatus{Approved, Disconnected, Pending, Rejected, Timeout}
}

// ProvisioningState enumerates the values for provisioning state.
type ProvisioningState string

const (
	// ProvisioningStateCanceled ...
	ProvisioningStateCanceled ProvisioningState = "Canceled"
	// ProvisioningStateCreating ...
	ProvisioningStateCreating ProvisioningState = "Creating"
	// ProvisioningStateDeleting ...
	ProvisioningStateDeleting ProvisioningState = "Deleting"
	// ProvisioningStateFailed ...
	ProvisioningStateFailed ProvisioningState = "Failed"
	// ProvisioningStateSucceeded ...
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
	// ProvisioningStateUnknown ...
	ProvisioningStateUnknown ProvisioningState = "Unknown"
	// ProvisioningStateUpdating ...
	ProvisioningStateUpdating ProvisioningState = "Updating"
)

// PossibleProvisioningStateValues returns an array of possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{ProvisioningStateCanceled, ProvisioningStateCreating, ProvisioningStateDeleting, ProvisioningStateFailed, ProvisioningStateSucceeded, ProvisioningStateUnknown, ProvisioningStateUpdating}
}

// ProvisioningStatus enumerates the values for provisioning status.
type ProvisioningStatus string

const (
	// ProvisioningStatusCompleted ...
	ProvisioningStatusCompleted ProvisioningStatus = "Completed"
	// ProvisioningStatusFailed ...
	ProvisioningStatusFailed ProvisioningStatus = "Failed"
	// ProvisioningStatusProvisioning ...
	ProvisioningStatusProvisioning ProvisioningStatus = "Provisioning"
)

// PossibleProvisioningStatusValues returns an array of possible values for the ProvisioningStatus const type.
func PossibleProvisioningStatusValues() []ProvisioningStatus {
	return []ProvisioningStatus{ProvisioningStatusCompleted, ProvisioningStatusFailed, ProvisioningStatusProvisioning}
}

// QuotaUnit enumerates the values for quota unit.
type QuotaUnit string

const (
	// Count ...
	Count QuotaUnit = "Count"
)

// PossibleQuotaUnitValues returns an array of possible values for the QuotaUnit const type.
func PossibleQuotaUnitValues() []QuotaUnit {
	return []QuotaUnit{Count}
}

// ReasonCode enumerates the values for reason code.
type ReasonCode string

const (
	// NotAvailableForRegion ...
	NotAvailableForRegion ReasonCode = "NotAvailableForRegion"
	// NotAvailableForSubscription ...
	NotAvailableForSubscription ReasonCode = "NotAvailableForSubscription"
	// NotSpecified ...
	NotSpecified ReasonCode = "NotSpecified"
)

// PossibleReasonCodeValues returns an array of possible values for the ReasonCode const type.
func PossibleReasonCodeValues() []ReasonCode {
	return []ReasonCode{NotAvailableForRegion, NotAvailableForSubscription, NotSpecified}
}

// RecurrenceFrequency enumerates the values for recurrence frequency.
type RecurrenceFrequency string

const (
	// RecurrenceFrequencyDay ...
	RecurrenceFrequencyDay RecurrenceFrequency = "Day"
	// RecurrenceFrequencyHour ...
	RecurrenceFrequencyHour RecurrenceFrequency = "Hour"
	// RecurrenceFrequencyMinute ...
	RecurrenceFrequencyMinute RecurrenceFrequency = "Minute"
	// RecurrenceFrequencyMonth ...
	RecurrenceFrequencyMonth RecurrenceFrequency = "Month"
	// RecurrenceFrequencyNotSpecified ...
	RecurrenceFrequencyNotSpecified RecurrenceFrequency = "NotSpecified"
	// RecurrenceFrequencySecond ...
	RecurrenceFrequencySecond RecurrenceFrequency = "Second"
	// RecurrenceFrequencyWeek ...
	RecurrenceFrequencyWeek RecurrenceFrequency = "Week"
	// RecurrenceFrequencyYear ...
	RecurrenceFrequencyYear RecurrenceFrequency = "Year"
)

// PossibleRecurrenceFrequencyValues returns an array of possible values for the RecurrenceFrequency const type.
func PossibleRecurrenceFrequencyValues() []RecurrenceFrequency {
	return []RecurrenceFrequency{RecurrenceFrequencyDay, RecurrenceFrequencyHour, RecurrenceFrequencyMinute, RecurrenceFrequencyMonth, RecurrenceFrequencyNotSpecified, RecurrenceFrequencySecond, RecurrenceFrequencyWeek, RecurrenceFrequencyYear}
}

// ReferenceType enumerates the values for reference type.
type ReferenceType string

const (
	// DataPath ...
	DataPath ReferenceType = "DataPath"
	// ID ...
	ID ReferenceType = "Id"
	// OutputPath ...
	OutputPath ReferenceType = "OutputPath"
)

// PossibleReferenceTypeValues returns an array of possible values for the ReferenceType const type.
func PossibleReferenceTypeValues() []ReferenceType {
	return []ReferenceType{DataPath, ID, OutputPath}
}

// ReferenceTypeBasicAssetReferenceBase enumerates the values for reference type basic asset reference base.
type ReferenceTypeBasicAssetReferenceBase string

const (
	// ReferenceTypeAssetReferenceBase ...
	ReferenceTypeAssetReferenceBase ReferenceTypeBasicAssetReferenceBase = "AssetReferenceBase"
	// ReferenceTypeDataPath ...
	ReferenceTypeDataPath ReferenceTypeBasicAssetReferenceBase = "DataPath"
	// ReferenceTypeID ...
	ReferenceTypeID ReferenceTypeBasicAssetReferenceBase = "Id"
	// ReferenceTypeOutputPath ...
	ReferenceTypeOutputPath ReferenceTypeBasicAssetReferenceBase = "OutputPath"
)

// PossibleReferenceTypeBasicAssetReferenceBaseValues returns an array of possible values for the ReferenceTypeBasicAssetReferenceBase const type.
func PossibleReferenceTypeBasicAssetReferenceBaseValues() []ReferenceTypeBasicAssetReferenceBase {
	return []ReferenceTypeBasicAssetReferenceBase{ReferenceTypeAssetReferenceBase, ReferenceTypeDataPath, ReferenceTypeID, ReferenceTypeOutputPath}
}

// RemoteLoginPortPublicAccess enumerates the values for remote login port public access.
type RemoteLoginPortPublicAccess string

const (
	// RemoteLoginPortPublicAccessDisabled ...
	RemoteLoginPortPublicAccessDisabled RemoteLoginPortPublicAccess = "Disabled"
	// RemoteLoginPortPublicAccessEnabled ...
	RemoteLoginPortPublicAccessEnabled RemoteLoginPortPublicAccess = "Enabled"
	// RemoteLoginPortPublicAccessNotSpecified ...
	RemoteLoginPortPublicAccessNotSpecified RemoteLoginPortPublicAccess = "NotSpecified"
)

// PossibleRemoteLoginPortPublicAccessValues returns an array of possible values for the RemoteLoginPortPublicAccess const type.
func PossibleRemoteLoginPortPublicAccessValues() []RemoteLoginPortPublicAccess {
	return []RemoteLoginPortPublicAccess{RemoteLoginPortPublicAccessDisabled, RemoteLoginPortPublicAccessEnabled, RemoteLoginPortPublicAccessNotSpecified}
}

// ResourceIdentityAssignment enumerates the values for resource identity assignment.
type ResourceIdentityAssignment string

const (
	// ResourceIdentityAssignmentNone ...
	ResourceIdentityAssignmentNone ResourceIdentityAssignment = "None"
	// ResourceIdentityAssignmentSystemAssigned ...
	ResourceIdentityAssignmentSystemAssigned ResourceIdentityAssignment = "SystemAssigned"
	// ResourceIdentityAssignmentSystemAssignedUserAssigned ...
	ResourceIdentityAssignmentSystemAssignedUserAssigned ResourceIdentityAssignment = "SystemAssigned,UserAssigned"
	// ResourceIdentityAssignmentUserAssigned ...
	ResourceIdentityAssignmentUserAssigned ResourceIdentityAssignment = "UserAssigned"
)

// PossibleResourceIdentityAssignmentValues returns an array of possible values for the ResourceIdentityAssignment const type.
func PossibleResourceIdentityAssignmentValues() []ResourceIdentityAssignment {
	return []ResourceIdentityAssignment{ResourceIdentityAssignmentNone, ResourceIdentityAssignmentSystemAssigned, ResourceIdentityAssignmentSystemAssignedUserAssigned, ResourceIdentityAssignmentUserAssigned}
}

// ResourceIdentityType enumerates the values for resource identity type.
type ResourceIdentityType string

const (
	// ResourceIdentityTypeNone ...
	ResourceIdentityTypeNone ResourceIdentityType = "None"
	// ResourceIdentityTypeSystemAssigned ...
	ResourceIdentityTypeSystemAssigned ResourceIdentityType = "SystemAssigned"
	// ResourceIdentityTypeSystemAssignedUserAssigned ...
	ResourceIdentityTypeSystemAssignedUserAssigned ResourceIdentityType = "SystemAssigned,UserAssigned"
	// ResourceIdentityTypeUserAssigned ...
	ResourceIdentityTypeUserAssigned ResourceIdentityType = "UserAssigned"
)

// PossibleResourceIdentityTypeValues returns an array of possible values for the ResourceIdentityType const type.
func PossibleResourceIdentityTypeValues() []ResourceIdentityType {
	return []ResourceIdentityType{ResourceIdentityTypeNone, ResourceIdentityTypeSystemAssigned, ResourceIdentityTypeSystemAssignedUserAssigned, ResourceIdentityTypeUserAssigned}
}

// SamplingAlgorithm enumerates the values for sampling algorithm.
type SamplingAlgorithm string

const (
	// Bayesian ...
	Bayesian SamplingAlgorithm = "Bayesian"
	// Grid ...
	Grid SamplingAlgorithm = "Grid"
	// Random ...
	Random SamplingAlgorithm = "Random"
)

// PossibleSamplingAlgorithmValues returns an array of possible values for the SamplingAlgorithm const type.
func PossibleSamplingAlgorithmValues() []SamplingAlgorithm {
	return []SamplingAlgorithm{Bayesian, Grid, Random}
}

// ScaleType enumerates the values for scale type.
type ScaleType string

const (
	// Auto ...
	Auto ScaleType = "Auto"
	// Manual ...
	Manual ScaleType = "Manual"
)

// PossibleScaleTypeValues returns an array of possible values for the ScaleType const type.
func PossibleScaleTypeValues() []ScaleType {
	return []ScaleType{Auto, Manual}
}

// ScaleTypeBasicOnlineScaleSettings enumerates the values for scale type basic online scale settings.
type ScaleTypeBasicOnlineScaleSettings string

const (
	// ScaleTypeAuto ...
	ScaleTypeAuto ScaleTypeBasicOnlineScaleSettings = "Auto"
	// ScaleTypeManual ...
	ScaleTypeManual ScaleTypeBasicOnlineScaleSettings = "Manual"
	// ScaleTypeOnlineScaleSettings ...
	ScaleTypeOnlineScaleSettings ScaleTypeBasicOnlineScaleSettings = "OnlineScaleSettings"
)

// PossibleScaleTypeBasicOnlineScaleSettingsValues returns an array of possible values for the ScaleTypeBasicOnlineScaleSettings const type.
func PossibleScaleTypeBasicOnlineScaleSettingsValues() []ScaleTypeBasicOnlineScaleSettings {
	return []ScaleTypeBasicOnlineScaleSettings{ScaleTypeAuto, ScaleTypeManual, ScaleTypeOnlineScaleSettings}
}

// ScheduleStatus enumerates the values for schedule status.
type ScheduleStatus string

const (
	// ScheduleStatusDisabled ...
	ScheduleStatusDisabled ScheduleStatus = "Disabled"
	// ScheduleStatusEnabled ...
	ScheduleStatusEnabled ScheduleStatus = "Enabled"
)

// PossibleScheduleStatusValues returns an array of possible values for the ScheduleStatus const type.
func PossibleScheduleStatusValues() []ScheduleStatus {
	return []ScheduleStatus{ScheduleStatusDisabled, ScheduleStatusEnabled}
}

// ScheduleType enumerates the values for schedule type.
type ScheduleType string

const (
	// ComputeStartStop ...
	ComputeStartStop ScheduleType = "ComputeStartStop"
)

// PossibleScheduleTypeValues returns an array of possible values for the ScheduleType const type.
func PossibleScheduleTypeValues() []ScheduleType {
	return []ScheduleType{ComputeStartStop}
}

// SecretsType enumerates the values for secrets type.
type SecretsType string

const (
	// SecretsTypeAccountKey ...
	SecretsTypeAccountKey SecretsType = "AccountKey"
	// SecretsTypeCertificate ...
	SecretsTypeCertificate SecretsType = "Certificate"
	// SecretsTypeNone ...
	SecretsTypeNone SecretsType = "None"
	// SecretsTypeSas ...
	SecretsTypeSas SecretsType = "Sas"
	// SecretsTypeServicePrincipal ...
	SecretsTypeServicePrincipal SecretsType = "ServicePrincipal"
	// SecretsTypeSQLAdmin ...
	SecretsTypeSQLAdmin SecretsType = "SqlAdmin"
)

// PossibleSecretsTypeValues returns an array of possible values for the SecretsType const type.
func PossibleSecretsTypeValues() []SecretsType {
	return []SecretsType{SecretsTypeAccountKey, SecretsTypeCertificate, SecretsTypeNone, SecretsTypeSas, SecretsTypeServicePrincipal, SecretsTypeSQLAdmin}
}

// SecretsTypeBasicDatastoreSecrets enumerates the values for secrets type basic datastore secrets.
type SecretsTypeBasicDatastoreSecrets string

const (
	// SecretsTypeAccountKey1 ...
	SecretsTypeAccountKey1 SecretsTypeBasicDatastoreSecrets = "AccountKey"
	// SecretsTypeCertificate1 ...
	SecretsTypeCertificate1 SecretsTypeBasicDatastoreSecrets = "Certificate"
	// SecretsTypeDatastoreSecrets ...
	SecretsTypeDatastoreSecrets SecretsTypeBasicDatastoreSecrets = "DatastoreSecrets"
	// SecretsTypeNone1 ...
	SecretsTypeNone1 SecretsTypeBasicDatastoreSecrets = "None"
	// SecretsTypeSas1 ...
	SecretsTypeSas1 SecretsTypeBasicDatastoreSecrets = "Sas"
	// SecretsTypeServicePrincipal1 ...
	SecretsTypeServicePrincipal1 SecretsTypeBasicDatastoreSecrets = "ServicePrincipal"
	// SecretsTypeSQLAdmin1 ...
	SecretsTypeSQLAdmin1 SecretsTypeBasicDatastoreSecrets = "SqlAdmin"
)

// PossibleSecretsTypeBasicDatastoreSecretsValues returns an array of possible values for the SecretsTypeBasicDatastoreSecrets const type.
func PossibleSecretsTypeBasicDatastoreSecretsValues() []SecretsTypeBasicDatastoreSecrets {
	return []SecretsTypeBasicDatastoreSecrets{SecretsTypeAccountKey1, SecretsTypeCertificate1, SecretsTypeDatastoreSecrets, SecretsTypeNone1, SecretsTypeSas1, SecretsTypeServicePrincipal1, SecretsTypeSQLAdmin1}
}

// SSHPublicAccess enumerates the values for ssh public access.
type SSHPublicAccess string

const (
	// SSHPublicAccessDisabled ...
	SSHPublicAccessDisabled SSHPublicAccess = "Disabled"
	// SSHPublicAccessEnabled ...
	SSHPublicAccessEnabled SSHPublicAccess = "Enabled"
)

// PossibleSSHPublicAccessValues returns an array of possible values for the SSHPublicAccess const type.
func PossibleSSHPublicAccessValues() []SSHPublicAccess {
	return []SSHPublicAccess{SSHPublicAccessDisabled, SSHPublicAccessEnabled}
}

// Status enumerates the values for status.
type Status string

const (
	// Failure ...
	Failure Status = "Failure"
	// InvalidQuotaBelowClusterMinimum ...
	InvalidQuotaBelowClusterMinimum Status = "InvalidQuotaBelowClusterMinimum"
	// InvalidQuotaExceedsSubscriptionLimit ...
	InvalidQuotaExceedsSubscriptionLimit Status = "InvalidQuotaExceedsSubscriptionLimit"
	// InvalidVMFamilyName ...
	InvalidVMFamilyName Status = "InvalidVMFamilyName"
	// OperationNotEnabledForRegion ...
	OperationNotEnabledForRegion Status = "OperationNotEnabledForRegion"
	// OperationNotSupportedForSku ...
	OperationNotSupportedForSku Status = "OperationNotSupportedForSku"
	// Success ...
	Success Status = "Success"
	// Undefined ...
	Undefined Status = "Undefined"
)

// PossibleStatusValues returns an array of possible values for the Status const type.
func PossibleStatusValues() []Status {
	return []Status{Failure, InvalidQuotaBelowClusterMinimum, InvalidQuotaExceedsSubscriptionLimit, InvalidVMFamilyName, OperationNotEnabledForRegion, OperationNotSupportedForSku, Success, Undefined}
}

// Status1 enumerates the values for status 1.
type Status1 string

const (
	// Status1Auto ...
	Status1Auto Status1 = "Auto"
	// Status1Disabled ...
	Status1Disabled Status1 = "Disabled"
	// Status1Enabled ...
	Status1Enabled Status1 = "Enabled"
)

// PossibleStatus1Values returns an array of possible values for the Status1 const type.
func PossibleStatus1Values() []Status1 {
	return []Status1{Status1Auto, Status1Disabled, Status1Enabled}
}

// StatusMessageLevel enumerates the values for status message level.
type StatusMessageLevel string

const (
	// StatusMessageLevelError ...
	StatusMessageLevelError StatusMessageLevel = "Error"
	// StatusMessageLevelInformation ...
	StatusMessageLevelInformation StatusMessageLevel = "Information"
	// StatusMessageLevelWarning ...
	StatusMessageLevelWarning StatusMessageLevel = "Warning"
)

// PossibleStatusMessageLevelValues returns an array of possible values for the StatusMessageLevel const type.
func PossibleStatusMessageLevelValues() []StatusMessageLevel {
	return []StatusMessageLevel{StatusMessageLevelError, StatusMessageLevelInformation, StatusMessageLevelWarning}
}

// TextAnnotationType enumerates the values for text annotation type.
type TextAnnotationType string

const (
	// TextAnnotationTypeClassification ...
	TextAnnotationTypeClassification TextAnnotationType = "Classification"
)

// PossibleTextAnnotationTypeValues returns an array of possible values for the TextAnnotationType const type.
func PossibleTextAnnotationTypeValues() []TextAnnotationType {
	return []TextAnnotationType{TextAnnotationTypeClassification}
}

// TriggerType enumerates the values for trigger type.
type TriggerType string

const (
	// TriggerTypeCron ...
	TriggerTypeCron TriggerType = "Cron"
	// TriggerTypeRecurrence ...
	TriggerTypeRecurrence TriggerType = "Recurrence"
)

// PossibleTriggerTypeValues returns an array of possible values for the TriggerType const type.
func PossibleTriggerTypeValues() []TriggerType {
	return []TriggerType{TriggerTypeCron, TriggerTypeRecurrence}
}

// UnderlyingResourceAction enumerates the values for underlying resource action.
type UnderlyingResourceAction string

const (
	// Delete ...
	Delete UnderlyingResourceAction = "Delete"
	// Detach ...
	Detach UnderlyingResourceAction = "Detach"
)

// PossibleUnderlyingResourceActionValues returns an array of possible values for the UnderlyingResourceAction const type.
func PossibleUnderlyingResourceActionValues() []UnderlyingResourceAction {
	return []UnderlyingResourceAction{Delete, Detach}
}

// UsageUnit enumerates the values for usage unit.
type UsageUnit string

const (
	// UsageUnitCount ...
	UsageUnitCount UsageUnit = "Count"
)

// PossibleUsageUnitValues returns an array of possible values for the UsageUnit const type.
func PossibleUsageUnitValues() []UsageUnit {
	return []UsageUnit{UsageUnitCount}
}

// ValueFormat enumerates the values for value format.
type ValueFormat string

const (
	// JSON ...
	JSON ValueFormat = "JSON"
)

// PossibleValueFormatValues returns an array of possible values for the ValueFormat const type.
func PossibleValueFormatValues() []ValueFormat {
	return []ValueFormat{JSON}
}

// VMPriceOSType enumerates the values for vm price os type.
type VMPriceOSType string

const (
	// VMPriceOSTypeLinux ...
	VMPriceOSTypeLinux VMPriceOSType = "Linux"
	// VMPriceOSTypeWindows ...
	VMPriceOSTypeWindows VMPriceOSType = "Windows"
)

// PossibleVMPriceOSTypeValues returns an array of possible values for the VMPriceOSType const type.
func PossibleVMPriceOSTypeValues() []VMPriceOSType {
	return []VMPriceOSType{VMPriceOSTypeLinux, VMPriceOSTypeWindows}
}

// VMPriority enumerates the values for vm priority.
type VMPriority string

const (
	// Dedicated ...
	Dedicated VMPriority = "Dedicated"
	// LowPriority ...
	LowPriority VMPriority = "LowPriority"
)

// PossibleVMPriorityValues returns an array of possible values for the VMPriority const type.
func PossibleVMPriorityValues() []VMPriority {
	return []VMPriority{Dedicated, LowPriority}
}

// VMTier enumerates the values for vm tier.
type VMTier string

const (
	// VMTierLowPriority ...
	VMTierLowPriority VMTier = "LowPriority"
	// VMTierSpot ...
	VMTierSpot VMTier = "Spot"
	// VMTierStandard ...
	VMTierStandard VMTier = "Standard"
)

// PossibleVMTierValues returns an array of possible values for the VMTier const type.
func PossibleVMTierValues() []VMTier {
	return []VMTier{VMTierLowPriority, VMTierSpot, VMTierStandard}
}
