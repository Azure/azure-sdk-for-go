package machinelearningservices

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// AllocationState enumerates the values for allocation state.
type AllocationState string

const (
	// Resizing ...
	Resizing AllocationState = "Resizing"
	// Steady ...
	Steady AllocationState = "Steady"
)

// PossibleAllocationStateValues returns an array of possible values for the AllocationState const type.
func PossibleAllocationStateValues() []AllocationState {
	return []AllocationState{Resizing, Steady}
}

// ApplicationSharingPolicy enumerates the values for application sharing policy.
type ApplicationSharingPolicy string

const (
	// Personal ...
	Personal ApplicationSharingPolicy = "Personal"
	// Shared ...
	Shared ApplicationSharingPolicy = "Shared"
)

// PossibleApplicationSharingPolicyValues returns an array of possible values for the ApplicationSharingPolicy const type.
func PossibleApplicationSharingPolicyValues() []ApplicationSharingPolicy {
	return []ApplicationSharingPolicy{Personal, Shared}
}

// Autosave enumerates the values for autosave.
type Autosave string

const (
	// Local ...
	Local Autosave = "Local"
	// None ...
	None Autosave = "None"
	// Remote ...
	Remote Autosave = "Remote"
)

// PossibleAutosaveValues returns an array of possible values for the Autosave const type.
func PossibleAutosaveValues() []Autosave {
	return []Autosave{Local, None, Remote}
}

// BatchLoggingLevel enumerates the values for batch logging level.
type BatchLoggingLevel string

const (
	// Debug ...
	Debug BatchLoggingLevel = "Debug"
	// Info ...
	Info BatchLoggingLevel = "Info"
	// Warning ...
	Warning BatchLoggingLevel = "Warning"
)

// PossibleBatchLoggingLevelValues returns an array of possible values for the BatchLoggingLevel const type.
func PossibleBatchLoggingLevelValues() []BatchLoggingLevel {
	return []BatchLoggingLevel{Debug, Info, Warning}
}

// BatchOutputAction enumerates the values for batch output action.
type BatchOutputAction string

const (
	// AppendRow ...
	AppendRow BatchOutputAction = "AppendRow"
	// SummaryOnly ...
	SummaryOnly BatchOutputAction = "SummaryOnly"
)

// PossibleBatchOutputActionValues returns an array of possible values for the BatchOutputAction const type.
func PossibleBatchOutputActionValues() []BatchOutputAction {
	return []BatchOutputAction{AppendRow, SummaryOnly}
}

// Caching enumerates the values for caching.
type Caching string

const (
	// CachingNone ...
	CachingNone Caching = "None"
	// CachingReadOnly ...
	CachingReadOnly Caching = "ReadOnly"
	// CachingReadWrite ...
	CachingReadWrite Caching = "ReadWrite"
)

// PossibleCachingValues returns an array of possible values for the Caching const type.
func PossibleCachingValues() []Caching {
	return []Caching{CachingNone, CachingReadOnly, CachingReadWrite}
}

// ClassificationModels enumerates the values for classification models.
type ClassificationModels string

const (
	// BernoulliNaiveBayes Naive Bayes classifier for multivariate Bernoulli models.
	BernoulliNaiveBayes ClassificationModels = "BernoulliNaiveBayes"
	// DecisionTree Decision Trees are a non-parametric supervised learning method used for both classification
	// and regression tasks.
	// The goal is to create a model that predicts the value of a target variable by learning simple decision
	// rules inferred from the data features.
	DecisionTree ClassificationModels = "DecisionTree"
	// ExtremeRandomTrees Extreme Trees is an ensemble machine learning algorithm that combines the predictions
	// from many decision trees. It is related to the widely used random forest algorithm.
	ExtremeRandomTrees ClassificationModels = "ExtremeRandomTrees"
	// GradientBoosting The technique of transiting week learners into a strong learner is called Boosting. The
	// gradient boosting algorithm process works on this theory of execution.
	GradientBoosting ClassificationModels = "GradientBoosting"
	// KNN K-nearest neighbors (KNN) algorithm uses 'feature similarity' to predict the values of new
	// datapoints
	// which further means that the new data point will be assigned a value based on how closely it matches the
	// points in the training set.
	KNN ClassificationModels = "KNN"
	// LightGBM LightGBM is a gradient boosting framework that uses tree based learning algorithms.
	LightGBM ClassificationModels = "LightGBM"
	// LinearSVM A support vector machine (SVM) is a supervised machine learning model that uses classification
	// algorithms for two-group classification problems.
	// After giving an SVM model sets of labeled training data for each category, they're able to categorize
	// new text.
	// Linear SVM performs best when input data is linear, i.e., data can be easily classified by drawing the
	// straight line between classified values on a plotted graph.
	LinearSVM ClassificationModels = "LinearSVM"
	// LogisticRegression Logistic regression is a fundamental classification technique.
	// It belongs to the group of linear classifiers and is somewhat similar to polynomial and linear
	// regression.
	// Logistic regression is fast and relatively uncomplicated, and it's convenient for you to interpret the
	// results.
	// Although it's essentially a method for binary classification, it can also be applied to multiclass
	// problems.
	LogisticRegression ClassificationModels = "LogisticRegression"
	// MultinomialNaiveBayes The multinomial Naive Bayes classifier is suitable for classification with
	// discrete features (e.g., word counts for text classification).
	// The multinomial distribution normally requires integer feature counts. However, in practice, fractional
	// counts such as tf-idf may also work.
	MultinomialNaiveBayes ClassificationModels = "MultinomialNaiveBayes"
	// RandomForest Random forest is a supervised learning algorithm.
	// The "forest" it builds, is an ensemble of decision trees, usually trained with the “bagging” method.
	// The general idea of the bagging method is that a combination of learning models increases the overall
	// result.
	RandomForest ClassificationModels = "RandomForest"
	// SGD SGD: Stochastic gradient descent is an optimization algorithm often used in machine learning
	// applications
	// to find the model parameters that correspond to the best fit between predicted and actual outputs.
	SGD ClassificationModels = "SGD"
	// SVM A support vector machine (SVM) is a supervised machine learning model that uses classification
	// algorithms for two-group classification problems.
	// After giving an SVM model sets of labeled training data for each category, they're able to categorize
	// new text.
	SVM ClassificationModels = "SVM"
	// XGBoostClassifier XGBoost: Extreme Gradient Boosting Algorithm. This algorithm is used for structured
	// data where target column values can be divided into distinct class values.
	XGBoostClassifier ClassificationModels = "XGBoostClassifier"
)

// PossibleClassificationModelsValues returns an array of possible values for the ClassificationModels const type.
func PossibleClassificationModelsValues() []ClassificationModels {
	return []ClassificationModels{BernoulliNaiveBayes, DecisionTree, ExtremeRandomTrees, GradientBoosting, KNN, LightGBM, LinearSVM, LogisticRegression, MultinomialNaiveBayes, RandomForest, SGD, SVM, XGBoostClassifier}
}

// ClassificationMultilabelPrimaryMetrics enumerates the values for classification multilabel primary metrics.
type ClassificationMultilabelPrimaryMetrics string

const (
	// Accuracy Accuracy is the ratio of predictions that exactly match the true class labels.
	Accuracy ClassificationMultilabelPrimaryMetrics = "Accuracy"
	// AUCWeighted AUC is the Area under the curve.
	// This metric represents arithmetic mean of the score for each class,
	// weighted by the number of true instances in each class.
	AUCWeighted ClassificationMultilabelPrimaryMetrics = "AUCWeighted"
	// AveragePrecisionScoreWeighted The arithmetic mean of the average precision score for each class,
	// weighted by
	// the number of true instances in each class.
	AveragePrecisionScoreWeighted ClassificationMultilabelPrimaryMetrics = "AveragePrecisionScoreWeighted"
	// IOU Intersection Over Union. Intersection of predictions divided by union of predictions.
	IOU ClassificationMultilabelPrimaryMetrics = "IOU"
	// NormMacroRecall Normalized macro recall is recall macro-averaged and normalized, so that random
	// performance has a score of 0, and perfect performance has a score of 1.
	NormMacroRecall ClassificationMultilabelPrimaryMetrics = "NormMacroRecall"
	// PrecisionScoreWeighted The arithmetic mean of precision for each class, weighted by number of true
	// instances in each class.
	PrecisionScoreWeighted ClassificationMultilabelPrimaryMetrics = "PrecisionScoreWeighted"
)

// PossibleClassificationMultilabelPrimaryMetricsValues returns an array of possible values for the ClassificationMultilabelPrimaryMetrics const type.
func PossibleClassificationMultilabelPrimaryMetricsValues() []ClassificationMultilabelPrimaryMetrics {
	return []ClassificationMultilabelPrimaryMetrics{Accuracy, AUCWeighted, AveragePrecisionScoreWeighted, IOU, NormMacroRecall, PrecisionScoreWeighted}
}

// ClassificationPrimaryMetrics enumerates the values for classification primary metrics.
type ClassificationPrimaryMetrics string

const (
	// ClassificationPrimaryMetricsAccuracy Accuracy is the ratio of predictions that exactly match the true
	// class labels.
	ClassificationPrimaryMetricsAccuracy ClassificationPrimaryMetrics = "Accuracy"
	// ClassificationPrimaryMetricsAUCWeighted AUC is the Area under the curve.
	// This metric represents arithmetic mean of the score for each class,
	// weighted by the number of true instances in each class.
	ClassificationPrimaryMetricsAUCWeighted ClassificationPrimaryMetrics = "AUCWeighted"
	// ClassificationPrimaryMetricsAveragePrecisionScoreWeighted The arithmetic mean of the average precision
	// score for each class, weighted by
	// the number of true instances in each class.
	ClassificationPrimaryMetricsAveragePrecisionScoreWeighted ClassificationPrimaryMetrics = "AveragePrecisionScoreWeighted"
	// ClassificationPrimaryMetricsNormMacroRecall Normalized macro recall is recall macro-averaged and
	// normalized, so that random
	// performance has a score of 0, and perfect performance has a score of 1.
	ClassificationPrimaryMetricsNormMacroRecall ClassificationPrimaryMetrics = "NormMacroRecall"
	// ClassificationPrimaryMetricsPrecisionScoreWeighted The arithmetic mean of precision for each class,
	// weighted by number of true instances in each class.
	ClassificationPrimaryMetricsPrecisionScoreWeighted ClassificationPrimaryMetrics = "PrecisionScoreWeighted"
)

// PossibleClassificationPrimaryMetricsValues returns an array of possible values for the ClassificationPrimaryMetrics const type.
func PossibleClassificationPrimaryMetricsValues() []ClassificationPrimaryMetrics {
	return []ClassificationPrimaryMetrics{ClassificationPrimaryMetricsAccuracy, ClassificationPrimaryMetricsAUCWeighted, ClassificationPrimaryMetricsAveragePrecisionScoreWeighted, ClassificationPrimaryMetricsNormMacroRecall, ClassificationPrimaryMetricsPrecisionScoreWeighted}
}

// ClusterPurpose enumerates the values for cluster purpose.
type ClusterPurpose string

const (
	// DenseProd ...
	DenseProd ClusterPurpose = "DenseProd"
	// DevTest ...
	DevTest ClusterPurpose = "DevTest"
	// FastProd ...
	FastProd ClusterPurpose = "FastProd"
)

// PossibleClusterPurposeValues returns an array of possible values for the ClusterPurpose const type.
func PossibleClusterPurposeValues() []ClusterPurpose {
	return []ClusterPurpose{DenseProd, DevTest, FastProd}
}

// ComputeInstanceAuthorizationType enumerates the values for compute instance authorization type.
type ComputeInstanceAuthorizationType string

const (
	// ComputeInstanceAuthorizationTypePersonal ...
	ComputeInstanceAuthorizationTypePersonal ComputeInstanceAuthorizationType = "personal"
)

// PossibleComputeInstanceAuthorizationTypeValues returns an array of possible values for the ComputeInstanceAuthorizationType const type.
func PossibleComputeInstanceAuthorizationTypeValues() []ComputeInstanceAuthorizationType {
	return []ComputeInstanceAuthorizationType{ComputeInstanceAuthorizationTypePersonal}
}

// ComputeInstanceState enumerates the values for compute instance state.
type ComputeInstanceState string

const (
	// CreateFailed ...
	CreateFailed ComputeInstanceState = "CreateFailed"
	// Creating ...
	Creating ComputeInstanceState = "Creating"
	// Deleting ...
	Deleting ComputeInstanceState = "Deleting"
	// JobRunning ...
	JobRunning ComputeInstanceState = "JobRunning"
	// Restarting ...
	Restarting ComputeInstanceState = "Restarting"
	// Running ...
	Running ComputeInstanceState = "Running"
	// SettingUp ...
	SettingUp ComputeInstanceState = "SettingUp"
	// SetupFailed ...
	SetupFailed ComputeInstanceState = "SetupFailed"
	// Starting ...
	Starting ComputeInstanceState = "Starting"
	// Stopped ...
	Stopped ComputeInstanceState = "Stopped"
	// Stopping ...
	Stopping ComputeInstanceState = "Stopping"
	// Unknown ...
	Unknown ComputeInstanceState = "Unknown"
	// Unusable ...
	Unusable ComputeInstanceState = "Unusable"
	// UserSettingUp ...
	UserSettingUp ComputeInstanceState = "UserSettingUp"
	// UserSetupFailed ...
	UserSetupFailed ComputeInstanceState = "UserSetupFailed"
)

// PossibleComputeInstanceStateValues returns an array of possible values for the ComputeInstanceState const type.
func PossibleComputeInstanceStateValues() []ComputeInstanceState {
	return []ComputeInstanceState{CreateFailed, Creating, Deleting, JobRunning, Restarting, Running, SettingUp, SetupFailed, Starting, Stopped, Stopping, Unknown, Unusable, UserSettingUp, UserSetupFailed}
}

// ComputePowerAction enumerates the values for compute power action.
type ComputePowerAction string

const (
	// Start ...
	Start ComputePowerAction = "Start"
	// Stop ...
	Stop ComputePowerAction = "Stop"
)

// PossibleComputePowerActionValues returns an array of possible values for the ComputePowerAction const type.
func PossibleComputePowerActionValues() []ComputePowerAction {
	return []ComputePowerAction{Start, Stop}
}

// ComputeType enumerates the values for compute type.
type ComputeType string

const (
	// ComputeTypeAKS ...
	ComputeTypeAKS ComputeType = "AKS"
	// ComputeTypeAmlCompute ...
	ComputeTypeAmlCompute ComputeType = "AmlCompute"
	// ComputeTypeComputeInstance ...
	ComputeTypeComputeInstance ComputeType = "ComputeInstance"
	// ComputeTypeDatabricks ...
	ComputeTypeDatabricks ComputeType = "Databricks"
	// ComputeTypeDataFactory ...
	ComputeTypeDataFactory ComputeType = "DataFactory"
	// ComputeTypeDataLakeAnalytics ...
	ComputeTypeDataLakeAnalytics ComputeType = "DataLakeAnalytics"
	// ComputeTypeHDInsight ...
	ComputeTypeHDInsight ComputeType = "HDInsight"
	// ComputeTypeKubernetes ...
	ComputeTypeKubernetes ComputeType = "Kubernetes"
	// ComputeTypeSynapseSpark ...
	ComputeTypeSynapseSpark ComputeType = "SynapseSpark"
	// ComputeTypeVirtualMachine ...
	ComputeTypeVirtualMachine ComputeType = "VirtualMachine"
)

// PossibleComputeTypeValues returns an array of possible values for the ComputeType const type.
func PossibleComputeTypeValues() []ComputeType {
	return []ComputeType{ComputeTypeAKS, ComputeTypeAmlCompute, ComputeTypeComputeInstance, ComputeTypeDatabricks, ComputeTypeDataFactory, ComputeTypeDataLakeAnalytics, ComputeTypeHDInsight, ComputeTypeKubernetes, ComputeTypeSynapseSpark, ComputeTypeVirtualMachine}
}

// ComputeTypeBasicCompute enumerates the values for compute type basic compute.
type ComputeTypeBasicCompute string

const (
	// ComputeTypeCompute ...
	ComputeTypeCompute ComputeTypeBasicCompute = "Compute"
	// ComputeTypeDataFactory1 ...
	ComputeTypeDataFactory1 ComputeTypeBasicCompute = "DataFactory"
	// ComputeTypeSynapseSpark1 ...
	ComputeTypeSynapseSpark1 ComputeTypeBasicCompute = "SynapseSpark"
)

// PossibleComputeTypeBasicComputeValues returns an array of possible values for the ComputeTypeBasicCompute const type.
func PossibleComputeTypeBasicComputeValues() []ComputeTypeBasicCompute {
	return []ComputeTypeBasicCompute{ComputeTypeCompute, ComputeTypeDataFactory1, ComputeTypeSynapseSpark1}
}

// ComputeTypeBasicComputeSecrets enumerates the values for compute type basic compute secrets.
type ComputeTypeBasicComputeSecrets string

const (
	// ComputeTypeComputeSecrets ...
	ComputeTypeComputeSecrets ComputeTypeBasicComputeSecrets = "ComputeSecrets"
)

// PossibleComputeTypeBasicComputeSecretsValues returns an array of possible values for the ComputeTypeBasicComputeSecrets const type.
func PossibleComputeTypeBasicComputeSecretsValues() []ComputeTypeBasicComputeSecrets {
	return []ComputeTypeBasicComputeSecrets{ComputeTypeComputeSecrets}
}

// ContainerType enumerates the values for container type.
type ContainerType string

const (
	// InferenceServer ...
	InferenceServer ContainerType = "InferenceServer"
	// StorageInitializer ...
	StorageInitializer ContainerType = "StorageInitializer"
)

// PossibleContainerTypeValues returns an array of possible values for the ContainerType const type.
func PossibleContainerTypeValues() []ContainerType {
	return []ContainerType{InferenceServer, StorageInitializer}
}

// CreatedByType enumerates the values for created by type.
type CreatedByType string

const (
	// CreatedByTypeApplication ...
	CreatedByTypeApplication CreatedByType = "Application"
	// CreatedByTypeKey ...
	CreatedByTypeKey CreatedByType = "Key"
	// CreatedByTypeManagedIdentity ...
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	// CreatedByTypeUser ...
	CreatedByTypeUser CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns an array of possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{CreatedByTypeApplication, CreatedByTypeKey, CreatedByTypeManagedIdentity, CreatedByTypeUser}
}

// CredentialsType enumerates the values for credentials type.
type CredentialsType string

const (
	// CredentialsTypeAccountKey ...
	CredentialsTypeAccountKey CredentialsType = "AccountKey"
	// CredentialsTypeCertificate ...
	CredentialsTypeCertificate CredentialsType = "Certificate"
	// CredentialsTypeKerberosKeytab ...
	CredentialsTypeKerberosKeytab CredentialsType = "KerberosKeytab"
	// CredentialsTypeKerberosPassword ...
	CredentialsTypeKerberosPassword CredentialsType = "KerberosPassword"
	// CredentialsTypeNone ...
	CredentialsTypeNone CredentialsType = "None"
	// CredentialsTypeSas ...
	CredentialsTypeSas CredentialsType = "Sas"
	// CredentialsTypeServicePrincipal ...
	CredentialsTypeServicePrincipal CredentialsType = "ServicePrincipal"
)

// PossibleCredentialsTypeValues returns an array of possible values for the CredentialsType const type.
func PossibleCredentialsTypeValues() []CredentialsType {
	return []CredentialsType{CredentialsTypeAccountKey, CredentialsTypeCertificate, CredentialsTypeKerberosKeytab, CredentialsTypeKerberosPassword, CredentialsTypeNone, CredentialsTypeSas, CredentialsTypeServicePrincipal}
}

// CredentialsTypeBasicDatastoreCredentials enumerates the values for credentials type basic datastore
// credentials.
type CredentialsTypeBasicDatastoreCredentials string

const (
	// CredentialsTypeAccountKey1 ...
	CredentialsTypeAccountKey1 CredentialsTypeBasicDatastoreCredentials = "AccountKey"
	// CredentialsTypeCertificate1 ...
	CredentialsTypeCertificate1 CredentialsTypeBasicDatastoreCredentials = "Certificate"
	// CredentialsTypeDatastoreCredentials ...
	CredentialsTypeDatastoreCredentials CredentialsTypeBasicDatastoreCredentials = "DatastoreCredentials"
	// CredentialsTypeNone1 ...
	CredentialsTypeNone1 CredentialsTypeBasicDatastoreCredentials = "None"
	// CredentialsTypeSas1 ...
	CredentialsTypeSas1 CredentialsTypeBasicDatastoreCredentials = "Sas"
	// CredentialsTypeServicePrincipal1 ...
	CredentialsTypeServicePrincipal1 CredentialsTypeBasicDatastoreCredentials = "ServicePrincipal"
)

// PossibleCredentialsTypeBasicDatastoreCredentialsValues returns an array of possible values for the CredentialsTypeBasicDatastoreCredentials const type.
func PossibleCredentialsTypeBasicDatastoreCredentialsValues() []CredentialsTypeBasicDatastoreCredentials {
	return []CredentialsTypeBasicDatastoreCredentials{CredentialsTypeAccountKey1, CredentialsTypeCertificate1, CredentialsTypeDatastoreCredentials, CredentialsTypeNone1, CredentialsTypeSas1, CredentialsTypeServicePrincipal1}
}

// DatastoreType enumerates the values for datastore type.
type DatastoreType string

const (
	// AzureBlob ...
	AzureBlob DatastoreType = "AzureBlob"
	// AzureDataLakeGen1 ...
	AzureDataLakeGen1 DatastoreType = "AzureDataLakeGen1"
	// AzureDataLakeGen2 ...
	AzureDataLakeGen2 DatastoreType = "AzureDataLakeGen2"
	// AzureFile ...
	AzureFile DatastoreType = "AzureFile"
	// Hdfs ...
	Hdfs DatastoreType = "Hdfs"
)

// PossibleDatastoreTypeValues returns an array of possible values for the DatastoreType const type.
func PossibleDatastoreTypeValues() []DatastoreType {
	return []DatastoreType{AzureBlob, AzureDataLakeGen1, AzureDataLakeGen2, AzureFile, Hdfs}
}

// DatastoreTypeBasicDatastore enumerates the values for datastore type basic datastore.
type DatastoreTypeBasicDatastore string

const (
	// DatastoreTypeAzureBlob ...
	DatastoreTypeAzureBlob DatastoreTypeBasicDatastore = "AzureBlob"
	// DatastoreTypeAzureDataLakeGen1 ...
	DatastoreTypeAzureDataLakeGen1 DatastoreTypeBasicDatastore = "AzureDataLakeGen1"
	// DatastoreTypeAzureDataLakeGen2 ...
	DatastoreTypeAzureDataLakeGen2 DatastoreTypeBasicDatastore = "AzureDataLakeGen2"
	// DatastoreTypeAzureFile ...
	DatastoreTypeAzureFile DatastoreTypeBasicDatastore = "AzureFile"
	// DatastoreTypeDatastore ...
	DatastoreTypeDatastore DatastoreTypeBasicDatastore = "Datastore"
	// DatastoreTypeHdfs ...
	DatastoreTypeHdfs DatastoreTypeBasicDatastore = "Hdfs"
)

// PossibleDatastoreTypeBasicDatastoreValues returns an array of possible values for the DatastoreTypeBasicDatastore const type.
func PossibleDatastoreTypeBasicDatastoreValues() []DatastoreTypeBasicDatastore {
	return []DatastoreTypeBasicDatastore{DatastoreTypeAzureBlob, DatastoreTypeAzureDataLakeGen1, DatastoreTypeAzureDataLakeGen2, DatastoreTypeAzureFile, DatastoreTypeDatastore, DatastoreTypeHdfs}
}

// DataType enumerates the values for data type.
type DataType string

const (
	// MLTable ...
	MLTable DataType = "MLTable"
	// URIFile ...
	URIFile DataType = "UriFile"
	// URIFolder ...
	URIFolder DataType = "UriFolder"
)

// PossibleDataTypeValues returns an array of possible values for the DataType const type.
func PossibleDataTypeValues() []DataType {
	return []DataType{MLTable, URIFile, URIFolder}
}

// DataTypeBasicDataVersionBase enumerates the values for data type basic data version base.
type DataTypeBasicDataVersionBase string

const (
	// DataTypeDataVersionBase ...
	DataTypeDataVersionBase DataTypeBasicDataVersionBase = "DataVersionBase"
	// DataTypeMLTable ...
	DataTypeMLTable DataTypeBasicDataVersionBase = "MLTable"
	// DataTypeURIFile ...
	DataTypeURIFile DataTypeBasicDataVersionBase = "UriFile"
	// DataTypeURIFolder ...
	DataTypeURIFolder DataTypeBasicDataVersionBase = "UriFolder"
)

// PossibleDataTypeBasicDataVersionBaseValues returns an array of possible values for the DataTypeBasicDataVersionBase const type.
func PossibleDataTypeBasicDataVersionBaseValues() []DataTypeBasicDataVersionBase {
	return []DataTypeBasicDataVersionBase{DataTypeDataVersionBase, DataTypeMLTable, DataTypeURIFile, DataTypeURIFolder}
}

// DeploymentProvisioningState enumerates the values for deployment provisioning state.
type DeploymentProvisioningState string

const (
	// DeploymentProvisioningStateCanceled ...
	DeploymentProvisioningStateCanceled DeploymentProvisioningState = "Canceled"
	// DeploymentProvisioningStateCreating ...
	DeploymentProvisioningStateCreating DeploymentProvisioningState = "Creating"
	// DeploymentProvisioningStateDeleting ...
	DeploymentProvisioningStateDeleting DeploymentProvisioningState = "Deleting"
	// DeploymentProvisioningStateFailed ...
	DeploymentProvisioningStateFailed DeploymentProvisioningState = "Failed"
	// DeploymentProvisioningStateScaling ...
	DeploymentProvisioningStateScaling DeploymentProvisioningState = "Scaling"
	// DeploymentProvisioningStateSucceeded ...
	DeploymentProvisioningStateSucceeded DeploymentProvisioningState = "Succeeded"
	// DeploymentProvisioningStateUpdating ...
	DeploymentProvisioningStateUpdating DeploymentProvisioningState = "Updating"
)

// PossibleDeploymentProvisioningStateValues returns an array of possible values for the DeploymentProvisioningState const type.
func PossibleDeploymentProvisioningStateValues() []DeploymentProvisioningState {
	return []DeploymentProvisioningState{DeploymentProvisioningStateCanceled, DeploymentProvisioningStateCreating, DeploymentProvisioningStateDeleting, DeploymentProvisioningStateFailed, DeploymentProvisioningStateScaling, DeploymentProvisioningStateSucceeded, DeploymentProvisioningStateUpdating}
}

// DiagnoseResultLevel enumerates the values for diagnose result level.
type DiagnoseResultLevel string

const (
	// DiagnoseResultLevelError ...
	DiagnoseResultLevelError DiagnoseResultLevel = "Error"
	// DiagnoseResultLevelInformation ...
	DiagnoseResultLevelInformation DiagnoseResultLevel = "Information"
	// DiagnoseResultLevelWarning ...
	DiagnoseResultLevelWarning DiagnoseResultLevel = "Warning"
)

// PossibleDiagnoseResultLevelValues returns an array of possible values for the DiagnoseResultLevel const type.
func PossibleDiagnoseResultLevelValues() []DiagnoseResultLevel {
	return []DiagnoseResultLevel{DiagnoseResultLevelError, DiagnoseResultLevelInformation, DiagnoseResultLevelWarning}
}

// DistributionType enumerates the values for distribution type.
type DistributionType string

const (
	// DistributionTypeMpi ...
	DistributionTypeMpi DistributionType = "Mpi"
	// DistributionTypePyTorch ...
	DistributionTypePyTorch DistributionType = "PyTorch"
	// DistributionTypeTensorFlow ...
	DistributionTypeTensorFlow DistributionType = "TensorFlow"
)

// PossibleDistributionTypeValues returns an array of possible values for the DistributionType const type.
func PossibleDistributionTypeValues() []DistributionType {
	return []DistributionType{DistributionTypeMpi, DistributionTypePyTorch, DistributionTypeTensorFlow}
}

// DistributionTypeBasicDistributionConfiguration enumerates the values for distribution type basic
// distribution configuration.
type DistributionTypeBasicDistributionConfiguration string

const (
	// DistributionTypeDistributionConfiguration ...
	DistributionTypeDistributionConfiguration DistributionTypeBasicDistributionConfiguration = "DistributionConfiguration"
	// DistributionTypeMpi1 ...
	DistributionTypeMpi1 DistributionTypeBasicDistributionConfiguration = "Mpi"
	// DistributionTypePyTorch1 ...
	DistributionTypePyTorch1 DistributionTypeBasicDistributionConfiguration = "PyTorch"
	// DistributionTypeTensorFlow1 ...
	DistributionTypeTensorFlow1 DistributionTypeBasicDistributionConfiguration = "TensorFlow"
)

// PossibleDistributionTypeBasicDistributionConfigurationValues returns an array of possible values for the DistributionTypeBasicDistributionConfiguration const type.
func PossibleDistributionTypeBasicDistributionConfigurationValues() []DistributionTypeBasicDistributionConfiguration {
	return []DistributionTypeBasicDistributionConfiguration{DistributionTypeDistributionConfiguration, DistributionTypeMpi1, DistributionTypePyTorch1, DistributionTypeTensorFlow1}
}

// EarlyTerminationPolicyType enumerates the values for early termination policy type.
type EarlyTerminationPolicyType string

const (
	// Bandit ...
	Bandit EarlyTerminationPolicyType = "Bandit"
	// MedianStopping ...
	MedianStopping EarlyTerminationPolicyType = "MedianStopping"
	// TruncationSelection ...
	TruncationSelection EarlyTerminationPolicyType = "TruncationSelection"
)

// PossibleEarlyTerminationPolicyTypeValues returns an array of possible values for the EarlyTerminationPolicyType const type.
func PossibleEarlyTerminationPolicyTypeValues() []EarlyTerminationPolicyType {
	return []EarlyTerminationPolicyType{Bandit, MedianStopping, TruncationSelection}
}

// EgressPublicNetworkAccessType enumerates the values for egress public network access type.
type EgressPublicNetworkAccessType string

const (
	// Disabled ...
	Disabled EgressPublicNetworkAccessType = "Disabled"
	// Enabled ...
	Enabled EgressPublicNetworkAccessType = "Enabled"
)

// PossibleEgressPublicNetworkAccessTypeValues returns an array of possible values for the EgressPublicNetworkAccessType const type.
func PossibleEgressPublicNetworkAccessTypeValues() []EgressPublicNetworkAccessType {
	return []EgressPublicNetworkAccessType{Disabled, Enabled}
}

// EncryptionStatus enumerates the values for encryption status.
type EncryptionStatus string

const (
	// EncryptionStatusDisabled ...
	EncryptionStatusDisabled EncryptionStatus = "Disabled"
	// EncryptionStatusEnabled ...
	EncryptionStatusEnabled EncryptionStatus = "Enabled"
)

// PossibleEncryptionStatusValues returns an array of possible values for the EncryptionStatus const type.
func PossibleEncryptionStatusValues() []EncryptionStatus {
	return []EncryptionStatus{EncryptionStatusDisabled, EncryptionStatusEnabled}
}

// EndpointAuthMode enumerates the values for endpoint auth mode.
type EndpointAuthMode string

const (
	// AADToken ...
	AADToken EndpointAuthMode = "AADToken"
	// AMLToken ...
	AMLToken EndpointAuthMode = "AMLToken"
	// Key ...
	Key EndpointAuthMode = "Key"
)

// PossibleEndpointAuthModeValues returns an array of possible values for the EndpointAuthMode const type.
func PossibleEndpointAuthModeValues() []EndpointAuthMode {
	return []EndpointAuthMode{AADToken, AMLToken, Key}
}

// EndpointComputeType enumerates the values for endpoint compute type.
type EndpointComputeType string

const (
	// EndpointComputeTypeAzureMLCompute ...
	EndpointComputeTypeAzureMLCompute EndpointComputeType = "AzureMLCompute"
	// EndpointComputeTypeKubernetes ...
	EndpointComputeTypeKubernetes EndpointComputeType = "Kubernetes"
	// EndpointComputeTypeManaged ...
	EndpointComputeTypeManaged EndpointComputeType = "Managed"
)

// PossibleEndpointComputeTypeValues returns an array of possible values for the EndpointComputeType const type.
func PossibleEndpointComputeTypeValues() []EndpointComputeType {
	return []EndpointComputeType{EndpointComputeTypeAzureMLCompute, EndpointComputeTypeKubernetes, EndpointComputeTypeManaged}
}

// EndpointComputeTypeBasicOnlineDeployment enumerates the values for endpoint compute type basic online
// deployment.
type EndpointComputeTypeBasicOnlineDeployment string

const (
	// EndpointComputeTypeKubernetes1 ...
	EndpointComputeTypeKubernetes1 EndpointComputeTypeBasicOnlineDeployment = "Kubernetes"
	// EndpointComputeTypeManaged1 ...
	EndpointComputeTypeManaged1 EndpointComputeTypeBasicOnlineDeployment = "Managed"
	// EndpointComputeTypeOnlineDeployment ...
	EndpointComputeTypeOnlineDeployment EndpointComputeTypeBasicOnlineDeployment = "OnlineDeployment"
)

// PossibleEndpointComputeTypeBasicOnlineDeploymentValues returns an array of possible values for the EndpointComputeTypeBasicOnlineDeployment const type.
func PossibleEndpointComputeTypeBasicOnlineDeploymentValues() []EndpointComputeTypeBasicOnlineDeployment {
	return []EndpointComputeTypeBasicOnlineDeployment{EndpointComputeTypeKubernetes1, EndpointComputeTypeManaged1, EndpointComputeTypeOnlineDeployment}
}

// EndpointComputeTypeBasicPartialOnlineDeployment enumerates the values for endpoint compute type basic
// partial online deployment.
type EndpointComputeTypeBasicPartialOnlineDeployment string

const (
	// EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypeKubernetes ...
	EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypeKubernetes EndpointComputeTypeBasicPartialOnlineDeployment = "Kubernetes"
	// EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypeManaged ...
	EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypeManaged EndpointComputeTypeBasicPartialOnlineDeployment = "Managed"
	// EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypePartialOnlineDeployment ...
	EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypePartialOnlineDeployment EndpointComputeTypeBasicPartialOnlineDeployment = "PartialOnlineDeployment"
)

// PossibleEndpointComputeTypeBasicPartialOnlineDeploymentValues returns an array of possible values for the EndpointComputeTypeBasicPartialOnlineDeployment const type.
func PossibleEndpointComputeTypeBasicPartialOnlineDeploymentValues() []EndpointComputeTypeBasicPartialOnlineDeployment {
	return []EndpointComputeTypeBasicPartialOnlineDeployment{EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypeKubernetes, EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypeManaged, EndpointComputeTypeBasicPartialOnlineDeploymentEndpointComputeTypePartialOnlineDeployment}
}

// EndpointProvisioningState enumerates the values for endpoint provisioning state.
type EndpointProvisioningState string

const (
	// EndpointProvisioningStateCanceled ...
	EndpointProvisioningStateCanceled EndpointProvisioningState = "Canceled"
	// EndpointProvisioningStateCreating ...
	EndpointProvisioningStateCreating EndpointProvisioningState = "Creating"
	// EndpointProvisioningStateDeleting ...
	EndpointProvisioningStateDeleting EndpointProvisioningState = "Deleting"
	// EndpointProvisioningStateFailed ...
	EndpointProvisioningStateFailed EndpointProvisioningState = "Failed"
	// EndpointProvisioningStateSucceeded ...
	EndpointProvisioningStateSucceeded EndpointProvisioningState = "Succeeded"
	// EndpointProvisioningStateUpdating ...
	EndpointProvisioningStateUpdating EndpointProvisioningState = "Updating"
)

// PossibleEndpointProvisioningStateValues returns an array of possible values for the EndpointProvisioningState const type.
func PossibleEndpointProvisioningStateValues() []EndpointProvisioningState {
	return []EndpointProvisioningState{EndpointProvisioningStateCanceled, EndpointProvisioningStateCreating, EndpointProvisioningStateDeleting, EndpointProvisioningStateFailed, EndpointProvisioningStateSucceeded, EndpointProvisioningStateUpdating}
}

// EnvironmentType enumerates the values for environment type.
type EnvironmentType string

const (
	// Curated ...
	Curated EnvironmentType = "Curated"
	// UserCreated ...
	UserCreated EnvironmentType = "UserCreated"
)

// PossibleEnvironmentTypeValues returns an array of possible values for the EnvironmentType const type.
func PossibleEnvironmentTypeValues() []EnvironmentType {
	return []EnvironmentType{Curated, UserCreated}
}

// FeatureLags enumerates the values for feature lags.
type FeatureLags string

const (
	// FeatureLagsAuto System auto-generates feature lags.
	FeatureLagsAuto FeatureLags = "Auto"
	// FeatureLagsNone No feature lags generated.
	FeatureLagsNone FeatureLags = "None"
)

// PossibleFeatureLagsValues returns an array of possible values for the FeatureLags const type.
func PossibleFeatureLagsValues() []FeatureLags {
	return []FeatureLags{FeatureLagsAuto, FeatureLagsNone}
}

// FeaturizationMode enumerates the values for featurization mode.
type FeaturizationMode string

const (
	// Auto Auto mode, system performs featurization without any custom featurization inputs.
	Auto FeaturizationMode = "Auto"
	// Custom Custom featurization.
	Custom FeaturizationMode = "Custom"
	// Off Featurization off. 'Forecasting' task cannot use this value.
	Off FeaturizationMode = "Off"
)

// PossibleFeaturizationModeValues returns an array of possible values for the FeaturizationMode const type.
func PossibleFeaturizationModeValues() []FeaturizationMode {
	return []FeaturizationMode{Auto, Custom, Off}
}

// ForecastHorizonMode enumerates the values for forecast horizon mode.
type ForecastHorizonMode string

const (
	// ForecastHorizonModeAuto Forecast horizon to be determined automatically.
	ForecastHorizonModeAuto ForecastHorizonMode = "Auto"
	// ForecastHorizonModeCustom Use the custom forecast horizon.
	ForecastHorizonModeCustom ForecastHorizonMode = "Custom"
)

// PossibleForecastHorizonModeValues returns an array of possible values for the ForecastHorizonMode const type.
func PossibleForecastHorizonModeValues() []ForecastHorizonMode {
	return []ForecastHorizonMode{ForecastHorizonModeAuto, ForecastHorizonModeCustom}
}

// ForecastingModels enumerates the values for forecasting models.
type ForecastingModels string

const (
	// ForecastingModelsArimax An Autoregressive Integrated Moving Average with Explanatory Variable (ARIMAX)
	// model can be viewed as a multiple regression model with one or more autoregressive (AR) terms and/or one
	// or more moving average (MA) terms.
	// This method is suitable for forecasting when data is stationary/non stationary, and multivariate with
	// any type of data pattern, i.e., level/trend /seasonality/cyclicity.
	ForecastingModelsArimax ForecastingModels = "Arimax"
	// ForecastingModelsAutoArima Auto-Autoregressive Integrated Moving Average (ARIMA) model uses time-series
	// data and statistical analysis to interpret the data and make future predictions.
	// This model aims to explain data by using time series data on its past values and uses linear regression
	// to make predictions.
	ForecastingModelsAutoArima ForecastingModels = "AutoArima"
	// ForecastingModelsAverage The Average forecasting model makes predictions by carrying forward the average
	// of the target values for each time-series in the training data.
	ForecastingModelsAverage ForecastingModels = "Average"
	// ForecastingModelsDecisionTree Decision Trees are a non-parametric supervised learning method used for
	// both classification and regression tasks.
	// The goal is to create a model that predicts the value of a target variable by learning simple decision
	// rules inferred from the data features.
	ForecastingModelsDecisionTree ForecastingModels = "DecisionTree"
	// ForecastingModelsElasticNet Elastic net is a popular type of regularized linear regression that combines
	// two popular penalties, specifically the L1 and L2 penalty functions.
	ForecastingModelsElasticNet ForecastingModels = "ElasticNet"
	// ForecastingModelsExponentialSmoothing Exponential smoothing is a time series forecasting method for
	// univariate data that can be extended to support data with a systematic trend or seasonal component.
	ForecastingModelsExponentialSmoothing ForecastingModels = "ExponentialSmoothing"
	// ForecastingModelsExtremeRandomTrees Extreme Trees is an ensemble machine learning algorithm that
	// combines the predictions from many decision trees. It is related to the widely used random forest
	// algorithm.
	ForecastingModelsExtremeRandomTrees ForecastingModels = "ExtremeRandomTrees"
	// ForecastingModelsGradientBoosting The technique of transiting week learners into a strong learner is
	// called Boosting. The gradient boosting algorithm process works on this theory of execution.
	ForecastingModelsGradientBoosting ForecastingModels = "GradientBoosting"
	// ForecastingModelsKNN K-nearest neighbors (KNN) algorithm uses 'feature similarity' to predict the values
	// of new datapoints
	// which further means that the new data point will be assigned a value based on how closely it matches the
	// points in the training set.
	ForecastingModelsKNN ForecastingModels = "KNN"
	// ForecastingModelsLassoLars Lasso model fit with Least Angle Regression a.k.a. Lars. It is a Linear Model
	// trained with an L1 prior as regularizer.
	ForecastingModelsLassoLars ForecastingModels = "LassoLars"
	// ForecastingModelsLightGBM LightGBM is a gradient boosting framework that uses tree based learning
	// algorithms.
	ForecastingModelsLightGBM ForecastingModels = "LightGBM"
	// ForecastingModelsNaive The Naive forecasting model makes predictions by carrying forward the latest
	// target value for each time-series in the training data.
	ForecastingModelsNaive ForecastingModels = "Naive"
	// ForecastingModelsProphet Prophet is a procedure for forecasting time series data based on an additive
	// model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects.
	// It works best with time series that have strong seasonal effects and several seasons of historical data.
	// Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.
	ForecastingModelsProphet ForecastingModels = "Prophet"
	// ForecastingModelsRandomForest Random forest is a supervised learning algorithm.
	// The "forest" it builds, is an ensemble of decision trees, usually trained with the “bagging” method.
	// The general idea of the bagging method is that a combination of learning models increases the overall
	// result.
	ForecastingModelsRandomForest ForecastingModels = "RandomForest"
	// ForecastingModelsSeasonalAverage The Seasonal Average forecasting model makes predictions by carrying
	// forward the average value of the latest season of data for each time-series in the training data.
	ForecastingModelsSeasonalAverage ForecastingModels = "SeasonalAverage"
	// ForecastingModelsSeasonalNaive The Seasonal Naive forecasting model makes predictions by carrying
	// forward the latest season of target values for each time-series in the training data.
	ForecastingModelsSeasonalNaive ForecastingModels = "SeasonalNaive"
	// ForecastingModelsSGD SGD: Stochastic gradient descent is an optimization algorithm often used in machine
	// learning applications
	// to find the model parameters that correspond to the best fit between predicted and actual outputs.
	// It's an inexact but powerful technique.
	ForecastingModelsSGD ForecastingModels = "SGD"
	// ForecastingModelsTCNForecaster TCNForecaster: Temporal Convolutional Networks Forecaster.
	ForecastingModelsTCNForecaster ForecastingModels = "TCNForecaster"
	// ForecastingModelsXGBoostRegressor XGBoostRegressor: Extreme Gradient Boosting Regressor is a supervised
	// machine learning model using ensemble of base learners.
	ForecastingModelsXGBoostRegressor ForecastingModels = "XGBoostRegressor"
)

// PossibleForecastingModelsValues returns an array of possible values for the ForecastingModels const type.
func PossibleForecastingModelsValues() []ForecastingModels {
	return []ForecastingModels{ForecastingModelsArimax, ForecastingModelsAutoArima, ForecastingModelsAverage, ForecastingModelsDecisionTree, ForecastingModelsElasticNet, ForecastingModelsExponentialSmoothing, ForecastingModelsExtremeRandomTrees, ForecastingModelsGradientBoosting, ForecastingModelsKNN, ForecastingModelsLassoLars, ForecastingModelsLightGBM, ForecastingModelsNaive, ForecastingModelsProphet, ForecastingModelsRandomForest, ForecastingModelsSeasonalAverage, ForecastingModelsSeasonalNaive, ForecastingModelsSGD, ForecastingModelsTCNForecaster, ForecastingModelsXGBoostRegressor}
}

// ForecastingPrimaryMetrics enumerates the values for forecasting primary metrics.
type ForecastingPrimaryMetrics string

const (
	// NormalizedMeanAbsoluteError The Normalized Mean Absolute Error (NMAE) is a validation metric to compare
	// the Mean Absolute Error (MAE) of (time) series with different scales.
	NormalizedMeanAbsoluteError ForecastingPrimaryMetrics = "NormalizedMeanAbsoluteError"
	// NormalizedRootMeanSquaredError The Normalized Root Mean Squared Error (NRMSE) the RMSE facilitates the
	// comparison between models with different scales.
	NormalizedRootMeanSquaredError ForecastingPrimaryMetrics = "NormalizedRootMeanSquaredError"
	// R2Score The R2 score is one of the performance evaluation measures for forecasting-based machine
	// learning models.
	R2Score ForecastingPrimaryMetrics = "R2Score"
	// SpearmanCorrelation The Spearman's rank coefficient of correlation is a non-parametric measure of rank
	// correlation.
	SpearmanCorrelation ForecastingPrimaryMetrics = "SpearmanCorrelation"
)

// PossibleForecastingPrimaryMetricsValues returns an array of possible values for the ForecastingPrimaryMetrics const type.
func PossibleForecastingPrimaryMetricsValues() []ForecastingPrimaryMetrics {
	return []ForecastingPrimaryMetrics{NormalizedMeanAbsoluteError, NormalizedRootMeanSquaredError, R2Score, SpearmanCorrelation}
}

// Goal enumerates the values for goal.
type Goal string

const (
	// Maximize ...
	Maximize Goal = "Maximize"
	// Minimize ...
	Minimize Goal = "Minimize"
)

// PossibleGoalValues returns an array of possible values for the Goal const type.
func PossibleGoalValues() []Goal {
	return []Goal{Maximize, Minimize}
}

// IdentityConfigurationType enumerates the values for identity configuration type.
type IdentityConfigurationType string

const (
	// IdentityConfigurationTypeAMLToken ...
	IdentityConfigurationTypeAMLToken IdentityConfigurationType = "AMLToken"
	// IdentityConfigurationTypeManaged ...
	IdentityConfigurationTypeManaged IdentityConfigurationType = "Managed"
	// IdentityConfigurationTypeUserIdentity ...
	IdentityConfigurationTypeUserIdentity IdentityConfigurationType = "UserIdentity"
)

// PossibleIdentityConfigurationTypeValues returns an array of possible values for the IdentityConfigurationType const type.
func PossibleIdentityConfigurationTypeValues() []IdentityConfigurationType {
	return []IdentityConfigurationType{IdentityConfigurationTypeAMLToken, IdentityConfigurationTypeManaged, IdentityConfigurationTypeUserIdentity}
}

// IdentityType enumerates the values for identity type.
type IdentityType string

const (
	// IdentityTypeAMLToken ...
	IdentityTypeAMLToken IdentityType = "AMLToken"
	// IdentityTypeIdentityConfiguration ...
	IdentityTypeIdentityConfiguration IdentityType = "IdentityConfiguration"
	// IdentityTypeManaged ...
	IdentityTypeManaged IdentityType = "Managed"
	// IdentityTypeUserIdentity ...
	IdentityTypeUserIdentity IdentityType = "UserIdentity"
)

// PossibleIdentityTypeValues returns an array of possible values for the IdentityType const type.
func PossibleIdentityTypeValues() []IdentityType {
	return []IdentityType{IdentityTypeAMLToken, IdentityTypeIdentityConfiguration, IdentityTypeManaged, IdentityTypeUserIdentity}
}

// InputDeliveryMode enumerates the values for input delivery mode.
type InputDeliveryMode string

const (
	// Direct ...
	Direct InputDeliveryMode = "Direct"
	// Download ...
	Download InputDeliveryMode = "Download"
	// EvalDownload ...
	EvalDownload InputDeliveryMode = "EvalDownload"
	// EvalMount ...
	EvalMount InputDeliveryMode = "EvalMount"
	// ReadOnlyMount ...
	ReadOnlyMount InputDeliveryMode = "ReadOnlyMount"
	// ReadWriteMount ...
	ReadWriteMount InputDeliveryMode = "ReadWriteMount"
)

// PossibleInputDeliveryModeValues returns an array of possible values for the InputDeliveryMode const type.
func PossibleInputDeliveryModeValues() []InputDeliveryMode {
	return []InputDeliveryMode{Direct, Download, EvalDownload, EvalMount, ReadOnlyMount, ReadWriteMount}
}

// InstanceSegmentationPrimaryMetrics enumerates the values for instance segmentation primary metrics.
type InstanceSegmentationPrimaryMetrics string

const (
	// MeanAveragePrecision Mean Average Precision (MAP) is the average of AP (Average Precision).
	// AP is calculated for each class and averaged to get the MAP.
	MeanAveragePrecision InstanceSegmentationPrimaryMetrics = "MeanAveragePrecision"
)

// PossibleInstanceSegmentationPrimaryMetricsValues returns an array of possible values for the InstanceSegmentationPrimaryMetrics const type.
func PossibleInstanceSegmentationPrimaryMetricsValues() []InstanceSegmentationPrimaryMetrics {
	return []InstanceSegmentationPrimaryMetrics{MeanAveragePrecision}
}

// JobInputType enumerates the values for job input type.
type JobInputType string

const (
	// JobInputTypeCustomModel ...
	JobInputTypeCustomModel JobInputType = "CustomModel"
	// JobInputTypeLiteral ...
	JobInputTypeLiteral JobInputType = "Literal"
	// JobInputTypeMLFlowModel ...
	JobInputTypeMLFlowModel JobInputType = "MLFlowModel"
	// JobInputTypeMLTable ...
	JobInputTypeMLTable JobInputType = "MLTable"
	// JobInputTypeTritonModel ...
	JobInputTypeTritonModel JobInputType = "TritonModel"
	// JobInputTypeURIFile ...
	JobInputTypeURIFile JobInputType = "UriFile"
	// JobInputTypeURIFolder ...
	JobInputTypeURIFolder JobInputType = "UriFolder"
)

// PossibleJobInputTypeValues returns an array of possible values for the JobInputType const type.
func PossibleJobInputTypeValues() []JobInputType {
	return []JobInputType{JobInputTypeCustomModel, JobInputTypeLiteral, JobInputTypeMLFlowModel, JobInputTypeMLTable, JobInputTypeTritonModel, JobInputTypeURIFile, JobInputTypeURIFolder}
}

// JobInputTypeBasicJobInput enumerates the values for job input type basic job input.
type JobInputTypeBasicJobInput string

const (
	// JobInputTypeJobInput ...
	JobInputTypeJobInput JobInputTypeBasicJobInput = "JobInput"
	// JobInputTypeLiteral1 ...
	JobInputTypeLiteral1 JobInputTypeBasicJobInput = "Literal"
)

// PossibleJobInputTypeBasicJobInputValues returns an array of possible values for the JobInputTypeBasicJobInput const type.
func PossibleJobInputTypeBasicJobInputValues() []JobInputTypeBasicJobInput {
	return []JobInputTypeBasicJobInput{JobInputTypeJobInput, JobInputTypeLiteral1}
}

// JobLimitsType enumerates the values for job limits type.
type JobLimitsType string

const (
	// Command ...
	Command JobLimitsType = "Command"
	// Sweep ...
	Sweep JobLimitsType = "Sweep"
)

// PossibleJobLimitsTypeValues returns an array of possible values for the JobLimitsType const type.
func PossibleJobLimitsTypeValues() []JobLimitsType {
	return []JobLimitsType{Command, Sweep}
}

// JobLimitsTypeBasicJobLimits enumerates the values for job limits type basic job limits.
type JobLimitsTypeBasicJobLimits string

const (
	// JobLimitsTypeCommand ...
	JobLimitsTypeCommand JobLimitsTypeBasicJobLimits = "Command"
	// JobLimitsTypeJobLimits ...
	JobLimitsTypeJobLimits JobLimitsTypeBasicJobLimits = "JobLimits"
	// JobLimitsTypeSweep ...
	JobLimitsTypeSweep JobLimitsTypeBasicJobLimits = "Sweep"
)

// PossibleJobLimitsTypeBasicJobLimitsValues returns an array of possible values for the JobLimitsTypeBasicJobLimits const type.
func PossibleJobLimitsTypeBasicJobLimitsValues() []JobLimitsTypeBasicJobLimits {
	return []JobLimitsTypeBasicJobLimits{JobLimitsTypeCommand, JobLimitsTypeJobLimits, JobLimitsTypeSweep}
}

// JobOutputType enumerates the values for job output type.
type JobOutputType string

const (
	// JobOutputTypeCustomModel ...
	JobOutputTypeCustomModel JobOutputType = "CustomModel"
	// JobOutputTypeMLFlowModel ...
	JobOutputTypeMLFlowModel JobOutputType = "MLFlowModel"
	// JobOutputTypeMLTable ...
	JobOutputTypeMLTable JobOutputType = "MLTable"
	// JobOutputTypeTritonModel ...
	JobOutputTypeTritonModel JobOutputType = "TritonModel"
	// JobOutputTypeURIFile ...
	JobOutputTypeURIFile JobOutputType = "UriFile"
	// JobOutputTypeURIFolder ...
	JobOutputTypeURIFolder JobOutputType = "UriFolder"
)

// PossibleJobOutputTypeValues returns an array of possible values for the JobOutputType const type.
func PossibleJobOutputTypeValues() []JobOutputType {
	return []JobOutputType{JobOutputTypeCustomModel, JobOutputTypeMLFlowModel, JobOutputTypeMLTable, JobOutputTypeTritonModel, JobOutputTypeURIFile, JobOutputTypeURIFolder}
}

// JobOutputTypeBasicJobOutput enumerates the values for job output type basic job output.
type JobOutputTypeBasicJobOutput string

const (
	// JobOutputTypeJobOutput ...
	JobOutputTypeJobOutput JobOutputTypeBasicJobOutput = "JobOutput"
)

// PossibleJobOutputTypeBasicJobOutputValues returns an array of possible values for the JobOutputTypeBasicJobOutput const type.
func PossibleJobOutputTypeBasicJobOutputValues() []JobOutputTypeBasicJobOutput {
	return []JobOutputTypeBasicJobOutput{JobOutputTypeJobOutput}
}

// JobStatus enumerates the values for job status.
type JobStatus string

const (
	// JobStatusCanceled Following cancellation request, the job is now successfully canceled.
	JobStatusCanceled JobStatus = "Canceled"
	// JobStatusCancelRequested Cancellation has been requested for the job.
	JobStatusCancelRequested JobStatus = "CancelRequested"
	// JobStatusCompleted Job completed successfully. This reflects that both the job itself and output
	// collection states completed successfully
	JobStatusCompleted JobStatus = "Completed"
	// JobStatusFailed Job failed.
	JobStatusFailed JobStatus = "Failed"
	// JobStatusFinalizing Job is completed in the target. It is in output collection state now.
	JobStatusFinalizing JobStatus = "Finalizing"
	// JobStatusNotResponding When heartbeat is enabled, if the run isn't updating any information to
	// RunHistory then the run goes to NotResponding state.
	// NotResponding is the only state that is exempt from strict transition orders. A run can go from
	// NotResponding to any of the previous states.
	JobStatusNotResponding JobStatus = "NotResponding"
	// JobStatusNotStarted Run hasn't started yet.
	JobStatusNotStarted JobStatus = "NotStarted"
	// JobStatusPaused The job is paused by users. Some adjustment to labeling jobs can be made only in paused
	// state.
	JobStatusPaused JobStatus = "Paused"
	// JobStatusPreparing The run environment is being prepared.
	JobStatusPreparing JobStatus = "Preparing"
	// JobStatusProvisioning (Not used currently) It will be used if ES is creating the compute target.
	JobStatusProvisioning JobStatus = "Provisioning"
	// JobStatusQueued The job is queued in the compute target. For example, in BatchAI the job is in queued
	// state, while waiting for all required nodes to be ready.
	JobStatusQueued JobStatus = "Queued"
	// JobStatusRunning The job started to run in the compute target.
	JobStatusRunning JobStatus = "Running"
	// JobStatusScheduled The job is in a scheduled state. Job is not in any active state.
	JobStatusScheduled JobStatus = "Scheduled"
	// JobStatusStarting Run has started. The user has a run ID.
	JobStatusStarting JobStatus = "Starting"
	// JobStatusUnknown Default job status if not mapped to all other statuses
	JobStatusUnknown JobStatus = "Unknown"
)

// PossibleJobStatusValues returns an array of possible values for the JobStatus const type.
func PossibleJobStatusValues() []JobStatus {
	return []JobStatus{JobStatusCanceled, JobStatusCancelRequested, JobStatusCompleted, JobStatusFailed, JobStatusFinalizing, JobStatusNotResponding, JobStatusNotStarted, JobStatusPaused, JobStatusPreparing, JobStatusProvisioning, JobStatusQueued, JobStatusRunning, JobStatusScheduled, JobStatusStarting, JobStatusUnknown}
}

// JobType enumerates the values for job type.
type JobType string

const (
	// JobTypeAutoML ...
	JobTypeAutoML JobType = "AutoML"
	// JobTypeCommand ...
	JobTypeCommand JobType = "Command"
	// JobTypePipeline ...
	JobTypePipeline JobType = "Pipeline"
	// JobTypeSweep ...
	JobTypeSweep JobType = "Sweep"
)

// PossibleJobTypeValues returns an array of possible values for the JobType const type.
func PossibleJobTypeValues() []JobType {
	return []JobType{JobTypeAutoML, JobTypeCommand, JobTypePipeline, JobTypeSweep}
}

// JobTypeBasicJobBase enumerates the values for job type basic job base.
type JobTypeBasicJobBase string

const (
	// JobTypeAutoML1 ...
	JobTypeAutoML1 JobTypeBasicJobBase = "AutoML"
	// JobTypeCommand1 ...
	JobTypeCommand1 JobTypeBasicJobBase = "Command"
	// JobTypeJobBase ...
	JobTypeJobBase JobTypeBasicJobBase = "JobBase"
	// JobTypePipeline1 ...
	JobTypePipeline1 JobTypeBasicJobBase = "Pipeline"
	// JobTypeSweep1 ...
	JobTypeSweep1 JobTypeBasicJobBase = "Sweep"
)

// PossibleJobTypeBasicJobBaseValues returns an array of possible values for the JobTypeBasicJobBase const type.
func PossibleJobTypeBasicJobBaseValues() []JobTypeBasicJobBase {
	return []JobTypeBasicJobBase{JobTypeAutoML1, JobTypeCommand1, JobTypeJobBase, JobTypePipeline1, JobTypeSweep1}
}

// KeyType enumerates the values for key type.
type KeyType string

const (
	// Primary ...
	Primary KeyType = "Primary"
	// Secondary ...
	Secondary KeyType = "Secondary"
)

// PossibleKeyTypeValues returns an array of possible values for the KeyType const type.
func PossibleKeyTypeValues() []KeyType {
	return []KeyType{Primary, Secondary}
}

// LearningRateScheduler enumerates the values for learning rate scheduler.
type LearningRateScheduler string

const (
	// LearningRateSchedulerNone No learning rate scheduler selected.
	LearningRateSchedulerNone LearningRateScheduler = "None"
	// LearningRateSchedulerStep Step learning rate scheduler.
	LearningRateSchedulerStep LearningRateScheduler = "Step"
	// LearningRateSchedulerWarmupCosine Cosine Annealing With Warmup.
	LearningRateSchedulerWarmupCosine LearningRateScheduler = "WarmupCosine"
)

// PossibleLearningRateSchedulerValues returns an array of possible values for the LearningRateScheduler const type.
func PossibleLearningRateSchedulerValues() []LearningRateScheduler {
	return []LearningRateScheduler{LearningRateSchedulerNone, LearningRateSchedulerStep, LearningRateSchedulerWarmupCosine}
}

// ListViewType enumerates the values for list view type.
type ListViewType string

const (
	// ActiveOnly ...
	ActiveOnly ListViewType = "ActiveOnly"
	// All ...
	All ListViewType = "All"
	// ArchivedOnly ...
	ArchivedOnly ListViewType = "ArchivedOnly"
)

// PossibleListViewTypeValues returns an array of possible values for the ListViewType const type.
func PossibleListViewTypeValues() []ListViewType {
	return []ListViewType{ActiveOnly, All, ArchivedOnly}
}

// LoadBalancerType enumerates the values for load balancer type.
type LoadBalancerType string

const (
	// InternalLoadBalancer ...
	InternalLoadBalancer LoadBalancerType = "InternalLoadBalancer"
	// PublicIP ...
	PublicIP LoadBalancerType = "PublicIp"
)

// PossibleLoadBalancerTypeValues returns an array of possible values for the LoadBalancerType const type.
func PossibleLoadBalancerTypeValues() []LoadBalancerType {
	return []LoadBalancerType{InternalLoadBalancer, PublicIP}
}

// LogVerbosity enumerates the values for log verbosity.
type LogVerbosity string

const (
	// LogVerbosityCritical Only critical statements logged.
	LogVerbosityCritical LogVerbosity = "Critical"
	// LogVerbosityDebug Debug and above log statements logged.
	LogVerbosityDebug LogVerbosity = "Debug"
	// LogVerbosityError Error and above log statements logged.
	LogVerbosityError LogVerbosity = "Error"
	// LogVerbosityInfo Info and above log statements logged.
	LogVerbosityInfo LogVerbosity = "Info"
	// LogVerbosityNotSet No logs emitted.
	LogVerbosityNotSet LogVerbosity = "NotSet"
	// LogVerbosityWarning Warning and above log statements logged.
	LogVerbosityWarning LogVerbosity = "Warning"
)

// PossibleLogVerbosityValues returns an array of possible values for the LogVerbosity const type.
func PossibleLogVerbosityValues() []LogVerbosity {
	return []LogVerbosity{LogVerbosityCritical, LogVerbosityDebug, LogVerbosityError, LogVerbosityInfo, LogVerbosityNotSet, LogVerbosityWarning}
}

// ManagedServiceIdentityType enumerates the values for managed service identity type.
type ManagedServiceIdentityType string

const (
	// ManagedServiceIdentityTypeNone ...
	ManagedServiceIdentityTypeNone ManagedServiceIdentityType = "None"
	// ManagedServiceIdentityTypeSystemAssigned ...
	ManagedServiceIdentityTypeSystemAssigned ManagedServiceIdentityType = "SystemAssigned"
	// ManagedServiceIdentityTypeSystemAssignedUserAssigned ...
	ManagedServiceIdentityTypeSystemAssignedUserAssigned ManagedServiceIdentityType = "SystemAssigned,UserAssigned"
	// ManagedServiceIdentityTypeUserAssigned ...
	ManagedServiceIdentityTypeUserAssigned ManagedServiceIdentityType = "UserAssigned"
)

// PossibleManagedServiceIdentityTypeValues returns an array of possible values for the ManagedServiceIdentityType const type.
func PossibleManagedServiceIdentityTypeValues() []ManagedServiceIdentityType {
	return []ManagedServiceIdentityType{ManagedServiceIdentityTypeNone, ManagedServiceIdentityTypeSystemAssigned, ManagedServiceIdentityTypeSystemAssignedUserAssigned, ManagedServiceIdentityTypeUserAssigned}
}

// Mode enumerates the values for mode.
type Mode string

const (
	// ModeAuto ...
	ModeAuto Mode = "Auto"
	// ModeCustom ...
	ModeCustom Mode = "Custom"
	// ModeNCrossValidations ...
	ModeNCrossValidations Mode = "NCrossValidations"
)

// PossibleModeValues returns an array of possible values for the Mode const type.
func PossibleModeValues() []Mode {
	return []Mode{ModeAuto, ModeCustom, ModeNCrossValidations}
}

// ModeBasicForecastHorizon enumerates the values for mode basic forecast horizon.
type ModeBasicForecastHorizon string

const (
	// ModeBasicForecastHorizonModeAuto ...
	ModeBasicForecastHorizonModeAuto ModeBasicForecastHorizon = "Auto"
	// ModeBasicForecastHorizonModeCustom ...
	ModeBasicForecastHorizonModeCustom ModeBasicForecastHorizon = "Custom"
	// ModeBasicForecastHorizonModeForecastHorizon ...
	ModeBasicForecastHorizonModeForecastHorizon ModeBasicForecastHorizon = "ForecastHorizon"
)

// PossibleModeBasicForecastHorizonValues returns an array of possible values for the ModeBasicForecastHorizon const type.
func PossibleModeBasicForecastHorizonValues() []ModeBasicForecastHorizon {
	return []ModeBasicForecastHorizon{ModeBasicForecastHorizonModeAuto, ModeBasicForecastHorizonModeCustom, ModeBasicForecastHorizonModeForecastHorizon}
}

// ModeBasicSeasonality enumerates the values for mode basic seasonality.
type ModeBasicSeasonality string

const (
	// ModeBasicSeasonalityModeAuto ...
	ModeBasicSeasonalityModeAuto ModeBasicSeasonality = "Auto"
	// ModeBasicSeasonalityModeCustom ...
	ModeBasicSeasonalityModeCustom ModeBasicSeasonality = "Custom"
	// ModeBasicSeasonalityModeSeasonality ...
	ModeBasicSeasonalityModeSeasonality ModeBasicSeasonality = "Seasonality"
)

// PossibleModeBasicSeasonalityValues returns an array of possible values for the ModeBasicSeasonality const type.
func PossibleModeBasicSeasonalityValues() []ModeBasicSeasonality {
	return []ModeBasicSeasonality{ModeBasicSeasonalityModeAuto, ModeBasicSeasonalityModeCustom, ModeBasicSeasonalityModeSeasonality}
}

// ModeBasicTargetLags enumerates the values for mode basic target lags.
type ModeBasicTargetLags string

const (
	// ModeBasicTargetLagsModeAuto ...
	ModeBasicTargetLagsModeAuto ModeBasicTargetLags = "Auto"
	// ModeBasicTargetLagsModeCustom ...
	ModeBasicTargetLagsModeCustom ModeBasicTargetLags = "Custom"
	// ModeBasicTargetLagsModeTargetLags ...
	ModeBasicTargetLagsModeTargetLags ModeBasicTargetLags = "TargetLags"
)

// PossibleModeBasicTargetLagsValues returns an array of possible values for the ModeBasicTargetLags const type.
func PossibleModeBasicTargetLagsValues() []ModeBasicTargetLags {
	return []ModeBasicTargetLags{ModeBasicTargetLagsModeAuto, ModeBasicTargetLagsModeCustom, ModeBasicTargetLagsModeTargetLags}
}

// ModeBasicTargetRollingWindowSize enumerates the values for mode basic target rolling window size.
type ModeBasicTargetRollingWindowSize string

const (
	// ModeBasicTargetRollingWindowSizeModeAuto ...
	ModeBasicTargetRollingWindowSizeModeAuto ModeBasicTargetRollingWindowSize = "Auto"
	// ModeBasicTargetRollingWindowSizeModeCustom ...
	ModeBasicTargetRollingWindowSizeModeCustom ModeBasicTargetRollingWindowSize = "Custom"
	// ModeBasicTargetRollingWindowSizeModeTargetRollingWindowSize ...
	ModeBasicTargetRollingWindowSizeModeTargetRollingWindowSize ModeBasicTargetRollingWindowSize = "TargetRollingWindowSize"
)

// PossibleModeBasicTargetRollingWindowSizeValues returns an array of possible values for the ModeBasicTargetRollingWindowSize const type.
func PossibleModeBasicTargetRollingWindowSizeValues() []ModeBasicTargetRollingWindowSize {
	return []ModeBasicTargetRollingWindowSize{ModeBasicTargetRollingWindowSizeModeAuto, ModeBasicTargetRollingWindowSizeModeCustom, ModeBasicTargetRollingWindowSizeModeTargetRollingWindowSize}
}

// ModelSize enumerates the values for model size.
type ModelSize string

const (
	// ModelSizeExtraLarge Extra large size.
	ModelSizeExtraLarge ModelSize = "ExtraLarge"
	// ModelSizeLarge Large size.
	ModelSizeLarge ModelSize = "Large"
	// ModelSizeMedium Medium size.
	ModelSizeMedium ModelSize = "Medium"
	// ModelSizeNone No value selected.
	ModelSizeNone ModelSize = "None"
	// ModelSizeSmall Small size.
	ModelSizeSmall ModelSize = "Small"
)

// PossibleModelSizeValues returns an array of possible values for the ModelSize const type.
func PossibleModelSizeValues() []ModelSize {
	return []ModelSize{ModelSizeExtraLarge, ModelSizeLarge, ModelSizeMedium, ModelSizeNone, ModelSizeSmall}
}

// ModelType enumerates the values for model type.
type ModelType string

const (
	// CustomModel ...
	CustomModel ModelType = "CustomModel"
	// MLFlowModel ...
	MLFlowModel ModelType = "MLFlowModel"
	// TritonModel ...
	TritonModel ModelType = "TritonModel"
)

// PossibleModelTypeValues returns an array of possible values for the ModelType const type.
func PossibleModelTypeValues() []ModelType {
	return []ModelType{CustomModel, MLFlowModel, TritonModel}
}

// MountAction enumerates the values for mount action.
type MountAction string

const (
	// Mount ...
	Mount MountAction = "Mount"
	// Unmount ...
	Unmount MountAction = "Unmount"
)

// PossibleMountActionValues returns an array of possible values for the MountAction const type.
func PossibleMountActionValues() []MountAction {
	return []MountAction{Mount, Unmount}
}

// MountState enumerates the values for mount state.
type MountState string

const (
	// Mounted ...
	Mounted MountState = "Mounted"
	// MountFailed ...
	MountFailed MountState = "MountFailed"
	// MountRequested ...
	MountRequested MountState = "MountRequested"
	// Unmounted ...
	Unmounted MountState = "Unmounted"
	// UnmountFailed ...
	UnmountFailed MountState = "UnmountFailed"
	// UnmountRequested ...
	UnmountRequested MountState = "UnmountRequested"
)

// PossibleMountStateValues returns an array of possible values for the MountState const type.
func PossibleMountStateValues() []MountState {
	return []MountState{Mounted, MountFailed, MountRequested, Unmounted, UnmountFailed, UnmountRequested}
}

// NCrossValidationsMode enumerates the values for n cross validations mode.
type NCrossValidationsMode string

const (
	// NCrossValidationsModeAuto Determine N-Cross validations value automatically. Supported only for
	// 'Forecasting' AutoML task.
	NCrossValidationsModeAuto NCrossValidationsMode = "Auto"
	// NCrossValidationsModeCustom Use custom N-Cross validations value.
	NCrossValidationsModeCustom NCrossValidationsMode = "Custom"
)

// PossibleNCrossValidationsModeValues returns an array of possible values for the NCrossValidationsMode const type.
func PossibleNCrossValidationsModeValues() []NCrossValidationsMode {
	return []NCrossValidationsMode{NCrossValidationsModeAuto, NCrossValidationsModeCustom}
}

// Network enumerates the values for network.
type Network string

const (
	// Bridge ...
	Bridge Network = "Bridge"
	// Host ...
	Host Network = "Host"
)

// PossibleNetworkValues returns an array of possible values for the Network const type.
func PossibleNetworkValues() []Network {
	return []Network{Bridge, Host}
}

// NodeState enumerates the values for node state.
type NodeState string

const (
	// NodeStateIdle ...
	NodeStateIdle NodeState = "idle"
	// NodeStateLeaving ...
	NodeStateLeaving NodeState = "leaving"
	// NodeStatePreempted ...
	NodeStatePreempted NodeState = "preempted"
	// NodeStatePreparing ...
	NodeStatePreparing NodeState = "preparing"
	// NodeStateRunning ...
	NodeStateRunning NodeState = "running"
	// NodeStateUnusable ...
	NodeStateUnusable NodeState = "unusable"
)

// PossibleNodeStateValues returns an array of possible values for the NodeState const type.
func PossibleNodeStateValues() []NodeState {
	return []NodeState{NodeStateIdle, NodeStateLeaving, NodeStatePreempted, NodeStatePreparing, NodeStateRunning, NodeStateUnusable}
}

// ObjectDetectionPrimaryMetrics enumerates the values for object detection primary metrics.
type ObjectDetectionPrimaryMetrics string

const (
	// ObjectDetectionPrimaryMetricsMeanAveragePrecision Mean Average Precision (MAP) is the average of AP
	// (Average Precision).
	// AP is calculated for each class and averaged to get the MAP.
	ObjectDetectionPrimaryMetricsMeanAveragePrecision ObjectDetectionPrimaryMetrics = "MeanAveragePrecision"
)

// PossibleObjectDetectionPrimaryMetricsValues returns an array of possible values for the ObjectDetectionPrimaryMetrics const type.
func PossibleObjectDetectionPrimaryMetricsValues() []ObjectDetectionPrimaryMetrics {
	return []ObjectDetectionPrimaryMetrics{ObjectDetectionPrimaryMetricsMeanAveragePrecision}
}

// OperatingSystemType enumerates the values for operating system type.
type OperatingSystemType string

const (
	// Linux ...
	Linux OperatingSystemType = "Linux"
	// Windows ...
	Windows OperatingSystemType = "Windows"
)

// PossibleOperatingSystemTypeValues returns an array of possible values for the OperatingSystemType const type.
func PossibleOperatingSystemTypeValues() []OperatingSystemType {
	return []OperatingSystemType{Linux, Windows}
}

// OperationName enumerates the values for operation name.
type OperationName string

const (
	// OperationNameCreate ...
	OperationNameCreate OperationName = "Create"
	// OperationNameDelete ...
	OperationNameDelete OperationName = "Delete"
	// OperationNameReimage ...
	OperationNameReimage OperationName = "Reimage"
	// OperationNameRestart ...
	OperationNameRestart OperationName = "Restart"
	// OperationNameStart ...
	OperationNameStart OperationName = "Start"
	// OperationNameStop ...
	OperationNameStop OperationName = "Stop"
)

// PossibleOperationNameValues returns an array of possible values for the OperationName const type.
func PossibleOperationNameValues() []OperationName {
	return []OperationName{OperationNameCreate, OperationNameDelete, OperationNameReimage, OperationNameRestart, OperationNameStart, OperationNameStop}
}

// OperationStatus enumerates the values for operation status.
type OperationStatus string

const (
	// OperationStatusCreateFailed ...
	OperationStatusCreateFailed OperationStatus = "CreateFailed"
	// OperationStatusDeleteFailed ...
	OperationStatusDeleteFailed OperationStatus = "DeleteFailed"
	// OperationStatusInProgress ...
	OperationStatusInProgress OperationStatus = "InProgress"
	// OperationStatusReimageFailed ...
	OperationStatusReimageFailed OperationStatus = "ReimageFailed"
	// OperationStatusRestartFailed ...
	OperationStatusRestartFailed OperationStatus = "RestartFailed"
	// OperationStatusStartFailed ...
	OperationStatusStartFailed OperationStatus = "StartFailed"
	// OperationStatusStopFailed ...
	OperationStatusStopFailed OperationStatus = "StopFailed"
	// OperationStatusSucceeded ...
	OperationStatusSucceeded OperationStatus = "Succeeded"
)

// PossibleOperationStatusValues returns an array of possible values for the OperationStatus const type.
func PossibleOperationStatusValues() []OperationStatus {
	return []OperationStatus{OperationStatusCreateFailed, OperationStatusDeleteFailed, OperationStatusInProgress, OperationStatusReimageFailed, OperationStatusRestartFailed, OperationStatusStartFailed, OperationStatusStopFailed, OperationStatusSucceeded}
}

// OperationTrigger enumerates the values for operation trigger.
type OperationTrigger string

const (
	// IdleShutdown ...
	IdleShutdown OperationTrigger = "IdleShutdown"
	// Schedule ...
	Schedule OperationTrigger = "Schedule"
	// User ...
	User OperationTrigger = "User"
)

// PossibleOperationTriggerValues returns an array of possible values for the OperationTrigger const type.
func PossibleOperationTriggerValues() []OperationTrigger {
	return []OperationTrigger{IdleShutdown, Schedule, User}
}

// OrderString enumerates the values for order string.
type OrderString string

const (
	// CreatedAtAsc ...
	CreatedAtAsc OrderString = "CreatedAtAsc"
	// CreatedAtDesc ...
	CreatedAtDesc OrderString = "CreatedAtDesc"
	// UpdatedAtAsc ...
	UpdatedAtAsc OrderString = "UpdatedAtAsc"
	// UpdatedAtDesc ...
	UpdatedAtDesc OrderString = "UpdatedAtDesc"
)

// PossibleOrderStringValues returns an array of possible values for the OrderString const type.
func PossibleOrderStringValues() []OrderString {
	return []OrderString{CreatedAtAsc, CreatedAtDesc, UpdatedAtAsc, UpdatedAtDesc}
}

// OsType enumerates the values for os type.
type OsType string

const (
	// OsTypeLinux ...
	OsTypeLinux OsType = "Linux"
	// OsTypeWindows ...
	OsTypeWindows OsType = "Windows"
)

// PossibleOsTypeValues returns an array of possible values for the OsType const type.
func PossibleOsTypeValues() []OsType {
	return []OsType{OsTypeLinux, OsTypeWindows}
}

// OutputDeliveryMode enumerates the values for output delivery mode.
type OutputDeliveryMode string

const (
	// OutputDeliveryModeReadWriteMount ...
	OutputDeliveryModeReadWriteMount OutputDeliveryMode = "ReadWriteMount"
	// OutputDeliveryModeUpload ...
	OutputDeliveryModeUpload OutputDeliveryMode = "Upload"
)

// PossibleOutputDeliveryModeValues returns an array of possible values for the OutputDeliveryMode const type.
func PossibleOutputDeliveryModeValues() []OutputDeliveryMode {
	return []OutputDeliveryMode{OutputDeliveryModeReadWriteMount, OutputDeliveryModeUpload}
}

// PolicyType enumerates the values for policy type.
type PolicyType string

const (
	// PolicyTypeBandit ...
	PolicyTypeBandit PolicyType = "Bandit"
	// PolicyTypeEarlyTerminationPolicy ...
	PolicyTypeEarlyTerminationPolicy PolicyType = "EarlyTerminationPolicy"
	// PolicyTypeMedianStopping ...
	PolicyTypeMedianStopping PolicyType = "MedianStopping"
	// PolicyTypeTruncationSelection ...
	PolicyTypeTruncationSelection PolicyType = "TruncationSelection"
)

// PossiblePolicyTypeValues returns an array of possible values for the PolicyType const type.
func PossiblePolicyTypeValues() []PolicyType {
	return []PolicyType{PolicyTypeBandit, PolicyTypeEarlyTerminationPolicy, PolicyTypeMedianStopping, PolicyTypeTruncationSelection}
}

// PrivateEndpointConnectionProvisioningState enumerates the values for private endpoint connection
// provisioning state.
type PrivateEndpointConnectionProvisioningState string

const (
	// PrivateEndpointConnectionProvisioningStateCreating ...
	PrivateEndpointConnectionProvisioningStateCreating PrivateEndpointConnectionProvisioningState = "Creating"
	// PrivateEndpointConnectionProvisioningStateDeleting ...
	PrivateEndpointConnectionProvisioningStateDeleting PrivateEndpointConnectionProvisioningState = "Deleting"
	// PrivateEndpointConnectionProvisioningStateFailed ...
	PrivateEndpointConnectionProvisioningStateFailed PrivateEndpointConnectionProvisioningState = "Failed"
	// PrivateEndpointConnectionProvisioningStateSucceeded ...
	PrivateEndpointConnectionProvisioningStateSucceeded PrivateEndpointConnectionProvisioningState = "Succeeded"
)

// PossiblePrivateEndpointConnectionProvisioningStateValues returns an array of possible values for the PrivateEndpointConnectionProvisioningState const type.
func PossiblePrivateEndpointConnectionProvisioningStateValues() []PrivateEndpointConnectionProvisioningState {
	return []PrivateEndpointConnectionProvisioningState{PrivateEndpointConnectionProvisioningStateCreating, PrivateEndpointConnectionProvisioningStateDeleting, PrivateEndpointConnectionProvisioningStateFailed, PrivateEndpointConnectionProvisioningStateSucceeded}
}

// PrivateEndpointServiceConnectionStatus enumerates the values for private endpoint service connection status.
type PrivateEndpointServiceConnectionStatus string

const (
	// Approved ...
	Approved PrivateEndpointServiceConnectionStatus = "Approved"
	// Disconnected ...
	Disconnected PrivateEndpointServiceConnectionStatus = "Disconnected"
	// Pending ...
	Pending PrivateEndpointServiceConnectionStatus = "Pending"
	// Rejected ...
	Rejected PrivateEndpointServiceConnectionStatus = "Rejected"
	// Timeout ...
	Timeout PrivateEndpointServiceConnectionStatus = "Timeout"
)

// PossiblePrivateEndpointServiceConnectionStatusValues returns an array of possible values for the PrivateEndpointServiceConnectionStatus const type.
func PossiblePrivateEndpointServiceConnectionStatusValues() []PrivateEndpointServiceConnectionStatus {
	return []PrivateEndpointServiceConnectionStatus{Approved, Disconnected, Pending, Rejected, Timeout}
}

// ProvisioningState enumerates the values for provisioning state.
type ProvisioningState string

const (
	// ProvisioningStateCanceled ...
	ProvisioningStateCanceled ProvisioningState = "Canceled"
	// ProvisioningStateCreating ...
	ProvisioningStateCreating ProvisioningState = "Creating"
	// ProvisioningStateDeleting ...
	ProvisioningStateDeleting ProvisioningState = "Deleting"
	// ProvisioningStateFailed ...
	ProvisioningStateFailed ProvisioningState = "Failed"
	// ProvisioningStateSucceeded ...
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
	// ProvisioningStateUnknown ...
	ProvisioningStateUnknown ProvisioningState = "Unknown"
	// ProvisioningStateUpdating ...
	ProvisioningStateUpdating ProvisioningState = "Updating"
)

// PossibleProvisioningStateValues returns an array of possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{ProvisioningStateCanceled, ProvisioningStateCreating, ProvisioningStateDeleting, ProvisioningStateFailed, ProvisioningStateSucceeded, ProvisioningStateUnknown, ProvisioningStateUpdating}
}

// ProvisioningStatus enumerates the values for provisioning status.
type ProvisioningStatus string

const (
	// Completed ...
	Completed ProvisioningStatus = "Completed"
	// Failed ...
	Failed ProvisioningStatus = "Failed"
	// Provisioning ...
	Provisioning ProvisioningStatus = "Provisioning"
)

// PossibleProvisioningStatusValues returns an array of possible values for the ProvisioningStatus const type.
func PossibleProvisioningStatusValues() []ProvisioningStatus {
	return []ProvisioningStatus{Completed, Failed, Provisioning}
}

// PublicNetworkAccess enumerates the values for public network access.
type PublicNetworkAccess string

const (
	// PublicNetworkAccessDisabled ...
	PublicNetworkAccessDisabled PublicNetworkAccess = "Disabled"
	// PublicNetworkAccessEnabled ...
	PublicNetworkAccessEnabled PublicNetworkAccess = "Enabled"
)

// PossiblePublicNetworkAccessValues returns an array of possible values for the PublicNetworkAccess const type.
func PossiblePublicNetworkAccessValues() []PublicNetworkAccess {
	return []PublicNetworkAccess{PublicNetworkAccessDisabled, PublicNetworkAccessEnabled}
}

// PublicNetworkAccessType enumerates the values for public network access type.
type PublicNetworkAccessType string

const (
	// PublicNetworkAccessTypeDisabled ...
	PublicNetworkAccessTypeDisabled PublicNetworkAccessType = "Disabled"
	// PublicNetworkAccessTypeEnabled ...
	PublicNetworkAccessTypeEnabled PublicNetworkAccessType = "Enabled"
)

// PossiblePublicNetworkAccessTypeValues returns an array of possible values for the PublicNetworkAccessType const type.
func PossiblePublicNetworkAccessTypeValues() []PublicNetworkAccessType {
	return []PublicNetworkAccessType{PublicNetworkAccessTypeDisabled, PublicNetworkAccessTypeEnabled}
}

// QuotaUnit enumerates the values for quota unit.
type QuotaUnit string

const (
	// Count ...
	Count QuotaUnit = "Count"
)

// PossibleQuotaUnitValues returns an array of possible values for the QuotaUnit const type.
func PossibleQuotaUnitValues() []QuotaUnit {
	return []QuotaUnit{Count}
}

// RandomSamplingAlgorithmRule enumerates the values for random sampling algorithm rule.
type RandomSamplingAlgorithmRule string

const (
	// Random ...
	Random RandomSamplingAlgorithmRule = "Random"
	// Sobol ...
	Sobol RandomSamplingAlgorithmRule = "Sobol"
)

// PossibleRandomSamplingAlgorithmRuleValues returns an array of possible values for the RandomSamplingAlgorithmRule const type.
func PossibleRandomSamplingAlgorithmRuleValues() []RandomSamplingAlgorithmRule {
	return []RandomSamplingAlgorithmRule{Random, Sobol}
}

// RecurrenceFrequency enumerates the values for recurrence frequency.
type RecurrenceFrequency string

const (
	// Day Day frequency
	Day RecurrenceFrequency = "Day"
	// Hour Hour frequency
	Hour RecurrenceFrequency = "Hour"
	// Minute Minute frequency
	Minute RecurrenceFrequency = "Minute"
	// Month Month frequency
	Month RecurrenceFrequency = "Month"
	// Week Week frequency
	Week RecurrenceFrequency = "Week"
)

// PossibleRecurrenceFrequencyValues returns an array of possible values for the RecurrenceFrequency const type.
func PossibleRecurrenceFrequencyValues() []RecurrenceFrequency {
	return []RecurrenceFrequency{Day, Hour, Minute, Month, Week}
}

// ReferenceType enumerates the values for reference type.
type ReferenceType string

const (
	// DataPath ...
	DataPath ReferenceType = "DataPath"
	// ID ...
	ID ReferenceType = "Id"
	// OutputPath ...
	OutputPath ReferenceType = "OutputPath"
)

// PossibleReferenceTypeValues returns an array of possible values for the ReferenceType const type.
func PossibleReferenceTypeValues() []ReferenceType {
	return []ReferenceType{DataPath, ID, OutputPath}
}

// ReferenceTypeBasicAssetReferenceBase enumerates the values for reference type basic asset reference base.
type ReferenceTypeBasicAssetReferenceBase string

const (
	// ReferenceTypeAssetReferenceBase ...
	ReferenceTypeAssetReferenceBase ReferenceTypeBasicAssetReferenceBase = "AssetReferenceBase"
	// ReferenceTypeDataPath ...
	ReferenceTypeDataPath ReferenceTypeBasicAssetReferenceBase = "DataPath"
	// ReferenceTypeID ...
	ReferenceTypeID ReferenceTypeBasicAssetReferenceBase = "Id"
	// ReferenceTypeOutputPath ...
	ReferenceTypeOutputPath ReferenceTypeBasicAssetReferenceBase = "OutputPath"
)

// PossibleReferenceTypeBasicAssetReferenceBaseValues returns an array of possible values for the ReferenceTypeBasicAssetReferenceBase const type.
func PossibleReferenceTypeBasicAssetReferenceBaseValues() []ReferenceTypeBasicAssetReferenceBase {
	return []ReferenceTypeBasicAssetReferenceBase{ReferenceTypeAssetReferenceBase, ReferenceTypeDataPath, ReferenceTypeID, ReferenceTypeOutputPath}
}

// ReferenceTypeBasicPartialAssetReferenceBase enumerates the values for reference type basic partial asset
// reference base.
type ReferenceTypeBasicPartialAssetReferenceBase string

const (
	// ReferenceTypeBasicPartialAssetReferenceBaseReferenceTypeDataPath ...
	ReferenceTypeBasicPartialAssetReferenceBaseReferenceTypeDataPath ReferenceTypeBasicPartialAssetReferenceBase = "DataPath"
	// ReferenceTypeBasicPartialAssetReferenceBaseReferenceTypeID ...
	ReferenceTypeBasicPartialAssetReferenceBaseReferenceTypeID ReferenceTypeBasicPartialAssetReferenceBase = "Id"
	// ReferenceTypeBasicPartialAssetReferenceBaseReferenceTypeOutputPath ...
	ReferenceTypeBasicPartialAssetReferenceBaseReferenceTypeOutputPath ReferenceTypeBasicPartialAssetReferenceBase = "OutputPath"
	// ReferenceTypeBasicPartialAssetReferenceBaseReferenceTypePartialAssetReferenceBase ...
	ReferenceTypeBasicPartialAssetReferenceBaseReferenceTypePartialAssetReferenceBase ReferenceTypeBasicPartialAssetReferenceBase = "PartialAssetReferenceBase"
)

// PossibleReferenceTypeBasicPartialAssetReferenceBaseValues returns an array of possible values for the ReferenceTypeBasicPartialAssetReferenceBase const type.
func PossibleReferenceTypeBasicPartialAssetReferenceBaseValues() []ReferenceTypeBasicPartialAssetReferenceBase {
	return []ReferenceTypeBasicPartialAssetReferenceBase{ReferenceTypeBasicPartialAssetReferenceBaseReferenceTypeDataPath, ReferenceTypeBasicPartialAssetReferenceBaseReferenceTypeID, ReferenceTypeBasicPartialAssetReferenceBaseReferenceTypeOutputPath, ReferenceTypeBasicPartialAssetReferenceBaseReferenceTypePartialAssetReferenceBase}
}

// RegressionModels enumerates the values for regression models.
type RegressionModels string

const (
	// RegressionModelsDecisionTree Decision Trees are a non-parametric supervised learning method used for
	// both classification and regression tasks.
	// The goal is to create a model that predicts the value of a target variable by learning simple decision
	// rules inferred from the data features.
	RegressionModelsDecisionTree RegressionModels = "DecisionTree"
	// RegressionModelsElasticNet Elastic net is a popular type of regularized linear regression that combines
	// two popular penalties, specifically the L1 and L2 penalty functions.
	RegressionModelsElasticNet RegressionModels = "ElasticNet"
	// RegressionModelsExtremeRandomTrees Extreme Trees is an ensemble machine learning algorithm that combines
	// the predictions from many decision trees. It is related to the widely used random forest algorithm.
	RegressionModelsExtremeRandomTrees RegressionModels = "ExtremeRandomTrees"
	// RegressionModelsGradientBoosting The technique of transiting week learners into a strong learner is
	// called Boosting. The gradient boosting algorithm process works on this theory of execution.
	RegressionModelsGradientBoosting RegressionModels = "GradientBoosting"
	// RegressionModelsKNN K-nearest neighbors (KNN) algorithm uses 'feature similarity' to predict the values
	// of new datapoints
	// which further means that the new data point will be assigned a value based on how closely it matches the
	// points in the training set.
	RegressionModelsKNN RegressionModels = "KNN"
	// RegressionModelsLassoLars Lasso model fit with Least Angle Regression a.k.a. Lars. It is a Linear Model
	// trained with an L1 prior as regularizer.
	RegressionModelsLassoLars RegressionModels = "LassoLars"
	// RegressionModelsLightGBM LightGBM is a gradient boosting framework that uses tree based learning
	// algorithms.
	RegressionModelsLightGBM RegressionModels = "LightGBM"
	// RegressionModelsRandomForest Random forest is a supervised learning algorithm.
	// The "forest" it builds, is an ensemble of decision trees, usually trained with the “bagging” method.
	// The general idea of the bagging method is that a combination of learning models increases the overall
	// result.
	RegressionModelsRandomForest RegressionModels = "RandomForest"
	// RegressionModelsSGD SGD: Stochastic gradient descent is an optimization algorithm often used in machine
	// learning applications
	// to find the model parameters that correspond to the best fit between predicted and actual outputs.
	// It's an inexact but powerful technique.
	RegressionModelsSGD RegressionModels = "SGD"
	// RegressionModelsXGBoostRegressor XGBoostRegressor: Extreme Gradient Boosting Regressor is a supervised
	// machine learning model using ensemble of base learners.
	RegressionModelsXGBoostRegressor RegressionModels = "XGBoostRegressor"
)

// PossibleRegressionModelsValues returns an array of possible values for the RegressionModels const type.
func PossibleRegressionModelsValues() []RegressionModels {
	return []RegressionModels{RegressionModelsDecisionTree, RegressionModelsElasticNet, RegressionModelsExtremeRandomTrees, RegressionModelsGradientBoosting, RegressionModelsKNN, RegressionModelsLassoLars, RegressionModelsLightGBM, RegressionModelsRandomForest, RegressionModelsSGD, RegressionModelsXGBoostRegressor}
}

// RegressionPrimaryMetrics enumerates the values for regression primary metrics.
type RegressionPrimaryMetrics string

const (
	// RegressionPrimaryMetricsNormalizedMeanAbsoluteError The Normalized Mean Absolute Error (NMAE) is a
	// validation metric to compare the Mean Absolute Error (MAE) of (time) series with different scales.
	RegressionPrimaryMetricsNormalizedMeanAbsoluteError RegressionPrimaryMetrics = "NormalizedMeanAbsoluteError"
	// RegressionPrimaryMetricsNormalizedRootMeanSquaredError The Normalized Root Mean Squared Error (NRMSE)
	// the RMSE facilitates the comparison between models with different scales.
	RegressionPrimaryMetricsNormalizedRootMeanSquaredError RegressionPrimaryMetrics = "NormalizedRootMeanSquaredError"
	// RegressionPrimaryMetricsR2Score The R2 score is one of the performance evaluation measures for
	// forecasting-based machine learning models.
	RegressionPrimaryMetricsR2Score RegressionPrimaryMetrics = "R2Score"
	// RegressionPrimaryMetricsSpearmanCorrelation The Spearman's rank coefficient of correlation is a
	// nonparametric measure of rank correlation.
	RegressionPrimaryMetricsSpearmanCorrelation RegressionPrimaryMetrics = "SpearmanCorrelation"
)

// PossibleRegressionPrimaryMetricsValues returns an array of possible values for the RegressionPrimaryMetrics const type.
func PossibleRegressionPrimaryMetricsValues() []RegressionPrimaryMetrics {
	return []RegressionPrimaryMetrics{RegressionPrimaryMetricsNormalizedMeanAbsoluteError, RegressionPrimaryMetricsNormalizedRootMeanSquaredError, RegressionPrimaryMetricsR2Score, RegressionPrimaryMetricsSpearmanCorrelation}
}

// RemoteLoginPortPublicAccess enumerates the values for remote login port public access.
type RemoteLoginPortPublicAccess string

const (
	// RemoteLoginPortPublicAccessDisabled ...
	RemoteLoginPortPublicAccessDisabled RemoteLoginPortPublicAccess = "Disabled"
	// RemoteLoginPortPublicAccessEnabled ...
	RemoteLoginPortPublicAccessEnabled RemoteLoginPortPublicAccess = "Enabled"
	// RemoteLoginPortPublicAccessNotSpecified ...
	RemoteLoginPortPublicAccessNotSpecified RemoteLoginPortPublicAccess = "NotSpecified"
)

// PossibleRemoteLoginPortPublicAccessValues returns an array of possible values for the RemoteLoginPortPublicAccess const type.
func PossibleRemoteLoginPortPublicAccessValues() []RemoteLoginPortPublicAccess {
	return []RemoteLoginPortPublicAccess{RemoteLoginPortPublicAccessDisabled, RemoteLoginPortPublicAccessEnabled, RemoteLoginPortPublicAccessNotSpecified}
}

// ResourceIdentityType enumerates the values for resource identity type.
type ResourceIdentityType string

const (
	// SystemAssigned ...
	SystemAssigned ResourceIdentityType = "SystemAssigned"
)

// PossibleResourceIdentityTypeValues returns an array of possible values for the ResourceIdentityType const type.
func PossibleResourceIdentityTypeValues() []ResourceIdentityType {
	return []ResourceIdentityType{SystemAssigned}
}

// SamplingAlgorithmType enumerates the values for sampling algorithm type.
type SamplingAlgorithmType string

const (
	// SamplingAlgorithmTypeBayesian ...
	SamplingAlgorithmTypeBayesian SamplingAlgorithmType = "Bayesian"
	// SamplingAlgorithmTypeGrid ...
	SamplingAlgorithmTypeGrid SamplingAlgorithmType = "Grid"
	// SamplingAlgorithmTypeRandom ...
	SamplingAlgorithmTypeRandom SamplingAlgorithmType = "Random"
)

// PossibleSamplingAlgorithmTypeValues returns an array of possible values for the SamplingAlgorithmType const type.
func PossibleSamplingAlgorithmTypeValues() []SamplingAlgorithmType {
	return []SamplingAlgorithmType{SamplingAlgorithmTypeBayesian, SamplingAlgorithmTypeGrid, SamplingAlgorithmTypeRandom}
}

// SamplingAlgorithmTypeBasicSamplingAlgorithm enumerates the values for sampling algorithm type basic sampling
// algorithm.
type SamplingAlgorithmTypeBasicSamplingAlgorithm string

const (
	// SamplingAlgorithmTypeBayesian1 ...
	SamplingAlgorithmTypeBayesian1 SamplingAlgorithmTypeBasicSamplingAlgorithm = "Bayesian"
	// SamplingAlgorithmTypeGrid1 ...
	SamplingAlgorithmTypeGrid1 SamplingAlgorithmTypeBasicSamplingAlgorithm = "Grid"
	// SamplingAlgorithmTypeRandom1 ...
	SamplingAlgorithmTypeRandom1 SamplingAlgorithmTypeBasicSamplingAlgorithm = "Random"
	// SamplingAlgorithmTypeSamplingAlgorithm ...
	SamplingAlgorithmTypeSamplingAlgorithm SamplingAlgorithmTypeBasicSamplingAlgorithm = "SamplingAlgorithm"
)

// PossibleSamplingAlgorithmTypeBasicSamplingAlgorithmValues returns an array of possible values for the SamplingAlgorithmTypeBasicSamplingAlgorithm const type.
func PossibleSamplingAlgorithmTypeBasicSamplingAlgorithmValues() []SamplingAlgorithmTypeBasicSamplingAlgorithm {
	return []SamplingAlgorithmTypeBasicSamplingAlgorithm{SamplingAlgorithmTypeBayesian1, SamplingAlgorithmTypeGrid1, SamplingAlgorithmTypeRandom1, SamplingAlgorithmTypeSamplingAlgorithm}
}

// ScaleType enumerates the values for scale type.
type ScaleType string

const (
	// Default ...
	Default ScaleType = "Default"
	// TargetUtilization ...
	TargetUtilization ScaleType = "TargetUtilization"
)

// PossibleScaleTypeValues returns an array of possible values for the ScaleType const type.
func PossibleScaleTypeValues() []ScaleType {
	return []ScaleType{Default, TargetUtilization}
}

// ScaleTypeBasicOnlineScaleSettings enumerates the values for scale type basic online scale settings.
type ScaleTypeBasicOnlineScaleSettings string

const (
	// ScaleTypeDefault ...
	ScaleTypeDefault ScaleTypeBasicOnlineScaleSettings = "Default"
	// ScaleTypeOnlineScaleSettings ...
	ScaleTypeOnlineScaleSettings ScaleTypeBasicOnlineScaleSettings = "OnlineScaleSettings"
	// ScaleTypeTargetUtilization ...
	ScaleTypeTargetUtilization ScaleTypeBasicOnlineScaleSettings = "TargetUtilization"
)

// PossibleScaleTypeBasicOnlineScaleSettingsValues returns an array of possible values for the ScaleTypeBasicOnlineScaleSettings const type.
func PossibleScaleTypeBasicOnlineScaleSettingsValues() []ScaleTypeBasicOnlineScaleSettings {
	return []ScaleTypeBasicOnlineScaleSettings{ScaleTypeDefault, ScaleTypeOnlineScaleSettings, ScaleTypeTargetUtilization}
}

// ScheduleStatus enumerates the values for schedule status.
type ScheduleStatus string

const (
	// ScheduleStatusDisabled Schedule is disabled
	ScheduleStatusDisabled ScheduleStatus = "Disabled"
	// ScheduleStatusEnabled Schedule is enabled
	ScheduleStatusEnabled ScheduleStatus = "Enabled"
)

// PossibleScheduleStatusValues returns an array of possible values for the ScheduleStatus const type.
func PossibleScheduleStatusValues() []ScheduleStatus {
	return []ScheduleStatus{ScheduleStatusDisabled, ScheduleStatusEnabled}
}

// ScheduleType enumerates the values for schedule type.
type ScheduleType string

const (
	// Cron Cron schedule type
	Cron ScheduleType = "Cron"
	// Recurrence Recurrence schedule type
	Recurrence ScheduleType = "Recurrence"
)

// PossibleScheduleTypeValues returns an array of possible values for the ScheduleType const type.
func PossibleScheduleTypeValues() []ScheduleType {
	return []ScheduleType{Cron, Recurrence}
}

// ScheduleTypeBasicScheduleBase enumerates the values for schedule type basic schedule base.
type ScheduleTypeBasicScheduleBase string

const (
	// ScheduleTypeCron ...
	ScheduleTypeCron ScheduleTypeBasicScheduleBase = "Cron"
	// ScheduleTypeRecurrence ...
	ScheduleTypeRecurrence ScheduleTypeBasicScheduleBase = "Recurrence"
	// ScheduleTypeScheduleBase ...
	ScheduleTypeScheduleBase ScheduleTypeBasicScheduleBase = "ScheduleBase"
)

// PossibleScheduleTypeBasicScheduleBaseValues returns an array of possible values for the ScheduleTypeBasicScheduleBase const type.
func PossibleScheduleTypeBasicScheduleBaseValues() []ScheduleTypeBasicScheduleBase {
	return []ScheduleTypeBasicScheduleBase{ScheduleTypeCron, ScheduleTypeRecurrence, ScheduleTypeScheduleBase}
}

// SeasonalityMode enumerates the values for seasonality mode.
type SeasonalityMode string

const (
	// SeasonalityModeAuto Seasonality to be determined automatically.
	SeasonalityModeAuto SeasonalityMode = "Auto"
	// SeasonalityModeCustom Use the custom seasonality value.
	SeasonalityModeCustom SeasonalityMode = "Custom"
)

// PossibleSeasonalityModeValues returns an array of possible values for the SeasonalityMode const type.
func PossibleSeasonalityModeValues() []SeasonalityMode {
	return []SeasonalityMode{SeasonalityModeAuto, SeasonalityModeCustom}
}

// SecretsType enumerates the values for secrets type.
type SecretsType string

const (
	// AccountKey ...
	AccountKey SecretsType = "AccountKey"
	// Certificate ...
	Certificate SecretsType = "Certificate"
	// KerberosKeytab ...
	KerberosKeytab SecretsType = "KerberosKeytab"
	// KerberosPassword ...
	KerberosPassword SecretsType = "KerberosPassword"
	// Sas ...
	Sas SecretsType = "Sas"
	// ServicePrincipal ...
	ServicePrincipal SecretsType = "ServicePrincipal"
)

// PossibleSecretsTypeValues returns an array of possible values for the SecretsType const type.
func PossibleSecretsTypeValues() []SecretsType {
	return []SecretsType{AccountKey, Certificate, KerberosKeytab, KerberosPassword, Sas, ServicePrincipal}
}

// SecretsTypeBasicDatastoreSecrets enumerates the values for secrets type basic datastore secrets.
type SecretsTypeBasicDatastoreSecrets string

const (
	// SecretsTypeAccountKey ...
	SecretsTypeAccountKey SecretsTypeBasicDatastoreSecrets = "AccountKey"
	// SecretsTypeCertificate ...
	SecretsTypeCertificate SecretsTypeBasicDatastoreSecrets = "Certificate"
	// SecretsTypeDatastoreSecrets ...
	SecretsTypeDatastoreSecrets SecretsTypeBasicDatastoreSecrets = "DatastoreSecrets"
	// SecretsTypeKerberosKeytab ...
	SecretsTypeKerberosKeytab SecretsTypeBasicDatastoreSecrets = "KerberosKeytab"
	// SecretsTypeKerberosPassword ...
	SecretsTypeKerberosPassword SecretsTypeBasicDatastoreSecrets = "KerberosPassword"
	// SecretsTypeSas ...
	SecretsTypeSas SecretsTypeBasicDatastoreSecrets = "Sas"
	// SecretsTypeServicePrincipal ...
	SecretsTypeServicePrincipal SecretsTypeBasicDatastoreSecrets = "ServicePrincipal"
)

// PossibleSecretsTypeBasicDatastoreSecretsValues returns an array of possible values for the SecretsTypeBasicDatastoreSecrets const type.
func PossibleSecretsTypeBasicDatastoreSecretsValues() []SecretsTypeBasicDatastoreSecrets {
	return []SecretsTypeBasicDatastoreSecrets{SecretsTypeAccountKey, SecretsTypeCertificate, SecretsTypeDatastoreSecrets, SecretsTypeKerberosKeytab, SecretsTypeKerberosPassword, SecretsTypeSas, SecretsTypeServicePrincipal}
}

// ServiceDataAccessAuthIdentity enumerates the values for service data access auth identity.
type ServiceDataAccessAuthIdentity string

const (
	// ServiceDataAccessAuthIdentityNone Do not use any identity for service data access.
	ServiceDataAccessAuthIdentityNone ServiceDataAccessAuthIdentity = "None"
	// ServiceDataAccessAuthIdentityWorkspaceSystemAssignedIdentity Use the system assigned managed identity of
	// the Workspace to authenticate service data access.
	ServiceDataAccessAuthIdentityWorkspaceSystemAssignedIdentity ServiceDataAccessAuthIdentity = "WorkspaceSystemAssignedIdentity"
	// ServiceDataAccessAuthIdentityWorkspaceUserAssignedIdentity Use the user assigned managed identity of the
	// Workspace to authenticate service data access.
	ServiceDataAccessAuthIdentityWorkspaceUserAssignedIdentity ServiceDataAccessAuthIdentity = "WorkspaceUserAssignedIdentity"
)

// PossibleServiceDataAccessAuthIdentityValues returns an array of possible values for the ServiceDataAccessAuthIdentity const type.
func PossibleServiceDataAccessAuthIdentityValues() []ServiceDataAccessAuthIdentity {
	return []ServiceDataAccessAuthIdentity{ServiceDataAccessAuthIdentityNone, ServiceDataAccessAuthIdentityWorkspaceSystemAssignedIdentity, ServiceDataAccessAuthIdentityWorkspaceUserAssignedIdentity}
}

// ShortSeriesHandlingConfiguration enumerates the values for short series handling configuration.
type ShortSeriesHandlingConfiguration string

const (
	// ShortSeriesHandlingConfigurationAuto Short series will be padded if there are no long series, otherwise
	// short series will be dropped.
	ShortSeriesHandlingConfigurationAuto ShortSeriesHandlingConfiguration = "Auto"
	// ShortSeriesHandlingConfigurationDrop All the short series will be dropped.
	ShortSeriesHandlingConfigurationDrop ShortSeriesHandlingConfiguration = "Drop"
	// ShortSeriesHandlingConfigurationNone Represents no/null value.
	ShortSeriesHandlingConfigurationNone ShortSeriesHandlingConfiguration = "None"
	// ShortSeriesHandlingConfigurationPad All the short series will be padded.
	ShortSeriesHandlingConfigurationPad ShortSeriesHandlingConfiguration = "Pad"
)

// PossibleShortSeriesHandlingConfigurationValues returns an array of possible values for the ShortSeriesHandlingConfiguration const type.
func PossibleShortSeriesHandlingConfigurationValues() []ShortSeriesHandlingConfiguration {
	return []ShortSeriesHandlingConfiguration{ShortSeriesHandlingConfigurationAuto, ShortSeriesHandlingConfigurationDrop, ShortSeriesHandlingConfigurationNone, ShortSeriesHandlingConfigurationPad}
}

// SkuScaleType enumerates the values for sku scale type.
type SkuScaleType string

const (
	// SkuScaleTypeAutomatic Automatically scales node count.
	SkuScaleTypeAutomatic SkuScaleType = "Automatic"
	// SkuScaleTypeManual Node count scaled upon user request.
	SkuScaleTypeManual SkuScaleType = "Manual"
	// SkuScaleTypeNone Fixed set of nodes.
	SkuScaleTypeNone SkuScaleType = "None"
)

// PossibleSkuScaleTypeValues returns an array of possible values for the SkuScaleType const type.
func PossibleSkuScaleTypeValues() []SkuScaleType {
	return []SkuScaleType{SkuScaleTypeAutomatic, SkuScaleTypeManual, SkuScaleTypeNone}
}

// SkuTier enumerates the values for sku tier.
type SkuTier string

const (
	// Basic ...
	Basic SkuTier = "Basic"
	// Free ...
	Free SkuTier = "Free"
	// Premium ...
	Premium SkuTier = "Premium"
	// Standard ...
	Standard SkuTier = "Standard"
)

// PossibleSkuTierValues returns an array of possible values for the SkuTier const type.
func PossibleSkuTierValues() []SkuTier {
	return []SkuTier{Basic, Free, Premium, Standard}
}

// SourceType enumerates the values for source type.
type SourceType string

const (
	// SourceTypeDataset ...
	SourceTypeDataset SourceType = "Dataset"
	// SourceTypeDatastore ...
	SourceTypeDatastore SourceType = "Datastore"
	// SourceTypeURI ...
	SourceTypeURI SourceType = "URI"
)

// PossibleSourceTypeValues returns an array of possible values for the SourceType const type.
func PossibleSourceTypeValues() []SourceType {
	return []SourceType{SourceTypeDataset, SourceTypeDatastore, SourceTypeURI}
}

// SSHPublicAccess enumerates the values for ssh public access.
type SSHPublicAccess string

const (
	// SSHPublicAccessDisabled ...
	SSHPublicAccessDisabled SSHPublicAccess = "Disabled"
	// SSHPublicAccessEnabled ...
	SSHPublicAccessEnabled SSHPublicAccess = "Enabled"
)

// PossibleSSHPublicAccessValues returns an array of possible values for the SSHPublicAccess const type.
func PossibleSSHPublicAccessValues() []SSHPublicAccess {
	return []SSHPublicAccess{SSHPublicAccessDisabled, SSHPublicAccessEnabled}
}

// StackMetaLearnerType enumerates the values for stack meta learner type.
type StackMetaLearnerType string

const (
	// StackMetaLearnerTypeElasticNet Default meta-learners are LogisticRegression for regression task.
	StackMetaLearnerTypeElasticNet StackMetaLearnerType = "ElasticNet"
	// StackMetaLearnerTypeElasticNetCV Default meta-learners are LogisticRegression for regression task when
	// CV is on.
	StackMetaLearnerTypeElasticNetCV StackMetaLearnerType = "ElasticNetCV"
	// StackMetaLearnerTypeLightGBMClassifier ...
	StackMetaLearnerTypeLightGBMClassifier StackMetaLearnerType = "LightGBMClassifier"
	// StackMetaLearnerTypeLightGBMRegressor ...
	StackMetaLearnerTypeLightGBMRegressor StackMetaLearnerType = "LightGBMRegressor"
	// StackMetaLearnerTypeLinearRegression ...
	StackMetaLearnerTypeLinearRegression StackMetaLearnerType = "LinearRegression"
	// StackMetaLearnerTypeLogisticRegression Default meta-learners are LogisticRegression for classification
	// tasks.
	StackMetaLearnerTypeLogisticRegression StackMetaLearnerType = "LogisticRegression"
	// StackMetaLearnerTypeLogisticRegressionCV Default meta-learners are LogisticRegression for classification
	// task when CV is on.
	StackMetaLearnerTypeLogisticRegressionCV StackMetaLearnerType = "LogisticRegressionCV"
	// StackMetaLearnerTypeNone ...
	StackMetaLearnerTypeNone StackMetaLearnerType = "None"
)

// PossibleStackMetaLearnerTypeValues returns an array of possible values for the StackMetaLearnerType const type.
func PossibleStackMetaLearnerTypeValues() []StackMetaLearnerType {
	return []StackMetaLearnerType{StackMetaLearnerTypeElasticNet, StackMetaLearnerTypeElasticNetCV, StackMetaLearnerTypeLightGBMClassifier, StackMetaLearnerTypeLightGBMRegressor, StackMetaLearnerTypeLinearRegression, StackMetaLearnerTypeLogisticRegression, StackMetaLearnerTypeLogisticRegressionCV, StackMetaLearnerTypeNone}
}

// Status enumerates the values for status.
type Status string

const (
	// Failure ...
	Failure Status = "Failure"
	// InvalidQuotaBelowClusterMinimum ...
	InvalidQuotaBelowClusterMinimum Status = "InvalidQuotaBelowClusterMinimum"
	// InvalidQuotaExceedsSubscriptionLimit ...
	InvalidQuotaExceedsSubscriptionLimit Status = "InvalidQuotaExceedsSubscriptionLimit"
	// InvalidVMFamilyName ...
	InvalidVMFamilyName Status = "InvalidVMFamilyName"
	// OperationNotEnabledForRegion ...
	OperationNotEnabledForRegion Status = "OperationNotEnabledForRegion"
	// OperationNotSupportedForSku ...
	OperationNotSupportedForSku Status = "OperationNotSupportedForSku"
	// Success ...
	Success Status = "Success"
	// Undefined ...
	Undefined Status = "Undefined"
)

// PossibleStatusValues returns an array of possible values for the Status const type.
func PossibleStatusValues() []Status {
	return []Status{Failure, InvalidQuotaBelowClusterMinimum, InvalidQuotaExceedsSubscriptionLimit, InvalidVMFamilyName, OperationNotEnabledForRegion, OperationNotSupportedForSku, Success, Undefined}
}

// Status1 enumerates the values for status 1.
type Status1 string

const (
	// Status1Auto ...
	Status1Auto Status1 = "Auto"
	// Status1Disabled ...
	Status1Disabled Status1 = "Disabled"
	// Status1Enabled ...
	Status1Enabled Status1 = "Enabled"
)

// PossibleStatus1Values returns an array of possible values for the Status1 const type.
func PossibleStatus1Values() []Status1 {
	return []Status1{Status1Auto, Status1Disabled, Status1Enabled}
}

// StochasticOptimizer enumerates the values for stochastic optimizer.
type StochasticOptimizer string

const (
	// StochasticOptimizerAdam Adam is algorithm the optimizes stochastic objective functions based on adaptive
	// estimates of moments
	StochasticOptimizerAdam StochasticOptimizer = "Adam"
	// StochasticOptimizerAdamw AdamW is a variant of the optimizer Adam that has an improved implementation of
	// weight decay.
	StochasticOptimizerAdamw StochasticOptimizer = "Adamw"
	// StochasticOptimizerNone No optimizer selected.
	StochasticOptimizerNone StochasticOptimizer = "None"
	// StochasticOptimizerSgd Stochastic Gradient Descent optimizer.
	StochasticOptimizerSgd StochasticOptimizer = "Sgd"
)

// PossibleStochasticOptimizerValues returns an array of possible values for the StochasticOptimizer const type.
func PossibleStochasticOptimizerValues() []StochasticOptimizer {
	return []StochasticOptimizer{StochasticOptimizerAdam, StochasticOptimizerAdamw, StochasticOptimizerNone, StochasticOptimizerSgd}
}

// StorageAccountType enumerates the values for storage account type.
type StorageAccountType string

const (
	// PremiumLRS ...
	PremiumLRS StorageAccountType = "Premium_LRS"
	// StandardLRS ...
	StandardLRS StorageAccountType = "Standard_LRS"
)

// PossibleStorageAccountTypeValues returns an array of possible values for the StorageAccountType const type.
func PossibleStorageAccountTypeValues() []StorageAccountType {
	return []StorageAccountType{PremiumLRS, StandardLRS}
}

// TargetAggregationFunction enumerates the values for target aggregation function.
type TargetAggregationFunction string

const (
	// TargetAggregationFunctionMax ...
	TargetAggregationFunctionMax TargetAggregationFunction = "Max"
	// TargetAggregationFunctionMean ...
	TargetAggregationFunctionMean TargetAggregationFunction = "Mean"
	// TargetAggregationFunctionMin ...
	TargetAggregationFunctionMin TargetAggregationFunction = "Min"
	// TargetAggregationFunctionNone Represent no value set.
	TargetAggregationFunctionNone TargetAggregationFunction = "None"
	// TargetAggregationFunctionSum ...
	TargetAggregationFunctionSum TargetAggregationFunction = "Sum"
)

// PossibleTargetAggregationFunctionValues returns an array of possible values for the TargetAggregationFunction const type.
func PossibleTargetAggregationFunctionValues() []TargetAggregationFunction {
	return []TargetAggregationFunction{TargetAggregationFunctionMax, TargetAggregationFunctionMean, TargetAggregationFunctionMin, TargetAggregationFunctionNone, TargetAggregationFunctionSum}
}

// TargetLagsMode enumerates the values for target lags mode.
type TargetLagsMode string

const (
	// TargetLagsModeAuto Target lags to be determined automatically.
	TargetLagsModeAuto TargetLagsMode = "Auto"
	// TargetLagsModeCustom Use the custom target lags.
	TargetLagsModeCustom TargetLagsMode = "Custom"
)

// PossibleTargetLagsModeValues returns an array of possible values for the TargetLagsMode const type.
func PossibleTargetLagsModeValues() []TargetLagsMode {
	return []TargetLagsMode{TargetLagsModeAuto, TargetLagsModeCustom}
}

// TargetRollingWindowSizeMode enumerates the values for target rolling window size mode.
type TargetRollingWindowSizeMode string

const (
	// TargetRollingWindowSizeModeAuto Determine rolling windows size automatically.
	TargetRollingWindowSizeModeAuto TargetRollingWindowSizeMode = "Auto"
	// TargetRollingWindowSizeModeCustom Use the specified rolling window size.
	TargetRollingWindowSizeModeCustom TargetRollingWindowSizeMode = "Custom"
)

// PossibleTargetRollingWindowSizeModeValues returns an array of possible values for the TargetRollingWindowSizeMode const type.
func PossibleTargetRollingWindowSizeModeValues() []TargetRollingWindowSizeMode {
	return []TargetRollingWindowSizeMode{TargetRollingWindowSizeModeAuto, TargetRollingWindowSizeModeCustom}
}

// TaskType enumerates the values for task type.
type TaskType string

const (
	// TaskTypeClassification Classification in machine learning and statistics is a supervised learning
	// approach in which
	// the computer program learns from the data given to it and make new observations or classifications.
	TaskTypeClassification TaskType = "Classification"
	// TaskTypeForecasting Forecasting is a special kind of regression task that deals with time-series data
	// and creates forecasting model
	// that can be used to predict the near future values based on the inputs.
	TaskTypeForecasting TaskType = "Forecasting"
	// TaskTypeImageClassification Image Classification. Multi-class image classification is used when an image
	// is classified with only a single label
	// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a
	// 'duck'.
	TaskTypeImageClassification TaskType = "ImageClassification"
	// TaskTypeImageClassificationMultilabel Image Classification Multilabel. Multi-label image classification
	// is used when an image could have one or more labels
	// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
	TaskTypeImageClassificationMultilabel TaskType = "ImageClassificationMultilabel"
	// TaskTypeImageInstanceSegmentation Image Instance Segmentation. Instance segmentation is used to identify
	// objects in an image at the pixel level,
	// drawing a polygon around each object in the image.
	TaskTypeImageInstanceSegmentation TaskType = "ImageInstanceSegmentation"
	// TaskTypeImageObjectDetection Image Object Detection. Object detection is used to identify objects in an
	// image and locate each object with a
	// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
	TaskTypeImageObjectDetection TaskType = "ImageObjectDetection"
	// TaskTypeRegression Regression means to predict the value using the input data. Regression models are
	// used to predict a continuous value.
	TaskTypeRegression TaskType = "Regression"
	// TaskTypeTextClassification Text classification (also known as text tagging or text categorization) is
	// the process of sorting texts into categories.
	// Categories are mutually exclusive.
	TaskTypeTextClassification TaskType = "TextClassification"
	// TaskTypeTextClassificationMultilabel Multilabel classification task assigns each sample to a group (zero
	// or more) of target labels.
	TaskTypeTextClassificationMultilabel TaskType = "TextClassificationMultilabel"
	// TaskTypeTextNER Text Named Entity Recognition a.k.a. TextNER.
	// Named Entity Recognition (NER) is the ability to take free-form text and identify the occurrences of
	// entities such as people, locations, organizations, and more.
	TaskTypeTextNER TaskType = "TextNER"
)

// PossibleTaskTypeValues returns an array of possible values for the TaskType const type.
func PossibleTaskTypeValues() []TaskType {
	return []TaskType{TaskTypeClassification, TaskTypeForecasting, TaskTypeImageClassification, TaskTypeImageClassificationMultilabel, TaskTypeImageInstanceSegmentation, TaskTypeImageObjectDetection, TaskTypeRegression, TaskTypeTextClassification, TaskTypeTextClassificationMultilabel, TaskTypeTextNER}
}

// TaskTypeBasicAutoMLVertical enumerates the values for task type basic auto ml vertical.
type TaskTypeBasicAutoMLVertical string

const (
	// TaskTypeAutoMLVertical ...
	TaskTypeAutoMLVertical TaskTypeBasicAutoMLVertical = "AutoMLVertical"
)

// PossibleTaskTypeBasicAutoMLVerticalValues returns an array of possible values for the TaskTypeBasicAutoMLVertical const type.
func PossibleTaskTypeBasicAutoMLVerticalValues() []TaskTypeBasicAutoMLVertical {
	return []TaskTypeBasicAutoMLVertical{TaskTypeAutoMLVertical}
}

// UnderlyingResourceAction enumerates the values for underlying resource action.
type UnderlyingResourceAction string

const (
	// Delete ...
	Delete UnderlyingResourceAction = "Delete"
	// Detach ...
	Detach UnderlyingResourceAction = "Detach"
)

// PossibleUnderlyingResourceActionValues returns an array of possible values for the UnderlyingResourceAction const type.
func PossibleUnderlyingResourceActionValues() []UnderlyingResourceAction {
	return []UnderlyingResourceAction{Delete, Detach}
}

// UsageUnit enumerates the values for usage unit.
type UsageUnit string

const (
	// UsageUnitCount ...
	UsageUnitCount UsageUnit = "Count"
)

// PossibleUsageUnitValues returns an array of possible values for the UsageUnit const type.
func PossibleUsageUnitValues() []UsageUnit {
	return []UsageUnit{UsageUnitCount}
}

// UseStl enumerates the values for use stl.
type UseStl string

const (
	// UseStlNone No stl decomposition.
	UseStlNone UseStl = "None"
	// UseStlSeason ...
	UseStlSeason UseStl = "Season"
	// UseStlSeasonTrend ...
	UseStlSeasonTrend UseStl = "SeasonTrend"
)

// PossibleUseStlValues returns an array of possible values for the UseStl const type.
func PossibleUseStlValues() []UseStl {
	return []UseStl{UseStlNone, UseStlSeason, UseStlSeasonTrend}
}

// ValidationMetricType enumerates the values for validation metric type.
type ValidationMetricType string

const (
	// ValidationMetricTypeCoco Coco metric.
	ValidationMetricTypeCoco ValidationMetricType = "Coco"
	// ValidationMetricTypeCocoVoc CocoVoc metric.
	ValidationMetricTypeCocoVoc ValidationMetricType = "CocoVoc"
	// ValidationMetricTypeNone No metric.
	ValidationMetricTypeNone ValidationMetricType = "None"
	// ValidationMetricTypeVoc Voc metric.
	ValidationMetricTypeVoc ValidationMetricType = "Voc"
)

// PossibleValidationMetricTypeValues returns an array of possible values for the ValidationMetricType const type.
func PossibleValidationMetricTypeValues() []ValidationMetricType {
	return []ValidationMetricType{ValidationMetricTypeCoco, ValidationMetricTypeCocoVoc, ValidationMetricTypeNone, ValidationMetricTypeVoc}
}

// ValueFormat enumerates the values for value format.
type ValueFormat string

const (
	// JSON ...
	JSON ValueFormat = "JSON"
)

// PossibleValueFormatValues returns an array of possible values for the ValueFormat const type.
func PossibleValueFormatValues() []ValueFormat {
	return []ValueFormat{JSON}
}

// VMPriceOSType enumerates the values for vm price os type.
type VMPriceOSType string

const (
	// VMPriceOSTypeLinux ...
	VMPriceOSTypeLinux VMPriceOSType = "Linux"
	// VMPriceOSTypeWindows ...
	VMPriceOSTypeWindows VMPriceOSType = "Windows"
)

// PossibleVMPriceOSTypeValues returns an array of possible values for the VMPriceOSType const type.
func PossibleVMPriceOSTypeValues() []VMPriceOSType {
	return []VMPriceOSType{VMPriceOSTypeLinux, VMPriceOSTypeWindows}
}

// VMPriority enumerates the values for vm priority.
type VMPriority string

const (
	// Dedicated ...
	Dedicated VMPriority = "Dedicated"
	// LowPriority ...
	LowPriority VMPriority = "LowPriority"
)

// PossibleVMPriorityValues returns an array of possible values for the VMPriority const type.
func PossibleVMPriorityValues() []VMPriority {
	return []VMPriority{Dedicated, LowPriority}
}

// VMTier enumerates the values for vm tier.
type VMTier string

const (
	// VMTierLowPriority ...
	VMTierLowPriority VMTier = "LowPriority"
	// VMTierSpot ...
	VMTierSpot VMTier = "Spot"
	// VMTierStandard ...
	VMTierStandard VMTier = "Standard"
)

// PossibleVMTierValues returns an array of possible values for the VMTier const type.
func PossibleVMTierValues() []VMTier {
	return []VMTier{VMTierLowPriority, VMTierSpot, VMTierStandard}
}

// Weekday enumerates the values for weekday.
type Weekday string

const (
	// Friday Friday weekday
	Friday Weekday = "Friday"
	// Monday Monday weekday
	Monday Weekday = "Monday"
	// Saturday Saturday weekday
	Saturday Weekday = "Saturday"
	// Sunday Sunday weekday
	Sunday Weekday = "Sunday"
	// Thursday Thursday weekday
	Thursday Weekday = "Thursday"
	// Tuesday Tuesday weekday
	Tuesday Weekday = "Tuesday"
	// Wednesday Wednesday weekday
	Wednesday Weekday = "Wednesday"
)

// PossibleWeekdayValues returns an array of possible values for the Weekday const type.
func PossibleWeekdayValues() []Weekday {
	return []Weekday{Friday, Monday, Saturday, Sunday, Thursday, Tuesday, Wednesday}
}
