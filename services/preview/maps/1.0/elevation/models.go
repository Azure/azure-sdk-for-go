// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package elevation

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// BoundingBoxResult - The response from a successful Get Data for Bounding Box API.
type BoundingBoxResult struct {
	// READ-ONLY; The response from the Get Data for Bounding Box API. The results are ordered starting with the southwest corner, and then proceed west to
// east and south to north.
	Data []*PointElevationResult `json:"data,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BoundingBoxResult.
func (b BoundingBoxResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "data", b.Data)
	return json.Marshal(objectMap)
}

// CoordinatesPair - A location represented as a latitude and longitude.
type CoordinatesPair struct {
	// Latitude property
	Latitude *float64 `json:"latitude,omitempty"`

	// Longitude property
	Longitude *float64 `json:"longitude,omitempty"`
}

// CoordinatesPairAbbreviated - A location represented as a latitude and longitude using short names 'lat' & 'lon'.
type CoordinatesPairAbbreviated struct {
	// Latitude property
	Lat *float64 `json:"lat,omitempty"`

	// Longitude property
	Lon *float64 `json:"lon,omitempty"`
}

// ElevationGetDataForBoundingBoxOptions contains the optional parameters for the Elevation.GetDataForBoundingBox method.
type ElevationGetDataForBoundingBoxOptions struct {
	// placeholder for future optional parameters
}

// ElevationGetDataForPointsOptions contains the optional parameters for the Elevation.GetDataForPoints method.
type ElevationGetDataForPointsOptions struct {
}

// ElevationGetDataForPolylineOptions contains the optional parameters for the Elevation.GetDataForPolyline method.
type ElevationGetDataForPolylineOptions struct {
	// The samples parameter specifies the number of equally spaced points at which elevation values should be provided along a polyline path. The number of
// samples should range from 2 to 2,000. Default value is 10.
	Samples *int32
}

// ElevationPostDataForPointsOptions contains the optional parameters for the Elevation.PostDataForPoints method.
type ElevationPostDataForPointsOptions struct {
	// placeholder for future optional parameters
}

// ElevationPostDataForPolylineOptions contains the optional parameters for the Elevation.PostDataForPolyline method.
type ElevationPostDataForPolylineOptions struct {
	// The samples parameter specifies the number of equally spaced points at which elevation values should be provided along a polyline path. The number of
// samples should range from 2 to 2,000. Default value is 10.
	Samples *int32
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// LinesResult - The response from a successful Elevation Polyline request.
type LinesResult struct {
	// READ-ONLY; The response from the Get Data for Polyline API. The results will be listed in the direction from the first endpoint towards the last endpoint.
	Data []*PointElevationResult `json:"data,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type LinesResult.
func (l LinesResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "data", l.Data)
	return json.Marshal(objectMap)
}

// PointElevationResult - The elevation data.
type PointElevationResult struct {
	// A location represented as a latitude and longitude.
	Coordinate *CoordinatesPair `json:"coordinate,omitempty"`

	// READ-ONLY; The elevation value in meters.
	ElevationInMeter *float32 `json:"elevationInMeter,omitempty" azure:"ro"`
}

// PointsResult - The response from a successful Elevation Points request.
type PointsResult struct {
	// READ-ONLY; The response for point/points elevation API. The result will be in same sequence of points listed in request.
	Data []*PointElevationResult `json:"data,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PointsResult.
func (p PointsResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "data", p.Data)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

