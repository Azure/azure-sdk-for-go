// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package route

const telemetryInfo = "azsdk-go-route/<version>"
type AlternativeRouteType string

const (
	// AlternativeRouteTypeAnyRoute - Allow any alternative route to be returned irrespective of how it compares to the reference route in terms of optimality.
	AlternativeRouteTypeAnyRoute AlternativeRouteType = "anyRoute"
	// AlternativeRouteTypeBetterRoute - Return an alternative route only if it is better than the reference route according to the given planning criteria.
	AlternativeRouteTypeBetterRoute AlternativeRouteType = "betterRoute"
)

// PossibleAlternativeRouteTypeValues returns the possible values for the AlternativeRouteType const type.
func PossibleAlternativeRouteTypeValues() []AlternativeRouteType {
	return []AlternativeRouteType{	
		AlternativeRouteTypeAnyRoute,
		AlternativeRouteTypeBetterRoute,
	}
}

// ToPtr returns a *AlternativeRouteType pointing to the current value.
func (c AlternativeRouteType) ToPtr() *AlternativeRouteType {
	return &c
}

type ComputeTravelTimeFor string

const (
	// ComputeTravelTimeForAll - Computes travel times for all types of traffic information and specifies all results in the fields noTrafficTravelTimeInSeconds,
// historicTrafficTravelTimeInSeconds and liveTrafficIncidentsTravelTimeInSeconds being included in the summaries in the route response.
	ComputeTravelTimeForAll ComputeTravelTimeFor = "all"
	// ComputeTravelTimeForNone - Does not compute additional travel times.
	ComputeTravelTimeForNone ComputeTravelTimeFor = "none"
)

// PossibleComputeTravelTimeForValues returns the possible values for the ComputeTravelTimeFor const type.
func PossibleComputeTravelTimeForValues() []ComputeTravelTimeFor {
	return []ComputeTravelTimeFor{	
		ComputeTravelTimeForAll,
		ComputeTravelTimeForNone,
	}
}

// ToPtr returns a *ComputeTravelTimeFor pointing to the current value.
func (c ComputeTravelTimeFor) ToPtr() *ComputeTravelTimeFor {
	return &c
}

// DrivingSide - Indicates left-hand vs. right-hand side driving at the point of the maneuver.
type DrivingSide string

const (
	// DrivingSideLEFT - Left side.
	DrivingSideLEFT DrivingSide = "LEFT"
	// DrivingSideRIGHT - Right side.
	DrivingSideRIGHT DrivingSide = "RIGHT"
)

// PossibleDrivingSideValues returns the possible values for the DrivingSide const type.
func PossibleDrivingSideValues() []DrivingSide {
	return []DrivingSide{	
		DrivingSideLEFT,
		DrivingSideRIGHT,
	}
}

// ToPtr returns a *DrivingSide pointing to the current value.
func (c DrivingSide) ToPtr() *DrivingSide {
	return &c
}

// GeoJSONObjectType - Specifies the GeoJSON type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString,
// Polygon, MultiPolygon, GeometryCollection, Feature and
// FeatureCollection.
type GeoJSONObjectType string

const (
	// GeoJSONObjectTypeGeoJSONFeature - `GeoJSON Feature` object.
	GeoJSONObjectTypeGeoJSONFeature GeoJSONObjectType = "Feature"
	// GeoJSONObjectTypeGeoJSONFeatureCollection - `GeoJSON FeatureCollection` object.
	GeoJSONObjectTypeGeoJSONFeatureCollection GeoJSONObjectType = "FeatureCollection"
	// GeoJSONObjectTypeGeoJSONGeometryCollection - `GeoJSON GeometryCollection` geometry.
	GeoJSONObjectTypeGeoJSONGeometryCollection GeoJSONObjectType = "GeometryCollection"
	// GeoJSONObjectTypeGeoJSONLineString - `GeoJSON LineString` geometry.
	GeoJSONObjectTypeGeoJSONLineString GeoJSONObjectType = "LineString"
	// GeoJSONObjectTypeGeoJSONMultiLineString - `GeoJSON MultiLineString` geometry.
	GeoJSONObjectTypeGeoJSONMultiLineString GeoJSONObjectType = "MultiLineString"
	// GeoJSONObjectTypeGeoJSONMultiPoint - `GeoJSON MultiPoint` geometry.
	GeoJSONObjectTypeGeoJSONMultiPoint GeoJSONObjectType = "MultiPoint"
	// GeoJSONObjectTypeGeoJSONMultiPolygon - `GeoJSON MultiPolygon` geometry.
	GeoJSONObjectTypeGeoJSONMultiPolygon GeoJSONObjectType = "MultiPolygon"
	// GeoJSONObjectTypeGeoJSONPoint - `GeoJSON Point` geometry.
	GeoJSONObjectTypeGeoJSONPoint GeoJSONObjectType = "Point"
	// GeoJSONObjectTypeGeoJSONPolygon - `GeoJSON Polygon` geometry.
	GeoJSONObjectTypeGeoJSONPolygon GeoJSONObjectType = "Polygon"
)

// PossibleGeoJSONObjectTypeValues returns the possible values for the GeoJSONObjectType const type.
func PossibleGeoJSONObjectTypeValues() []GeoJSONObjectType {
	return []GeoJSONObjectType{	
		GeoJSONObjectTypeGeoJSONFeature,
		GeoJSONObjectTypeGeoJSONFeatureCollection,
		GeoJSONObjectTypeGeoJSONGeometryCollection,
		GeoJSONObjectTypeGeoJSONLineString,
		GeoJSONObjectTypeGeoJSONMultiLineString,
		GeoJSONObjectTypeGeoJSONMultiPoint,
		GeoJSONObjectTypeGeoJSONMultiPolygon,
		GeoJSONObjectTypeGeoJSONPoint,
		GeoJSONObjectTypeGeoJSONPolygon,
	}
}

// ToPtr returns a *GeoJSONObjectType pointing to the current value.
func (c GeoJSONObjectType) ToPtr() *GeoJSONObjectType {
	return &c
}

type GeographicResourceLocation string

const (
	// GeographicResourceLocationEu - Used to access an Azure Maps Creator resource in Europe
	GeographicResourceLocationEu GeographicResourceLocation = "eu"
	// GeographicResourceLocationUs - Used to access an Azure Maps Creator resource in the United States
	GeographicResourceLocationUs GeographicResourceLocation = "us"
)

// PossibleGeographicResourceLocationValues returns the possible values for the GeographicResourceLocation const type.
func PossibleGeographicResourceLocationValues() []GeographicResourceLocation {
	return []GeographicResourceLocation{	
		GeographicResourceLocationEu,
		GeographicResourceLocationUs,
	}
}

// ToPtr returns a *GeographicResourceLocation pointing to the current value.
func (c GeographicResourceLocation) ToPtr() *GeographicResourceLocation {
	return &c
}

// Geography - This parameter specifies where the Azure Maps Creator resource is located. Valid values are us and eu.
type Geography string

const (
	GeographyEu Geography = "eu"
	GeographyUs Geography = "us"
)

// PossibleGeographyValues returns the possible values for the Geography const type.
func PossibleGeographyValues() []Geography {
	return []Geography{	
		GeographyEu,
		GeographyUs,
	}
}

// ToPtr returns a *Geography pointing to the current value.
func (c Geography) ToPtr() *Geography {
	return &c
}

// GuidanceInstructionType - Type of the instruction, e.g., turn or change of road form.
type GuidanceInstructionType string

const (
	// GuidanceInstructionTypeDIRECTIONINFO - Direction information.
	GuidanceInstructionTypeDIRECTIONINFO GuidanceInstructionType = "DIRECTION_INFO"
	// GuidanceInstructionTypeLOCATIONARRIVAL - Arrival location.
	GuidanceInstructionTypeLOCATIONARRIVAL GuidanceInstructionType = "LOCATION_ARRIVAL"
	// GuidanceInstructionTypeLOCATIONDEPARTURE - Departure location.
	GuidanceInstructionTypeLOCATIONDEPARTURE GuidanceInstructionType = "LOCATION_DEPARTURE"
	// GuidanceInstructionTypeLOCATIONWAYPOINT - Way point location.
	GuidanceInstructionTypeLOCATIONWAYPOINT GuidanceInstructionType = "LOCATION_WAYPOINT"
	// GuidanceInstructionTypeROADCHANGE - Road Change.
	GuidanceInstructionTypeROADCHANGE GuidanceInstructionType = "ROAD_CHANGE"
	// GuidanceInstructionTypeTURN - Turn.
	GuidanceInstructionTypeTURN GuidanceInstructionType = "TURN"
)

// PossibleGuidanceInstructionTypeValues returns the possible values for the GuidanceInstructionType const type.
func PossibleGuidanceInstructionTypeValues() []GuidanceInstructionType {
	return []GuidanceInstructionType{	
		GuidanceInstructionTypeDIRECTIONINFO,
		GuidanceInstructionTypeLOCATIONARRIVAL,
		GuidanceInstructionTypeLOCATIONDEPARTURE,
		GuidanceInstructionTypeLOCATIONWAYPOINT,
		GuidanceInstructionTypeROADCHANGE,
		GuidanceInstructionTypeTURN,
	}
}

// ToPtr returns a *GuidanceInstructionType pointing to the current value.
func (c GuidanceInstructionType) ToPtr() *GuidanceInstructionType {
	return &c
}

// GuidanceManeuver - A code identifying the maneuver.
type GuidanceManeuver string

const (
	// GuidanceManeuverARRIVE - You have arrived.
	GuidanceManeuverARRIVE GuidanceManeuver = "ARRIVE"
	// GuidanceManeuverARRIVELEFT - You have arrived. Your destination is on the left.
	GuidanceManeuverARRIVELEFT GuidanceManeuver = "ARRIVE_LEFT"
	// GuidanceManeuverARRIVERIGHT - You have arrived. Your destination is on the right.
	GuidanceManeuverARRIVERIGHT GuidanceManeuver = "ARRIVE_RIGHT"
	// GuidanceManeuverBEARLEFT - Bear left.
	GuidanceManeuverBEARLEFT GuidanceManeuver = "BEAR_LEFT"
	// GuidanceManeuverBEARRIGHT - Bear right.
	GuidanceManeuverBEARRIGHT GuidanceManeuver = "BEAR_RIGHT"
	// GuidanceManeuverDEPART - Leave.
	GuidanceManeuverDEPART GuidanceManeuver = "DEPART"
	// GuidanceManeuverENTERFREEWAY - Take the freeway.
	GuidanceManeuverENTERFREEWAY GuidanceManeuver = "ENTER_FREEWAY"
	// GuidanceManeuverENTERHIGHWAY - Take the highway.
	GuidanceManeuverENTERHIGHWAY GuidanceManeuver = "ENTER_HIGHWAY"
	// GuidanceManeuverENTERMOTORWAY - Take the motorway.
	GuidanceManeuverENTERMOTORWAY GuidanceManeuver = "ENTER_MOTORWAY"
	// GuidanceManeuverENTRANCERAMP - Take the ramp.
	GuidanceManeuverENTRANCERAMP GuidanceManeuver = "ENTRANCE_RAMP"
	// GuidanceManeuverFOLLOW - Follow.
	GuidanceManeuverFOLLOW GuidanceManeuver = "FOLLOW"
	// GuidanceManeuverKEEPLEFT - Keep left.
	GuidanceManeuverKEEPLEFT GuidanceManeuver = "KEEP_LEFT"
	// GuidanceManeuverKEEPRIGHT - Keep right.
	GuidanceManeuverKEEPRIGHT GuidanceManeuver = "KEEP_RIGHT"
	// GuidanceManeuverMAKEUTURN - Make a U-turn.
	GuidanceManeuverMAKEUTURN GuidanceManeuver = "MAKE_UTURN"
	// GuidanceManeuverMOTORWAYEXITLEFT - Take the left exit.
	GuidanceManeuverMOTORWAYEXITLEFT GuidanceManeuver = "MOTORWAY_EXIT_LEFT"
	// GuidanceManeuverMOTORWAYEXITRIGHT - Take the right exit.
	GuidanceManeuverMOTORWAYEXITRIGHT GuidanceManeuver = "MOTORWAY_EXIT_RIGHT"
	// GuidanceManeuverROUNDABOUTBACK - Go around the roundabout.
	GuidanceManeuverROUNDABOUTBACK GuidanceManeuver = "ROUNDABOUT_BACK"
	// GuidanceManeuverROUNDABOUTCROSS - Cross the roundabout.
	GuidanceManeuverROUNDABOUTCROSS GuidanceManeuver = "ROUNDABOUT_CROSS"
	// GuidanceManeuverROUNDABOUTLEFT - At the roundabout take the exit on the left.
	GuidanceManeuverROUNDABOUTLEFT GuidanceManeuver = "ROUNDABOUT_LEFT"
	// GuidanceManeuverROUNDABOUTRIGHT - At the roundabout take the exit on the right.
	GuidanceManeuverROUNDABOUTRIGHT GuidanceManeuver = "ROUNDABOUT_RIGHT"
	// GuidanceManeuverSHARPLEFT - Turn sharp left.
	GuidanceManeuverSHARPLEFT GuidanceManeuver = "SHARP_LEFT"
	// GuidanceManeuverSHARPRIGHT - Turn sharp right.
	GuidanceManeuverSHARPRIGHT GuidanceManeuver = "SHARP_RIGHT"
	// GuidanceManeuverSTRAIGHT - Keep straight on.
	GuidanceManeuverSTRAIGHT GuidanceManeuver = "STRAIGHT"
	// GuidanceManeuverSWITCHMAINROAD - Switch to the main road.
	GuidanceManeuverSWITCHMAINROAD GuidanceManeuver = "SWITCH_MAIN_ROAD"
	// GuidanceManeuverSWITCHPARALLELROAD - Switch to the parallel road.
	GuidanceManeuverSWITCHPARALLELROAD GuidanceManeuver = "SWITCH_PARALLEL_ROAD"
	// GuidanceManeuverTAKEEXIT - Take the exit.
	GuidanceManeuverTAKEEXIT GuidanceManeuver = "TAKE_EXIT"
	// GuidanceManeuverTAKEFERRY - Take the ferry.
	GuidanceManeuverTAKEFERRY GuidanceManeuver = "TAKE_FERRY"
	// GuidanceManeuverTRYMAKEUTURN - Try to make a U-turn.
	GuidanceManeuverTRYMAKEUTURN GuidanceManeuver = "TRY_MAKE_UTURN"
	// GuidanceManeuverTURNLEFT - Turn left.
	GuidanceManeuverTURNLEFT GuidanceManeuver = "TURN_LEFT"
	// GuidanceManeuverTURNRIGHT - Turn right.
	GuidanceManeuverTURNRIGHT GuidanceManeuver = "TURN_RIGHT"
	// GuidanceManeuverWAYPOINTLEFT - You have reached the waypoint. It is on the left.
	GuidanceManeuverWAYPOINTLEFT GuidanceManeuver = "WAYPOINT_LEFT"
	// GuidanceManeuverWAYPOINTREACHED - You have reached the waypoint.
	GuidanceManeuverWAYPOINTREACHED GuidanceManeuver = "WAYPOINT_REACHED"
	// GuidanceManeuverWAYPOINTRIGHT - You have reached the waypoint. It is on the right.
	GuidanceManeuverWAYPOINTRIGHT GuidanceManeuver = "WAYPOINT_RIGHT"
)

// PossibleGuidanceManeuverValues returns the possible values for the GuidanceManeuver const type.
func PossibleGuidanceManeuverValues() []GuidanceManeuver {
	return []GuidanceManeuver{	
		GuidanceManeuverARRIVE,
		GuidanceManeuverARRIVELEFT,
		GuidanceManeuverARRIVERIGHT,
		GuidanceManeuverBEARLEFT,
		GuidanceManeuverBEARRIGHT,
		GuidanceManeuverDEPART,
		GuidanceManeuverENTERFREEWAY,
		GuidanceManeuverENTERHIGHWAY,
		GuidanceManeuverENTERMOTORWAY,
		GuidanceManeuverENTRANCERAMP,
		GuidanceManeuverFOLLOW,
		GuidanceManeuverKEEPLEFT,
		GuidanceManeuverKEEPRIGHT,
		GuidanceManeuverMAKEUTURN,
		GuidanceManeuverMOTORWAYEXITLEFT,
		GuidanceManeuverMOTORWAYEXITRIGHT,
		GuidanceManeuverROUNDABOUTBACK,
		GuidanceManeuverROUNDABOUTCROSS,
		GuidanceManeuverROUNDABOUTLEFT,
		GuidanceManeuverROUNDABOUTRIGHT,
		GuidanceManeuverSHARPLEFT,
		GuidanceManeuverSHARPRIGHT,
		GuidanceManeuverSTRAIGHT,
		GuidanceManeuverSWITCHMAINROAD,
		GuidanceManeuverSWITCHPARALLELROAD,
		GuidanceManeuverTAKEEXIT,
		GuidanceManeuverTAKEFERRY,
		GuidanceManeuverTRYMAKEUTURN,
		GuidanceManeuverTURNLEFT,
		GuidanceManeuverTURNRIGHT,
		GuidanceManeuverWAYPOINTLEFT,
		GuidanceManeuverWAYPOINTREACHED,
		GuidanceManeuverWAYPOINTRIGHT,
	}
}

// ToPtr returns a *GuidanceManeuver pointing to the current value.
func (c GuidanceManeuver) ToPtr() *GuidanceManeuver {
	return &c
}

type HillinessDegree string

const (
	// HillinessDegreeHigh - high
	HillinessDegreeHigh HillinessDegree = "high"
	// HillinessDegreeLow - low
	HillinessDegreeLow HillinessDegree = "low"
	// HillinessDegreeNormal - normal
	HillinessDegreeNormal HillinessDegree = "normal"
)

// PossibleHillinessDegreeValues returns the possible values for the HillinessDegree const type.
func PossibleHillinessDegreeValues() []HillinessDegree {
	return []HillinessDegree{	
		HillinessDegreeHigh,
		HillinessDegreeLow,
		HillinessDegreeNormal,
	}
}

// ToPtr returns a *HillinessDegree pointing to the current value.
func (c HillinessDegree) ToPtr() *HillinessDegree {
	return &c
}

// JunctionType - The type of the junction where the maneuver takes place. For larger roundabouts, two separate instructions are generated for entering
// and leaving the roundabout.
type JunctionType string

const (
	// JunctionTypeBIFURCATION - bifurcation
	JunctionTypeBIFURCATION JunctionType = "BIFURCATION"
	// JunctionTypeREGULAR - regular
	JunctionTypeREGULAR JunctionType = "REGULAR"
	// JunctionTypeROUNDABOUT - roundabout
	JunctionTypeROUNDABOUT JunctionType = "ROUNDABOUT"
)

// PossibleJunctionTypeValues returns the possible values for the JunctionType const type.
func PossibleJunctionTypeValues() []JunctionType {
	return []JunctionType{	
		JunctionTypeBIFURCATION,
		JunctionTypeREGULAR,
		JunctionTypeROUNDABOUT,
	}
}

// ToPtr returns a *JunctionType pointing to the current value.
func (c JunctionType) ToPtr() *JunctionType {
	return &c
}

// MagnitudeOfDelay - The magnitude of delay caused by the incident. These values correspond to the values of the response field ty of the Get Traffic Incident
// Detail API
// [https://docs.microsoft.com/rest/api/maps/traffic/gettrafficincidentdetail].
type MagnitudeOfDelay string

const (
	// MagnitudeOfDelayFour - Undefined, used for road closures and other indefinite delays.
	MagnitudeOfDelayFour MagnitudeOfDelay = "4"
	// MagnitudeOfDelayOne - Minor.
	MagnitudeOfDelayOne MagnitudeOfDelay = "1"
	// MagnitudeOfDelayThree - Major.
	MagnitudeOfDelayThree MagnitudeOfDelay = "3"
	// MagnitudeOfDelayTwo - Moderate.
	MagnitudeOfDelayTwo MagnitudeOfDelay = "2"
	// MagnitudeOfDelayZero - Unknown.
	MagnitudeOfDelayZero MagnitudeOfDelay = "0"
)

// PossibleMagnitudeOfDelayValues returns the possible values for the MagnitudeOfDelay const type.
func PossibleMagnitudeOfDelayValues() []MagnitudeOfDelay {
	return []MagnitudeOfDelay{	
		MagnitudeOfDelayFour,
		MagnitudeOfDelayOne,
		MagnitudeOfDelayThree,
		MagnitudeOfDelayTwo,
		MagnitudeOfDelayZero,
	}
}

// ToPtr returns a *MagnitudeOfDelay pointing to the current value.
func (c MagnitudeOfDelay) ToPtr() *MagnitudeOfDelay {
	return &c
}

type ResponseFormat string

const (
	// ResponseFormatJSON - [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)
	ResponseFormatJSON ResponseFormat = "json"
)

// PossibleResponseFormatValues returns the possible values for the ResponseFormat const type.
func PossibleResponseFormatValues() []ResponseFormat {
	return []ResponseFormat{	
		ResponseFormatJSON,
	}
}

// ToPtr returns a *ResponseFormat pointing to the current value.
func (c ResponseFormat) ToPtr() *ResponseFormat {
	return &c
}

type RouteAvoidType string

const (
	// RouteAvoidTypeAlreadyUsedRoads - Avoids using the same road multiple times. Most useful in conjunction with `routeType`=thrilling.
	RouteAvoidTypeAlreadyUsedRoads RouteAvoidType = "alreadyUsedRoads"
	// RouteAvoidTypeBorderCrossings - Avoids border crossings in route calculation.
	RouteAvoidTypeBorderCrossings RouteAvoidType = "borderCrossings"
	// RouteAvoidTypeCarpools - Avoids routes that require the use of carpool (HOV/High Occupancy Vehicle) lanes.
	RouteAvoidTypeCarpools RouteAvoidType = "carpools"
	// RouteAvoidTypeFerries - Avoids ferries
	RouteAvoidTypeFerries RouteAvoidType = "ferries"
	// RouteAvoidTypeMotorways - Avoids motorways
	RouteAvoidTypeMotorways RouteAvoidType = "motorways"
	// RouteAvoidTypeTollRoads - Avoids toll roads.
	RouteAvoidTypeTollRoads RouteAvoidType = "tollRoads"
	// RouteAvoidTypeUnpavedRoads - Avoids unpaved roads
	RouteAvoidTypeUnpavedRoads RouteAvoidType = "unpavedRoads"
)

// PossibleRouteAvoidTypeValues returns the possible values for the RouteAvoidType const type.
func PossibleRouteAvoidTypeValues() []RouteAvoidType {
	return []RouteAvoidType{	
		RouteAvoidTypeAlreadyUsedRoads,
		RouteAvoidTypeBorderCrossings,
		RouteAvoidTypeCarpools,
		RouteAvoidTypeFerries,
		RouteAvoidTypeMotorways,
		RouteAvoidTypeTollRoads,
		RouteAvoidTypeUnpavedRoads,
	}
}

// ToPtr returns a *RouteAvoidType pointing to the current value.
func (c RouteAvoidType) ToPtr() *RouteAvoidType {
	return &c
}

type RouteInstructionsType string

const (
	// RouteInstructionsTypeCoded - Returns raw instruction data without human-readable messages.
	RouteInstructionsTypeCoded RouteInstructionsType = "coded"
	// RouteInstructionsTypeTagged - Returns raw instruction data with tagged human-readable messages to permit formatting. A human-readable message is built
// up from repeatable identified elements. These are tagged to allow client applications to format them correctly. The following message components are
// tagged when instructionsType=tagged: street, roadNumber, signpostText, exitNumber, roundaboutExitNumber.
// Example of tagged 'Turn left' message:​
// ```
// Turn left onto <roadNumber>A4</roadNumber>/<roadNumber>E19</roadNumber>
// towards <signpostText>Den Haag</signpostText>
// ```
	RouteInstructionsTypeTagged RouteInstructionsType = "tagged"
	// RouteInstructionsTypeText - Returns raw instructions data with human-readable messages in plain text.
	RouteInstructionsTypeText RouteInstructionsType = "text"
)

// PossibleRouteInstructionsTypeValues returns the possible values for the RouteInstructionsType const type.
func PossibleRouteInstructionsTypeValues() []RouteInstructionsType {
	return []RouteInstructionsType{	
		RouteInstructionsTypeCoded,
		RouteInstructionsTypeTagged,
		RouteInstructionsTypeText,
	}
}

// ToPtr returns a *RouteInstructionsType pointing to the current value.
func (c RouteInstructionsType) ToPtr() *RouteInstructionsType {
	return &c
}

type RouteRepresentation string

const (
	// RouteRepresentationNone - Includes only the optimized waypoint indices but does not include the route geometry in the response.
	RouteRepresentationNone RouteRepresentation = "none"
	// RouteRepresentationPolyline - Includes route geometry in the response.
	RouteRepresentationPolyline RouteRepresentation = "polyline"
	// RouteRepresentationSummaryOnly - Summary as per polyline but excluding the point geometry elements for the routes in the response.
	RouteRepresentationSummaryOnly RouteRepresentation = "summaryOnly"
)

// PossibleRouteRepresentationValues returns the possible values for the RouteRepresentation const type.
func PossibleRouteRepresentationValues() []RouteRepresentation {
	return []RouteRepresentation{	
		RouteRepresentationNone,
		RouteRepresentationPolyline,
		RouteRepresentationSummaryOnly,
	}
}

// ToPtr returns a *RouteRepresentation pointing to the current value.
func (c RouteRepresentation) ToPtr() *RouteRepresentation {
	return &c
}

type RouteType string

const (
	// RouteTypeEco - A route balanced by economy and speed.
	RouteTypeEco RouteType = "eco"
	// RouteTypeFastest - The fastest route.
	RouteTypeFastest RouteType = "fastest"
	// RouteTypeShortest - The shortest route by distance.
	RouteTypeShortest RouteType = "shortest"
	// RouteTypeThrilling - Includes interesting or challenging roads and uses as few motorways as possible. You can choose the level of turns included and
// also the degree of hilliness. See the hilliness and windingness parameters for how to set this. There is a limit of 900 km on routes planned with `routeType`=thrilling
	RouteTypeThrilling RouteType = "thrilling"
)

// PossibleRouteTypeValues returns the possible values for the RouteType const type.
func PossibleRouteTypeValues() []RouteType {
	return []RouteType{	
		RouteTypeEco,
		RouteTypeFastest,
		RouteTypeShortest,
		RouteTypeThrilling,
	}
}

// ToPtr returns a *RouteType pointing to the current value.
func (c RouteType) ToPtr() *RouteType {
	return &c
}

type SectionType string

const (
	// SectionTypeCarTrain - Get sections if the route includes car trains.
	SectionTypeCarTrain SectionType = "carTrain"
	// SectionTypeCountry - Countries the route has parts in.
	SectionTypeCountry SectionType = "country"
	// SectionTypeFerry - Get sections if the route includes ferries.
	SectionTypeFerry SectionType = "ferry"
	// SectionTypeMotorway - Get sections if the route includes motorways.
	SectionTypeMotorway SectionType = "motorway"
	// SectionTypePedestrian - Get sections which are suited for pedestrians.
	SectionTypePedestrian SectionType = "pedestrian"
	// SectionTypeTollRoad - Get sections which require a toll to be payed.
	SectionTypeTollRoad SectionType = "tollRoad"
	// SectionTypeTollVignette - Get sections which require a toll vignette to be present.
	SectionTypeTollVignette SectionType = "tollVignette"
	// SectionTypeTraffic - Get sections which contain traffic information.
	SectionTypeTraffic SectionType = "traffic"
	// SectionTypeTravelMode - Get sections in relation to the request parameter `travelMode`.
	SectionTypeTravelMode SectionType = "travelMode"
	// SectionTypeTunnel - Get sections if the route includes tunnels.
	SectionTypeTunnel SectionType = "tunnel"
)

// PossibleSectionTypeValues returns the possible values for the SectionType const type.
func PossibleSectionTypeValues() []SectionType {
	return []SectionType{	
		SectionTypeCarTrain,
		SectionTypeCountry,
		SectionTypeFerry,
		SectionTypeMotorway,
		SectionTypePedestrian,
		SectionTypeTollRoad,
		SectionTypeTollVignette,
		SectionTypeTraffic,
		SectionTypeTravelMode,
		SectionTypeTunnel,
	}
}

// ToPtr returns a *SectionType pointing to the current value.
func (c SectionType) ToPtr() *SectionType {
	return &c
}

type TextFormat string

const (
	// TextFormatJSON - [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)
	TextFormatJSON TextFormat = "json"
	// TextFormatXML - [The Extensible Markup Language](https://www.w3.org/TR/xml/)
	TextFormatXML TextFormat = "xml"
)

// PossibleTextFormatValues returns the possible values for the TextFormat const type.
func PossibleTextFormatValues() []TextFormat {
	return []TextFormat{	
		TextFormatJSON,
		TextFormatXML,
	}
}

// ToPtr returns a *TextFormat pointing to the current value.
func (c TextFormat) ToPtr() *TextFormat {
	return &c
}

type TravelMode string

const (
	// TravelModeBicycle - The returned routes are optimized for bicycles, including use of bicycle lanes.
	TravelModeBicycle TravelMode = "bicycle"
	// TravelModeBus - The returned routes are optimized for buses, including the use of bus only lanes. BETA functionality.
	TravelModeBus TravelMode = "bus"
	// TravelModeCar - The returned routes are optimized for cars.
	TravelModeCar TravelMode = "car"
	// TravelModeMotorcycle - The returned routes are optimized for motorcycles. BETA functionality.
	TravelModeMotorcycle TravelMode = "motorcycle"
	// TravelModePedestrian - The returned routes are optimized for pedestrians, including the use of sidewalks.
	TravelModePedestrian TravelMode = "pedestrian"
	// TravelModeTaxi - The returned routes are optimized for taxis. BETA functionality.
	TravelModeTaxi TravelMode = "taxi"
	// TravelModeTruck - The returned routes are optimized for commercial vehicles, like for trucks.
	TravelModeTruck TravelMode = "truck"
	// TravelModeVan - The returned routes are optimized for vans. BETA functionality.
	TravelModeVan TravelMode = "van"
)

// PossibleTravelModeValues returns the possible values for the TravelMode const type.
func PossibleTravelModeValues() []TravelMode {
	return []TravelMode{	
		TravelModeBicycle,
		TravelModeBus,
		TravelModeCar,
		TravelModeMotorcycle,
		TravelModePedestrian,
		TravelModeTaxi,
		TravelModeTruck,
		TravelModeVan,
	}
}

// ToPtr returns a *TravelMode pointing to the current value.
func (c TravelMode) ToPtr() *TravelMode {
	return &c
}

type VehicleEngineType string

const (
	// VehicleEngineTypeCombustion - Internal combustion engine.
	VehicleEngineTypeCombustion VehicleEngineType = "combustion"
	// VehicleEngineTypeElectric - Electric engine.
	VehicleEngineTypeElectric VehicleEngineType = "electric"
)

// PossibleVehicleEngineTypeValues returns the possible values for the VehicleEngineType const type.
func PossibleVehicleEngineTypeValues() []VehicleEngineType {
	return []VehicleEngineType{	
		VehicleEngineTypeCombustion,
		VehicleEngineTypeElectric,
	}
}

// ToPtr returns a *VehicleEngineType pointing to the current value.
func (c VehicleEngineType) ToPtr() *VehicleEngineType {
	return &c
}

type VehicleLoadType string

const (
	// VehicleLoadTypeOtherHazmatExplosive - Explosives
	VehicleLoadTypeOtherHazmatExplosive VehicleLoadType = "otherHazmatExplosive"
	// VehicleLoadTypeOtherHazmatGeneral - Miscellaneous
	VehicleLoadTypeOtherHazmatGeneral VehicleLoadType = "otherHazmatGeneral"
	// VehicleLoadTypeOtherHazmatHarmfulToWater - Harmful to water
	VehicleLoadTypeOtherHazmatHarmfulToWater VehicleLoadType = "otherHazmatHarmfulToWater"
	// VehicleLoadTypeUSHazmatClass1 - Explosives
	VehicleLoadTypeUSHazmatClass1 VehicleLoadType = "USHazmatClass1"
	// VehicleLoadTypeUSHazmatClass2 - Compressed gas
	VehicleLoadTypeUSHazmatClass2 VehicleLoadType = "USHazmatClass2"
	// VehicleLoadTypeUSHazmatClass3 - Flammable liquids
	VehicleLoadTypeUSHazmatClass3 VehicleLoadType = "USHazmatClass3"
	// VehicleLoadTypeUSHazmatClass4 - Flammable solids
	VehicleLoadTypeUSHazmatClass4 VehicleLoadType = "USHazmatClass4"
	// VehicleLoadTypeUSHazmatClass5 - Oxidizers
	VehicleLoadTypeUSHazmatClass5 VehicleLoadType = "USHazmatClass5"
	// VehicleLoadTypeUSHazmatClass6 - Poisons
	VehicleLoadTypeUSHazmatClass6 VehicleLoadType = "USHazmatClass6"
	// VehicleLoadTypeUSHazmatClass7 - Radioactive
	VehicleLoadTypeUSHazmatClass7 VehicleLoadType = "USHazmatClass7"
	// VehicleLoadTypeUSHazmatClass8 - Corrosives
	VehicleLoadTypeUSHazmatClass8 VehicleLoadType = "USHazmatClass8"
	// VehicleLoadTypeUSHazmatClass9 - Miscellaneous
	VehicleLoadTypeUSHazmatClass9 VehicleLoadType = "USHazmatClass9"
)

// PossibleVehicleLoadTypeValues returns the possible values for the VehicleLoadType const type.
func PossibleVehicleLoadTypeValues() []VehicleLoadType {
	return []VehicleLoadType{	
		VehicleLoadTypeOtherHazmatExplosive,
		VehicleLoadTypeOtherHazmatGeneral,
		VehicleLoadTypeOtherHazmatHarmfulToWater,
		VehicleLoadTypeUSHazmatClass1,
		VehicleLoadTypeUSHazmatClass2,
		VehicleLoadTypeUSHazmatClass3,
		VehicleLoadTypeUSHazmatClass4,
		VehicleLoadTypeUSHazmatClass5,
		VehicleLoadTypeUSHazmatClass6,
		VehicleLoadTypeUSHazmatClass7,
		VehicleLoadTypeUSHazmatClass8,
		VehicleLoadTypeUSHazmatClass9,
	}
}

// ToPtr returns a *VehicleLoadType pointing to the current value.
func (c VehicleLoadType) ToPtr() *VehicleLoadType {
	return &c
}

type WindingnessLevel string

const (
	// WindingnessLevelHigh - high
	WindingnessLevelHigh WindingnessLevel = "high"
	// WindingnessLevelLow - low
	WindingnessLevelLow WindingnessLevel = "low"
	// WindingnessLevelNormal - normal
	WindingnessLevelNormal WindingnessLevel = "normal"
)

// PossibleWindingnessLevelValues returns the possible values for the WindingnessLevel const type.
func PossibleWindingnessLevelValues() []WindingnessLevel {
	return []WindingnessLevel{	
		WindingnessLevelHigh,
		WindingnessLevelLow,
		WindingnessLevelNormal,
	}
}

// ToPtr returns a *WindingnessLevel pointing to the current value.
func (c WindingnessLevel) ToPtr() *WindingnessLevel {
	return &c
}

