// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package route

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// RouteDirectionsBatchResponsePoller provides polling facilities until the operation reaches a terminal state.
type RouteDirectionsBatchResponsePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final RouteDirectionsBatchResponseResponse will be returned.
	FinalResponse(ctx context.Context) (RouteDirectionsBatchResponseResponse, error)
}

type routeDirectionsBatchResponsePoller struct {
	pt *azcore.LROPoller
}

func (p *routeDirectionsBatchResponsePoller) Done() bool {
	return p.pt.Done()
}

func (p *routeDirectionsBatchResponsePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *routeDirectionsBatchResponsePoller) FinalResponse(ctx context.Context) (RouteDirectionsBatchResponseResponse, error) {
	respType := RouteDirectionsBatchResponseResponse{RouteDirectionsBatchResponse: &RouteDirectionsBatchResponse{}}
	resp, err := p.pt.FinalResponse(ctx, respType.RouteDirectionsBatchResponse)
	if err != nil {
		return RouteDirectionsBatchResponseResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *routeDirectionsBatchResponsePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *routeDirectionsBatchResponsePoller) pollUntilDone(ctx context.Context, freq time.Duration) (RouteDirectionsBatchResponseResponse, error) {
	respType := RouteDirectionsBatchResponseResponse{RouteDirectionsBatchResponse: &RouteDirectionsBatchResponse{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.RouteDirectionsBatchResponse)
	if err != nil {
		return RouteDirectionsBatchResponseResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// RouteMatrixResponsePoller provides polling facilities until the operation reaches a terminal state.
type RouteMatrixResponsePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final RouteMatrixResponseResponse will be returned.
	FinalResponse(ctx context.Context) (RouteMatrixResponseResponse, error)
}

type routeMatrixResponsePoller struct {
	pt *azcore.LROPoller
}

func (p *routeMatrixResponsePoller) Done() bool {
	return p.pt.Done()
}

func (p *routeMatrixResponsePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *routeMatrixResponsePoller) FinalResponse(ctx context.Context) (RouteMatrixResponseResponse, error) {
	respType := RouteMatrixResponseResponse{RouteMatrixResponse: &RouteMatrixResponse{}}
	resp, err := p.pt.FinalResponse(ctx, respType.RouteMatrixResponse)
	if err != nil {
		return RouteMatrixResponseResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *routeMatrixResponsePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *routeMatrixResponsePoller) pollUntilDone(ctx context.Context, freq time.Duration) (RouteMatrixResponseResponse, error) {
	respType := RouteMatrixResponseResponse{RouteMatrixResponse: &RouteMatrixResponse{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.RouteMatrixResponse)
	if err != nil {
		return RouteMatrixResponseResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

