// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package search

const telemetryInfo = "azsdk-go-search/<version>"
type ConnectorSet string

const (
	// ConnectorSetChademo - CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this
// is is also known as the TEPCO's connector. It supports fast DC charging.
	ConnectorSetChademo ConnectorSet = "Chademo"
	// ConnectorSetIEC60309AC1PhaseBlue - Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some
// combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration.
	ConnectorSetIEC60309AC1PhaseBlue ConnectorSet = "IEC60309AC1PhaseBlue"
	// ConnectorSetIEC60309DCWhite - Industrial White connector is a DC connector defined in the IEC 60309 standard.
	ConnectorSetIEC60309DCWhite ConnectorSet = "IEC60309DCWhite"
	// ConnectorSetIEC62196Type1 - Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772
// after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure.
	ConnectorSetIEC62196Type1 ConnectorSet = "IEC62196Type1"
	// ConnectorSetIEC62196Type1CCS - Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector –
// as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
	ConnectorSetIEC62196Type1CCS ConnectorSet = "IEC62196Type1CCS"
	// ConnectorSetIEC62196Type2CCS - Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector –
// as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
	ConnectorSetIEC62196Type2CCS ConnectorSet = "IEC62196Type2CCS"
	// ConnectorSetIEC62196Type2CableAttached - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging
// point
	ConnectorSetIEC62196Type2CableAttached ConnectorSet = "IEC62196Type2CableAttached"
	// ConnectorSetIEC62196Type2Outlet - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point.
	ConnectorSetIEC62196Type2Outlet ConnectorSet = "IEC62196Type2Outlet"
	// ConnectorSetIEC62196Type3 - Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in
// combination with up to 240V single phase or up to 420V three phase infrastructure.
	ConnectorSetIEC62196Type3 ConnectorSet = "IEC62196Type3"
	// ConnectorSetStandardHouseholdCountrySpecific - These are the standard household connectors for a certain region. They are all AC single phase and the
// standard Voltage and standard Amperage.
// See also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets)
	ConnectorSetStandardHouseholdCountrySpecific ConnectorSet = "StandardHouseholdCountrySpecific"
	// ConnectorSetTesla - The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector,
// sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe.
	ConnectorSetTesla ConnectorSet = "Tesla"
)

// PossibleConnectorSetValues returns the possible values for the ConnectorSet const type.
func PossibleConnectorSetValues() []ConnectorSet {
	return []ConnectorSet{	
		ConnectorSetChademo,
		ConnectorSetIEC60309AC1PhaseBlue,
		ConnectorSetIEC60309DCWhite,
		ConnectorSetIEC62196Type1,
		ConnectorSetIEC62196Type1CCS,
		ConnectorSetIEC62196Type2CCS,
		ConnectorSetIEC62196Type2CableAttached,
		ConnectorSetIEC62196Type2Outlet,
		ConnectorSetIEC62196Type3,
		ConnectorSetStandardHouseholdCountrySpecific,
		ConnectorSetTesla,
	}
}

// ToPtr returns a *ConnectorSet pointing to the current value.
func (c ConnectorSet) ToPtr() *ConnectorSet {
	return &c
}

// EntityType - Geography entity type. Present only when entityType was requested and is available.
type EntityType string

const (
	// EntityTypeCountry - Country name
	EntityTypeCountry EntityType = "Country"
	// EntityTypeCountrySecondarySubdivision - County
	EntityTypeCountrySecondarySubdivision EntityType = "CountrySecondarySubdivision"
	// EntityTypeCountrySubdivision - State or Province
	EntityTypeCountrySubdivision EntityType = "CountrySubdivision"
	// EntityTypeCountryTertiarySubdivision - Named Area
	EntityTypeCountryTertiarySubdivision EntityType = "CountryTertiarySubdivision"
	// EntityTypeMunicipality - City / Town
	EntityTypeMunicipality EntityType = "Municipality"
	// EntityTypeMunicipalitySubdivision - Sub / Super City
	EntityTypeMunicipalitySubdivision EntityType = "MunicipalitySubdivision"
	// EntityTypeNeighbourhood - Neighbourhood
	EntityTypeNeighbourhood EntityType = "Neighbourhood"
	// EntityTypePostalCodeArea - Postal Code / Zip Code
	EntityTypePostalCodeArea EntityType = "PostalCodeArea"
)

// PossibleEntityTypeValues returns the possible values for the EntityType const type.
func PossibleEntityTypeValues() []EntityType {
	return []EntityType{	
		EntityTypeCountry,
		EntityTypeCountrySecondarySubdivision,
		EntityTypeCountrySubdivision,
		EntityTypeCountryTertiarySubdivision,
		EntityTypeMunicipality,
		EntityTypeMunicipalitySubdivision,
		EntityTypeNeighbourhood,
		EntityTypePostalCodeArea,
	}
}

// ToPtr returns a *EntityType pointing to the current value.
func (c EntityType) ToPtr() *EntityType {
	return &c
}

// EntryPointType - The type of entry point. Value can be either main or minor.
type EntryPointType string

const (
	EntryPointTypeMain EntryPointType = "main"
	EntryPointTypeMinor EntryPointType = "minor"
)

// PossibleEntryPointTypeValues returns the possible values for the EntryPointType const type.
func PossibleEntryPointTypeValues() []EntryPointType {
	return []EntryPointType{	
		EntryPointTypeMain,
		EntryPointTypeMinor,
	}
}

// ToPtr returns a *EntryPointType pointing to the current value.
func (c EntryPointType) ToPtr() *EntryPointType {
	return &c
}

// GeoJSONObjectType - Specifies the GeoJSON type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString,
// Polygon, MultiPolygon, GeometryCollection, Feature and
// FeatureCollection.
type GeoJSONObjectType string

const (
	// GeoJSONObjectTypeGeoJSONFeature - `GeoJSON Feature` object.
	GeoJSONObjectTypeGeoJSONFeature GeoJSONObjectType = "Feature"
	// GeoJSONObjectTypeGeoJSONFeatureCollection - `GeoJSON FeatureCollection` object.
	GeoJSONObjectTypeGeoJSONFeatureCollection GeoJSONObjectType = "FeatureCollection"
	// GeoJSONObjectTypeGeoJSONGeometryCollection - `GeoJSON GeometryCollection` geometry.
	GeoJSONObjectTypeGeoJSONGeometryCollection GeoJSONObjectType = "GeometryCollection"
	// GeoJSONObjectTypeGeoJSONLineString - `GeoJSON LineString` geometry.
	GeoJSONObjectTypeGeoJSONLineString GeoJSONObjectType = "LineString"
	// GeoJSONObjectTypeGeoJSONMultiLineString - `GeoJSON MultiLineString` geometry.
	GeoJSONObjectTypeGeoJSONMultiLineString GeoJSONObjectType = "MultiLineString"
	// GeoJSONObjectTypeGeoJSONMultiPoint - `GeoJSON MultiPoint` geometry.
	GeoJSONObjectTypeGeoJSONMultiPoint GeoJSONObjectType = "MultiPoint"
	// GeoJSONObjectTypeGeoJSONMultiPolygon - `GeoJSON MultiPolygon` geometry.
	GeoJSONObjectTypeGeoJSONMultiPolygon GeoJSONObjectType = "MultiPolygon"
	// GeoJSONObjectTypeGeoJSONPoint - `GeoJSON Point` geometry.
	GeoJSONObjectTypeGeoJSONPoint GeoJSONObjectType = "Point"
	// GeoJSONObjectTypeGeoJSONPolygon - `GeoJSON Polygon` geometry.
	GeoJSONObjectTypeGeoJSONPolygon GeoJSONObjectType = "Polygon"
)

// PossibleGeoJSONObjectTypeValues returns the possible values for the GeoJSONObjectType const type.
func PossibleGeoJSONObjectTypeValues() []GeoJSONObjectType {
	return []GeoJSONObjectType{	
		GeoJSONObjectTypeGeoJSONFeature,
		GeoJSONObjectTypeGeoJSONFeatureCollection,
		GeoJSONObjectTypeGeoJSONGeometryCollection,
		GeoJSONObjectTypeGeoJSONLineString,
		GeoJSONObjectTypeGeoJSONMultiLineString,
		GeoJSONObjectTypeGeoJSONMultiPoint,
		GeoJSONObjectTypeGeoJSONMultiPolygon,
		GeoJSONObjectTypeGeoJSONPoint,
		GeoJSONObjectTypeGeoJSONPolygon,
	}
}

// ToPtr returns a *GeoJSONObjectType pointing to the current value.
func (c GeoJSONObjectType) ToPtr() *GeoJSONObjectType {
	return &c
}

type GeographicResourceLocation string

const (
	// GeographicResourceLocationEu - Used to access an Azure Maps Creator resource in Europe
	GeographicResourceLocationEu GeographicResourceLocation = "eu"
	// GeographicResourceLocationUs - Used to access an Azure Maps Creator resource in the United States
	GeographicResourceLocationUs GeographicResourceLocation = "us"
)

// PossibleGeographicResourceLocationValues returns the possible values for the GeographicResourceLocation const type.
func PossibleGeographicResourceLocationValues() []GeographicResourceLocation {
	return []GeographicResourceLocation{	
		GeographicResourceLocationEu,
		GeographicResourceLocationUs,
	}
}

// ToPtr returns a *GeographicResourceLocation pointing to the current value.
func (c GeographicResourceLocation) ToPtr() *GeographicResourceLocation {
	return &c
}

// Geography - This parameter specifies where the Azure Maps Creator resource is located. Valid values are us and eu.
type Geography string

const (
	GeographyEu Geography = "eu"
	GeographyUs Geography = "us"
)

// PossibleGeographyValues returns the possible values for the Geography const type.
func PossibleGeographyValues() []Geography {
	return []Geography{	
		GeographyEu,
		GeographyUs,
	}
}

// ToPtr returns a *Geography pointing to the current value.
func (c Geography) ToPtr() *Geography {
	return &c
}

type OpeningHours string

const (
	// OpeningHoursNextSevenDays - Shows the hours of operation for the next week, starting with the current day in the local time of the POI.
	OpeningHoursNextSevenDays OpeningHours = "nextSevenDays"
)

// PossibleOpeningHoursValues returns the possible values for the OpeningHours const type.
func PossibleOpeningHoursValues() []OpeningHours {
	return []OpeningHours{	
		OpeningHoursNextSevenDays,
	}
}

// ToPtr returns a *OpeningHours pointing to the current value.
func (c OpeningHours) ToPtr() *OpeningHours {
	return &c
}

type ResponseFormat string

const (
	// ResponseFormatJSON - [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)
	ResponseFormatJSON ResponseFormat = "json"
)

// PossibleResponseFormatValues returns the possible values for the ResponseFormat const type.
func PossibleResponseFormatValues() []ResponseFormat {
	return []ResponseFormat{	
		ResponseFormatJSON,
	}
}

// ToPtr returns a *ResponseFormat pointing to the current value.
func (c ResponseFormat) ToPtr() *ResponseFormat {
	return &c
}

type SearchIndexSet string

const (
	// SearchIndexSetAddr - Address range interpolation
	SearchIndexSetAddr SearchIndexSet = "Addr"
	// SearchIndexSetGeo - Geographies
	SearchIndexSetGeo SearchIndexSet = "Geo"
	// SearchIndexSetPAD - Point Addresses
	SearchIndexSetPAD SearchIndexSet = "PAD"
	// SearchIndexSetPOI - Points of interest
	SearchIndexSetPOI SearchIndexSet = "POI"
	// SearchIndexSetStr - Streets
	SearchIndexSetStr SearchIndexSet = "Str"
	// SearchIndexSetXstr - Cross Streets (Intersections)
	SearchIndexSetXstr SearchIndexSet = "Xstr"
)

// PossibleSearchIndexSetValues returns the possible values for the SearchIndexSet const type.
func PossibleSearchIndexSetValues() []SearchIndexSet {
	return []SearchIndexSet{	
		SearchIndexSetAddr,
		SearchIndexSetGeo,
		SearchIndexSetPAD,
		SearchIndexSetPOI,
		SearchIndexSetStr,
		SearchIndexSetXstr,
	}
}

// ToPtr returns a *SearchIndexSet pointing to the current value.
func (c SearchIndexSet) ToPtr() *SearchIndexSet {
	return &c
}

type TextFormat string

const (
	// TextFormatJSON - [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)
	TextFormatJSON TextFormat = "json"
	// TextFormatXML - [The Extensible Markup Language](https://www.w3.org/TR/xml/)
	TextFormatXML TextFormat = "xml"
)

// PossibleTextFormatValues returns the possible values for the TextFormat const type.
func PossibleTextFormatValues() []TextFormat {
	return []TextFormat{	
		TextFormatJSON,
		TextFormatXML,
	}
}

// ToPtr returns a *TextFormat pointing to the current value.
func (c TextFormat) ToPtr() *TextFormat {
	return &c
}

