// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package search

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// SearchAddressBatchResponsePoller provides polling facilities until the operation reaches a terminal state.
type SearchAddressBatchResponsePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final SearchAddressBatchResponseResponse will be returned.
	FinalResponse(ctx context.Context) (SearchAddressBatchResponseResponse, error)
}

type searchAddressBatchResponsePoller struct {
	pt *azcore.LROPoller
}

func (p *searchAddressBatchResponsePoller) Done() bool {
	return p.pt.Done()
}

func (p *searchAddressBatchResponsePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *searchAddressBatchResponsePoller) FinalResponse(ctx context.Context) (SearchAddressBatchResponseResponse, error) {
	respType := SearchAddressBatchResponseResponse{SearchAddressBatchResponse: &SearchAddressBatchResponse{}}
	resp, err := p.pt.FinalResponse(ctx, respType.SearchAddressBatchResponse)
	if err != nil {
		return SearchAddressBatchResponseResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *searchAddressBatchResponsePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *searchAddressBatchResponsePoller) pollUntilDone(ctx context.Context, freq time.Duration) (SearchAddressBatchResponseResponse, error) {
	respType := SearchAddressBatchResponseResponse{SearchAddressBatchResponse: &SearchAddressBatchResponse{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.SearchAddressBatchResponse)
	if err != nil {
		return SearchAddressBatchResponseResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// SearchAddressReverseBatchResponsePoller provides polling facilities until the operation reaches a terminal state.
type SearchAddressReverseBatchResponsePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final SearchAddressReverseBatchResponseResponse will be returned.
	FinalResponse(ctx context.Context) (SearchAddressReverseBatchResponseResponse, error)
}

type searchAddressReverseBatchResponsePoller struct {
	pt *azcore.LROPoller
}

func (p *searchAddressReverseBatchResponsePoller) Done() bool {
	return p.pt.Done()
}

func (p *searchAddressReverseBatchResponsePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *searchAddressReverseBatchResponsePoller) FinalResponse(ctx context.Context) (SearchAddressReverseBatchResponseResponse, error) {
	respType := SearchAddressReverseBatchResponseResponse{SearchAddressReverseBatchResponse: &SearchAddressReverseBatchResponse{}}
	resp, err := p.pt.FinalResponse(ctx, respType.SearchAddressReverseBatchResponse)
	if err != nil {
		return SearchAddressReverseBatchResponseResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *searchAddressReverseBatchResponsePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *searchAddressReverseBatchResponsePoller) pollUntilDone(ctx context.Context, freq time.Duration) (SearchAddressReverseBatchResponseResponse, error) {
	respType := SearchAddressReverseBatchResponseResponse{SearchAddressReverseBatchResponse: &SearchAddressReverseBatchResponse{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.SearchAddressReverseBatchResponse)
	if err != nil {
		return SearchAddressReverseBatchResponseResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// SearchFuzzyBatchResponsePoller provides polling facilities until the operation reaches a terminal state.
type SearchFuzzyBatchResponsePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final SearchFuzzyBatchResponseResponse will be returned.
	FinalResponse(ctx context.Context) (SearchFuzzyBatchResponseResponse, error)
}

type searchFuzzyBatchResponsePoller struct {
	pt *azcore.LROPoller
}

func (p *searchFuzzyBatchResponsePoller) Done() bool {
	return p.pt.Done()
}

func (p *searchFuzzyBatchResponsePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *searchFuzzyBatchResponsePoller) FinalResponse(ctx context.Context) (SearchFuzzyBatchResponseResponse, error) {
	respType := SearchFuzzyBatchResponseResponse{SearchFuzzyBatchResponse: &SearchFuzzyBatchResponse{}}
	resp, err := p.pt.FinalResponse(ctx, respType.SearchFuzzyBatchResponse)
	if err != nil {
		return SearchFuzzyBatchResponseResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *searchFuzzyBatchResponsePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *searchFuzzyBatchResponsePoller) pollUntilDone(ctx context.Context, freq time.Duration) (SearchFuzzyBatchResponseResponse, error) {
	respType := SearchFuzzyBatchResponseResponse{SearchFuzzyBatchResponse: &SearchFuzzyBatchResponse{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.SearchFuzzyBatchResponse)
	if err != nil {
		return SearchFuzzyBatchResponseResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

