// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package timezone

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// CountryRecord - A country record.
type CountryRecord struct {
	// READ-ONLY; ISO-3166 2-letter country code for the country.
	Code *string `json:"Code,omitempty" azure:"ro"`

	// READ-ONLY; Country Name
	Name *string `json:"Name,omitempty" azure:"ro"`
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

type IanaID struct {
	// READ-ONLY; AliasOf property
	AliasOf *string `json:"aliasOf,omitempty" azure:"ro"`

	// READ-ONLY; HasZone1970Location property
	HasZone1970Location *bool `json:"hasZone1970Location,omitempty" azure:"ro"`

	// READ-ONLY; Id property
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; IsAlias property
	IsAlias *bool `json:"isAlias,omitempty" azure:"ro"`
}

// ReferenceTimeByCoordinates - Details in effect at the local time.
type ReferenceTimeByCoordinates struct {
	// READ-ONLY; Time saving in minutes in effect at the ReferenceUTCTimestamp.
	DaylightSavings *string `json:"DaylightSavings,omitempty" azure:"ro"`

	// READ-ONLY; POSIX string used to set the time zone environment variable.
	PosixTz *string `json:"PosixTz,omitempty" azure:"ro"`

	// READ-ONLY; The year this POSIX string is valid for. Note: A POSIX string will only be valid in the given year.
	PosixTzValidYear *int32 `json:"PosixTzValidYear,omitempty" azure:"ro"`

	// READ-ONLY; UTC offset in effect at the ReferenceUTCTimestamp.
	StandardOffset *string `json:"StandardOffset,omitempty" azure:"ro"`

	// READ-ONLY; Sunrise at the given time zone as shown in the Tag property.
	Sunrise *string `json:"Sunrise,omitempty" azure:"ro"`

	// READ-ONLY; Sunset at the given time zone as shown in the Tag property.
	Sunset *string `json:"Sunset,omitempty" azure:"ro"`

	// READ-ONLY; Time zone name in effect at the reference timestamp (i.e. PST or PDT depending whether Daylight Savings Time is in effect).
	Tag *string `json:"Tag,omitempty" azure:"ro"`

	// READ-ONLY; Current wall time at the given time zone as shown in the Tag property.
	WallTime *string `json:"WallTime,omitempty" azure:"ro"`
}

// ReferenceTimeByID - Details in effect at the local time.
type ReferenceTimeByID struct {
	// READ-ONLY; Time saving in minutes in effect at the ReferenceUTCTimestamp.
	DaylightSavings *string `json:"DaylightSavings,omitempty" azure:"ro"`

	// READ-ONLY; POSIX string used to set the time zone environment variable.
	PosixTz *string `json:"PosixTz,omitempty" azure:"ro"`

	// READ-ONLY; The year this POSIX string is valid for. Note: A POSIX string will only be valid in the given year.
	PosixTzValidYear *int32 `json:"PosixTzValidYear,omitempty" azure:"ro"`

	// READ-ONLY; UTC offset in effect at the ReferenceUTCTimestamp.
	StandardOffset *string `json:"StandardOffset,omitempty" azure:"ro"`

	// READ-ONLY; Time zone name in effect at the reference timestamp (i.e. PST or PDT depending whether Daylight Savings Time is in effect).
	Tag *string `json:"Tag,omitempty" azure:"ro"`

	// READ-ONLY; Current wall time at the given time zone as shown in the Tag property.
	WallTime *string `json:"WallTime,omitempty" azure:"ro"`
}

// RepresentativePoint - Representative point property
type RepresentativePoint struct {
	// READ-ONLY; Latitude property
	Latitude *float32 `json:"Latitude,omitempty" azure:"ro"`

	// READ-ONLY; Longitude property
	Longitude *float32 `json:"Longitude,omitempty" azure:"ro"`
}

type TimeTransition struct {
	// READ-ONLY; DaylightSavings property
	DaylightSavings *string `json:"DaylightSavings,omitempty" azure:"ro"`

	// READ-ONLY; StandardOffset property
	StandardOffset *string `json:"StandardOffset,omitempty" azure:"ro"`

	// READ-ONLY; Tag property
	Tag *string `json:"Tag,omitempty" azure:"ro"`

	// READ-ONLY; End date, end time for this transition period
	UTCEnd *time.Time `json:"UtcEnd,omitempty" azure:"ro"`

	// READ-ONLY; Start date, start time for this transition period
	UTCStart *time.Time `json:"UtcStart,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TimeTransition.
func (t TimeTransition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "DaylightSavings", t.DaylightSavings)
	populate(objectMap, "StandardOffset", t.StandardOffset)
	populate(objectMap, "Tag", t.Tag)
	populate(objectMap, "UtcEnd", (*timeRFC3339)(t.UTCEnd))
	populate(objectMap, "UtcStart", (*timeRFC3339)(t.UTCStart))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TimeTransition.
func (t *TimeTransition) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "DaylightSavings":
				err = unpopulate(val, &t.DaylightSavings)
				delete(rawMsg, key)
		case "StandardOffset":
				err = unpopulate(val, &t.StandardOffset)
				delete(rawMsg, key)
		case "Tag":
				err = unpopulate(val, &t.Tag)
				delete(rawMsg, key)
		case "UtcEnd":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				t.UTCEnd = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "UtcStart":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				t.UTCStart = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

type TimeZoneByCoordinates struct {
	// Timezone names object.
	Names *TimezoneNames `json:"Names,omitempty"`

	// READ-ONLY; An array of time zone ID aliases. Only returned when [options]=zoneinfo or all.
// Note: may be null.
	Aliases []*string `json:"Aliases,omitempty" azure:"ro"`

	// READ-ONLY; An array of country records. Only returned when [options]=zoneinfo or all.
	Countries []*CountryRecord `json:"Countries,omitempty" azure:"ro"`

	// READ-ONLY; Id property
	ID *string `json:"Id,omitempty" azure:"ro"`

	// READ-ONLY; Details in effect at the local time.
	ReferenceTime *ReferenceTimeByCoordinates `json:"ReferenceTime,omitempty" azure:"ro"`

	// READ-ONLY; Representative point property
	RepresentativePoint *RepresentativePoint `json:"RepresentativePoint,omitempty" azure:"ro"`

	// READ-ONLY; Time zone DST transitions from [transitionsFrom] until timestamp + 1 year.
	TimeTransitions []*TimeTransition `json:"TimeTransitions,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TimeZoneByCoordinates.
func (t TimeZoneByCoordinates) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "Aliases", t.Aliases)
	populate(objectMap, "Countries", t.Countries)
	populate(objectMap, "Id", t.ID)
	populate(objectMap, "Names", t.Names)
	populate(objectMap, "ReferenceTime", t.ReferenceTime)
	populate(objectMap, "RepresentativePoint", t.RepresentativePoint)
	populate(objectMap, "TimeTransitions", t.TimeTransitions)
	return json.Marshal(objectMap)
}

// TimezoneByCoordinatesResult - This object is returned from a successful Timezone By Coordinates call
type TimezoneByCoordinatesResult struct {
	// READ-ONLY; Reference Utc Timestamp property
	ReferenceUTCTimestamp *time.Time `json:"ReferenceUtcTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; TimeZoneByCoordinates array
	TimeZones []*TimeZoneByCoordinates `json:"TimeZones,omitempty" azure:"ro"`

	// READ-ONLY; Version property
	Version *string `json:"Version,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TimezoneByCoordinatesResult.
func (t TimezoneByCoordinatesResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ReferenceUtcTimestamp", (*timeRFC3339)(t.ReferenceUTCTimestamp))
	populate(objectMap, "TimeZones", t.TimeZones)
	populate(objectMap, "Version", t.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TimezoneByCoordinatesResult.
func (t *TimezoneByCoordinatesResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "ReferenceUtcTimestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				t.ReferenceUTCTimestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "TimeZones":
				err = unpopulate(val, &t.TimeZones)
				delete(rawMsg, key)
		case "Version":
				err = unpopulate(val, &t.Version)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

type TimezoneByID struct {
	// Timezone names object.
	Names *TimezoneNames `json:"Names,omitempty"`

	// READ-ONLY; An array of time zone ID aliases. Only returned when [options]=zoneinfo or all.
// Note: may be null.
	Aliases []*string `json:"Aliases,omitempty" azure:"ro"`

	// READ-ONLY; An array of country records. Only returned when [options]=zoneinfo or all.
	Countries []*CountryRecord `json:"Countries,omitempty" azure:"ro"`

	// READ-ONLY; Id property
	ID *string `json:"Id,omitempty" azure:"ro"`

	// READ-ONLY; Details in effect at the local time.
	ReferenceTime *ReferenceTimeByID `json:"ReferenceTime,omitempty" azure:"ro"`

	// READ-ONLY; Representative point property
	RepresentativePoint *RepresentativePoint `json:"RepresentativePoint,omitempty" azure:"ro"`

	// READ-ONLY; Time zone DST transitions from [transitionsFrom] until timestamp + 1 year.
	TimeTransitions []*TimeTransition `json:"TimeTransitions,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TimezoneByID.
func (t TimezoneByID) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "Aliases", t.Aliases)
	populate(objectMap, "Countries", t.Countries)
	populate(objectMap, "Id", t.ID)
	populate(objectMap, "Names", t.Names)
	populate(objectMap, "ReferenceTime", t.ReferenceTime)
	populate(objectMap, "RepresentativePoint", t.RepresentativePoint)
	populate(objectMap, "TimeTransitions", t.TimeTransitions)
	return json.Marshal(objectMap)
}

// TimezoneByIDResult - This object is returned from a successful Timezone By ID call
type TimezoneByIDResult struct {
	// READ-ONLY; Reference Utc Timestamp property
	ReferenceUTCTimestamp *time.Time `json:"ReferenceUtcTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; TimeZoneById array
	TimeZones []*TimezoneByID `json:"TimeZones,omitempty" azure:"ro"`

	// READ-ONLY; Version property
	Version *string `json:"Version,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TimezoneByIDResult.
func (t TimezoneByIDResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ReferenceUtcTimestamp", (*timeRFC3339)(t.ReferenceUTCTimestamp))
	populate(objectMap, "TimeZones", t.TimeZones)
	populate(objectMap, "Version", t.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TimezoneByIDResult.
func (t *TimezoneByIDResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "ReferenceUtcTimestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				t.ReferenceUTCTimestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "TimeZones":
				err = unpopulate(val, &t.TimeZones)
				delete(rawMsg, key)
		case "Version":
				err = unpopulate(val, &t.Version)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

type TimezoneEnumWindow struct {
	// IanaIds array
	IanaIDs []*string `json:"IanaIds,omitempty"`

	// READ-ONLY; Territory property
	Territory *string `json:"Territory,omitempty" azure:"ro"`

	// READ-ONLY; Windows Id property
	WindowsID *string `json:"WindowsId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TimezoneEnumWindow.
func (t TimezoneEnumWindow) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "IanaIds", t.IanaIDs)
	populate(objectMap, "Territory", t.Territory)
	populate(objectMap, "WindowsId", t.WindowsID)
	return json.Marshal(objectMap)
}

// TimezoneGetTimezoneByCoordinatesOptions contains the optional parameters for the Timezone.GetTimezoneByCoordinates method.
type TimezoneGetTimezoneByCoordinatesOptions struct {
	// Specifies the language code in which the timezone names should be returned. If no language code is provided, the response will be in "EN". Please refer
// to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
	AcceptLanguage *string
	// Alternatively, use alias "o". Options available for types of information returned in the result.
	Options *TimezoneOptions
	// Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the machine time serving the request.
	TimeStamp *time.Time
	// Alternatively, use alias "tf". The start date from which daylight savings time (DST) transitions are requested, only applies when "options" = all or
// "options" = transitions.
	TransitionsFrom *time.Time
	// Alternatively, use alias "ty". The number of years from "transitionsFrom" for which DST transitions are requested, only applies when "options" = all
// or "options" = transitions.
	TransitionsYears *int32
}

// TimezoneGetTimezoneByIDOptions contains the optional parameters for the Timezone.GetTimezoneByID method.
type TimezoneGetTimezoneByIDOptions struct {
	// Specifies the language code in which the timezone names should be returned. If no language code is provided, the response will be in "EN". Please refer
// to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
	AcceptLanguage *string
	// Alternatively, use alias "o". Options available for types of information returned in the result.
	Options *TimezoneOptions
	// Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the machine time serving the request.
	TimeStamp *time.Time
	// Alternatively, use alias "tf". The start date from which daylight savings time (DST) transitions are requested, only applies when "options" = all or
// "options" = transitions.
	TransitionsFrom *time.Time
	// Alternatively, use alias "ty". The number of years from "transitionsFrom" for which DST transitions are requested, only applies when "options" = all
// or "options" = transitions.
	TransitionsYears *int32
}

// TimezoneGetTimezoneEnumIANAOptions contains the optional parameters for the Timezone.GetTimezoneEnumIANA method.
type TimezoneGetTimezoneEnumIANAOptions struct {
	// placeholder for future optional parameters
}

// TimezoneGetTimezoneEnumWindowsOptions contains the optional parameters for the Timezone.GetTimezoneEnumWindows method.
type TimezoneGetTimezoneEnumWindowsOptions struct {
	// placeholder for future optional parameters
}

// TimezoneGetTimezoneIANAVersionOptions contains the optional parameters for the Timezone.GetTimezoneIANAVersion method.
type TimezoneGetTimezoneIANAVersionOptions struct {
	// placeholder for future optional parameters
}

// TimezoneGetTimezoneWindowsToIANAOptions contains the optional parameters for the Timezone.GetTimezoneWindowsToIANA method.
type TimezoneGetTimezoneWindowsToIANAOptions struct {
	// Windows Time Zone territory code.
	Territory *string
}

// TimezoneIanaVersionResult - This object is returned from a successful Timezone IANA Version call
type TimezoneIanaVersionResult struct {
	// READ-ONLY; Version property
	Version *string `json:"version,omitempty" azure:"ro"`
}

// TimezoneNames - Timezone names object.
type TimezoneNames struct {
	// READ-ONLY; Daylight Name
	Daylight *string `json:"Daylight,omitempty" azure:"ro"`

	// READ-ONLY; Generic Name
	Generic *string `json:"Generic,omitempty" azure:"ro"`

	// READ-ONLY; The ISO 639-1 language code of the Names
	ISO6391LanguageCode *string `json:"ISO6391LanguageCode,omitempty" azure:"ro"`

	// READ-ONLY; Standard Name
	Standard *string `json:"Standard,omitempty" azure:"ro"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}

