// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package traffic

const telemetryInfo = "azsdk-go-traffic/<version>"
type GeographicResourceLocation string

const (
	// GeographicResourceLocationEu - Used to access an Azure Maps Creator resource in Europe
	GeographicResourceLocationEu GeographicResourceLocation = "eu"
	// GeographicResourceLocationUs - Used to access an Azure Maps Creator resource in the United States
	GeographicResourceLocationUs GeographicResourceLocation = "us"
)

// PossibleGeographicResourceLocationValues returns the possible values for the GeographicResourceLocation const type.
func PossibleGeographicResourceLocationValues() []GeographicResourceLocation {
	return []GeographicResourceLocation{	
		GeographicResourceLocationEu,
		GeographicResourceLocationUs,
	}
}

// ToPtr returns a *GeographicResourceLocation pointing to the current value.
func (c GeographicResourceLocation) ToPtr() *GeographicResourceLocation {
	return &c
}

// Geography - This parameter specifies where the Azure Maps Creator resource is located. Valid values are us and eu.
type Geography string

const (
	GeographyEu Geography = "eu"
	GeographyUs Geography = "us"
)

// PossibleGeographyValues returns the possible values for the Geography const type.
func PossibleGeographyValues() []Geography {
	return []Geography{	
		GeographyEu,
		GeographyUs,
	}
}

// ToPtr returns a *Geography pointing to the current value.
func (c Geography) ToPtr() *Geography {
	return &c
}

type IncidentGeometryType string

const (
	// IncidentGeometryTypeOriginal - Places incidents precisely on the road.
	IncidentGeometryTypeOriginal IncidentGeometryType = "original"
	// IncidentGeometryTypeShifted - Moves the incident slightly (depending on zoom level) to indicate specific road lanes.
	IncidentGeometryTypeShifted IncidentGeometryType = "shifted"
)

// PossibleIncidentGeometryTypeValues returns the possible values for the IncidentGeometryType const type.
func PossibleIncidentGeometryTypeValues() []IncidentGeometryType {
	return []IncidentGeometryType{	
		IncidentGeometryTypeOriginal,
		IncidentGeometryTypeShifted,
	}
}

// ToPtr returns a *IncidentGeometryType pointing to the current value.
func (c IncidentGeometryType) ToPtr() *IncidentGeometryType {
	return &c
}

type ProjectionStandard string

const (
	// ProjectionStandardEPSG4326 - [EPSG4326](http://spatialreference.org/ref/epsg/4326/)
	ProjectionStandardEPSG4326 ProjectionStandard = "EPSG4326"
	// ProjectionStandardEPSG900913 - [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html)
	ProjectionStandardEPSG900913 ProjectionStandard = "EPSG900913"
)

// PossibleProjectionStandardValues returns the possible values for the ProjectionStandard const type.
func PossibleProjectionStandardValues() []ProjectionStandard {
	return []ProjectionStandard{	
		ProjectionStandardEPSG4326,
		ProjectionStandardEPSG900913,
	}
}

// ToPtr returns a *ProjectionStandard pointing to the current value.
func (c ProjectionStandard) ToPtr() *ProjectionStandard {
	return &c
}

type SpeedUnit string

const (
	// SpeedUnitKMPH - Kilometers Per Hour
	SpeedUnitKMPH SpeedUnit = "KMPH"
	// SpeedUnitMPH - Miles Per Hour
	SpeedUnitMPH SpeedUnit = "MPH"
)

// PossibleSpeedUnitValues returns the possible values for the SpeedUnit const type.
func PossibleSpeedUnitValues() []SpeedUnit {
	return []SpeedUnit{	
		SpeedUnitKMPH,
		SpeedUnitMPH,
	}
}

// ToPtr returns a *SpeedUnit pointing to the current value.
func (c SpeedUnit) ToPtr() *SpeedUnit {
	return &c
}

type TextFormat string

const (
	// TextFormatJSON - [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)
	TextFormatJSON TextFormat = "json"
	// TextFormatXML - [The Extensible Markup Language](https://www.w3.org/TR/xml/)
	TextFormatXML TextFormat = "xml"
)

// PossibleTextFormatValues returns the possible values for the TextFormat const type.
func PossibleTextFormatValues() []TextFormat {
	return []TextFormat{	
		TextFormatJSON,
		TextFormatXML,
	}
}

// ToPtr returns a *TextFormat pointing to the current value.
func (c TextFormat) ToPtr() *TextFormat {
	return &c
}

type TileFormat string

const (
	// TileFormatPNG - An image in the png format. Supports zoom levels 0 through 18.
	TileFormatPNG TileFormat = "png"
	// TileFormatPbf - Vector graphic in the pbf format. Supports zoom levels 0 through 22.
	TileFormatPbf TileFormat = "pbf"
)

// PossibleTileFormatValues returns the possible values for the TileFormat const type.
func PossibleTileFormatValues() []TileFormat {
	return []TileFormat{	
		TileFormatPNG,
		TileFormatPbf,
	}
}

// ToPtr returns a *TileFormat pointing to the current value.
func (c TileFormat) ToPtr() *TileFormat {
	return &c
}

type TrafficFlowSegmentStyle string

const (
	TrafficFlowSegmentStyleAbsolute TrafficFlowSegmentStyle = "absolute"
	TrafficFlowSegmentStyleRelative TrafficFlowSegmentStyle = "relative"
	TrafficFlowSegmentStyleRelativeDelay TrafficFlowSegmentStyle = "relative-delay"
)

// PossibleTrafficFlowSegmentStyleValues returns the possible values for the TrafficFlowSegmentStyle const type.
func PossibleTrafficFlowSegmentStyleValues() []TrafficFlowSegmentStyle {
	return []TrafficFlowSegmentStyle{	
		TrafficFlowSegmentStyleAbsolute,
		TrafficFlowSegmentStyleRelative,
		TrafficFlowSegmentStyleRelativeDelay,
	}
}

// ToPtr returns a *TrafficFlowSegmentStyle pointing to the current value.
func (c TrafficFlowSegmentStyle) ToPtr() *TrafficFlowSegmentStyle {
	return &c
}

type TrafficFlowTileStyle string

const (
	// TrafficFlowTileStyleAbsolute - Colors will reflect the absolute speed measured. Absolute speed is the capability to access the full speed.
	TrafficFlowTileStyleAbsolute TrafficFlowTileStyle = "absolute"
	// TrafficFlowTileStyleReducedSensitivity - Displays relative colors but a larger difference from freeflow is required for segments to change the color.
// This mode only valid when format is png.
	TrafficFlowTileStyleReducedSensitivity TrafficFlowTileStyle = "reduced-sensitivity"
	// TrafficFlowTileStyleRelative - This is the speed relative to free-flow, highlighting areas of congestion visualizing the traffic flow. Free-flow refers
// to conditions where there is no congestion and traffic can follow the speed limits. The most used option to visualize traffic flow on a map.
	TrafficFlowTileStyleRelative TrafficFlowTileStyle = "relative"
	// TrafficFlowTileStyleRelativeDelay - Displays relative colors only where they are different from the free-flow speeds. This option will only highlights
// areas of congestion.
	TrafficFlowTileStyleRelativeDelay TrafficFlowTileStyle = "relative-delay"
)

// PossibleTrafficFlowTileStyleValues returns the possible values for the TrafficFlowTileStyle const type.
func PossibleTrafficFlowTileStyleValues() []TrafficFlowTileStyle {
	return []TrafficFlowTileStyle{	
		TrafficFlowTileStyleAbsolute,
		TrafficFlowTileStyleReducedSensitivity,
		TrafficFlowTileStyleRelative,
		TrafficFlowTileStyleRelativeDelay,
	}
}

// ToPtr returns a *TrafficFlowTileStyle pointing to the current value.
func (c TrafficFlowTileStyle) ToPtr() *TrafficFlowTileStyle {
	return &c
}

type TrafficIncidentDetailStyle string

const (
	// TrafficIncidentDetailStyleNight - Night style.
	TrafficIncidentDetailStyleNight TrafficIncidentDetailStyle = "night"
	// TrafficIncidentDetailStyleS1 - Creates traffic lines with colored chevrons indicating severity.
	TrafficIncidentDetailStyleS1 TrafficIncidentDetailStyle = "s1"
	// TrafficIncidentDetailStyleS2 - Creates plain lines with certain degree of glow.
	TrafficIncidentDetailStyleS2 TrafficIncidentDetailStyle = "s2"
	// TrafficIncidentDetailStyleS3 - Creates plain lines with certain degree of glow.
	TrafficIncidentDetailStyleS3 TrafficIncidentDetailStyle = "s3"
)

// PossibleTrafficIncidentDetailStyleValues returns the possible values for the TrafficIncidentDetailStyle const type.
func PossibleTrafficIncidentDetailStyleValues() []TrafficIncidentDetailStyle {
	return []TrafficIncidentDetailStyle{	
		TrafficIncidentDetailStyleNight,
		TrafficIncidentDetailStyleS1,
		TrafficIncidentDetailStyleS2,
		TrafficIncidentDetailStyleS3,
	}
}

// ToPtr returns a *TrafficIncidentDetailStyle pointing to the current value.
func (c TrafficIncidentDetailStyle) ToPtr() *TrafficIncidentDetailStyle {
	return &c
}

type TrafficIncidentTileStyle string

const (
	// TrafficIncidentTileStyleNight - Night style.
	TrafficIncidentTileStyleNight TrafficIncidentTileStyle = "night"
	// TrafficIncidentTileStyleS1 - Creates traffic lines with colored chevrons indicating severity.
	TrafficIncidentTileStyleS1 TrafficIncidentTileStyle = "s1"
	// TrafficIncidentTileStyleS2 - Creates plain lines with certain degree of glow.
	TrafficIncidentTileStyleS2 TrafficIncidentTileStyle = "s2"
	// TrafficIncidentTileStyleS3 - Creates plain lines with certain degree of glow.
	TrafficIncidentTileStyleS3 TrafficIncidentTileStyle = "s3"
)

// PossibleTrafficIncidentTileStyleValues returns the possible values for the TrafficIncidentTileStyle const type.
func PossibleTrafficIncidentTileStyleValues() []TrafficIncidentTileStyle {
	return []TrafficIncidentTileStyle{	
		TrafficIncidentTileStyleNight,
		TrafficIncidentTileStyleS1,
		TrafficIncidentTileStyleS2,
		TrafficIncidentTileStyleS3,
	}
}

// ToPtr returns a *TrafficIncidentTileStyle pointing to the current value.
func (c TrafficIncidentTileStyle) ToPtr() *TrafficIncidentTileStyle {
	return &c
}

