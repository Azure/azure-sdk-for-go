// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package traffic

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// CoordinatesPair - A location represented as a latitude and longitude.
type CoordinatesPair struct {
	// Latitude property
	Latitude *float64 `json:"latitude,omitempty"`

	// Longitude property
	Longitude *float64 `json:"longitude,omitempty"`
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// TrafficFlowSegmentResult - This object is returned from a successful Traffic Flow Segment call
type TrafficFlowSegmentResult struct {
	// READ-ONLY; Flow Segment Data property
	FlowSegmentData *TrafficFlowSegmentResultFlowSegmentData `json:"flowSegmentData,omitempty" azure:"ro"`
}

// TrafficFlowSegmentResultFlowSegmentData - Flow Segment Data property
type TrafficFlowSegmentResultFlowSegmentData struct {
	// Includes the coordinates describing the shape of the segment. Coordinates are shifted from the road depending on the zoom level to support high quality
// visualization in every scale.
	Coordinates *TrafficFlowSegmentResultFlowSegmentDataCoordinates `json:"coordinates,omitempty"`

	// READ-ONLY; The confidence is a measure of the quality of the provided travel time and speed. A value of 1 means full confidence, that the response contains
// the highest quality data. Lower values indicate the
// degree that the response may vary from the actual conditions on the road. Any value greater than 0.6 means the information was based on real-time probe
// input. A value of 0.5 means the reported speed
// is based on historical info. A value between 0.5 and 0.6 has a calculated weighted average between historical and live speeds.
	Confidence *float32 `json:"confidence,omitempty" azure:"ro"`

	// READ-ONLY; The current average speed at the selected point, in the units requested. This is calculated from the currentTravelTime and the length of the
// selected segment.
	CurrentSpeed *int32 `json:"currentSpeed,omitempty" azure:"ro"`

	// READ-ONLY; Current travel time in seconds based on fused real-time measurements between the defined locations in the specified direction.
	CurrentTravelTime *int32 `json:"currentTravelTime,omitempty" azure:"ro"`

	// READ-ONLY; Functional Road Class. This indicates the road type: 0: Motorway, freeway or other major road. 1: Major road, less important than a motorway.
// 2: Other major road. 3: Secondary road. 4: Local
// connecting road. 5: Local road of high importance. 6: Local road.
	Frc *string `json:"frc,omitempty" azure:"ro"`

	// READ-ONLY; The free flow speed expected under ideal conditions, expressed in the units requested. This is related to the freeFlowTravelTime.
	FreeFlowSpeed *int32 `json:"freeFlowSpeed,omitempty" azure:"ro"`

	// READ-ONLY; The travel time in seconds which would be expected under ideal free flow conditions.
	FreeFlowTravelTime *int32 `json:"freeFlowTravelTime,omitempty" azure:"ro"`

	// READ-ONLY; OpenLR code for segment
	Openlr *float32 `json:"openlr,omitempty" azure:"ro"`

	// READ-ONLY; This indicates the software version that generated the response.
	Version *string `json:"@version,omitempty" azure:"ro"`
}

// TrafficFlowSegmentResultFlowSegmentDataCoordinates - Includes the coordinates describing the shape of the segment. Coordinates are shifted from the road
// depending on the zoom level to support high quality visualization in every scale.
type TrafficFlowSegmentResultFlowSegmentDataCoordinates struct {
	// READ-ONLY; Coordinate array
	Coordinate []*CoordinatesPair `json:"coordinate,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TrafficFlowSegmentResultFlowSegmentDataCoordinates.
func (t TrafficFlowSegmentResultFlowSegmentDataCoordinates) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "coordinate", t.Coordinate)
	return json.Marshal(objectMap)
}

// TrafficGetTrafficFlowSegmentOptions contains the optional parameters for the Traffic.GetTrafficFlowSegment method.
type TrafficGetTrafficFlowSegmentOptions struct {
	// Boolean on whether the response should include OpenLR code
	OpenLr *bool
	// The value of the width of the line representing traffic. This value is a multiplier and the accepted values range from 1 - 20. The default value is 10.
	Thickness *int32
	// Unit of speed in KMPH or MPH
	Unit *SpeedUnit
}

// TrafficGetTrafficFlowTileOptions contains the optional parameters for the Traffic.GetTrafficFlowTile method.
type TrafficGetTrafficFlowTileOptions struct {
	// The value of the width of the line representing traffic. This value is a multiplier and the accepted values range from 1 - 20. The default value is 10.
// This parameter is not valid when format is pbf.
	Thickness *int32
}

// TrafficGetTrafficIncidentDetailOptions contains the optional parameters for the Traffic.GetTrafficIncidentDetail method.
type TrafficGetTrafficIncidentDetailOptions struct {
	// Boolean to indicate whether to list all traffic incidents in a cluster separately
	ExpandCluster *bool
	// The type of vector geometry added to incidents (returned in the <v> element of the response).
	Geometries *IncidentGeometryType
	// [ISO 639-1 code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for the output language. Supported languages are ar, ca, cs, da, de, el, en,
// en-GB, en-US, es, et, fi, fr, he, hu, id, in*, it, lt, lv, nb, nl, no, pl, pt, ro, ru, sk, sv, th, tr, zh.
// Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details. When invalid language code
// is provided response is returned in English. When incident cause or description does not have translation, English description is returned.
	Language *string
	// Boolean on whether to return the original position of the incident (<op>) as well as the one shifted to the beginning of the traffic tube (<op>)
	OriginalPosition *bool
	// The projection used to specify the coordinates in the request and response. [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html)
// (default) or [EPSG4326](http://spatialreference.org/ref/epsg/4326/)
	Projection *ProjectionStandard
}

// TrafficGetTrafficIncidentTileOptions contains the optional parameters for the Traffic.GetTrafficIncidentTile method.
type TrafficGetTrafficIncidentTileOptions struct {
	// Reference value for the state of traffic at a particular time, obtained from the Viewport API call, trafficModelId attribute in trafficState field. It
// is updated every minute, and is valid for two minutes before it times out. Use -1 to get the most recent traffic information. Default: most recent traffic
// information.
	TrafficState *string
}

// TrafficGetTrafficIncidentViewportOptions contains the optional parameters for the Traffic.GetTrafficIncidentViewport method.
type TrafficGetTrafficIncidentViewportOptions struct {
	// Determines what copyright information to return. When true the copyright text is returned; when false only the copyright index is returned.
	Copyright *bool
}

// TrafficIncidentDetailResult - This object is returned from a successful Traffic incident Detail call
type TrafficIncidentDetailResult struct {
	// READ-ONLY; Main response element
	Tm *TrafficIncidentDetailResultTm `json:"tm,omitempty" azure:"ro"`
}

// TrafficIncidentDetailResultTm - Main response element
type TrafficIncidentDetailResultTm struct {
	// READ-ONLY; ID of the traffic incident
	ID *string `json:"@id,omitempty" azure:"ro"`

	// READ-ONLY; A single traffic incident, or a cluster of traffic incidents
	Poi []*TrafficIncidentPoi `json:"poi,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TrafficIncidentDetailResultTm.
func (t TrafficIncidentDetailResultTm) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "@id", t.ID)
	populate(objectMap, "poi", t.Poi)
	return json.Marshal(objectMap)
}

type TrafficIncidentPoi struct {
	// READ-ONLY; Cause of the incident, where available, in the language requested
	C *string `json:"c,omitempty" azure:"ro"`

	// READ-ONLY; Bottom left coordinate of the cluster in the projection of the request
	Cbl *TrafficIncidentPoiCbl `json:"cbl,omitempty" azure:"ro"`

	// READ-ONLY; Cluster size: the number of incidents in the cluster
	Cs *int32 `json:"cs,omitempty" azure:"ro"`

	// READ-ONLY; Top right coordinate of the cluster in the projection of the request
	Ctr *TrafficIncidentPoiCtr `json:"ctr,omitempty" azure:"ro"`

	// READ-ONLY; Description of the incident in the language requested
	D *string `json:"d,omitempty" azure:"ro"`

	// READ-ONLY; Delay caused by the incident in seconds (except in road closures)
	Dl *int32 `json:"dl,omitempty" azure:"ro"`

	// READ-ONLY; From: the name of the intersection or location where the traffic due to the incident starts
	F *string `json:"f,omitempty" azure:"ro"`

	// READ-ONLY; ID of the traffic incident
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The icon category associated with this incident. Values are numbers in the range 0-13, with the following meanings -- 0: Unknown, 1: Accident,
// 2: Fog, 3: Dangerous Conditions, 4: Rain, 5: Ice, 6: Jam,
// 7: Lane Closed, 8: Road Closed, 9: Road Works, 10: Wind, 11: Flooding, 12: Detour, 13: Cluster
	Ic *int32 `json:"ic,omitempty" azure:"ro"`

	// READ-ONLY; Length of the incident in meters
	L *int32 `json:"l,omitempty" azure:"ro"`

	// READ-ONLY; The point where an icon of the cluster or raw incident should be drawn, expressed in the requested projection. This is affected by traffic
// style, zoom level and road type
	P *TrafficIncidentPoiP `json:"p,omitempty" azure:"ro"`

	// READ-ONLY; The road number(s) affected by the incident. Multiple road numbers will delimited by slashes
	R *string `json:"r,omitempty" azure:"ro"`

	// READ-ONLY; To: the name of the intersection or location where the traffic due to the incident ends
	T *string `json:"t,omitempty" azure:"ro"`

	// READ-ONLY; The magnitude of delay associated with incident. These values correspond to incident colors in the traffic tiles
	Ty *int32 `json:"ty,omitempty" azure:"ro"`
}

// TrafficIncidentPoiCbl - Bottom left coordinate of the cluster in the projection of the request
type TrafficIncidentPoiCbl struct {
	// READ-ONLY; x coordinate
	X *float32 `json:"x,omitempty" azure:"ro"`

	// READ-ONLY; y coordinate
	Y *float32 `json:"y,omitempty" azure:"ro"`
}

// TrafficIncidentPoiCtr - Top right coordinate of the cluster in the projection of the request
type TrafficIncidentPoiCtr struct {
	// READ-ONLY; x coordinate
	X *float32 `json:"x,omitempty" azure:"ro"`

	// READ-ONLY; y coordinate
	Y *float32 `json:"y,omitempty" azure:"ro"`
}

// TrafficIncidentPoiP - The point where an icon of the cluster or raw incident should be drawn, expressed in the requested projection. This is affected
// by traffic style, zoom level and road type
type TrafficIncidentPoiP struct {
	// READ-ONLY; x coordinate
	X *float32 `json:"x,omitempty" azure:"ro"`

	// READ-ONLY; y coordinate
	Y *float32 `json:"y,omitempty" azure:"ro"`
}

// TrafficIncidentViewportResult - This object is returned from a successful Traffic Incident Viewport call
type TrafficIncidentViewportResult struct {
	// READ-ONLY; Viewport Response object
	ViewpResp *TrafficIncidentViewportResultViewpResp `json:"viewpResp,omitempty" azure:"ro"`
}

// TrafficIncidentViewportResultViewpResp - Viewport Response object
type TrafficIncidentViewportResultViewpResp struct {
	// READ-ONLY; Copyright Ids property
	CopyrightIDs *string `json:"copyrightIds,omitempty" azure:"ro"`

	// READ-ONLY; @maps property
	Maps *string `json:"@maps,omitempty" azure:"ro"`

	// READ-ONLY; Traffic State array
	TrafficState *TrafficIncidentViewportResultViewpRespTrafficState `json:"trafficState,omitempty" azure:"ro"`

	// READ-ONLY; @Version property
	Version *string `json:"@version,omitempty" azure:"ro"`
}

// TrafficIncidentViewportResultViewpRespTrafficState - Traffic State array
type TrafficIncidentViewportResultViewpRespTrafficState struct {
	// READ-ONLY; @Traffic Age property
	TrafficAge *int32 `json:"@trafficAge,omitempty" azure:"ro"`

	// READ-ONLY; @Traffic Model Id property
	TrafficModelID *string `json:"@trafficModelId,omitempty" azure:"ro"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

