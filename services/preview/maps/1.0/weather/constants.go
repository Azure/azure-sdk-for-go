// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package weather

const telemetryInfo = "azsdk-go-weather/<version>"
// DayQuarter - Quarter of the day.
type DayQuarter int32

const (
	// DayQuarterOne - 1:00 pm - 7:00 pm/ 13:00- 19:00
	DayQuarterOne DayQuarter = 1
	// DayQuarterThree - 1:00 am - 7:00 am/ 01:00 - 07:00
	DayQuarterThree DayQuarter = 3
	// DayQuarterTwo - 7:00 pm - 1:00 am/ 19:00 - 01:00
	DayQuarterTwo DayQuarter = 2
	// DayQuarterZero - 7:00 am - 1:00 pm / 7:00- 13:00
	DayQuarterZero DayQuarter = 0
)

// PossibleDayQuarterValues returns the possible values for the DayQuarter const type.
func PossibleDayQuarterValues() []DayQuarter {
	return []DayQuarter{	
		DayQuarterOne,
		DayQuarterThree,
		DayQuarterTwo,
		DayQuarterZero,
	}
}

// ToPtr returns a *DayQuarter pointing to the current value.
func (c DayQuarter) ToPtr() *DayQuarter {
	return &c
}

type GeographicResourceLocation string

const (
	// GeographicResourceLocationEu - Used to access an Azure Maps Creator resource in Europe
	GeographicResourceLocationEu GeographicResourceLocation = "eu"
	// GeographicResourceLocationUs - Used to access an Azure Maps Creator resource in the United States
	GeographicResourceLocationUs GeographicResourceLocation = "us"
)

// PossibleGeographicResourceLocationValues returns the possible values for the GeographicResourceLocation const type.
func PossibleGeographicResourceLocationValues() []GeographicResourceLocation {
	return []GeographicResourceLocation{	
		GeographicResourceLocationEu,
		GeographicResourceLocationUs,
	}
}

// ToPtr returns a *GeographicResourceLocation pointing to the current value.
func (c GeographicResourceLocation) ToPtr() *GeographicResourceLocation {
	return &c
}

// Geography - This parameter specifies where the Azure Maps Creator resource is located. Valid values are us and eu.
type Geography string

const (
	GeographyEu Geography = "eu"
	GeographyUs Geography = "us"
)

// PossibleGeographyValues returns the possible values for the Geography const type.
func PossibleGeographyValues() []Geography {
	return []Geography{	
		GeographyEu,
		GeographyUs,
	}
}

// ToPtr returns a *Geography pointing to the current value.
func (c Geography) ToPtr() *Geography {
	return &c
}

// LatestStatusKeyword - Keyword for the latest status of the alert.
type LatestStatusKeyword string

const (
	// LatestStatusKeywordCancel - "Cancel" - the alert has been canceled prior to its original expiration time.
	LatestStatusKeywordCancel LatestStatusKeyword = "Cancel"
	// LatestStatusKeywordContinue - "Continue" - the alert has been updated since its initial issuance, but no changes were made to `alertAreas`, `startTime`,
// `endTime`, or `class`.
	LatestStatusKeywordContinue LatestStatusKeyword = "Continue"
	// LatestStatusKeywordCorrect - "Correct" - the alert has been modified to correct a previous error.
	LatestStatusKeywordCorrect LatestStatusKeyword = "Correct"
	// LatestStatusKeywordExpire - "Expire" - the alert has expired and is no longer active.
	LatestStatusKeywordExpire LatestStatusKeyword = "Expire"
	// LatestStatusKeywordExtend - "Extend" - the alert has been extended in time, in area, or both since its initial issuance.
	LatestStatusKeywordExtend LatestStatusKeyword = "Extend"
	// LatestStatusKeywordNew - "New" - the status of an alert upon initial issuance.
	LatestStatusKeywordNew LatestStatusKeyword = "New"
	// LatestStatusKeywordUpdate - "Update" - the alert has been updated since its initial issuance.
	LatestStatusKeywordUpdate LatestStatusKeyword = "Update"
	// LatestStatusKeywordUpgrade - "Upgrade" - the alert has been upgraded to a higher class or category since its initial issuance.
	LatestStatusKeywordUpgrade LatestStatusKeyword = "Upgrade"
)

// PossibleLatestStatusKeywordValues returns the possible values for the LatestStatusKeyword const type.
func PossibleLatestStatusKeywordValues() []LatestStatusKeyword {
	return []LatestStatusKeyword{	
		LatestStatusKeywordCancel,
		LatestStatusKeywordContinue,
		LatestStatusKeywordCorrect,
		LatestStatusKeywordExpire,
		LatestStatusKeywordExtend,
		LatestStatusKeywordNew,
		LatestStatusKeywordUpdate,
		LatestStatusKeywordUpgrade,
	}
}

// ToPtr returns a *LatestStatusKeyword pointing to the current value.
func (c LatestStatusKeyword) ToPtr() *LatestStatusKeyword {
	return &c
}

type ResponseFormat string

const (
	// ResponseFormatJSON - [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)
	ResponseFormatJSON ResponseFormat = "json"
)

// PossibleResponseFormatValues returns the possible values for the ResponseFormat const type.
func PossibleResponseFormatValues() []ResponseFormat {
	return []ResponseFormat{	
		ResponseFormatJSON,
	}
}

// ToPtr returns a *ResponseFormat pointing to the current value.
func (c ResponseFormat) ToPtr() *ResponseFormat {
	return &c
}

type WeatherDataUnit string

const (
	// WeatherDataUnitImperial - Return data in imperial units. Some example units of imperial system are Fahrenheit and mile.
	WeatherDataUnitImperial WeatherDataUnit = "imperial"
	// WeatherDataUnitMetric - Return data in metric units. Some example units of metric system are Celsius and kilometer.
	WeatherDataUnitMetric WeatherDataUnit = "metric"
)

// PossibleWeatherDataUnitValues returns the possible values for the WeatherDataUnit const type.
func PossibleWeatherDataUnitValues() []WeatherDataUnit {
	return []WeatherDataUnit{	
		WeatherDataUnitImperial,
		WeatherDataUnitMetric,
	}
}

// ToPtr returns a *WeatherDataUnit pointing to the current value.
func (c WeatherDataUnit) ToPtr() *WeatherDataUnit {
	return &c
}

