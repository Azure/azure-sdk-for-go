// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package weather

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

type AirAndPollen struct {
	// Category of the air quality or pollution type. For example, low, high, good, moderate, unhealthy, hazardous.
	Category *string `json:"category,omitempty"`

	// Value associated with the air quality or pollution category. These values range from 1 to 6. 1 implying good conditions, 6 implying hazardous conditions.
	CategoryValue *int32 `json:"categoryValue,omitempty"`

	// Name of the pollen or pollutant. For example, grass, mold, weed, air quality, tree and UV index.
	Name *string `json:"name,omitempty"`

	// Only exists for air quality. Examples include ozone and particle pollution.
	Type *string `json:"type,omitempty"`

	// Value of the given type above. Values associated with mold, grass, weed and tree are in units of parts per cubic meter. Both air quality and UV are indices,
// so they are unitless.
	Value *int32 `json:"value,omitempty"`
}

// AlertArea - Information about a severe weather alert issued within an affected area(s). If multiple alerts are active for the same location, the alerts
// will be returned in order of priority within the API
// response, with the highest priority alert being returned at the top of the response.
type AlertArea struct {
	// Full details associated with the alert. Returned if details=True. This field is always returned in the language(s) of choice by the issuing provider
// and Azure Maps only returns what is created by the
// provider. Please note, some countries/regions may offer their native language and English. Language parameter won’t apply to this field.
	AlertDetails *string `json:"alertDetails,omitempty"`

	// Language of the alertDetails. This field helps to point out that the language of the alertDetails may differ from the requested language parameter. Returned
// if details=True. Language code has been
// derived from the ISO 639-1 Alpha-2 codes.
	AlertDetailsLanguageCode *string `json:"alertDetailsLanguageCode,omitempty"`

	// The end date and time of the alert in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. If the alert crosses multiple time zones the returned
// time in the response is the local time to the
// requested coordinate location.
	EndTime *string `json:"endTime,omitempty"`

	// The latest status of the alert in the current area.
	LatestStatus *LatestStatus `json:"latestStatus,omitempty"`

	// The name of an area which is affected by the alert. The location that was requested falls under the alert area.
	Name *string `json:"name,omitempty"`

	// The start date and time of the alert in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. If the alert crosses multiple time zones the returned
// time in the response is the local time to the
// requested coordinate location.
	StartTime *string `json:"startTime,omitempty"`

	// Text summarizing the alert in the returned area.
	Summary *string `json:"summary,omitempty"`
}

type ColorValue struct {
	// Blue component of the RGB value
	Blue *int32 `json:"blue,omitempty"`

	// Green component of the RGB value.
	Green *int32 `json:"green,omitempty"`

	// Hexadecimal color value.
	Hex *string `json:"hex,omitempty"`

	// Red component of the RGB value.
	Red *int32 `json:"red,omitempty"`
}

type CurrentConditions struct {
	// Perceived outdoor temperature caused by the combination of air temperature, relative humidity, and wind speed in specified unit.
	ApparentTemperature *WeatherUnit `json:"apparentTemperature,omitempty"`

	// Cloud ceiling in specified unit. The ceiling is a measurement of the height of the base of the lowest clouds.
	Ceiling *WeatherUnit `json:"ceiling,omitempty"`

	// Percent representing cloud cover.
	CloudCover *int32 `json:"cloudCover,omitempty"`

	// Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
	DateTime *string `json:"dateTime,omitempty"`

	// The dewpoint temperature in specified unit. The dewpoint temperature is the temperature that the air must be cooled to in order to reach saturation.
	DewPoint *WeatherUnit `json:"dewPoint,omitempty"`

	// Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation.
	HasPrecipitation *bool `json:"hasPrecipitation,omitempty"`

	// Numeric value representing an image that displays the iconPhrase. Please refer to Weather Service Concepts [https://aka.ms/AzureMapsWeatherConcepts]
// for details.
	IconCode *int32 `json:"iconCode,omitempty"`

	// Indicates the time of the day. True indicates 'day',', false indicates 'night.
	IsDayTime *bool `json:"isDayTime,omitempty"`

	// Cause of limited visibility.
	ObstructionsToVisibility *string `json:"obstructionsToVisibility,omitempty"`

	// Departure from the temperature observed 24 hours ago in specified unit.
	Past24HourTemperatureDeparture *WeatherUnit `json:"past24HourTemperatureDeparture,omitempty"`

	// Phrase description of the current weather condition. Displayed in specified language.
	Phrase *string `json:"phrase,omitempty"`

	// Summary of precipitation amounts over the past 24 hours.
	PrecipitationSummary *PrecipitationSummary `json:"precipitationSummary,omitempty"`

	// Atmospheric pressure in specified unit.
	Pressure *WeatherUnit `json:"pressure,omitempty"`

	// Atmospheric pressure change.
	PressureTendency *PressureTendency `json:"pressureTendency,omitempty"`

	// RealFeel™ Temperature being returned.
	RealFeelTemperature *WeatherUnit `json:"realFeelTemperature,omitempty"`

	// RealFeel™ Temperature being returned. Describes what the temperature really feels like in the shade.
	RealFeelTemperatureShade *WeatherUnit `json:"realFeelTemperatureShade,omitempty"`

	// Relative humidity is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature.
	RelativeHumidity *int32 `json:"relativeHumidity,omitempty"`

	// Temperature being returned.
	Temperature *WeatherUnit `json:"temperature,omitempty"`

	// Summary of temperature fluctuations over the past 6, 12, and 24 hours.
	TemperatureSummary *TemperatureSummary `json:"temperatureSummary,omitempty"`

	// Measure of the strength of the ultraviolet radiation from the sun. Supported values are:
// * 0-2 - Low danger from the sun's UV rays or the average person.
// * 3-5 - Moderate risk of harm from unprotected sun exposure.
// * 6-7 - High risk of harm from unprotected sun exposure.
// * 8-10 - Very high risk of harm from unprotected sun exposure.
// * 11+ - Extreme risk of harm from unprotected sun exposure.
	UvIndex *int32 `json:"uvIndex,omitempty"`

	// Phrase associated with the uvIndex.
	UvIndexPhrase *string `json:"uvIndexPhrase,omitempty"`

	// Visibility in specified unit. A measure of the distance at which an object or light can be clearly discerned.
	Visibility *WeatherUnit `json:"visibility,omitempty"`

	// The temperature to which air may be cooled by evaporating water into it at constant pressure until it reaches saturation.
	WetBulbTemperature *WeatherUnit `json:"wetBulbTemperature,omitempty"`

	// Wind details being returned including speed and direction.
	Wind *WindDetails `json:"wind,omitempty"`

	// Perceived air temperature on exposed skin due to wind.
	WindChillTemperature *WeatherUnit `json:"windChillTemperature,omitempty"`

	// Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
	WindGust *WindDetails `json:"windGust,omitempty"`
}

type CurrentConditionsResponse struct {
	// Detailed current weather conditions.
	Results []*CurrentConditions `json:"results,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CurrentConditionsResponse.
func (c CurrentConditionsResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "results", c.Results)
	return json.Marshal(objectMap)
}

type DailyForecast struct {
	// airAndPollen
	AirAndPollen []*AirAndPollen `json:"airAndPollen,omitempty"`

	// Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
	Date *string `json:"date,omitempty"`

	// Day
	Day *DayOrNight `json:"day,omitempty"`

	// Summary of Heating Degree Day or Cooling Degree Day information
	DegreeDaySummary *DegreeDaySummary `json:"degreeDaySummary,omitempty"`

	// Hours of sun.
	HoursOfSun *float32 `json:"hoursOfSun,omitempty"`

	// Night
	Night *DayOrNight `json:"night,omitempty"`

	// RealFeel™ Temperature being returned.
	RealFeelTemperature *WeatherUnitRange `json:"realFeelTemperature,omitempty"`

	// RealFeel™ Temperature being returned. Describes what the temperature really feels like in the shade.
	RealFeelTemperatureShade *WeatherUnitRange `json:"realFeelTemperatureShade,omitempty"`

	// Source(s) of the forecast data.
	Sources []*string `json:"sources,omitempty"`

	// Temperature values for the day.
	Temperature *WeatherUnitRange `json:"temperature,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DailyForecast.
func (d DailyForecast) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "airAndPollen", d.AirAndPollen)
	populate(objectMap, "date", d.Date)
	populate(objectMap, "day", d.Day)
	populate(objectMap, "degreeDaySummary", d.DegreeDaySummary)
	populate(objectMap, "hoursOfSun", d.HoursOfSun)
	populate(objectMap, "night", d.Night)
	populate(objectMap, "realFeelTemperature", d.RealFeelTemperature)
	populate(objectMap, "realFeelTemperatureShade", d.RealFeelTemperatureShade)
	populate(objectMap, "sources", d.Sources)
	populate(objectMap, "temperature", d.Temperature)
	return json.Marshal(objectMap)
}

type DailyForecastResponse struct {
	// Forecast data for each requested day.
	Forecasts []*DailyForecast `json:"forecasts,omitempty"`

	// Summary for the main conditions for the requested time period. Notice that summary can cover only part of the time period.
	Summary *DailyForecastSummary `json:"summary,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DailyForecastResponse.
func (d DailyForecastResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "forecasts", d.Forecasts)
	populate(objectMap, "summary", d.Summary)
	return json.Marshal(objectMap)
}

// DailyForecastSummary - Summary for the main conditions for the requested time period. Notice that summary can cover only part of the time period.
type DailyForecastSummary struct {
	// one or 2 word(s) to summarize the phrase.
	Category *string `json:"category,omitempty"`

	// Date and time that the summary period ends, displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
	EndDate *string `json:"endDate,omitempty"`

	// Summary phrase of the daily forecast. Displayed in specified language.
	Phrase *string `json:"phrase,omitempty"`

	// severity
	Severity *int32 `json:"severity,omitempty"`

	// Date and time that the summary is in effect, displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
	StartDate *string `json:"startDate,omitempty"`
}

// DailyIndex - Information about a daily index.
type DailyIndex struct {
	// Describes the direction of the value and categoryValue. For example, when ascending=True, the poorest index value is 0 and the best index value is 10.
// When ascending=True, the poorest index value is
// 10 and the best index value is 0.
	Ascending *bool `json:"ascending,omitempty"`

	// Textual description for categoryValue corresponding to the level that the index value falls under, for example "Very Good".
	Category *string `json:"category,omitempty"`

	// Level that the index value falls under, represented by an integer. This value can be 1 through 5 and should be used in combination with the ascending
// flag because it can differ among indices. For
// example, the following values apply for Mosquito Activity: Low=1, Moderate=2, High=3, Very High=4, and Extreme=5.
	CategoryValue *int32 `json:"categoryValue,omitempty"`

	// Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
	DateTime *string `json:"dateTime,omitempty"`

	// A textual explanation that can be used for display purposes to summarize the index value and category. For example, when the index value for Flight Delays
// is very good, the description will be
// "Conditions are excellent for flying!".
	Description *string `json:"description,omitempty"`

	// Numeric ID used to identify the specific index. Please refer to Weather Service Concepts [https://aka.ms/AzureMapsWeatherConcepts] for details and to
// see the supported index IDs. For example, the
// index ID can support UI visualization scenarios.
	IndexID *int32 `json:"indexId,omitempty"`

	// Name of the index, for example, "Construction", "Outdoor Activity", "Flight Delays".
	IndexName *string `json:"indexName,omitempty"`

	// Index value. Ranges from 0.0 to 10.0. Please refer to Weather Service Concepts [https://aka.ms/AzureMapsWeatherConcepts] for details and to see the supported
// ranges.
	Value *float32 `json:"value,omitempty"`
}

// DailyIndicesResponse - This object is returned from a successful Get Daily Indices call.
type DailyIndicesResponse struct {
	// A list of all daily indices for the queried location.
	Results []*DailyIndex `json:"results,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DailyIndicesResponse.
func (d DailyIndicesResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "results", d.Results)
	return json.Marshal(objectMap)
}

type DayOrNight struct {
	// Percent representing cloud cover.
	CloudCover *int32 `json:"cloudCover,omitempty"`

	// Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation.
	HasPrecipitation *bool `json:"hasPrecipitation,omitempty"`

	// Hours of ice.
	HoursOfIce *float32 `json:"hoursOfIce,omitempty"`

	// Hours of precipitation
	HoursOfPrecipitation *float32 `json:"hoursOfPrecipitation,omitempty"`

	// Hours of rain.
	HoursOfRain *float32 `json:"hoursOfRain,omitempty"`

	// Hours of snow.
	HoursOfSnow *float32 `json:"hoursOfSnow,omitempty"`

	// Ice
	Ice *WeatherUnit `json:"ice,omitempty"`

	// Percent representing the probability of ice. For example, '30'.
	IceProbability *int32 `json:"iceProbability,omitempty"`

	// Numeric value representing an image that displays the iconPhrase. Please refer to Weather Service Concepts [https://aka.ms/AzureMapsWeatherConcepts]
// for details.
	IconCode *int32 `json:"iconCode,omitempty"`

	// Phrase description of the icon. Displayed in specified language. For example, 'Sunny'.
	IconPhrase *string `json:"iconPhrase,omitempty"`

	// Local weather data provider information.
	LocalSource *LocalSource `json:"localSource,omitempty"`

	// Phrase description of the forecast in specified language. Azure Maps attempts to keep this phrase under 100 characters in length, but some languages/weather
// events may result in a longer phrase
// length, exceeding 100 characters.
	LongPhrase *string `json:"longPhrase,omitempty"`

	// Description of the intensity.
	PrecipitationIntensity *string `json:"precipitationIntensity,omitempty"`

	// Percent representing the probability of precipitation. For example, '20'.
	PrecipitationProbability *int32 `json:"precipitationProbability,omitempty"`

	// Specifies the type of precipitation ("rain" "snow" "ice" or "mix"). If dbz = zero, precipitationType is not present in the response.
	PrecipitationType *string `json:"precipitationType,omitempty"`

	// Rain
	Rain *WeatherUnit `json:"rain,omitempty"`

	// Percent representing the probability of rain. For example, '40'.
	RainProbability *int32 `json:"rainProbability,omitempty"`

	// Phrase description of the forecast in specified language. Azure Maps attempts to keep this phrase under 30 characters in length, but some languages/weather
// events may result in a longer phrase length,
// exceeding 30 characters.
	ShortPhrase *string `json:"shortPhrase,omitempty"`

	// Snow
	Snow *WeatherUnit `json:"snow,omitempty"`

	// Percent representing the probability of snow. For example, '30'.
	SnowProbability *int32 `json:"snowProbability,omitempty"`

	// Percent representing the probability of a thunderstorm. For example, '80'.
	ThunderstormProbability *int32 `json:"thunderstormProbability,omitempty"`

	// Total liquid equivalent of precipitation during the forecast period.
	TotalLiquid *WeatherUnit `json:"totalLiquid,omitempty"`

	// Wind details being returned including speed and direction.
	Wind *WindDetails `json:"wind,omitempty"`

	// Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
	WindGust *WindDetails `json:"windGust,omitempty"`
}

type DegreeDaySummary struct {
	// Number of degrees that the mean temperature is above 65 degrees F/ 18 degree C.
	Cooling *WeatherUnit `json:"cooling,omitempty"`

	// Number of degrees that the mean temperature is below 65 degrees F/ 18 degree C.
	Heating *WeatherUnit `json:"heating,omitempty"`
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

type ForecastInterval struct {
	// Percent representing cloud cover.
	CloudCover *int32 `json:"cloudCover,omitempty"`

	// The full spectrum color that maps to the dBZ (decibel relative to Z). If dbz is zero, color is not present in the response.
	Color *ColorValue `json:"color,omitempty"`

	// A unit that represents forecasted precipitation intensity.
	Dbz *float64 `json:"dbz,omitempty"`

	// Numeric value representing an image that displays the iconPhrase. Please refer to Weather Service Concepts [https://aka.ms/AzureMapsWeatherConcepts]
// for details.
	IconCode *int32 `json:"iconCode,omitempty"`

	// The first minute for the interval.
	Minute *int32 `json:"minute,omitempty"`

	// Specifies the type of precipitation ("rain" "snow" "ice" or "mix"). If dbz is zero, precipitationType is not present in the response.
	PrecipitationType *string `json:"precipitationType,omitempty"`

	// A short phrase describing precipitation condition for the interval.
	ShortPhrase *string `json:"shortPhrase,omitempty"`

	// The band color that maps to the precipitation type and threshold. If dbz is zero, not present in the response.
	SimplifiedColor *ColorValue `json:"simplifiedColor,omitempty"`

	// The date and time for the start of the interval in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
	StartTime *string `json:"startTime,omitempty"`

	// Key that specifies the threshold value. Along with precipitationType, can be used to determine the simplifiedColor. If dbz is zero, not present in the
// response.
	Threshold *string `json:"threshold,omitempty"`
}

type HazardDetail struct {
	// A unique identifier (non-displayable) for each type of hazard: LightRain, ModerateRain, HeavyRain, LightMix, ModerateMix, HeavyMix, LightSnow, ModerateSnow,
// HeavySnow, LightIce, ModerateIce, HeavyIce,
// Hail, LargeHail, SunGlare, SunGlareHigh, Lightning, SevereLightning, WindModerate, WindHigh, WindExtreme, FloodWarning, FlashFloodWarning, TornadoWarning,
// TsunamiWarning, SevereThunderstormWarning.
	HazardCode *string `json:"hazardCode,omitempty"`

	// A severity/hazard index.
// * 0 - No hazard.
// * 1 - Be informed, be aware.
// * 2 - Pay attention, be prepared.
// * 3 - Take action.
// * 4 - Life threatening, emergency.
	HazardIndex *int32 `json:"hazardIndex,omitempty"`

	// A displayable short phrase describing the forecasted conditions and precipitation intensity/type.
	ShortPhrase *string `json:"shortPhrase,omitempty"`
}

type HourlyForecast struct {
	// Cloud ceiling in specified unit. The ceiling is a measurement of the height of the base of the lowest clouds.
	Ceiling *WeatherUnit `json:"ceiling,omitempty"`

	// Percent representing cloud cover.
	CloudCover *int32 `json:"cloudCover,omitempty"`

	// Date and time of the forecast in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
	Date *string `json:"date,omitempty"`

	// The dewpoint temperature in specified unit. The dewpoint temperature is the temperature that the air must be cooled to in order to reach saturation.
	DewPoint *WeatherUnit `json:"dewPoint,omitempty"`

	// Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation.
	HasPrecipitation *bool `json:"hasPrecipitation,omitempty"`

	// Ice
	Ice *WeatherUnit `json:"ice,omitempty"`

	// Percent representing the probability of snow. For example, '5'.
	IceProbability *int32 `json:"iceProbability,omitempty"`

	// Numeric value representing an image that displays the iconPhrase. Please refer to Weather Service Concepts [https://aka.ms/AzureMapsWeatherConcepts]
// for details.
	IconCode *int32 `json:"iconCode,omitempty"`

	// Phrase description of the weather icon.
	IconPhrase *string `json:"iconPhrase,omitempty"`

	// Specifies whether or not it is daylight. True indicates day light.
	IsDaylight *bool `json:"isDaylight,omitempty"`

	// Percent representing the probability of precipitation. For example, '20'.
	PrecipitationProbability *int32 `json:"precipitationProbability,omitempty"`

	// Rain
	Rain *WeatherUnit `json:"rain,omitempty"`

	// Percent representing the probability of rain. For example, '50'.
	RainProbability *int32 `json:"rainProbability,omitempty"`

	// RealFeel™ Temperature being returned. Describes what the temperature really feels like in the shade.
	RealFeelTemperature *WeatherUnit `json:"realFeelTemperature,omitempty"`

	// Relative humidity is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature.
	RelativeHumidity *int32 `json:"relativeHumidity,omitempty"`

	// Snow
	Snow *WeatherUnit `json:"snow,omitempty"`

	// Percent representing the probability of snow. For example, '50'.
	SnowProbability *int32 `json:"snowProbability,omitempty"`

	// Temperature being returned.
	Temperature *WeatherUnit `json:"temperature,omitempty"`

	// Total liquid equivalent of precipitation during the forecast period.
	TotalLiquid *WeatherUnit `json:"totalLiquid,omitempty"`

	// Measure of the strength of the ultraviolet radiation from the sun. Supported values are:
// * 0-2 - Low danger from the sun's UV rays or the average person.
// * 3-5 - Moderate risk of harm from unprotected sun exposure.
// * 6-7 - High risk of harm from unprotected sun exposure.
// * 8-10 - Very high risk of harm from unprotected sun exposure.
// * 11+ - Extreme risk of harm from unprotected sun exposure.
	UvIndex *int32 `json:"uvIndex,omitempty"`

	// Phrase associated with the uvIndex.
	UvIndexPhrase *string `json:"uvIndexPhrase,omitempty"`

	// Visibility in specified unit. A measure of the distance at which an object or light can be clearly discerned.
	Visibility *WeatherUnit `json:"visibility,omitempty"`

	// The temperature to which air may be cooled by evaporating water into it at constant pressure until it reaches saturation.
	WetBulbTemperature *WeatherUnit `json:"wetBulbTemperature,omitempty"`

	// Wind details being returned including speed and direction.
	Wind *WindDetails `json:"wind,omitempty"`

	// Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
	WindGust *WindDetails `json:"windGust,omitempty"`
}

type HourlyForecastResponse struct {
	// Forecast data for each returned hour.
	Forecasts []*HourlyForecast `json:"forecasts,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HourlyForecastResponse.
func (h HourlyForecastResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "forecasts", h.Forecasts)
	return json.Marshal(objectMap)
}

type IntervalSummary struct {
	// Brief summary phrase. Phrase length is approximately 60 characters.
	BriefPhrase *string `json:"briefPhrase,omitempty"`

	// The last minute to which the summary applies.
	EndMinute *int32 `json:"endMinute,omitempty"`

	// Numeric value representing an image that displays the iconPhrase. Please refer to Weather Service Concepts [https://aka.ms/AzureMapsWeatherConcepts]
// for details.
	IconCode *int32 `json:"iconCode,omitempty"`

	// Long summary phrase. Phrase length is 60+ characters.
	LongPhrase *string `json:"longPhrase,omitempty"`

	// Short summary phrase. Phrase length is approximately 25 characters.
	ShortPhrase *string `json:"shortPhrase,omitempty"`

	// The first minute to which the summary applies.
	StartMinute *int32 `json:"startMinute,omitempty"`

	// The number of minutes for which the summary applies.
	TotalMinutes *int32 `json:"totalMinutes,omitempty"`
}

// LatestStatus - The latest status on the alert in the current area.
type LatestStatus struct {
	// Latest status keyword for the alert, in English (en-US).
	English *LatestStatusKeyword `json:"english,omitempty"`

	// The latest status keyword for the alert, in the specified language. By default, returned in English (en-US).
	Localized *string `json:"localized,omitempty"`
}

// LocalSource - Local weather data provider information.
type LocalSource struct {
	// Numeric identifier, unique to the local data provider.
	ID *int32 `json:"id,omitempty"`

	// Name of the local data provider. Name is displayed in the language specified by language code in URL, if available. Otherwise, Name is displayed in English
// or the language in which the name was
// provided.
	Name *string `json:"name,omitempty"`

	// Weather code provided by the local data provider. This weather code allows the forecast to be matched to icons provided by the local data provider instead
// of Azure Maps icons.
	WeatherCode *string `json:"weatherCode,omitempty"`
}

type MinuteForecastResponse struct {
	// Summary information for each interval in the forecast. The Summaries breaks down each potential interval where precipitation starts and stops.
	IntervalSummaries []*IntervalSummary `json:"intervalSummaries,omitempty"`

	// Forecast data for each interval in the forecast.
	Intervals []*ForecastInterval `json:"intervals,omitempty"`

	// Phrase summaries for the entire forecast period.
	Summary *MinuteForecastSummary `json:"summary,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MinuteForecastResponse.
func (m MinuteForecastResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "intervalSummaries", m.IntervalSummaries)
	populate(objectMap, "intervals", m.Intervals)
	populate(objectMap, "summary", m.Summary)
	return json.Marshal(objectMap)
}

// MinuteForecastSummary - Phrase summaries for the entire forecast period.
type MinuteForecastSummary struct {
	// Summary phrase for the next 120 minutes. Phrase length is approximately 60 characters.
	BriefPhrase *string `json:"briefPhrase,omitempty"`

	// Summary phrase for the next 60 minutes. Phrase length is approximately 60 characters.
	BriefPhrase60 *string `json:"briefPhrase60,omitempty"`

	// Numeric value representing an image that displays the iconPhrase. Please refer to Weather Service Concepts [https://aka.ms/AzureMapsWeatherConcepts]
// for details.
	IconCode *int32 `json:"iconCode,omitempty"`

	// Long summary phrase for the next 120 minutes. Phrase length is 60+ characters.
	LongPhrase *string `json:"longPhrase,omitempty"`

	// Short summary phrase for the next 120 minutes. Phrase length is approximately 25 characters.
	ShortPhrase *string `json:"shortPhrase,omitempty"`
}

type PrecipitationSummary struct {
	// The amount of precipitation (liquid equivalent) that has fallen in the past 12 hours.
	Past12Hours *WeatherUnit `json:"past12Hours,omitempty"`

	// The amount of precipitation (liquid equivalent) that has fallen in the past 18 hours.
	Past18Hours *WeatherUnit `json:"past18Hours,omitempty"`

	// The amount of precipitation (liquid equivalent) that has fallen in the past 24 hours.
	Past24Hours *WeatherUnit `json:"past24Hours,omitempty"`

	// The amount of precipitation (liquid equivalent) that has fallen in the past three hours.
	Past3Hours *WeatherUnit `json:"past3Hours,omitempty"`

	// The amount of precipitation (liquid equivalent) that has fallen in the past six hours. Contains Metric and Imperial Values.
	Past6Hours *WeatherUnit `json:"past6Hours,omitempty"`

	// The amount of precipitation (liquid equivalent) that has fallen in the past nine hours.
	Past9Hours *WeatherUnit `json:"past9Hours,omitempty"`

	// The amount of precipitation (liquid equivalent) that has fallen in the past hour.
	PastHour *WeatherUnit `json:"pastHour,omitempty"`
}

type PressureTendency struct {
	// Pressure tendency code regardless of language. One of F=Falling, S=Steady, R=Rising.
	Code *string `json:"code,omitempty"`

	// Description of the pressure tendency in specified language
	LocalizedDescription *string `json:"localizedDescription,omitempty"`
}

type QuarterDayForecast struct {
	// Percent representing cloud cover.
	CloudCover *int32 `json:"cloudCover,omitempty"`

	// Date and time of the forecast in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
	Date *string `json:"date,omitempty"`

	// The dewpoint temperature in specified unit. The dewpoint temperature is the temperature that the air must be cooled to in order to reach saturation.
	DewPoint *WeatherUnit `json:"dewPoint,omitempty"`

	// Date and time of the beginning of the forecast quarter displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
	EffectiveDate *string `json:"effectiveDate,omitempty"`

	// Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation.
	HasPrecipitation *bool `json:"hasPrecipitation,omitempty"`

	// Ice
	Ice *WeatherUnit `json:"ice,omitempty"`

	// Numeric value representing an image that displays the iconPhrase. Please refer to Weather Service Concepts [https://aka.ms/AzureMapsWeatherConcepts]
// for details.
	IconCode *int32 `json:"iconCode,omitempty"`

	// Phrase description of the icon. Displayed in specified language. For example, 'Sunny'.
	IconPhrase *string `json:"iconPhrase,omitempty"`

	// Short summary phrase summary for quarter.
	Phrase *string `json:"phrase,omitempty"`

	// Description of the intensity.
	PrecipitationIntensity *string `json:"precipitationIntensity,omitempty"`

	// Percent representing the probability of precipitation. For example, '20'.
	PrecipitationProbability *int32 `json:"precipitationProbability,omitempty"`

	// Specifies the type of precipitation ("rain" "snow" "ice" or "mix"). If dbz = zero, precipitationType is not present in the response.
	PrecipitationType *string `json:"precipitationType,omitempty"`

	// Quarter of the day.
	Quarter *DayQuarter `json:"quarter,omitempty"`

	// Rain
	Rain *WeatherUnit `json:"rain,omitempty"`

	// RealFeel™ Temperature values for the quarter.
	RealFeelTemperature *WeatherUnitRange `json:"realFeelTemperature,omitempty"`

	// Relative humidity is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature.
	RelativeHumidity *int32 `json:"relativeHumidity,omitempty"`

	// Snow
	Snow *WeatherUnit `json:"snow,omitempty"`

	// Temperature values for the quarter.
	Temperature *WeatherUnitRange `json:"temperature,omitempty"`

	// Percent representing the probability of a thunderstorm. For example, '10'.
	ThunderstormProbability *int32 `json:"thunderstormProbability,omitempty"`

	// Total liquid equivalent of precipitation during the forecast period.
	TotalLiquid *WeatherUnit `json:"totalLiquid,omitempty"`

	// Visibility in specified unit. A measure of the distance at which an object or light can be clearly discerned.
	Visibility *WeatherUnit `json:"visibility,omitempty"`

	// Wind details being returned including speed and direction.
	Wind *WindDetails `json:"wind,omitempty"`

	// Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
	WindGust *WindDetails `json:"windGust,omitempty"`
}

type QuarterDayForecastResponse struct {
	// Forecast data for each quarter in the response.
	Forecasts []*QuarterDayForecast `json:"forecasts,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type QuarterDayForecastResponse.
func (q QuarterDayForecastResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "forecasts", q.Forecasts)
	return json.Marshal(objectMap)
}

// SevereWeatherAlert - Information about a severe weather alert.
type SevereWeatherAlert struct {
	// Information about the alert specific to the affected area(s).
	AlertAreas []*AlertArea `json:"alertAreas,omitempty"`

	// A unique numerical identifier for a weather alert.
	AlertID *int32 `json:"alertId,omitempty"`

	// Category of the alert.
	Category *string `json:"category,omitempty"`

	// Classification of the alert. This field is not available for all countries and therefore not always returned.
	Class *string `json:"class,omitempty"`

	// 2-character ISO 3166-1 Alpha-2 country code, for example, "US".
	CountryCode *string `json:"countryCode,omitempty"`

	// Description of the alert.
	Description *SevereWeatherAlertDescription `json:"description,omitempty"`

	// A disclaimer regarding the source of the alert information. This field is not always available. For example, disclaimer may include details about the
// delays or potential issues related to the alarm.
	Disclaimer *string `json:"disclaimer,omitempty"`

	// Severity level of the alert. This field is not available for all countries and therefore not always returned.
	Level *string `json:"level,omitempty"`

	// Number signifying the importance or ranking order of the given alert within the country/region it has originated. A lower number signifies a higher priority.
// For example, 1 is the highest priority.
// The number varies by country/region and can change over time as each country/region evolves their alert systems.
	Priority *int32 `json:"priority,omitempty"`

	// The provider of the alert information. By default the source is returned in English (en-US). The alerts are from official Government Meteorological Agencies
// and leading global weather alert providers.
	Source *string `json:"source,omitempty"`

	// A numerical identifier associated with the source provider name of the alert data.
	SourceID *int32 `json:"sourceId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SevereWeatherAlert.
func (s SevereWeatherAlert) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "alertAreas", s.AlertAreas)
	populate(objectMap, "alertId", s.AlertID)
	populate(objectMap, "category", s.Category)
	populate(objectMap, "class", s.Class)
	populate(objectMap, "countryCode", s.CountryCode)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "disclaimer", s.Disclaimer)
	populate(objectMap, "level", s.Level)
	populate(objectMap, "priority", s.Priority)
	populate(objectMap, "source", s.Source)
	populate(objectMap, "sourceId", s.SourceID)
	return json.Marshal(objectMap)
}

// SevereWeatherAlertDescription - Description of a severe weather alert.
type SevereWeatherAlertDescription struct {
	// Description of the alert in English (en-US).
	English *string `json:"english,omitempty"`

	// Description of the alert in the specified language. By default English (en-US) is returned if the language parameter is not specified in the request.
	Localized *string `json:"localized,omitempty"`
}

// SevereWeatherAlertsResponse - This object is returned from a successful Get Severe Weather Alerts call.
type SevereWeatherAlertsResponse struct {
	// A list of all severe weather alerts for the queried location.
	Results []*SevereWeatherAlert `json:"results,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SevereWeatherAlertsResponse.
func (s SevereWeatherAlertsResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "results", s.Results)
	return json.Marshal(objectMap)
}

// SunGlare - A rating that indicates how blinding the sun is for the driver.
type SunGlare struct {
	// If the vehicle heading value is not provided for a waypoint, then the service will calculate a heading based upon the location of neighboring waypoints
// if provided.
	CalculatedVehicleHeading *int32 `json:"calculatedVehicleHeading,omitempty"`

	// An index from 0 to 100 indicating sun glare intensity for a driver. A value of 50 and above can be considered a hazard for some drivers and a value of
// 100 signifies the driver is driving straight into
// the sun and atmospheric conditions are clear allowing for the full intensity of the sun to blind the driver.
	GlareIndex *int32 `json:"glareIndex,omitempty"`
}

type TemperatureSummary struct {
	// Summary of temperature fluctuations over the past 12 hours.
	Past12Hours *TemperatureSummaryPast12Hours `json:"past12Hours,omitempty"`

	// Summary of temperature fluctuations over the past 24 hours.
	Past24Hours *TemperatureSummaryPast24Hours `json:"past24Hours,omitempty"`

	// Summary of temperature fluctuations over the past 6 hours.
	Past6Hours *TemperatureSummaryPast6Hours `json:"past6Hours,omitempty"`
}

// TemperatureSummaryPast12Hours - Summary of temperature fluctuations over the past 12 hours.
type TemperatureSummaryPast12Hours struct {
	// maximum
	Maximum *WeatherUnit `json:"maximum,omitempty"`

	// minimum
	Minimum *WeatherUnit `json:"minimum,omitempty"`
}

// TemperatureSummaryPast24Hours - Summary of temperature fluctuations over the past 24 hours.
type TemperatureSummaryPast24Hours struct {
	// maximum
	Maximum *WeatherUnit `json:"maximum,omitempty"`

	// minimum
	Minimum *WeatherUnit `json:"minimum,omitempty"`
}

// TemperatureSummaryPast6Hours - Summary of temperature fluctuations over the past 6 hours.
type TemperatureSummaryPast6Hours struct {
	// maximum
	Maximum *WeatherUnit `json:"maximum,omitempty"`

	// minimum
	Minimum *WeatherUnit `json:"minimum,omitempty"`
}

// WeatherAlongRoutePrecipitation - Precipitation forecast of the weather along the route.
type WeatherAlongRoutePrecipitation struct {
	// The forecasted precipitation intensity in dBZ (decibels relative to Z) from 0.0 to 100.0.
	Dbz *float64 `json:"dbz,omitempty"`

	// Precipitation type. If precipitation should occur, the type that it will be: "RAIN," "HAIL," "SNOW," "ICE," or "MIX."
	Type *string `json:"type,omitempty"`
}

// WeatherAlongRouteResponse - This object is returned from a successful Weather Along Route.
type WeatherAlongRouteResponse struct {
	// Short summary of the weather along the route.
	Summary *WeatherAlongRouteSummary `json:"summary,omitempty"`

	// Data for each waypoint returned in the same order as specified in the request.
	Waypoints []*WeatherWaypoint `json:"waypoints,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WeatherAlongRouteResponse.
func (w WeatherAlongRouteResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "summary", w.Summary)
	populate(objectMap, "waypoints", w.Waypoints)
	return json.Marshal(objectMap)
}

// WeatherAlongRouteSummary - Short summary of the weather along the route.
type WeatherAlongRouteSummary struct {
	// Description of the weather hazard affecting the trip.
	Hazards *WeatherHazards `json:"hazards,omitempty"`

	// Numeric value representing an image that displays the iconPhrase. Please refer to Weather Service Concepts [https://aka.ms/AzureMapsWeatherConcepts]
// for details.
	IconCode *int32 `json:"iconCode,omitempty"`
}

// WeatherGetCurrentConditionsOptions contains the optional parameters for the Weather.GetCurrentConditions method.
type WeatherGetCurrentConditionsOptions struct {
	// Return full details for the current conditions. Available values are
// * `true` - Returns full details. By default all details are returned.
// * `false` - Returns a truncated version of the current condition data, which includes observation date time, weather phrase, icon code, precipitation
// indicator flag, and temperature.
	Details *string
	// Time frame of the returned weather conditions. By default, the most current weather conditions will be returned. Default value is 0. Supported values
// are:
// * `0` - Return the most current weather conditions.
// * `6` - Return weather conditions from past 6 hours.
// * `24` - Return weather conditions from past 24 hours.
	Duration *int32
	// Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language
// is not available for a specific field, default language is used. Default value is en-us.
// Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
	Language *string
	// Specifies to return the data in either metric units or imperial units. Default value is metric.
	Unit *WeatherDataUnit
}

// WeatherGetDailyForecastOptions contains the optional parameters for the Weather.GetDailyForecast method.
type WeatherGetDailyForecastOptions struct {
	// Specifies for how many days the daily forecast responses are returned. Available values are
// * `1` - Return forecast data for the next day. Returned by default.
// * `5` - Return forecast data for the next 5 days.
// * `10` - Return forecast data for the next 10 days.
// * `25` - Return forecast data for the next 25 days. Only available in S1 SKU.
// * `45` - Return forecast data for the next 45 days. Only available in S1 SKU.
	Duration *int32
	// Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language
// is not available for a specific field, default language is used. Default value is en-us.
// Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
	Language *string
	// Specifies to return the data in either metric units or imperial units. Default value is metric.
	Unit *WeatherDataUnit
}

// WeatherGetDailyIndicesOptions contains the optional parameters for the Weather.GetDailyIndices method.
type WeatherGetDailyIndicesOptions struct {
	// Specifies for how many days the daily indices are returned. By default, the indices data for the current day will be returned. When requesting future
// indices data, the current day is included in the response as day 1. Available values are
// * `1` - Return daily index data for the current day. Default value.
// * `5` - Return 5 days of daily index data starting from the current day.
// * `10` - Return 10 days of daily index data starting from the current day.
// * `15` - Return 15 days of daily index data starting from the current day.
	Duration *int32
	// Numeric index group identifier that can be used for restricting returned results to the corresponding subset of indices (index group). Cannot be paired
// with `indexId`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported index groups.
	IndexGroupID *int32
	// Numeric index identifier that can be used for restricting returned results to the corresponding index type. Cannot be paired with `indexGroupId`. Please
// refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported indices.
	IndexID *int32
	// Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language
// is not available for a specific field, default language is used. Default value is en-us.
// Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
	Language *string
}

// WeatherGetHourlyForecastOptions contains the optional parameters for the Weather.GetHourlyForecast method.
type WeatherGetHourlyForecastOptions struct {
	// Time frame of the returned weather forecast. By default, the forecast data for next hour will be returned. Available values are
// * `1` - Return forecast data for the next hour. Default value.
// * `12` - Return hourly forecast for next 12 hours.
// * `24` - Return hourly forecast for next 24 hours.
// * `72` - Return hourly forecast for next 72 hours (3 days).
// * `120` - Return hourly forecast for next 120 hours (5 days). Only available in S1 SKU.
// * `240` - Return hourly forecast for next 240 hours (10 days). Only available in S1 SKU.
	Duration *int32
	// Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language
// is not available for a specific field, default language is used. Default value is en-us.
// Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
	Language *string
	// Specifies to return the data in either metric units or imperial units. Default value is metric.
	Unit *WeatherDataUnit
}

// WeatherGetMinuteForecastOptions contains the optional parameters for the Weather.GetMinuteForecast method.
type WeatherGetMinuteForecastOptions struct {
	// Specifies time interval in minutes for the returned weather forecast. Supported values are
// * `1` - Retrieve forecast for 1-minute intervals. Returned by default.
// * `5` - Retrieve forecasts for 5-minute intervals.
// * `15` - Retrieve forecasts for 15-minute intervals.
	Interval *int32
	// Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language
// is not available for a specific field, default language is used. Default value is en-us.
// Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
	Language *string
}

// WeatherGetQuarterDayForecastOptions contains the optional parameters for the Weather.GetQuarterDayForecast method.
type WeatherGetQuarterDayForecastOptions struct {
	// Specifies for how many days the quester-day forecast responses are returned. Supported values are:
// * `1` - Return forecast data for the next day. Returned by default.
// * `5` - Return forecast data for the next 5 days.
// * `10` - Return forecast data for next 10 days.
// * `15` - Return forecast data for the next 15 days.
	Duration *int32
	// Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language
// is not available for a specific field, default language is used. Default value is en-us.
// Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
	Language *string
	// Specifies to return the data in either metric units or imperial units. Default value is metric.
	Unit *WeatherDataUnit
}

// WeatherGetSevereWeatherAlertsOptions contains the optional parameters for the Weather.GetSevereWeatherAlerts method.
type WeatherGetSevereWeatherAlertsOptions struct {
	// Return full details for the severe weather alerts. Available values are
// * `true` - Returns full details. By default all details are returned.
// * `false` - Returns a truncated version of the alerts data, which excludes the area-specific full description of alert details (`alertDetails`).
	Details *string
	// Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language
// is not available for a specific field, default language is used. Default value is en-us.
// Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
	Language *string
}

// WeatherGetWeatherAlongRouteOptions contains the optional parameters for the Weather.GetWeatherAlongRoute method.
type WeatherGetWeatherAlongRouteOptions struct {
	// Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language
// is not available for a specific field, default language is used. Default value is en-us.
// Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
	Language *string
}

// WeatherHazards - Description of the weather hazard affecting the trip.
type WeatherHazards struct {
	// Details of the weather hazards affecting the trip.
	HazardDetails []*HazardDetail `json:"hazardDetails,omitempty"`

	// A severity/hazard index.
// * 0 - No hazard.
// * 1 - Be informed, be aware.
// * 2 - Pay attention, be prepared.
// * 3 - Take action.
// * 4 - Life threatening, emergency.
	MaxHazardIndex *int32 `json:"maxHazardIndex,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WeatherHazards.
func (w WeatherHazards) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "hazardDetails", w.HazardDetails)
	populate(objectMap, "maxHazardIndex", w.MaxHazardIndex)
	return json.Marshal(objectMap)
}

type WeatherNotification struct {
	// A unique identifier (non-displayable) for each type of hazard: LightRain, ModerateRain, HeavyRain, LightMix, ModerateMix, HeavyMix, LightSnow, ModerateSnow,
// HeavySnow, LightIce, ModerateIce, HeavyIce,
// Hail, LargeHail, SunGlare, SunGlareHigh, Lightning, SevereLightning, WindModerate, WindHigh, WindExtreme, FloodWarning, FlashFloodWarning, TornadoWarning,
// TsunamiWarning, SevereThunderstormWarning.
	HazardCode *string `json:"hazardCode,omitempty"`

	// A severity/hazard index.
// * 0 - No hazard.
// * 1 - Be informed, be aware.
// * 2 - Pay attention, be prepared.
// * 3 - Take action.
// * 4 - Life threatening, emergency.
	HazardIndex *int32 `json:"hazardIndex,omitempty"`

	// A displayable short phrase describing the forecasted conditions and precipitation intensity/type.
	ShortPhrase *string `json:"shortPhrase,omitempty"`

	// A type of notification generated to warn drivers of the onset of a hazard, or increase in intensity of a hazard.
	Type *string `json:"type,omitempty"`
}

// WeatherUnit - Specific value of a given unit related to weather.
type WeatherUnit struct {
	// Type of unit for the returned value.
	Unit *string `json:"unit,omitempty"`

	// Numeric ID value associated with the type of unit being displayed. Can be used for unit translation. Please refer to Weather Service Concepts [https://aka.ms/AzureMapsWeatherConcepts]
// for details.
	UnitType *int32 `json:"unitType,omitempty"`

	// Rounded value.
	Value *float32 `json:"value,omitempty"`
}

// WeatherUnitRange - Returned temperature values.
type WeatherUnitRange struct {
	// Maximum temperature for the time period
	Maximum *WeatherUnit `json:"maximum,omitempty"`

	// Minimum temperature for the time period.
	Minimum *WeatherUnit `json:"minimum,omitempty"`
}

type WeatherWaypoint struct {
	// Percent representing cloud cover.
	CloudCover *int32 `json:"cloudCover,omitempty"`

	// Description of the weather hazard affecting the trip.
	Hazards *WeatherHazards `json:"hazards,omitempty"`

	// Numeric value representing an image that displays the iconPhrase. Please refer to Weather Service Concepts [https://aka.ms/AzureMapsWeatherConcepts]
// for details.
	IconCode *int32 `json:"iconCode,omitempty"`

	// Indicates the time of the day. True indicates 'day',', false indicates 'night.
	IsDayTime *bool `json:"isDayTime,omitempty"`

	// Estimation of thunderstorm intensity on an open scale. A value of 0 means there is no thunderstorm; values of 1 and higher mean there is a thunderstorm
// in increasing intensity.
	LightningCount *int32 `json:"lightningCount,omitempty"`

	// List of weather hazard notifications.
	Notifications []*WeatherNotification `json:"notifications,omitempty"`

	// Precipitation forecast of the weather along the route.
	Precipitation *WeatherAlongRoutePrecipitation `json:"precipitation,omitempty"`

	// A displayable short phrase describing the forecasted conditions and precipitation intensity/type.
	ShortPhrase *string `json:"shortPhrase,omitempty"`

	// A rating that indicates how blinding the sun is for the driver.
	SunGlare *SunGlare `json:"sunGlare,omitempty"`

	// Specific value of a given unit related to weather.
	Temperature *WeatherUnit `json:"temperature,omitempty"`

	// Wind details being returned including speed and direction.
	Wind *WindDetails `json:"wind,omitempty"`

	// Wind details being returned including speed and direction.
	WindGust *WindDetails `json:"windGust,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WeatherWaypoint.
func (w WeatherWaypoint) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "cloudCover", w.CloudCover)
	populate(objectMap, "hazards", w.Hazards)
	populate(objectMap, "iconCode", w.IconCode)
	populate(objectMap, "isDayTime", w.IsDayTime)
	populate(objectMap, "lightningCount", w.LightningCount)
	populate(objectMap, "notifications", w.Notifications)
	populate(objectMap, "precipitation", w.Precipitation)
	populate(objectMap, "shortPhrase", w.ShortPhrase)
	populate(objectMap, "sunGlare", w.SunGlare)
	populate(objectMap, "temperature", w.Temperature)
	populate(objectMap, "wind", w.Wind)
	populate(objectMap, "windGust", w.WindGust)
	return json.Marshal(objectMap)
}

// WindDetails - Wind details being returned including speed and direction.
type WindDetails struct {
	// Wind direction
	Direction *WindDirection `json:"direction,omitempty"`

	// Speed of the wind in specified unit.
	Speed *WindSpeed `json:"speed,omitempty"`
}

// WindDirection - Wind direction
type WindDirection struct {
	// Wind direction in Azimuth degrees, starting at true North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is 180
// degrees, west is 270 degrees. Possible values
// 0-359.
	Degrees *int32 `json:"degrees,omitempty"`

	// Direction abbreviation in the specified language.
	LocalizedDescription *string `json:"localizedDescription,omitempty"`
}

// WindSpeed - Speed of wind in specified unit.
type WindSpeed struct {
	// Type of unit for the speed value.
	Unit *string `json:"unit,omitempty"`

	// Numeric ID value associated with the type of unit being displayed. Can be used for unit translation. Please refer to Weather Service Concepts [https://aka.ms/AzureMapsWeatherConcepts]
// for details.
	UnitType *int32 `json:"unitType,omitempty"`

	// Rounded value of the speed.
	Value *float32 `json:"value,omitempty"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

