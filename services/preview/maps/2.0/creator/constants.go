// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package creator

const telemetryInfo = "azsdk-go-creator/<version>"
// GeoJSONGeometryType - type of geometry returned
type GeoJSONGeometryType string

const (
	// GeoJSONGeometryTypeGeoJSONGeometryCollection - `GeoJSON GeometryCollection` geometry.
	GeoJSONGeometryTypeGeoJSONGeometryCollection GeoJSONGeometryType = "GeometryCollection"
	// GeoJSONGeometryTypeGeoJSONLineString - `GeoJSON LineString` geometry.
	GeoJSONGeometryTypeGeoJSONLineString GeoJSONGeometryType = "LineString"
	// GeoJSONGeometryTypeGeoJSONMultiLineString - `GeoJSON MultiLineString` geometry.
	GeoJSONGeometryTypeGeoJSONMultiLineString GeoJSONGeometryType = "MultiLineString"
	// GeoJSONGeometryTypeGeoJSONMultiPoint - `GeoJSON MultiPoint` geometry.
	GeoJSONGeometryTypeGeoJSONMultiPoint GeoJSONGeometryType = "MultiPoint"
	// GeoJSONGeometryTypeGeoJSONMultiPolygon - `GeoJSON MultiPolygon` geometry.
	GeoJSONGeometryTypeGeoJSONMultiPolygon GeoJSONGeometryType = "MultiPolygon"
	// GeoJSONGeometryTypeGeoJSONPoint - `GeoJSON Point` geometry.
	GeoJSONGeometryTypeGeoJSONPoint GeoJSONGeometryType = "Point"
	// GeoJSONGeometryTypeGeoJSONPolygon - `GeoJSON Polygon` geometry.
	GeoJSONGeometryTypeGeoJSONPolygon GeoJSONGeometryType = "Polygon"
)

// PossibleGeoJSONGeometryTypeValues returns the possible values for the GeoJSONGeometryType const type.
func PossibleGeoJSONGeometryTypeValues() []GeoJSONGeometryType {
	return []GeoJSONGeometryType{	
		GeoJSONGeometryTypeGeoJSONGeometryCollection,
		GeoJSONGeometryTypeGeoJSONLineString,
		GeoJSONGeometryTypeGeoJSONMultiLineString,
		GeoJSONGeometryTypeGeoJSONMultiPoint,
		GeoJSONGeometryTypeGeoJSONMultiPolygon,
		GeoJSONGeometryTypeGeoJSONPoint,
		GeoJSONGeometryTypeGeoJSONPolygon,
	}
}

// ToPtr returns a *GeoJSONGeometryType pointing to the current value.
func (c GeoJSONGeometryType) ToPtr() *GeoJSONGeometryType {
	return &c
}

// GeoJSONObjectType - Specifies the GeoJSON type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString,
// Polygon, MultiPolygon, GeometryCollection, Feature and
// FeatureCollection.
type GeoJSONObjectType string

const (
	// GeoJSONObjectTypeGeoJSONFeature - `GeoJSON Feature` object.
	GeoJSONObjectTypeGeoJSONFeature GeoJSONObjectType = "Feature"
	// GeoJSONObjectTypeGeoJSONFeatureCollection - `GeoJSON FeatureCollection` object.
	GeoJSONObjectTypeGeoJSONFeatureCollection GeoJSONObjectType = "FeatureCollection"
	// GeoJSONObjectTypeGeoJSONGeometryCollection - `GeoJSON GeometryCollection` geometry.
	GeoJSONObjectTypeGeoJSONGeometryCollection GeoJSONObjectType = "GeometryCollection"
	// GeoJSONObjectTypeGeoJSONLineString - `GeoJSON LineString` geometry.
	GeoJSONObjectTypeGeoJSONLineString GeoJSONObjectType = "LineString"
	// GeoJSONObjectTypeGeoJSONMultiLineString - `GeoJSON MultiLineString` geometry.
	GeoJSONObjectTypeGeoJSONMultiLineString GeoJSONObjectType = "MultiLineString"
	// GeoJSONObjectTypeGeoJSONMultiPoint - `GeoJSON MultiPoint` geometry.
	GeoJSONObjectTypeGeoJSONMultiPoint GeoJSONObjectType = "MultiPoint"
	// GeoJSONObjectTypeGeoJSONMultiPolygon - `GeoJSON MultiPolygon` geometry.
	GeoJSONObjectTypeGeoJSONMultiPolygon GeoJSONObjectType = "MultiPolygon"
	// GeoJSONObjectTypeGeoJSONPoint - `GeoJSON Point` geometry.
	GeoJSONObjectTypeGeoJSONPoint GeoJSONObjectType = "Point"
	// GeoJSONObjectTypeGeoJSONPolygon - `GeoJSON Polygon` geometry.
	GeoJSONObjectTypeGeoJSONPolygon GeoJSONObjectType = "Polygon"
)

// PossibleGeoJSONObjectTypeValues returns the possible values for the GeoJSONObjectType const type.
func PossibleGeoJSONObjectTypeValues() []GeoJSONObjectType {
	return []GeoJSONObjectType{	
		GeoJSONObjectTypeGeoJSONFeature,
		GeoJSONObjectTypeGeoJSONFeatureCollection,
		GeoJSONObjectTypeGeoJSONGeometryCollection,
		GeoJSONObjectTypeGeoJSONLineString,
		GeoJSONObjectTypeGeoJSONMultiLineString,
		GeoJSONObjectTypeGeoJSONMultiPoint,
		GeoJSONObjectTypeGeoJSONMultiPolygon,
		GeoJSONObjectTypeGeoJSONPoint,
		GeoJSONObjectTypeGeoJSONPolygon,
	}
}

// ToPtr returns a *GeoJSONObjectType pointing to the current value.
func (c GeoJSONObjectType) ToPtr() *GeoJSONObjectType {
	return &c
}

type GeofenceMode string

const (
	// GeofenceModeAll - Publish all the query results to Azure Maps account event subscription.
	GeofenceModeAll GeofenceMode = "All"
	// GeofenceModeEnterAndExit - Only publish result when user location is considered as crossing geofencing boarder.
	GeofenceModeEnterAndExit GeofenceMode = "EnterAndExit"
)

// PossibleGeofenceModeValues returns the possible values for the GeofenceMode const type.
func PossibleGeofenceModeValues() []GeofenceMode {
	return []GeofenceMode{	
		GeofenceModeAll,
		GeofenceModeEnterAndExit,
	}
}

// ToPtr returns a *GeofenceMode pointing to the current value.
func (c GeofenceMode) ToPtr() *GeofenceMode {
	return &c
}

type GeographicResourceLocation string

const (
	// GeographicResourceLocationEu - Used to access an Azure Maps Creator resource in Europe
	GeographicResourceLocationEu GeographicResourceLocation = "eu"
	// GeographicResourceLocationUs - Used to access an Azure Maps Creator resource in the United States
	GeographicResourceLocationUs GeographicResourceLocation = "us"
)

// PossibleGeographicResourceLocationValues returns the possible values for the GeographicResourceLocation const type.
func PossibleGeographicResourceLocationValues() []GeographicResourceLocation {
	return []GeographicResourceLocation{	
		GeographicResourceLocationEu,
		GeographicResourceLocationUs,
	}
}

// ToPtr returns a *GeographicResourceLocation pointing to the current value.
func (c GeographicResourceLocation) ToPtr() *GeographicResourceLocation {
	return &c
}

// Geography - This parameter specifies where the Azure Maps Creator resource is located. Valid values are us and eu.
type Geography string

const (
	GeographyEu Geography = "eu"
	GeographyUs Geography = "us"
)

// PossibleGeographyValues returns the possible values for the Geography const type.
func PossibleGeographyValues() []Geography {
	return []Geography{	
		GeographyEu,
		GeographyUs,
	}
}

// ToPtr returns a *Geography pointing to the current value.
func (c Geography) ToPtr() *Geography {
	return &c
}

// LroStatus - The status state of the request.
type LroStatus string

const (
	// LroStatusFailed - The request has one or more failures.
	LroStatusFailed LroStatus = "Failed"
	// LroStatusNotStarted - The request has not started processing yet.
	LroStatusNotStarted LroStatus = "NotStarted"
	// LroStatusRunning - The request has started processing.
	LroStatusRunning LroStatus = "Running"
	// LroStatusSucceeded - The request has successfully completed.
	LroStatusSucceeded LroStatus = "Succeeded"
)

// PossibleLroStatusValues returns the possible values for the LroStatus const type.
func PossibleLroStatusValues() []LroStatus {
	return []LroStatus{	
		LroStatusFailed,
		LroStatusNotStarted,
		LroStatusRunning,
		LroStatusSucceeded,
	}
}

// ToPtr returns a *LroStatus pointing to the current value.
func (c LroStatus) ToPtr() *LroStatus {
	return &c
}

type ResponseFormat string

const (
	// ResponseFormatJSON - [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)
	ResponseFormatJSON ResponseFormat = "json"
)

// PossibleResponseFormatValues returns the possible values for the ResponseFormat const type.
func PossibleResponseFormatValues() []ResponseFormat {
	return []ResponseFormat{	
		ResponseFormatJSON,
	}
}

// ToPtr returns a *ResponseFormat pointing to the current value.
func (c ResponseFormat) ToPtr() *ResponseFormat {
	return &c
}

// StyleObjectType - The type of stateset style.
type StyleObjectType string

const (
	// StyleObjectTypeBooleanTypeStyleRule - Boolean type of stateset style.
	StyleObjectTypeBooleanTypeStyleRule StyleObjectType = "boolean"
	// StyleObjectTypeNumberTypeStyleRule - Number type of stateset style.
	StyleObjectTypeNumberTypeStyleRule StyleObjectType = "number"
	// StyleObjectTypeStringTypeStyleRule - String type of stateset style.
	StyleObjectTypeStringTypeStyleRule StyleObjectType = "string"
)

// PossibleStyleObjectTypeValues returns the possible values for the StyleObjectType const type.
func PossibleStyleObjectTypeValues() []StyleObjectType {
	return []StyleObjectType{	
		StyleObjectTypeBooleanTypeStyleRule,
		StyleObjectTypeNumberTypeStyleRule,
		StyleObjectTypeStringTypeStyleRule,
	}
}

// ToPtr returns a *StyleObjectType pointing to the current value.
func (c StyleObjectType) ToPtr() *StyleObjectType {
	return &c
}

type UploadDataFormat string

const (
	// UploadDataFormatDwgzippackage - ZIP package containing DWG file.
	UploadDataFormatDwgzippackage UploadDataFormat = "dwgzippackage"
	// UploadDataFormatGeojson - [GeoJSON](https://tools.ietf.org/html/rfc7946) is a JSON based geospatial data interchange format.
	UploadDataFormatGeojson UploadDataFormat = "geojson"
	// UploadDataFormatZip - Compressed data format.
	UploadDataFormatZip UploadDataFormat = "zip"
)

// PossibleUploadDataFormatValues returns the possible values for the UploadDataFormat const type.
func PossibleUploadDataFormatValues() []UploadDataFormat {
	return []UploadDataFormat{	
		UploadDataFormatDwgzippackage,
		UploadDataFormatGeojson,
		UploadDataFormatZip,
	}
}

// ToPtr returns a *UploadDataFormat pointing to the current value.
func (c UploadDataFormat) ToPtr() *UploadDataFormat {
	return &c
}

