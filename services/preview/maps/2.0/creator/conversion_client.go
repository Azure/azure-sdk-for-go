// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package creator

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// ConversionClient contains the methods for the Conversion group.
// Don't use this type directly, use NewConversionClient() instead.
type ConversionClient struct {
	con         *Connection
	xmsClientID *string
}

// NewConversionClient creates a new instance of ConversionClient with the specified values.
func NewConversionClient(con *Connection, xmsClientID *string) *ConversionClient {
	return &ConversionClient{
		con:         NewConnection(con.cp.geography, ClientIdCredScaffold{con.cp.cred, xmsClientID}, con.cp.options),
		xmsClientID: xmsClientID,
	}
}

// BeginConvert - Applies to: see pricing tiers [https://aka.ms/AzureMapsPricingTier].
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. This [https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps]
// article
// introduces concepts and tools that apply to Azure Maps Creator.
// The Conversion API lets the caller import a set of DWG design files as a zipped Drawing Package [https://aka.ms/am-drawing-package] into Azure Maps.
// The Drawing Package
// [https://aka.ms/am-drawing-package] should first be uploaded using the Azure Maps Data Service [https://docs.microsoft.com/rest/api/maps/data]. Once
// uploaded, use the udid returned by the Data Upload
// API [https://docs.microsoft.com/rest/api/maps/data/uploadpreview] to call this Conversion API.
// CONVERT DWG PACKAGE The Conversion API performs a long-running request [https://aka.ms/am-creator-lrt-v2].
// DEBUG DWG PACKAGE ISSUES During the Conversion process, if there are any issues with the DWG package errors and warnings [https://aka.ms/am-conversion-errors]
// are provided in the response along with a
// diagnostic package to visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion operation status
// process as detailed here
// [https://aka.ms/am-creator-lrt-v2] returns the location of the diagnostic package that can be downloaded by the caller to help them visualize and diagnose
// these issues. The diagnostic package location
// can be found in the properties section of the conversion operation status response and looks like the following:
// { "properties": { "diagnosticPackageLocation": "https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0"
// }
// }
// The diagnostic package can be downloaded by executing a HTTP GET request on the diagnosticPackageLocation. For more details on how to use the tool to
// visualize and diagnose all the errors and warnings
// see Drawing Error Visualizer [https://aka.ms/am-drawing-errors-visualizer].
// A conversion operation will be marked as success if there are zero or more warnings but will be marked as failed if any errors are encountered.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ConversionClient) BeginConvert(ctx context.Context, udid string, outputOntology string, options *ConversionBeginConvertOptions) (LongRunningOperationResultPollerResponse, error) {
	resp, err := client.convert(ctx, udid, outputOntology, options)
	if err != nil {
		return LongRunningOperationResultPollerResponse{}, err
	}
	result := LongRunningOperationResultPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := azcore.NewLROPoller("ConversionClient.Convert", resp, client.con.Pipeline(), client.convertHandleError)
	if err != nil {
		return LongRunningOperationResultPollerResponse{}, err
	}
	poller := &longRunningOperationResultPoller{
		pt: pt,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (LongRunningOperationResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeConvert creates a new LongRunningOperationResultPoller from the specified resume token.
// token - The value must come from a previous call to LongRunningOperationResultPoller.ResumeToken().
func (client *ConversionClient) ResumeConvert(ctx context.Context, token string) (LongRunningOperationResultPollerResponse, error) {
	pt, err := azcore.NewLROPollerFromResumeToken("ConversionClient.Convert", token, client.con.Pipeline(), client.convertHandleError)
	if err != nil {
		return LongRunningOperationResultPollerResponse{}, err
	}
	poller := &longRunningOperationResultPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return LongRunningOperationResultPollerResponse{}, err
	}
	result := LongRunningOperationResultPollerResponse{
		RawResponse: resp,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (LongRunningOperationResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// Convert - Applies to: see pricing tiers [https://aka.ms/AzureMapsPricingTier].
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. This [https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps]
// article
// introduces concepts and tools that apply to Azure Maps Creator.
// The Conversion API lets the caller import a set of DWG design files as a zipped Drawing Package [https://aka.ms/am-drawing-package] into Azure Maps.
// The Drawing Package
// [https://aka.ms/am-drawing-package] should first be uploaded using the Azure Maps Data Service [https://docs.microsoft.com/rest/api/maps/data]. Once
// uploaded, use the udid returned by the Data Upload
// API [https://docs.microsoft.com/rest/api/maps/data/uploadpreview] to call this Conversion API.
// CONVERT DWG PACKAGE The Conversion API performs a long-running request [https://aka.ms/am-creator-lrt-v2].
// DEBUG DWG PACKAGE ISSUES During the Conversion process, if there are any issues with the DWG package errors and warnings [https://aka.ms/am-conversion-errors]
// are provided in the response along with a
// diagnostic package to visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion operation status
// process as detailed here
// [https://aka.ms/am-creator-lrt-v2] returns the location of the diagnostic package that can be downloaded by the caller to help them visualize and diagnose
// these issues. The diagnostic package location
// can be found in the properties section of the conversion operation status response and looks like the following:
// { "properties": { "diagnosticPackageLocation": "https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0"
// }
// }
// The diagnostic package can be downloaded by executing a HTTP GET request on the diagnosticPackageLocation. For more details on how to use the tool to
// visualize and diagnose all the errors and warnings
// see Drawing Error Visualizer [https://aka.ms/am-drawing-errors-visualizer].
// A conversion operation will be marked as success if there are zero or more warnings but will be marked as failed if any errors are encountered.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ConversionClient) convert(ctx context.Context, udid string, outputOntology string, options *ConversionBeginConvertOptions) (*azcore.Response, error) {
	req, err := client.convertCreateRequest(ctx, udid, outputOntology, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.convertHandleError(resp)
	}
	return resp, nil
}

// convertCreateRequest creates the Convert request.
func (client *ConversionClient) convertCreateRequest(ctx context.Context, udid string, outputOntology string, options *ConversionBeginConvertOptions) (*azcore.Request, error) {
	urlPath := "/conversions"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2.0")
	reqQP.Set("udid", udid)
	reqQP.Set("outputOntology", outputOntology)
	if options != nil && options.Description != nil {
		reqQP.Set("description", *options.Description)
	}
	req.URL.RawQuery = reqQP.Encode()
	if client.xmsClientID != nil {
		req.Header.Set("x-ms-client-id", *client.xmsClientID)
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// convertHandleError handles the Convert error response.
func (client *ConversionClient) convertHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Delete - Applies to: see pricing tiers [https://aka.ms/AzureMapsPricingTier].
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. This [https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps]
// article
// introduces concepts and tools that apply to Azure Maps Creator.
// This API allows the caller to delete any data conversions created previously using the Conversion API [https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview].
// SUBMIT DELETE REQUEST To delete your conversion data you will issue a DELETE request where the path will contain the conversionId of the data to delete.
// CONVERSION DELETE RESPONSE The Conversion Delete API returns a HTTP 204 No Content response with an empty body, if the converted data resources were
// deleted successfully.
// A HTTP 400 Bad Request error response will be returned if no resource associated with the passed-in conversionId is found.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ConversionClient) Delete(ctx context.Context, conversionID string, options *ConversionDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, conversionID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ConversionClient) deleteCreateRequest(ctx context.Context, conversionID string, options *ConversionDeleteOptions) (*azcore.Request, error) {
	urlPath := "/conversions/{conversionId}"
	if conversionID == "" {
		return nil, errors.New("parameter conversionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{conversionId}", url.PathEscape(conversionID))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2.0")
	req.URL.RawQuery = reqQP.Encode()
	if client.xmsClientID != nil {
		req.Header.Set("x-ms-client-id", *client.xmsClientID)
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *ConversionClient) deleteHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Get - Applies to: see pricing tiers [https://aka.ms/AzureMapsPricingTier].
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. This [https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps]
// article
// introduces concepts and tools that apply to Azure Maps Creator.
// This API allows the caller to fetch a successful data conversion submitted previously using the Conversion API [https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview].
// If the operation fails it returns the *ErrorResponse error type.
func (client *ConversionClient) Get(ctx context.Context, conversionID string, options *ConversionGetOptions) (ConversionListDetailInfoResponse, error) {
	req, err := client.getCreateRequest(ctx, conversionID, options)
	if err != nil {
		return ConversionListDetailInfoResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ConversionListDetailInfoResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ConversionListDetailInfoResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ConversionClient) getCreateRequest(ctx context.Context, conversionID string, options *ConversionGetOptions) (*azcore.Request, error) {
	urlPath := "/conversions/{conversionId}"
	if conversionID == "" {
		return nil, errors.New("parameter conversionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{conversionId}", url.PathEscape(conversionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2.0")
	req.URL.RawQuery = reqQP.Encode()
	if client.xmsClientID != nil {
		req.Header.Set("x-ms-client-id", *client.xmsClientID)
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ConversionClient) getHandleResponse(resp *azcore.Response) (ConversionListDetailInfoResponse, error) {
	var val *ConversionListDetailInfo
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ConversionListDetailInfoResponse{}, err
	}
	return ConversionListDetailInfoResponse{RawResponse: resp.Response, ConversionListDetailInfo: val}, nil
}

// getHandleError handles the Get error response.
func (client *ConversionClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetOperation - This path will be obtained from a call to POST /conversions. While in progress, an http200 will be returned with no extra headers - followed
// by an http200 with Resource-Location header once
// successfully completed.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ConversionClient) GetOperation(ctx context.Context, operationID string, options *ConversionGetOperationOptions) (LongRunningOperationResultResponse, error) {
	req, err := client.getOperationCreateRequest(ctx, operationID, options)
	if err != nil {
		return LongRunningOperationResultResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return LongRunningOperationResultResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return LongRunningOperationResultResponse{}, client.getOperationHandleError(resp)
	}
	return client.getOperationHandleResponse(resp)
}

// getOperationCreateRequest creates the GetOperation request.
func (client *ConversionClient) getOperationCreateRequest(ctx context.Context, operationID string, options *ConversionGetOperationOptions) (*azcore.Request, error) {
	urlPath := "/conversions/operations/{operationId}"
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2.0")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getOperationHandleResponse handles the GetOperation response.
func (client *ConversionClient) getOperationHandleResponse(resp *azcore.Response) (LongRunningOperationResultResponse, error) {
	var val *LongRunningOperationResult
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return LongRunningOperationResultResponse{}, err
	}
	result := LongRunningOperationResultResponse{RawResponse: resp.Response, LongRunningOperationResult: val}
	if val := resp.Header.Get("Resource-Location"); val != "" {
		result.ResourceLocation = &val
	}
	return result, nil
}

// getOperationHandleError handles the GetOperation error response.
func (client *ConversionClient) getOperationHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// List - Applies to: see pricing tiers [https://aka.ms/AzureMapsPricingTier].
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. This [https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps]
// article
// introduces concepts and tools that apply to Azure Maps Creator.
// This API allows the caller to fetch a list of all successful data conversions submitted previously using the Conversion API [https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview].
// SUBMIT LIST REQUEST To list all successful conversions you will issue a GET request with no additional parameters.
// LIST DATA RESPONSE The Conversion List API returns the complete list of all conversion details in json format.
// Here is a sample response returning the details of two successful conversion requests:
// { "conversions": [ { "conversionId": "54398242-ea6c-1f31-4fa6-79b1ae0fc24d", "udid": "31838736-8b84-11ea-bc55-0242ac130003", "created": "5/19/2020 9:00:00
// AM +00:00", "description": "User provided
// description.", "featureCounts": { "DIR": 1, "LVL": 3, "FCL": 1, "UNIT": 150, "CTG": 8, "AEL": 0, "OPN": 10 } }, { "conversionId": "2acf7d32-8b84-11ea-bc55-0242ac130003",
// "udid":
// "1214bc58-8b84-11ea-bc55-0242ac1300039", "created": "5/19/2020 9:00:00 AM +00:00", "description": "User provided description.", "featureCounts": { "DIR":
// 1, "LVL": 3, "FCL": 1, "UNIT": 150, "CTG": 8,
// "AEL": 0, "OPN": 10 } } ] }
// If the operation fails it returns the *ErrorResponse error type.
func (client *ConversionClient) List(options *ConversionListOptions) ConversionListResponsePager {
	return &conversionListResponsePager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		responder: client.listHandleResponse,
		errorer:   client.listHandleError,
		advancer: func(ctx context.Context, resp ConversionListResponseResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.ConversionListResponse.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listCreateRequest creates the List request.
func (client *ConversionClient) listCreateRequest(ctx context.Context, options *ConversionListOptions) (*azcore.Request, error) {
	urlPath := "/conversions"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2.0")
	req.URL.RawQuery = reqQP.Encode()
	if client.xmsClientID != nil {
		req.Header.Set("x-ms-client-id", *client.xmsClientID)
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ConversionClient) listHandleResponse(resp *azcore.Response) (ConversionListResponseResponse, error) {
	var val *ConversionListResponse
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ConversionListResponseResponse{}, err
	}
	return ConversionListResponseResponse{RawResponse: resp.Response, ConversionListResponse: val}, nil
}

// listHandleError handles the List error response.
func (client *ConversionClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
