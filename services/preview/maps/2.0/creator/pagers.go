// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package creator

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// AliasListResponsePager provides iteration over AliasListResponse pages.
type AliasListResponsePager interface {
	azcore.Pager

	// PageResponse returns the current AliasListResponseResponse.
	PageResponse() AliasListResponseResponse
}

type aliasListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type aliasListResponseHandleError func(*azcore.Response) error

type aliasListResponseHandleResponse func(*azcore.Response) (AliasListResponseResponse, error)

type aliasListResponseAdvancePage func(context.Context, AliasListResponseResponse) (*azcore.Request, error)

type aliasListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester aliasListResponseCreateRequest
	// callback for handling response errors
	errorer aliasListResponseHandleError
	// callback for handling the HTTP response
	responder aliasListResponseHandleResponse
	// callback for advancing to the next page
	advancer aliasListResponseAdvancePage
	// contains the current response
	current AliasListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *aliasListResponsePager) Err() error {
	return p.err
}

func (p *aliasListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AliasListResponse.NextLink == nil || len(*p.current.AliasListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *aliasListResponsePager) PageResponse() AliasListResponseResponse {
	return p.current
}

// ConversionListResponsePager provides iteration over ConversionListResponse pages.
type ConversionListResponsePager interface {
	azcore.Pager

	// PageResponse returns the current ConversionListResponseResponse.
	PageResponse() ConversionListResponseResponse
}

type conversionListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type conversionListResponseHandleError func(*azcore.Response) error

type conversionListResponseHandleResponse func(*azcore.Response) (ConversionListResponseResponse, error)

type conversionListResponseAdvancePage func(context.Context, ConversionListResponseResponse) (*azcore.Request, error)

type conversionListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester conversionListResponseCreateRequest
	// callback for handling response errors
	errorer conversionListResponseHandleError
	// callback for handling the HTTP response
	responder conversionListResponseHandleResponse
	// callback for advancing to the next page
	advancer conversionListResponseAdvancePage
	// contains the current response
	current ConversionListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *conversionListResponsePager) Err() error {
	return p.err
}

func (p *conversionListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ConversionListResponse.NextLink == nil || len(*p.current.ConversionListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *conversionListResponsePager) PageResponse() ConversionListResponseResponse {
	return p.current
}

// DatasetListResponsePager provides iteration over DatasetListResponse pages.
type DatasetListResponsePager interface {
	azcore.Pager

	// PageResponse returns the current DatasetListResponseResponse.
	PageResponse() DatasetListResponseResponse
}

type datasetListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type datasetListResponseHandleError func(*azcore.Response) error

type datasetListResponseHandleResponse func(*azcore.Response) (DatasetListResponseResponse, error)

type datasetListResponseAdvancePage func(context.Context, DatasetListResponseResponse) (*azcore.Request, error)

type datasetListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester datasetListResponseCreateRequest
	// callback for handling response errors
	errorer datasetListResponseHandleError
	// callback for handling the HTTP response
	responder datasetListResponseHandleResponse
	// callback for advancing to the next page
	advancer datasetListResponseAdvancePage
	// contains the current response
	current DatasetListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *datasetListResponsePager) Err() error {
	return p.err
}

func (p *datasetListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatasetListResponse.NextLink == nil || len(*p.current.DatasetListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *datasetListResponsePager) PageResponse() DatasetListResponseResponse {
	return p.current
}

// StatesetListResponsePager provides iteration over StatesetListResponse pages.
type StatesetListResponsePager interface {
	azcore.Pager

	// PageResponse returns the current StatesetListResponseResponse.
	PageResponse() StatesetListResponseResponse
}

type statesetListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type statesetListResponseHandleError func(*azcore.Response) error

type statesetListResponseHandleResponse func(*azcore.Response) (StatesetListResponseResponse, error)

type statesetListResponseAdvancePage func(context.Context, StatesetListResponseResponse) (*azcore.Request, error)

type statesetListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester statesetListResponseCreateRequest
	// callback for handling response errors
	errorer statesetListResponseHandleError
	// callback for handling the HTTP response
	responder statesetListResponseHandleResponse
	// callback for advancing to the next page
	advancer statesetListResponseAdvancePage
	// contains the current response
	current StatesetListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *statesetListResponsePager) Err() error {
	return p.err
}

func (p *statesetListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StatesetListResponse.NextLink == nil || len(*p.current.StatesetListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *statesetListResponsePager) PageResponse() StatesetListResponseResponse {
	return p.current
}

// TilesetListResponsePager provides iteration over TilesetListResponse pages.
type TilesetListResponsePager interface {
	azcore.Pager

	// PageResponse returns the current TilesetListResponseResponse.
	PageResponse() TilesetListResponseResponse
}

type tilesetListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type tilesetListResponseHandleError func(*azcore.Response) error

type tilesetListResponseHandleResponse func(*azcore.Response) (TilesetListResponseResponse, error)

type tilesetListResponseAdvancePage func(context.Context, TilesetListResponseResponse) (*azcore.Request, error)

type tilesetListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester tilesetListResponseCreateRequest
	// callback for handling response errors
	errorer tilesetListResponseHandleError
	// callback for handling the HTTP response
	responder tilesetListResponseHandleResponse
	// callback for advancing to the next page
	advancer tilesetListResponseAdvancePage
	// contains the current response
	current TilesetListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *tilesetListResponsePager) Err() error {
	return p.err
}

func (p *tilesetListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TilesetListResponse.NextLink == nil || len(*p.current.TilesetListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *tilesetListResponsePager) PageResponse() TilesetListResponseResponse {
	return p.current
}

