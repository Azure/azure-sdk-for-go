// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package creator

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// TilesetClient contains the methods for the Tileset group.
// Don't use this type directly, use NewTilesetClient() instead.
type TilesetClient struct {
	con         *Connection
	xmsClientID *string
}

// NewTilesetClient creates a new instance of TilesetClient with the specified values.
func NewTilesetClient(con *Connection, xmsClientID *string) *TilesetClient {
	return &TilesetClient{
		con:         NewConnection(con.cp.geography, ClientIdCredScaffold{con.cp.cred, xmsClientID}, con.cp.options),
		xmsClientID: xmsClientID,
	}
}

// BeginCreate - Applies to: see pricing tiers [https://aka.ms/AzureMapsPricingTier].
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. This [https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps]
// article
// introduces concepts and tools that apply to Azure Maps Creator.
// This [https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps] article introduces concepts and tools that apply to Azure Maps Creator.
// The Tileset Create API allows the caller to create a tileset from a dataset. A tileset contains a set of tiles that can be consumed from the Get Map
// Tile [/rest/api/maps/render/getmaptile] to retrieve
// custom tiles. To make a dataset, use theDataSet Create API [/rest/api/maps/dataset/createpreview].
// SUBMIT CREATE REQUEST To create your tileset you will make a POST request with an empty body. The datasetId query parameter will be used as the source
// of the tileset data.
// The Create Tileset API is along-running request [https://aka.ms/am-creator-lrt-v2].
// If the operation fails it returns the *ErrorResponse error type.
func (client *TilesetClient) BeginCreate(ctx context.Context, datasetID string, options *TilesetBeginCreateOptions) (LongRunningOperationResultPollerResponse, error) {
	resp, err := client.create(ctx, datasetID, options)
	if err != nil {
		return LongRunningOperationResultPollerResponse{}, err
	}
	result := LongRunningOperationResultPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := azcore.NewLROPoller("TilesetClient.Create", resp, client.con.Pipeline(), client.createHandleError)
	if err != nil {
		return LongRunningOperationResultPollerResponse{}, err
	}
	poller := &longRunningOperationResultPoller{
		pt: pt,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (LongRunningOperationResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeCreate creates a new LongRunningOperationResultPoller from the specified resume token.
// token - The value must come from a previous call to LongRunningOperationResultPoller.ResumeToken().
func (client *TilesetClient) ResumeCreate(ctx context.Context, token string) (LongRunningOperationResultPollerResponse, error) {
	pt, err := azcore.NewLROPollerFromResumeToken("TilesetClient.Create", token, client.con.Pipeline(), client.createHandleError)
	if err != nil {
		return LongRunningOperationResultPollerResponse{}, err
	}
	poller := &longRunningOperationResultPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return LongRunningOperationResultPollerResponse{}, err
	}
	result := LongRunningOperationResultPollerResponse{
		RawResponse: resp,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (LongRunningOperationResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// Create - Applies to: see pricing tiers [https://aka.ms/AzureMapsPricingTier].
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. This [https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps]
// article
// introduces concepts and tools that apply to Azure Maps Creator.
// This [https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps] article introduces concepts and tools that apply to Azure Maps Creator.
// The Tileset Create API allows the caller to create a tileset from a dataset. A tileset contains a set of tiles that can be consumed from the Get Map
// Tile [/rest/api/maps/render/getmaptile] to retrieve
// custom tiles. To make a dataset, use theDataSet Create API [/rest/api/maps/dataset/createpreview].
// SUBMIT CREATE REQUEST To create your tileset you will make a POST request with an empty body. The datasetId query parameter will be used as the source
// of the tileset data.
// The Create Tileset API is along-running request [https://aka.ms/am-creator-lrt-v2].
// If the operation fails it returns the *ErrorResponse error type.
func (client *TilesetClient) create(ctx context.Context, datasetID string, options *TilesetBeginCreateOptions) (*azcore.Response, error) {
	req, err := client.createCreateRequest(ctx, datasetID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.createHandleError(resp)
	}
	return resp, nil
}

// createCreateRequest creates the Create request.
func (client *TilesetClient) createCreateRequest(ctx context.Context, datasetID string, options *TilesetBeginCreateOptions) (*azcore.Request, error) {
	urlPath := "/tilesets"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2.0")
	reqQP.Set("datasetId", datasetID)
	if options != nil && options.Description != nil {
		reqQP.Set("description", *options.Description)
	}
	req.URL.RawQuery = reqQP.Encode()
	if client.xmsClientID != nil {
		req.Header.Set("x-ms-client-id", *client.xmsClientID)
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// createHandleError handles the Create error response.
func (client *TilesetClient) createHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Delete - Applies to: see pricing tiers [https://aka.ms/AzureMapsPricingTier].
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. This [https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps]
// article
// introduces concepts and tools that apply to Azure Maps Creator.
// This API allows the caller to delete a created tileset.
// You can use this API if a tileset is no longer needed.
// SUBMIT DELETE REQUEST To delete your content you will issue a DELETE request where the path will contain the tilesetId of the tileset to delete.
// DELETE REQUEST "SUCCESSFUL" The Tileset Delete API returns a HTTP 204 No Content response with an empty body, if the tileset was deleted successfully.
// DELETE REQUEST "FAILED" A HTTP 400 Bad Request error response will be returned if the tileset with the passed-in tilesetId is not found.
// Here is a sample error response:
// { "error": { "code": "400 BadRequest", "message": "Bad request - Tileset Id: d85b5b27-5fc4-4599-8b50-47160e90f8ce does not exist." } }
// If the operation fails it returns the *ErrorResponse error type.
func (client *TilesetClient) Delete(ctx context.Context, tilesetID string, options *TilesetDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, tilesetID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteCreateRequest creates the Delete request.
func (client *TilesetClient) deleteCreateRequest(ctx context.Context, tilesetID string, options *TilesetDeleteOptions) (*azcore.Request, error) {
	urlPath := "/tilesets/{tilesetId}"
	if tilesetID == "" {
		return nil, errors.New("parameter tilesetID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{tilesetId}", url.PathEscape(tilesetID))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2.0")
	req.URL.RawQuery = reqQP.Encode()
	if client.xmsClientID != nil {
		req.Header.Set("x-ms-client-id", *client.xmsClientID)
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *TilesetClient) deleteHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Get - Applies to: see pricing tiers [https://aka.ms/AzureMapsPricingTier].
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. This [https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps]
// article
// introduces concepts and tools that apply to Azure Maps Creator.
// This API allows the caller to fetch a tileset.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TilesetClient) Get(ctx context.Context, tilesetID string, options *TilesetGetOptions) (TilesetDetailInfoResponse, error) {
	req, err := client.getCreateRequest(ctx, tilesetID, options)
	if err != nil {
		return TilesetDetailInfoResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return TilesetDetailInfoResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return TilesetDetailInfoResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *TilesetClient) getCreateRequest(ctx context.Context, tilesetID string, options *TilesetGetOptions) (*azcore.Request, error) {
	urlPath := "/tilesets/{tilesetId}"
	if tilesetID == "" {
		return nil, errors.New("parameter tilesetID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{tilesetId}", url.PathEscape(tilesetID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2.0")
	req.URL.RawQuery = reqQP.Encode()
	if client.xmsClientID != nil {
		req.Header.Set("x-ms-client-id", *client.xmsClientID)
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *TilesetClient) getHandleResponse(resp *azcore.Response) (TilesetDetailInfoResponse, error) {
	var val *TilesetDetailInfo
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return TilesetDetailInfoResponse{}, err
	}
	return TilesetDetailInfoResponse{RawResponse: resp.Response, TilesetDetailInfo: val}, nil
}

// getHandleError handles the Get error response.
func (client *TilesetClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetOperation - This path will be obtained from a call to /tilesets/create. While in progress, an http200 will be returned with no extra headers - followed
// by an http200 with Resource-Location header once
// successfully completed.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TilesetClient) GetOperation(ctx context.Context, operationID string, options *TilesetGetOperationOptions) (LongRunningOperationResultResponse, error) {
	req, err := client.getOperationCreateRequest(ctx, operationID, options)
	if err != nil {
		return LongRunningOperationResultResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return LongRunningOperationResultResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return LongRunningOperationResultResponse{}, client.getOperationHandleError(resp)
	}
	return client.getOperationHandleResponse(resp)
}

// getOperationCreateRequest creates the GetOperation request.
func (client *TilesetClient) getOperationCreateRequest(ctx context.Context, operationID string, options *TilesetGetOperationOptions) (*azcore.Request, error) {
	urlPath := "/tilesets/operations/{operationId}"
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2.0")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getOperationHandleResponse handles the GetOperation response.
func (client *TilesetClient) getOperationHandleResponse(resp *azcore.Response) (LongRunningOperationResultResponse, error) {
	var val *LongRunningOperationResult
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return LongRunningOperationResultResponse{}, err
	}
	result := LongRunningOperationResultResponse{RawResponse: resp.Response, LongRunningOperationResult: val}
	if val := resp.Header.Get("Resource-Location"); val != "" {
		result.ResourceLocation = &val
	}
	return result, nil
}

// getOperationHandleError handles the GetOperation error response.
func (client *TilesetClient) getOperationHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// List - Applies to: see pricing tiers [https://aka.ms/AzureMapsPricingTier].
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. This [https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps]
// article
// introduces concepts and tools that apply to Azure Maps Creator.
// This API allows the caller to fetch a list of all tilesets created.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TilesetClient) List(options *TilesetListOptions) TilesetListResponsePager {
	return &tilesetListResponsePager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		responder: client.listHandleResponse,
		errorer:   client.listHandleError,
		advancer: func(ctx context.Context, resp TilesetListResponseResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.TilesetListResponse.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listCreateRequest creates the List request.
func (client *TilesetClient) listCreateRequest(ctx context.Context, options *TilesetListOptions) (*azcore.Request, error) {
	urlPath := "/tilesets"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2.0")
	req.URL.RawQuery = reqQP.Encode()
	if client.xmsClientID != nil {
		req.Header.Set("x-ms-client-id", *client.xmsClientID)
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *TilesetClient) listHandleResponse(resp *azcore.Response) (TilesetListResponseResponse, error) {
	var val *TilesetListResponse
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return TilesetListResponseResponse{}, err
	}
	return TilesetListResponseResponse{RawResponse: resp.Response, TilesetListResponse: val}, nil
}

// listHandleError handles the List error response.
func (client *TilesetClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
