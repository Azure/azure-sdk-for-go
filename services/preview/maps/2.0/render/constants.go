// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package render

const telemetryInfo = "azsdk-go-render/<version>"
type GeographicResourceLocation string

const (
	// GeographicResourceLocationEu - Used to access an Azure Maps Creator resource in Europe
	GeographicResourceLocationEu GeographicResourceLocation = "eu"
	// GeographicResourceLocationUs - Used to access an Azure Maps Creator resource in the United States
	GeographicResourceLocationUs GeographicResourceLocation = "us"
)

// PossibleGeographicResourceLocationValues returns the possible values for the GeographicResourceLocation const type.
func PossibleGeographicResourceLocationValues() []GeographicResourceLocation {
	return []GeographicResourceLocation{	
		GeographicResourceLocationEu,
		GeographicResourceLocationUs,
	}
}

// ToPtr returns a *GeographicResourceLocation pointing to the current value.
func (c GeographicResourceLocation) ToPtr() *GeographicResourceLocation {
	return &c
}

// Geography - This parameter specifies where the Azure Maps Creator resource is located. Valid values are us and eu.
type Geography string

const (
	GeographyEu Geography = "eu"
	GeographyUs Geography = "us"
)

// PossibleGeographyValues returns the possible values for the Geography const type.
func PossibleGeographyValues() []Geography {
	return []Geography{	
		GeographyEu,
		GeographyUs,
	}
}

// ToPtr returns a *Geography pointing to the current value.
func (c Geography) ToPtr() *Geography {
	return &c
}

type IncludeText string

const (
	// IncludeTextNo - Exclude textual data from response. Only images and country names will be in response.
	IncludeTextNo IncludeText = "no"
	// IncludeTextYes - Include all textual data in response.
	IncludeTextYes IncludeText = "yes"
)

// PossibleIncludeTextValues returns the possible values for the IncludeText const type.
func PossibleIncludeTextValues() []IncludeText {
	return []IncludeText{	
		IncludeTextNo,
		IncludeTextYes,
	}
}

// ToPtr returns a *IncludeText pointing to the current value.
func (c IncludeText) ToPtr() *IncludeText {
	return &c
}

type MapImageStyle string

const (
	// MapImageStyleDark - Dark grey version of the Azure Maps main style
	MapImageStyleDark MapImageStyle = "dark"
	// MapImageStyleMain - Azure Maps main style
	MapImageStyleMain MapImageStyle = "main"
)

// PossibleMapImageStyleValues returns the possible values for the MapImageStyle const type.
func PossibleMapImageStyleValues() []MapImageStyle {
	return []MapImageStyle{	
		MapImageStyleDark,
		MapImageStyleMain,
	}
}

// ToPtr returns a *MapImageStyle pointing to the current value.
func (c MapImageStyle) ToPtr() *MapImageStyle {
	return &c
}

type MapImageryStyle string

const (
	// MapImageryStyleSatellite - Satellite imagery
	MapImageryStyleSatellite MapImageryStyle = "satellite"
)

// PossibleMapImageryStyleValues returns the possible values for the MapImageryStyle const type.
func PossibleMapImageryStyleValues() []MapImageryStyle {
	return []MapImageryStyle{	
		MapImageryStyleSatellite,
	}
}

// ToPtr returns a *MapImageryStyle pointing to the current value.
func (c MapImageryStyle) ToPtr() *MapImageryStyle {
	return &c
}

type MapTileLayer string

const (
	// MapTileLayerBasic - Returns a tile containing all map features including polygons, borders, roads and labels.
	MapTileLayerBasic MapTileLayer = "basic"
	// MapTileLayerHybrid - Returns a tile containing borders, roads, and labels, and can be overlaid on other tiles (such as satellite imagery) to produce
// hybrid tiles.
	MapTileLayerHybrid MapTileLayer = "hybrid"
	// MapTileLayerLabels - Returns a tile of just the map's label information.
	MapTileLayerLabels MapTileLayer = "labels"
	// MapTileLayerTerra - Map canvas complete with shaded relief tiles. Zoom levels 0-6 (inclusive) are supported. Png is the only supported TileFormat and
// only available MapTileSize is 512.
	MapTileLayerTerra MapTileLayer = "terra"
)

// PossibleMapTileLayerValues returns the possible values for the MapTileLayer const type.
func PossibleMapTileLayerValues() []MapTileLayer {
	return []MapTileLayer{	
		MapTileLayerBasic,
		MapTileLayerHybrid,
		MapTileLayerLabels,
		MapTileLayerTerra,
	}
}

// ToPtr returns a *MapTileLayer pointing to the current value.
func (c MapTileLayer) ToPtr() *MapTileLayer {
	return &c
}

type MapTileSize string

const (
	// MapTileSizeFiveHundredTwelve - Return a 512 by 512 pixel tile.
	MapTileSizeFiveHundredTwelve MapTileSize = "512"
	// MapTileSizeTwoHundredFiftySix - Return a 256 by 256 pixel tile.
	MapTileSizeTwoHundredFiftySix MapTileSize = "256"
)

// PossibleMapTileSizeValues returns the possible values for the MapTileSize const type.
func PossibleMapTileSizeValues() []MapTileSize {
	return []MapTileSize{	
		MapTileSizeFiveHundredTwelve,
		MapTileSizeTwoHundredFiftySix,
	}
}

// ToPtr returns a *MapTileSize pointing to the current value.
func (c MapTileSize) ToPtr() *MapTileSize {
	return &c
}

type MapTileStyle string

const (
	// MapTileStyleDark - Dark grey version of the Azure Maps main style. PNG is the only supported TileFormat.
	MapTileStyleDark MapTileStyle = "dark"
	// MapTileStyleMain - Azure Maps main style
	MapTileStyleMain MapTileStyle = "main"
	// MapTileStyleShadedRelief - Azure Maps main style completed with shaded relief. Supported by Layer terra.
	MapTileStyleShadedRelief MapTileStyle = "shaded_relief"
)

// PossibleMapTileStyleValues returns the possible values for the MapTileStyle const type.
func PossibleMapTileStyleValues() []MapTileStyle {
	return []MapTileStyle{	
		MapTileStyleDark,
		MapTileStyleMain,
		MapTileStyleShadedRelief,
	}
}

// ToPtr returns a *MapTileStyle pointing to the current value.
func (c MapTileStyle) ToPtr() *MapTileStyle {
	return &c
}

type RasterTileFormat string

const (
	// RasterTileFormatPNG - An image in the png format. Supports zoom levels 0 through 18.
	RasterTileFormatPNG RasterTileFormat = "png"
)

// PossibleRasterTileFormatValues returns the possible values for the RasterTileFormat const type.
func PossibleRasterTileFormatValues() []RasterTileFormat {
	return []RasterTileFormat{	
		RasterTileFormatPNG,
	}
}

// ToPtr returns a *RasterTileFormat pointing to the current value.
func (c RasterTileFormat) ToPtr() *RasterTileFormat {
	return &c
}

type StaticMapLayer string

const (
	// StaticMapLayerBasic - Returns an image containing all map features including polygons, borders, roads and labels.
	StaticMapLayerBasic StaticMapLayer = "basic"
	// StaticMapLayerHybrid - Returns an image containing borders, roads, and labels, and can be overlaid on other tiles (such as satellite imagery) to produce
// hybrid tiles.
	StaticMapLayerHybrid StaticMapLayer = "hybrid"
	// StaticMapLayerLabels - Returns an image of just the map's label information.
	StaticMapLayerLabels StaticMapLayer = "labels"
)

// PossibleStaticMapLayerValues returns the possible values for the StaticMapLayer const type.
func PossibleStaticMapLayerValues() []StaticMapLayer {
	return []StaticMapLayer{	
		StaticMapLayerBasic,
		StaticMapLayerHybrid,
		StaticMapLayerLabels,
	}
}

// ToPtr returns a *StaticMapLayer pointing to the current value.
func (c StaticMapLayer) ToPtr() *StaticMapLayer {
	return &c
}

type TextFormat string

const (
	// TextFormatJSON - [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)
	TextFormatJSON TextFormat = "json"
	// TextFormatXML - [The Extensible Markup Language](https://www.w3.org/TR/xml/)
	TextFormatXML TextFormat = "xml"
)

// PossibleTextFormatValues returns the possible values for the TextFormat const type.
func PossibleTextFormatValues() []TextFormat {
	return []TextFormat{	
		TextFormatJSON,
		TextFormatXML,
	}
}

// ToPtr returns a *TextFormat pointing to the current value.
func (c TextFormat) ToPtr() *TextFormat {
	return &c
}

type TileFormat string

const (
	// TileFormatPNG - An image in the png format. Supports zoom levels 0 through 18.
	TileFormatPNG TileFormat = "png"
	// TileFormatPbf - Vector graphic in the pbf format. Supports zoom levels 0 through 22.
	TileFormatPbf TileFormat = "pbf"
)

// PossibleTileFormatValues returns the possible values for the TileFormat const type.
func PossibleTileFormatValues() []TileFormat {
	return []TileFormat{	
		TileFormatPNG,
		TileFormatPbf,
	}
}

// ToPtr returns a *TileFormat pointing to the current value.
func (c TileFormat) ToPtr() *TileFormat {
	return &c
}

type TileSize string

const (
	// TileSizeFiveHundredTwelve - Return a 512 by 512 pixel tile. Available for all tilesetIds except for
// * microsoft.weather.radar.main
// * microsoft.weather.infrared.main
// * microsoft.base.hybrid
// * microsoft.dem
// * microsoft.imagery
	TileSizeFiveHundredTwelve TileSize = "512"
	// TileSizeTwoHundredFiftySix - Return a 256 by 256 pixel tile. Available for all tilesetIds except for
// * microsoft.terra.main
	TileSizeTwoHundredFiftySix TileSize = "256"
)

// PossibleTileSizeValues returns the possible values for the TileSize const type.
func PossibleTileSizeValues() []TileSize {
	return []TileSize{	
		TileSizeFiveHundredTwelve,
		TileSizeTwoHundredFiftySix,
	}
}

// ToPtr returns a *TileSize pointing to the current value.
func (c TileSize) ToPtr() *TileSize {
	return &c
}

type TilesetID string

const (
	// TilesetIDMicrosoftBase - A base map is a standard map that displays roads, natural and artificial features along with the labels for those features in
// a vector tile.<br>
// Supports zoom levels 0 through 22. Format: vector (pbf).
	TilesetIDMicrosoftBase TilesetID = "microsoft.base"
	// TilesetIDMicrosoftBaseDarkgrey - All layers with our dark grey style.<br>
// Supports zoom levels 0 through 22. Format: raster (png).
	TilesetIDMicrosoftBaseDarkgrey TilesetID = "microsoft.base.darkgrey"
	// TilesetIDMicrosoftBaseHybrid - Displays road, boundary and label data in a vector tile.<br>
// Supports zoom levels 0 through 22. Format: vector (pbf).
	TilesetIDMicrosoftBaseHybrid TilesetID = "microsoft.base.hybrid"
	// TilesetIDMicrosoftBaseHybridRoad - Road, boundary and label data in our main style.<br>
// Supports zoom levels 0 through 22. Format: raster (png).
	TilesetIDMicrosoftBaseHybridRoad TilesetID = "microsoft.base.hybrid.road"
	// TilesetIDMicrosoftBaseLabels - Displays labels for roads, natural and artificial features in a vector tile.<br>
// Supports zoom levels 0 through 22. Format: vector (pbf).
	TilesetIDMicrosoftBaseLabels TilesetID = "microsoft.base.labels"
	// TilesetIDMicrosoftBaseLabelsRoad - Label data in our main style.<br>
// Supports zoom levels 0 through 22. Format: raster (png).
	TilesetIDMicrosoftBaseLabelsRoad TilesetID = "microsoft.base.labels.road"
	// TilesetIDMicrosoftBaseRoad - All layers with our main style.<br>
// Supports zoom levels 0 through 22. Format: raster (png).
	TilesetIDMicrosoftBaseRoad TilesetID = "microsoft.base.road"
	// TilesetIDMicrosoftDem - Digital Elevation Model tiles. The tiles are in the GeoTIFF format with a single 32-bit floating point band. The tiles cover
// the whole landmass of Earth. Some small islands (e.g., atolls) might not be represented accurately.<br>
// * The vertical unit for measurement of elevation height is meters. An elevation value of -32767.0 is used for points that have no data value, most often
// returned where there isn't landmass (i.e. water).<br>
// * The horizontal reference datum is the World Geodetic System 1984 (WGS84-G1150) and the vertical reference datum is the Earth Gravitational Model 2008
// (EGM2008).<br>
// * Tiles are 258x258 pixel squares rather than the standard 256 x 256. This is done to allow for accurate interpolation of values at the tile edges. As
// such adjacent tiles overlap by 1 pixel along all edges.<br>
// * Tile data comes from the [Airbus WorldDEM4Ortho product](https://www.intelligence-airbusds.com/worlddem-streaming/). Urban areas are approximately
// leveled down to ground level. All other areas are represented by the object surface level (e.g., trees). <br>
// Supports zoom level 13 only. Format: raster (tiff).
	TilesetIDMicrosoftDem TilesetID = "microsoft.dem"
	// TilesetIDMicrosoftImagery - A combination of satellite and aerial imagery. Only available in S1 pricing SKU.<br>
// Supports zoom levels 1 through 19. Format: raster (jpeg).
	TilesetIDMicrosoftImagery TilesetID = "microsoft.imagery"
	// TilesetIDMicrosoftTerraMain - Shaded relief and terra layers.<br>
// Supports zoom levels 0 through 6. Format: raster (png).
	TilesetIDMicrosoftTerraMain TilesetID = "microsoft.terra.main"
	// TilesetIDMicrosoftWeatherInfraredMain - Weather infrared tiles. Latest Infrared Satellite images shows clouds by their temperature. Please see [coverage
// information](https://aka.ms/AzureMapsWeatherCoverage) for Azure Maps Weather service. To learn more about the returned Satellite data, please see [Weather
// concepts](https://aka.ms/AzureMapsWeatherConcepts).<br>
// Supports zoom levels 0 through 15. Format: raster (png).
	TilesetIDMicrosoftWeatherInfraredMain TilesetID = "microsoft.weather.infrared.main"
	// TilesetIDMicrosoftWeatherRadarMain - Weather radar tiles. Latest weather radar images including areas of rain, snow, ice and mixed conditions. Please
// see [coverage information](https://aka.ms/AzureMapsWeatherCoverage) for Azure Maps Weather service. To learn more about the Radar data, please see [Weather
// concepts](https://aka.ms/AzureMapsWeatherConcepts).<br>
// Supports zoom levels 0 through 15. Format: raster (png).
	TilesetIDMicrosoftWeatherRadarMain TilesetID = "microsoft.weather.radar.main"
)

// PossibleTilesetIDValues returns the possible values for the TilesetID const type.
func PossibleTilesetIDValues() []TilesetID {
	return []TilesetID{	
		TilesetIDMicrosoftBase,
		TilesetIDMicrosoftBaseDarkgrey,
		TilesetIDMicrosoftBaseHybrid,
		TilesetIDMicrosoftBaseHybridRoad,
		TilesetIDMicrosoftBaseLabels,
		TilesetIDMicrosoftBaseLabelsRoad,
		TilesetIDMicrosoftBaseRoad,
		TilesetIDMicrosoftDem,
		TilesetIDMicrosoftImagery,
		TilesetIDMicrosoftTerraMain,
		TilesetIDMicrosoftWeatherInfraredMain,
		TilesetIDMicrosoftWeatherRadarMain,
	}
}

// ToPtr returns a *TilesetID pointing to the current value.
func (c TilesetID) ToPtr() *TilesetID {
	return &c
}

