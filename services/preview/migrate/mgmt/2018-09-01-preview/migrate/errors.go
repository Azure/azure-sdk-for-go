package migrate

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// ErrorsClient is the migrate your workloads to Azure.
type ErrorsClient struct {
	BaseClient
}

// NewErrorsClient creates an instance of the ErrorsClient client.
func NewErrorsClient() ErrorsClient {
	return NewErrorsClientWithBaseURI(DefaultBaseURI)
}

// NewErrorsClientWithBaseURI creates an instance of the ErrorsClient client.
func NewErrorsClientWithBaseURI(baseURI string) ErrorsClient {
	return ErrorsClient{NewWithBaseURI(baseURI)}
}

// EnumerateErrors sends the enumerate errors request.
// Parameters:
// subscriptionID - the subscription id.
// resourceGroupName - the resource group name.
// migrateProjectName - the name of the migrate project.
// continuationToken - continuation token from the previous call.
func (client ErrorsClient) EnumerateErrors(ctx context.Context, subscriptionID string, resourceGroupName string, migrateProjectName string, continuationToken string) (result ErrorCollection, err error) {
	req, err := client.EnumerateErrorsPreparer(ctx, subscriptionID, resourceGroupName, migrateProjectName, continuationToken)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.ErrorsClient", "EnumerateErrors", nil, "Failure preparing request")
		return
	}

	resp, err := client.EnumerateErrorsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "migrate.ErrorsClient", "EnumerateErrors", resp, "Failure sending request")
		return
	}

	result, err = client.EnumerateErrorsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.ErrorsClient", "EnumerateErrors", resp, "Failure responding to request")
	}

	return
}

// EnumerateErrorsPreparer prepares the EnumerateErrors request.
func (client ErrorsClient) EnumerateErrorsPreparer(ctx context.Context, subscriptionID string, resourceGroupName string, migrateProjectName string, continuationToken string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"migrateProjectName": autorest.Encode("path", migrateProjectName),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2018-09-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(continuationToken) > 0 {
		queryParameters["continuationToken"] = autorest.Encode("query", continuationToken)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/MigrateProjects/{migrateProjectName}/MigrateErrors", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// EnumerateErrorsSender sends the EnumerateErrors request. The method will close the
// http.Response Body if it receives an error.
func (client ErrorsClient) EnumerateErrorsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// EnumerateErrorsResponder handles the response to the EnumerateErrors request. The method always
// closes the http.Response Body.
func (client ErrorsClient) EnumerateErrorsResponder(resp *http.Response) (result ErrorCollection, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetError sends the get error request.
// Parameters:
// subscriptionID - the subscription id.
// resourceGroupName - the resource group name.
// migrateProjectName - the migrate project name.
// errorName - the ARM name of the error to be fetched.
func (client ErrorsClient) GetError(ctx context.Context, subscriptionID string, resourceGroupName string, migrateProjectName string, errorName string) (result Error, err error) {
	req, err := client.GetErrorPreparer(ctx, subscriptionID, resourceGroupName, migrateProjectName, errorName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.ErrorsClient", "GetError", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetErrorSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "migrate.ErrorsClient", "GetError", resp, "Failure sending request")
		return
	}

	result, err = client.GetErrorResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.ErrorsClient", "GetError", resp, "Failure responding to request")
	}

	return
}

// GetErrorPreparer prepares the GetError request.
func (client ErrorsClient) GetErrorPreparer(ctx context.Context, subscriptionID string, resourceGroupName string, migrateProjectName string, errorName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"errorName":          autorest.Encode("path", errorName),
		"migrateProjectName": autorest.Encode("path", migrateProjectName),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2018-09-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/MigrateProjects/{migrateProjectName}/MigrateErrors/{errorName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetErrorSender sends the GetError request. The method will close the
// http.Response Body if it receives an error.
func (client ErrorsClient) GetErrorSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// GetErrorResponder handles the response to the GetError request. The method always
// closes the http.Response Body.
func (client ErrorsClient) GetErrorResponder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
