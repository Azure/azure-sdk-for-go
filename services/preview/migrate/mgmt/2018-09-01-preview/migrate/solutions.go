package migrate

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// SolutionsClient is the migrate your workloads to Azure.
type SolutionsClient struct {
	BaseClient
}

// NewSolutionsClient creates an instance of the SolutionsClient client.
func NewSolutionsClient() SolutionsClient {
	return NewSolutionsClientWithBaseURI(DefaultBaseURI)
}

// NewSolutionsClientWithBaseURI creates an instance of the SolutionsClient client.
func NewSolutionsClientWithBaseURI(baseURI string) SolutionsClient {
	return SolutionsClient{NewWithBaseURI(baseURI)}
}

// EnumerateSolutions sends the enumerate solutions request.
// Parameters:
// subscriptionID - the subscription id.
// resourceGroupName - the resource group name.
// migrateProjectName - the name of the migrate project.
func (client SolutionsClient) EnumerateSolutions(ctx context.Context, subscriptionID string, resourceGroupName string, migrateProjectName string) (result SolutionsCollection, err error) {
	req, err := client.EnumerateSolutionsPreparer(ctx, subscriptionID, resourceGroupName, migrateProjectName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.SolutionsClient", "EnumerateSolutions", nil, "Failure preparing request")
		return
	}

	resp, err := client.EnumerateSolutionsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "migrate.SolutionsClient", "EnumerateSolutions", resp, "Failure sending request")
		return
	}

	result, err = client.EnumerateSolutionsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.SolutionsClient", "EnumerateSolutions", resp, "Failure responding to request")
	}

	return
}

// EnumerateSolutionsPreparer prepares the EnumerateSolutions request.
func (client SolutionsClient) EnumerateSolutionsPreparer(ctx context.Context, subscriptionID string, resourceGroupName string, migrateProjectName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"migrateProjectName": autorest.Encode("path", migrateProjectName),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2018-09-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/MigrateProjects/{migrateProjectName}/Solutions", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// EnumerateSolutionsSender sends the EnumerateSolutions request. The method will close the
// http.Response Body if it receives an error.
func (client SolutionsClient) EnumerateSolutionsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// EnumerateSolutionsResponder handles the response to the EnumerateSolutions request. The method always
// closes the http.Response Body.
func (client SolutionsClient) EnumerateSolutionsResponder(resp *http.Response) (result SolutionsCollection, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetConfig sends the get config request.
// Parameters:
// subscriptionID - the subscription id.
// resourceGroupName - the resource group name.
// migrateProjectName - the migrate project name.
// solutionName - the name of the solution for which config is being fetched.
func (client SolutionsClient) GetConfig(ctx context.Context, subscriptionID string, resourceGroupName string, migrateProjectName string, solutionName string) (result SolutionConfig, err error) {
	req, err := client.GetConfigPreparer(ctx, subscriptionID, resourceGroupName, migrateProjectName, solutionName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.SolutionsClient", "GetConfig", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetConfigSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "migrate.SolutionsClient", "GetConfig", resp, "Failure sending request")
		return
	}

	result, err = client.GetConfigResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.SolutionsClient", "GetConfig", resp, "Failure responding to request")
	}

	return
}

// GetConfigPreparer prepares the GetConfig request.
func (client SolutionsClient) GetConfigPreparer(ctx context.Context, subscriptionID string, resourceGroupName string, migrateProjectName string, solutionName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"migrateProjectName": autorest.Encode("path", migrateProjectName),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"solutionName":       autorest.Encode("path", solutionName),
		"subscriptionId":     autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2018-09-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/MigrateProjects/{migrateProjectName}/Solutions/{solutionName}/getConfig", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetConfigSender sends the GetConfig request. The method will close the
// http.Response Body if it receives an error.
func (client SolutionsClient) GetConfigSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// GetConfigResponder handles the response to the GetConfig request. The method always
// closes the http.Response Body.
func (client SolutionsClient) GetConfigResponder(resp *http.Response) (result SolutionConfig, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetSolution sends the get solution request.
// Parameters:
// subscriptionID - the subscription id.
// resourceGroupName - the resource group name.
// migrateProjectName - the migrate project name.
// solutionName - the name of the solution to be fetched.
func (client SolutionsClient) GetSolution(ctx context.Context, subscriptionID string, resourceGroupName string, migrateProjectName string, solutionName string) (result Solution, err error) {
	req, err := client.GetSolutionPreparer(ctx, subscriptionID, resourceGroupName, migrateProjectName, solutionName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.SolutionsClient", "GetSolution", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSolutionSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "migrate.SolutionsClient", "GetSolution", resp, "Failure sending request")
		return
	}

	result, err = client.GetSolutionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.SolutionsClient", "GetSolution", resp, "Failure responding to request")
	}

	return
}

// GetSolutionPreparer prepares the GetSolution request.
func (client SolutionsClient) GetSolutionPreparer(ctx context.Context, subscriptionID string, resourceGroupName string, migrateProjectName string, solutionName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"migrateProjectName": autorest.Encode("path", migrateProjectName),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"solutionName":       autorest.Encode("path", solutionName),
		"subscriptionId":     autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2018-09-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/MigrateProjects/{migrateProjectName}/Solutions/{solutionName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSolutionSender sends the GetSolution request. The method will close the
// http.Response Body if it receives an error.
func (client SolutionsClient) GetSolutionSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// GetSolutionResponder handles the response to the GetSolution request. The method always
// closes the http.Response Body.
func (client SolutionsClient) GetSolutionResponder(resp *http.Response) (result Solution, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PutSolution sends the put solution request.
// Parameters:
// subscriptionID - the subscription id.
// resourceGroupName - the resource group name.
// migrateProjectName - the migrate project name.
// solutionName - the name of the solution to be created.
// solutionInput - the input for the solution.
func (client SolutionsClient) PutSolution(ctx context.Context, subscriptionID string, resourceGroupName string, migrateProjectName string, solutionName string, solutionInput Solution) (result Solution, err error) {
	req, err := client.PutSolutionPreparer(ctx, subscriptionID, resourceGroupName, migrateProjectName, solutionName, solutionInput)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.SolutionsClient", "PutSolution", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutSolutionSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "migrate.SolutionsClient", "PutSolution", resp, "Failure sending request")
		return
	}

	result, err = client.PutSolutionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "migrate.SolutionsClient", "PutSolution", resp, "Failure responding to request")
	}

	return
}

// PutSolutionPreparer prepares the PutSolution request.
func (client SolutionsClient) PutSolutionPreparer(ctx context.Context, subscriptionID string, resourceGroupName string, migrateProjectName string, solutionName string, solutionInput Solution) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"migrateProjectName": autorest.Encode("path", migrateProjectName),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"solutionName":       autorest.Encode("path", solutionName),
		"subscriptionId":     autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2018-09-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/MigrateProjects/{migrateProjectName}/Solutions/{solutionName}", pathParameters),
		autorest.WithJSON(solutionInput),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PutSolutionSender sends the PutSolution request. The method will close the
// http.Response Body if it receives an error.
func (client SolutionsClient) PutSolutionSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// PutSolutionResponder handles the response to the PutSolution request. The method always
// closes the http.Response Body.
func (client SolutionsClient) PutSolutionResponder(resp *http.Response) (result Solution, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
