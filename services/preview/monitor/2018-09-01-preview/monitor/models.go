package monitor

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/satori/go.uuid"
)

// Attributes enumerates the values for attributes.
type Attributes string

const (
	// HasDefault ...
	HasDefault Attributes = "HasDefault"
	// HasFieldMarshal ...
	HasFieldMarshal Attributes = "HasFieldMarshal"
	// In ...
	In Attributes = "In"
	// Lcid ...
	Lcid Attributes = "Lcid"
	// None ...
	None Attributes = "None"
	// Optional ...
	Optional Attributes = "Optional"
	// Out ...
	Out Attributes = "Out"
	// Reserved3 ...
	Reserved3 Attributes = "Reserved3"
	// Reserved4 ...
	Reserved4 Attributes = "Reserved4"
	// ReservedMask ...
	ReservedMask Attributes = "ReservedMask"
	// Retval ...
	Retval Attributes = "Retval"
)

// PossibleAttributesValues returns an array of possible values for the Attributes const type.
func PossibleAttributesValues() []Attributes {
	return []Attributes{HasDefault, HasFieldMarshal, In, Lcid, None, Optional, Out, Reserved3, Reserved4, ReservedMask, Retval}
}

// Attributes1 enumerates the values for attributes 1.
type Attributes1 string

const (
	// Attributes1Abstract ...
	Attributes1Abstract Attributes1 = "Abstract"
	// Attributes1Assembly ...
	Attributes1Assembly Attributes1 = "Assembly"
	// Attributes1CheckAccessOnOverride ...
	Attributes1CheckAccessOnOverride Attributes1 = "CheckAccessOnOverride"
	// Attributes1FamANDAssem ...
	Attributes1FamANDAssem Attributes1 = "FamANDAssem"
	// Attributes1Family ...
	Attributes1Family Attributes1 = "Family"
	// Attributes1FamORAssem ...
	Attributes1FamORAssem Attributes1 = "FamORAssem"
	// Attributes1Final ...
	Attributes1Final Attributes1 = "Final"
	// Attributes1HasSecurity ...
	Attributes1HasSecurity Attributes1 = "HasSecurity"
	// Attributes1HideBySig ...
	Attributes1HideBySig Attributes1 = "HideBySig"
	// Attributes1MemberAccessMask ...
	Attributes1MemberAccessMask Attributes1 = "MemberAccessMask"
	// Attributes1NewSlot ...
	Attributes1NewSlot Attributes1 = "NewSlot"
	// Attributes1PinvokeImpl ...
	Attributes1PinvokeImpl Attributes1 = "PinvokeImpl"
	// Attributes1Private ...
	Attributes1Private Attributes1 = "Private"
	// Attributes1PrivateScope ...
	Attributes1PrivateScope Attributes1 = "PrivateScope"
	// Attributes1Public ...
	Attributes1Public Attributes1 = "Public"
	// Attributes1RequireSecObject ...
	Attributes1RequireSecObject Attributes1 = "RequireSecObject"
	// Attributes1ReservedMask ...
	Attributes1ReservedMask Attributes1 = "ReservedMask"
	// Attributes1ReuseSlot ...
	Attributes1ReuseSlot Attributes1 = "ReuseSlot"
	// Attributes1RTSpecialName ...
	Attributes1RTSpecialName Attributes1 = "RTSpecialName"
	// Attributes1SpecialName ...
	Attributes1SpecialName Attributes1 = "SpecialName"
	// Attributes1Static ...
	Attributes1Static Attributes1 = "Static"
	// Attributes1UnmanagedExport ...
	Attributes1UnmanagedExport Attributes1 = "UnmanagedExport"
	// Attributes1Virtual ...
	Attributes1Virtual Attributes1 = "Virtual"
	// Attributes1VtableLayoutMask ...
	Attributes1VtableLayoutMask Attributes1 = "VtableLayoutMask"
)

// PossibleAttributes1Values returns an array of possible values for the Attributes1 const type.
func PossibleAttributes1Values() []Attributes1 {
	return []Attributes1{Attributes1Abstract, Attributes1Assembly, Attributes1CheckAccessOnOverride, Attributes1FamANDAssem, Attributes1Family, Attributes1FamORAssem, Attributes1Final, Attributes1HasSecurity, Attributes1HideBySig, Attributes1MemberAccessMask, Attributes1NewSlot, Attributes1PinvokeImpl, Attributes1Private, Attributes1PrivateScope, Attributes1Public, Attributes1RequireSecObject, Attributes1ReservedMask, Attributes1ReuseSlot, Attributes1RTSpecialName, Attributes1SpecialName, Attributes1Static, Attributes1UnmanagedExport, Attributes1Virtual, Attributes1VtableLayoutMask}
}

// Attributes2 enumerates the values for attributes 2.
type Attributes2 string

const (
	// Attributes2None ...
	Attributes2None Attributes2 = "None"
	// Attributes2ReservedMask ...
	Attributes2ReservedMask Attributes2 = "ReservedMask"
	// Attributes2RTSpecialName ...
	Attributes2RTSpecialName Attributes2 = "RTSpecialName"
	// Attributes2SpecialName ...
	Attributes2SpecialName Attributes2 = "SpecialName"
)

// PossibleAttributes2Values returns an array of possible values for the Attributes2 const type.
func PossibleAttributes2Values() []Attributes2 {
	return []Attributes2{Attributes2None, Attributes2ReservedMask, Attributes2RTSpecialName, Attributes2SpecialName}
}

// Attributes3 enumerates the values for attributes 3.
type Attributes3 string

const (
	// Attributes3Assembly ...
	Attributes3Assembly Attributes3 = "Assembly"
	// Attributes3FamANDAssem ...
	Attributes3FamANDAssem Attributes3 = "FamANDAssem"
	// Attributes3Family ...
	Attributes3Family Attributes3 = "Family"
	// Attributes3FamORAssem ...
	Attributes3FamORAssem Attributes3 = "FamORAssem"
	// Attributes3FieldAccessMask ...
	Attributes3FieldAccessMask Attributes3 = "FieldAccessMask"
	// Attributes3HasDefault ...
	Attributes3HasDefault Attributes3 = "HasDefault"
	// Attributes3HasFieldMarshal ...
	Attributes3HasFieldMarshal Attributes3 = "HasFieldMarshal"
	// Attributes3HasFieldRVA ...
	Attributes3HasFieldRVA Attributes3 = "HasFieldRVA"
	// Attributes3InitOnly ...
	Attributes3InitOnly Attributes3 = "InitOnly"
	// Attributes3Literal ...
	Attributes3Literal Attributes3 = "Literal"
	// Attributes3NotSerialized ...
	Attributes3NotSerialized Attributes3 = "NotSerialized"
	// Attributes3PinvokeImpl ...
	Attributes3PinvokeImpl Attributes3 = "PinvokeImpl"
	// Attributes3Private ...
	Attributes3Private Attributes3 = "Private"
	// Attributes3PrivateScope ...
	Attributes3PrivateScope Attributes3 = "PrivateScope"
	// Attributes3Public ...
	Attributes3Public Attributes3 = "Public"
	// Attributes3ReservedMask ...
	Attributes3ReservedMask Attributes3 = "ReservedMask"
	// Attributes3RTSpecialName ...
	Attributes3RTSpecialName Attributes3 = "RTSpecialName"
	// Attributes3SpecialName ...
	Attributes3SpecialName Attributes3 = "SpecialName"
	// Attributes3Static ...
	Attributes3Static Attributes3 = "Static"
)

// PossibleAttributes3Values returns an array of possible values for the Attributes3 const type.
func PossibleAttributes3Values() []Attributes3 {
	return []Attributes3{Attributes3Assembly, Attributes3FamANDAssem, Attributes3Family, Attributes3FamORAssem, Attributes3FieldAccessMask, Attributes3HasDefault, Attributes3HasFieldMarshal, Attributes3HasFieldRVA, Attributes3InitOnly, Attributes3Literal, Attributes3NotSerialized, Attributes3PinvokeImpl, Attributes3Private, Attributes3PrivateScope, Attributes3Public, Attributes3ReservedMask, Attributes3RTSpecialName, Attributes3SpecialName, Attributes3Static}
}

// Attributes4 enumerates the values for attributes 4.
type Attributes4 string

const (
	// Attributes4HasDefault ...
	Attributes4HasDefault Attributes4 = "HasDefault"
	// Attributes4None ...
	Attributes4None Attributes4 = "None"
	// Attributes4Reserved2 ...
	Attributes4Reserved2 Attributes4 = "Reserved2"
	// Attributes4Reserved3 ...
	Attributes4Reserved3 Attributes4 = "Reserved3"
	// Attributes4Reserved4 ...
	Attributes4Reserved4 Attributes4 = "Reserved4"
	// Attributes4ReservedMask ...
	Attributes4ReservedMask Attributes4 = "ReservedMask"
	// Attributes4RTSpecialName ...
	Attributes4RTSpecialName Attributes4 = "RTSpecialName"
	// Attributes4SpecialName ...
	Attributes4SpecialName Attributes4 = "SpecialName"
)

// PossibleAttributes4Values returns an array of possible values for the Attributes4 const type.
func PossibleAttributes4Values() []Attributes4 {
	return []Attributes4{Attributes4HasDefault, Attributes4None, Attributes4Reserved2, Attributes4Reserved3, Attributes4Reserved4, Attributes4ReservedMask, Attributes4RTSpecialName, Attributes4SpecialName}
}

// Attributes5 enumerates the values for attributes 5.
type Attributes5 string

const (
	// Attributes5Abstract ...
	Attributes5Abstract Attributes5 = "Abstract"
	// Attributes5AnsiClass ...
	Attributes5AnsiClass Attributes5 = "AnsiClass"
	// Attributes5AutoClass ...
	Attributes5AutoClass Attributes5 = "AutoClass"
	// Attributes5AutoLayout ...
	Attributes5AutoLayout Attributes5 = "AutoLayout"
	// Attributes5BeforeFieldInit ...
	Attributes5BeforeFieldInit Attributes5 = "BeforeFieldInit"
	// Attributes5Class ...
	Attributes5Class Attributes5 = "Class"
	// Attributes5ClassSemanticsMask ...
	Attributes5ClassSemanticsMask Attributes5 = "ClassSemanticsMask"
	// Attributes5CustomFormatClass ...
	Attributes5CustomFormatClass Attributes5 = "CustomFormatClass"
	// Attributes5CustomFormatMask ...
	Attributes5CustomFormatMask Attributes5 = "CustomFormatMask"
	// Attributes5ExplicitLayout ...
	Attributes5ExplicitLayout Attributes5 = "ExplicitLayout"
	// Attributes5HasSecurity ...
	Attributes5HasSecurity Attributes5 = "HasSecurity"
	// Attributes5Import ...
	Attributes5Import Attributes5 = "Import"
	// Attributes5Interface ...
	Attributes5Interface Attributes5 = "Interface"
	// Attributes5LayoutMask ...
	Attributes5LayoutMask Attributes5 = "LayoutMask"
	// Attributes5NestedAssembly ...
	Attributes5NestedAssembly Attributes5 = "NestedAssembly"
	// Attributes5NestedFamANDAssem ...
	Attributes5NestedFamANDAssem Attributes5 = "NestedFamANDAssem"
	// Attributes5NestedFamily ...
	Attributes5NestedFamily Attributes5 = "NestedFamily"
	// Attributes5NestedFamORAssem ...
	Attributes5NestedFamORAssem Attributes5 = "NestedFamORAssem"
	// Attributes5NestedPrivate ...
	Attributes5NestedPrivate Attributes5 = "NestedPrivate"
	// Attributes5NestedPublic ...
	Attributes5NestedPublic Attributes5 = "NestedPublic"
	// Attributes5NotPublic ...
	Attributes5NotPublic Attributes5 = "NotPublic"
	// Attributes5Public ...
	Attributes5Public Attributes5 = "Public"
	// Attributes5ReservedMask ...
	Attributes5ReservedMask Attributes5 = "ReservedMask"
	// Attributes5RTSpecialName ...
	Attributes5RTSpecialName Attributes5 = "RTSpecialName"
	// Attributes5Sealed ...
	Attributes5Sealed Attributes5 = "Sealed"
	// Attributes5SequentialLayout ...
	Attributes5SequentialLayout Attributes5 = "SequentialLayout"
	// Attributes5Serializable ...
	Attributes5Serializable Attributes5 = "Serializable"
	// Attributes5SpecialName ...
	Attributes5SpecialName Attributes5 = "SpecialName"
	// Attributes5StringFormatMask ...
	Attributes5StringFormatMask Attributes5 = "StringFormatMask"
	// Attributes5UnicodeClass ...
	Attributes5UnicodeClass Attributes5 = "UnicodeClass"
	// Attributes5VisibilityMask ...
	Attributes5VisibilityMask Attributes5 = "VisibilityMask"
	// Attributes5WindowsRuntime ...
	Attributes5WindowsRuntime Attributes5 = "WindowsRuntime"
)

// PossibleAttributes5Values returns an array of possible values for the Attributes5 const type.
func PossibleAttributes5Values() []Attributes5 {
	return []Attributes5{Attributes5Abstract, Attributes5AnsiClass, Attributes5AutoClass, Attributes5AutoLayout, Attributes5BeforeFieldInit, Attributes5Class, Attributes5ClassSemanticsMask, Attributes5CustomFormatClass, Attributes5CustomFormatMask, Attributes5ExplicitLayout, Attributes5HasSecurity, Attributes5Import, Attributes5Interface, Attributes5LayoutMask, Attributes5NestedAssembly, Attributes5NestedFamANDAssem, Attributes5NestedFamily, Attributes5NestedFamORAssem, Attributes5NestedPrivate, Attributes5NestedPublic, Attributes5NotPublic, Attributes5Public, Attributes5ReservedMask, Attributes5RTSpecialName, Attributes5Sealed, Attributes5SequentialLayout, Attributes5Serializable, Attributes5SpecialName, Attributes5StringFormatMask, Attributes5UnicodeClass, Attributes5VisibilityMask, Attributes5WindowsRuntime}
}

// Attributes6 enumerates the values for attributes 6.
type Attributes6 string

const (
	// Attributes6Abstract ...
	Attributes6Abstract Attributes6 = "Abstract"
	// Attributes6Assembly ...
	Attributes6Assembly Attributes6 = "Assembly"
	// Attributes6CheckAccessOnOverride ...
	Attributes6CheckAccessOnOverride Attributes6 = "CheckAccessOnOverride"
	// Attributes6FamANDAssem ...
	Attributes6FamANDAssem Attributes6 = "FamANDAssem"
	// Attributes6Family ...
	Attributes6Family Attributes6 = "Family"
	// Attributes6FamORAssem ...
	Attributes6FamORAssem Attributes6 = "FamORAssem"
	// Attributes6Final ...
	Attributes6Final Attributes6 = "Final"
	// Attributes6HasSecurity ...
	Attributes6HasSecurity Attributes6 = "HasSecurity"
	// Attributes6HideBySig ...
	Attributes6HideBySig Attributes6 = "HideBySig"
	// Attributes6MemberAccessMask ...
	Attributes6MemberAccessMask Attributes6 = "MemberAccessMask"
	// Attributes6NewSlot ...
	Attributes6NewSlot Attributes6 = "NewSlot"
	// Attributes6PinvokeImpl ...
	Attributes6PinvokeImpl Attributes6 = "PinvokeImpl"
	// Attributes6Private ...
	Attributes6Private Attributes6 = "Private"
	// Attributes6PrivateScope ...
	Attributes6PrivateScope Attributes6 = "PrivateScope"
	// Attributes6Public ...
	Attributes6Public Attributes6 = "Public"
	// Attributes6RequireSecObject ...
	Attributes6RequireSecObject Attributes6 = "RequireSecObject"
	// Attributes6ReservedMask ...
	Attributes6ReservedMask Attributes6 = "ReservedMask"
	// Attributes6ReuseSlot ...
	Attributes6ReuseSlot Attributes6 = "ReuseSlot"
	// Attributes6RTSpecialName ...
	Attributes6RTSpecialName Attributes6 = "RTSpecialName"
	// Attributes6SpecialName ...
	Attributes6SpecialName Attributes6 = "SpecialName"
	// Attributes6Static ...
	Attributes6Static Attributes6 = "Static"
	// Attributes6UnmanagedExport ...
	Attributes6UnmanagedExport Attributes6 = "UnmanagedExport"
	// Attributes6Virtual ...
	Attributes6Virtual Attributes6 = "Virtual"
	// Attributes6VtableLayoutMask ...
	Attributes6VtableLayoutMask Attributes6 = "VtableLayoutMask"
)

// PossibleAttributes6Values returns an array of possible values for the Attributes6 const type.
func PossibleAttributes6Values() []Attributes6 {
	return []Attributes6{Attributes6Abstract, Attributes6Assembly, Attributes6CheckAccessOnOverride, Attributes6FamANDAssem, Attributes6Family, Attributes6FamORAssem, Attributes6Final, Attributes6HasSecurity, Attributes6HideBySig, Attributes6MemberAccessMask, Attributes6NewSlot, Attributes6PinvokeImpl, Attributes6Private, Attributes6PrivateScope, Attributes6Public, Attributes6RequireSecObject, Attributes6ReservedMask, Attributes6ReuseSlot, Attributes6RTSpecialName, Attributes6SpecialName, Attributes6Static, Attributes6UnmanagedExport, Attributes6Virtual, Attributes6VtableLayoutMask}
}

// Attributes7 enumerates the values for attributes 7.
type Attributes7 string

const (
	// Attributes7Abstract ...
	Attributes7Abstract Attributes7 = "Abstract"
	// Attributes7Assembly ...
	Attributes7Assembly Attributes7 = "Assembly"
	// Attributes7CheckAccessOnOverride ...
	Attributes7CheckAccessOnOverride Attributes7 = "CheckAccessOnOverride"
	// Attributes7FamANDAssem ...
	Attributes7FamANDAssem Attributes7 = "FamANDAssem"
	// Attributes7Family ...
	Attributes7Family Attributes7 = "Family"
	// Attributes7FamORAssem ...
	Attributes7FamORAssem Attributes7 = "FamORAssem"
	// Attributes7Final ...
	Attributes7Final Attributes7 = "Final"
	// Attributes7HasSecurity ...
	Attributes7HasSecurity Attributes7 = "HasSecurity"
	// Attributes7HideBySig ...
	Attributes7HideBySig Attributes7 = "HideBySig"
	// Attributes7MemberAccessMask ...
	Attributes7MemberAccessMask Attributes7 = "MemberAccessMask"
	// Attributes7NewSlot ...
	Attributes7NewSlot Attributes7 = "NewSlot"
	// Attributes7PinvokeImpl ...
	Attributes7PinvokeImpl Attributes7 = "PinvokeImpl"
	// Attributes7Private ...
	Attributes7Private Attributes7 = "Private"
	// Attributes7PrivateScope ...
	Attributes7PrivateScope Attributes7 = "PrivateScope"
	// Attributes7Public ...
	Attributes7Public Attributes7 = "Public"
	// Attributes7RequireSecObject ...
	Attributes7RequireSecObject Attributes7 = "RequireSecObject"
	// Attributes7ReservedMask ...
	Attributes7ReservedMask Attributes7 = "ReservedMask"
	// Attributes7ReuseSlot ...
	Attributes7ReuseSlot Attributes7 = "ReuseSlot"
	// Attributes7RTSpecialName ...
	Attributes7RTSpecialName Attributes7 = "RTSpecialName"
	// Attributes7SpecialName ...
	Attributes7SpecialName Attributes7 = "SpecialName"
	// Attributes7Static ...
	Attributes7Static Attributes7 = "Static"
	// Attributes7UnmanagedExport ...
	Attributes7UnmanagedExport Attributes7 = "UnmanagedExport"
	// Attributes7Virtual ...
	Attributes7Virtual Attributes7 = "Virtual"
	// Attributes7VtableLayoutMask ...
	Attributes7VtableLayoutMask Attributes7 = "VtableLayoutMask"
)

// PossibleAttributes7Values returns an array of possible values for the Attributes7 const type.
func PossibleAttributes7Values() []Attributes7 {
	return []Attributes7{Attributes7Abstract, Attributes7Assembly, Attributes7CheckAccessOnOverride, Attributes7FamANDAssem, Attributes7Family, Attributes7FamORAssem, Attributes7Final, Attributes7HasSecurity, Attributes7HideBySig, Attributes7MemberAccessMask, Attributes7NewSlot, Attributes7PinvokeImpl, Attributes7Private, Attributes7PrivateScope, Attributes7Public, Attributes7RequireSecObject, Attributes7ReservedMask, Attributes7ReuseSlot, Attributes7RTSpecialName, Attributes7SpecialName, Attributes7Static, Attributes7UnmanagedExport, Attributes7Virtual, Attributes7VtableLayoutMask}
}

// Attributes8 enumerates the values for attributes 8.
type Attributes8 string

const (
	// Attributes8Abstract ...
	Attributes8Abstract Attributes8 = "Abstract"
	// Attributes8AnsiClass ...
	Attributes8AnsiClass Attributes8 = "AnsiClass"
	// Attributes8AutoClass ...
	Attributes8AutoClass Attributes8 = "AutoClass"
	// Attributes8AutoLayout ...
	Attributes8AutoLayout Attributes8 = "AutoLayout"
	// Attributes8BeforeFieldInit ...
	Attributes8BeforeFieldInit Attributes8 = "BeforeFieldInit"
	// Attributes8Class ...
	Attributes8Class Attributes8 = "Class"
	// Attributes8ClassSemanticsMask ...
	Attributes8ClassSemanticsMask Attributes8 = "ClassSemanticsMask"
	// Attributes8CustomFormatClass ...
	Attributes8CustomFormatClass Attributes8 = "CustomFormatClass"
	// Attributes8CustomFormatMask ...
	Attributes8CustomFormatMask Attributes8 = "CustomFormatMask"
	// Attributes8ExplicitLayout ...
	Attributes8ExplicitLayout Attributes8 = "ExplicitLayout"
	// Attributes8HasSecurity ...
	Attributes8HasSecurity Attributes8 = "HasSecurity"
	// Attributes8Import ...
	Attributes8Import Attributes8 = "Import"
	// Attributes8Interface ...
	Attributes8Interface Attributes8 = "Interface"
	// Attributes8LayoutMask ...
	Attributes8LayoutMask Attributes8 = "LayoutMask"
	// Attributes8NestedAssembly ...
	Attributes8NestedAssembly Attributes8 = "NestedAssembly"
	// Attributes8NestedFamANDAssem ...
	Attributes8NestedFamANDAssem Attributes8 = "NestedFamANDAssem"
	// Attributes8NestedFamily ...
	Attributes8NestedFamily Attributes8 = "NestedFamily"
	// Attributes8NestedFamORAssem ...
	Attributes8NestedFamORAssem Attributes8 = "NestedFamORAssem"
	// Attributes8NestedPrivate ...
	Attributes8NestedPrivate Attributes8 = "NestedPrivate"
	// Attributes8NestedPublic ...
	Attributes8NestedPublic Attributes8 = "NestedPublic"
	// Attributes8NotPublic ...
	Attributes8NotPublic Attributes8 = "NotPublic"
	// Attributes8Public ...
	Attributes8Public Attributes8 = "Public"
	// Attributes8ReservedMask ...
	Attributes8ReservedMask Attributes8 = "ReservedMask"
	// Attributes8RTSpecialName ...
	Attributes8RTSpecialName Attributes8 = "RTSpecialName"
	// Attributes8Sealed ...
	Attributes8Sealed Attributes8 = "Sealed"
	// Attributes8SequentialLayout ...
	Attributes8SequentialLayout Attributes8 = "SequentialLayout"
	// Attributes8Serializable ...
	Attributes8Serializable Attributes8 = "Serializable"
	// Attributes8SpecialName ...
	Attributes8SpecialName Attributes8 = "SpecialName"
	// Attributes8StringFormatMask ...
	Attributes8StringFormatMask Attributes8 = "StringFormatMask"
	// Attributes8UnicodeClass ...
	Attributes8UnicodeClass Attributes8 = "UnicodeClass"
	// Attributes8VisibilityMask ...
	Attributes8VisibilityMask Attributes8 = "VisibilityMask"
	// Attributes8WindowsRuntime ...
	Attributes8WindowsRuntime Attributes8 = "WindowsRuntime"
)

// PossibleAttributes8Values returns an array of possible values for the Attributes8 const type.
func PossibleAttributes8Values() []Attributes8 {
	return []Attributes8{Attributes8Abstract, Attributes8AnsiClass, Attributes8AutoClass, Attributes8AutoLayout, Attributes8BeforeFieldInit, Attributes8Class, Attributes8ClassSemanticsMask, Attributes8CustomFormatClass, Attributes8CustomFormatMask, Attributes8ExplicitLayout, Attributes8HasSecurity, Attributes8Import, Attributes8Interface, Attributes8LayoutMask, Attributes8NestedAssembly, Attributes8NestedFamANDAssem, Attributes8NestedFamily, Attributes8NestedFamORAssem, Attributes8NestedPrivate, Attributes8NestedPublic, Attributes8NotPublic, Attributes8Public, Attributes8ReservedMask, Attributes8RTSpecialName, Attributes8Sealed, Attributes8SequentialLayout, Attributes8Serializable, Attributes8SpecialName, Attributes8StringFormatMask, Attributes8UnicodeClass, Attributes8VisibilityMask, Attributes8WindowsRuntime}
}

// CallingConvention enumerates the values for calling convention.
type CallingConvention string

const (
	// Any ...
	Any CallingConvention = "Any"
	// ExplicitThis ...
	ExplicitThis CallingConvention = "ExplicitThis"
	// HasThis ...
	HasThis CallingConvention = "HasThis"
	// Standard ...
	Standard CallingConvention = "Standard"
	// VarArgs ...
	VarArgs CallingConvention = "VarArgs"
)

// PossibleCallingConventionValues returns an array of possible values for the CallingConvention const type.
func PossibleCallingConventionValues() []CallingConvention {
	return []CallingConvention{Any, ExplicitThis, HasThis, Standard, VarArgs}
}

// CallingConvention1 enumerates the values for calling convention 1.
type CallingConvention1 string

const (
	// CallingConvention1Any ...
	CallingConvention1Any CallingConvention1 = "Any"
	// CallingConvention1ExplicitThis ...
	CallingConvention1ExplicitThis CallingConvention1 = "ExplicitThis"
	// CallingConvention1HasThis ...
	CallingConvention1HasThis CallingConvention1 = "HasThis"
	// CallingConvention1Standard ...
	CallingConvention1Standard CallingConvention1 = "Standard"
	// CallingConvention1VarArgs ...
	CallingConvention1VarArgs CallingConvention1 = "VarArgs"
)

// PossibleCallingConvention1Values returns an array of possible values for the CallingConvention1 const type.
func PossibleCallingConvention1Values() []CallingConvention1 {
	return []CallingConvention1{CallingConvention1Any, CallingConvention1ExplicitThis, CallingConvention1HasThis, CallingConvention1Standard, CallingConvention1VarArgs}
}

// CallingConvention2 enumerates the values for calling convention 2.
type CallingConvention2 string

const (
	// CallingConvention2Any ...
	CallingConvention2Any CallingConvention2 = "Any"
	// CallingConvention2ExplicitThis ...
	CallingConvention2ExplicitThis CallingConvention2 = "ExplicitThis"
	// CallingConvention2HasThis ...
	CallingConvention2HasThis CallingConvention2 = "HasThis"
	// CallingConvention2Standard ...
	CallingConvention2Standard CallingConvention2 = "Standard"
	// CallingConvention2VarArgs ...
	CallingConvention2VarArgs CallingConvention2 = "VarArgs"
)

// PossibleCallingConvention2Values returns an array of possible values for the CallingConvention2 const type.
func PossibleCallingConvention2Values() []CallingConvention2 {
	return []CallingConvention2{CallingConvention2Any, CallingConvention2ExplicitThis, CallingConvention2HasThis, CallingConvention2Standard, CallingConvention2VarArgs}
}

// GenericParameterAttributes enumerates the values for generic parameter attributes.
type GenericParameterAttributes string

const (
	// GenericParameterAttributesContravariant ...
	GenericParameterAttributesContravariant GenericParameterAttributes = "Contravariant"
	// GenericParameterAttributesCovariant ...
	GenericParameterAttributesCovariant GenericParameterAttributes = "Covariant"
	// GenericParameterAttributesDefaultConstructorConstraint ...
	GenericParameterAttributesDefaultConstructorConstraint GenericParameterAttributes = "DefaultConstructorConstraint"
	// GenericParameterAttributesNone ...
	GenericParameterAttributesNone GenericParameterAttributes = "None"
	// GenericParameterAttributesNotNullableValueTypeConstraint ...
	GenericParameterAttributesNotNullableValueTypeConstraint GenericParameterAttributes = "NotNullableValueTypeConstraint"
	// GenericParameterAttributesReferenceTypeConstraint ...
	GenericParameterAttributesReferenceTypeConstraint GenericParameterAttributes = "ReferenceTypeConstraint"
	// GenericParameterAttributesSpecialConstraintMask ...
	GenericParameterAttributesSpecialConstraintMask GenericParameterAttributes = "SpecialConstraintMask"
	// GenericParameterAttributesVarianceMask ...
	GenericParameterAttributesVarianceMask GenericParameterAttributes = "VarianceMask"
)

// PossibleGenericParameterAttributesValues returns an array of possible values for the GenericParameterAttributes const type.
func PossibleGenericParameterAttributesValues() []GenericParameterAttributes {
	return []GenericParameterAttributes{GenericParameterAttributesContravariant, GenericParameterAttributesCovariant, GenericParameterAttributesDefaultConstructorConstraint, GenericParameterAttributesNone, GenericParameterAttributesNotNullableValueTypeConstraint, GenericParameterAttributesReferenceTypeConstraint, GenericParameterAttributesSpecialConstraintMask, GenericParameterAttributesVarianceMask}
}

// GenericParameterAttributes1 enumerates the values for generic parameter attributes 1.
type GenericParameterAttributes1 string

const (
	// GenericParameterAttributes1Contravariant ...
	GenericParameterAttributes1Contravariant GenericParameterAttributes1 = "Contravariant"
	// GenericParameterAttributes1Covariant ...
	GenericParameterAttributes1Covariant GenericParameterAttributes1 = "Covariant"
	// GenericParameterAttributes1DefaultConstructorConstraint ...
	GenericParameterAttributes1DefaultConstructorConstraint GenericParameterAttributes1 = "DefaultConstructorConstraint"
	// GenericParameterAttributes1None ...
	GenericParameterAttributes1None GenericParameterAttributes1 = "None"
	// GenericParameterAttributes1NotNullableValueTypeConstraint ...
	GenericParameterAttributes1NotNullableValueTypeConstraint GenericParameterAttributes1 = "NotNullableValueTypeConstraint"
	// GenericParameterAttributes1ReferenceTypeConstraint ...
	GenericParameterAttributes1ReferenceTypeConstraint GenericParameterAttributes1 = "ReferenceTypeConstraint"
	// GenericParameterAttributes1SpecialConstraintMask ...
	GenericParameterAttributes1SpecialConstraintMask GenericParameterAttributes1 = "SpecialConstraintMask"
	// GenericParameterAttributes1VarianceMask ...
	GenericParameterAttributes1VarianceMask GenericParameterAttributes1 = "VarianceMask"
)

// PossibleGenericParameterAttributes1Values returns an array of possible values for the GenericParameterAttributes1 const type.
func PossibleGenericParameterAttributes1Values() []GenericParameterAttributes1 {
	return []GenericParameterAttributes1{GenericParameterAttributes1Contravariant, GenericParameterAttributes1Covariant, GenericParameterAttributes1DefaultConstructorConstraint, GenericParameterAttributes1None, GenericParameterAttributes1NotNullableValueTypeConstraint, GenericParameterAttributes1ReferenceTypeConstraint, GenericParameterAttributes1SpecialConstraintMask, GenericParameterAttributes1VarianceMask}
}

// MemberType enumerates the values for member type.
type MemberType string

const (
	// All ...
	All MemberType = "All"
	// Constructor ...
	Constructor MemberType = "Constructor"
	// Custom ...
	Custom MemberType = "Custom"
	// Event ...
	Event MemberType = "Event"
	// Field ...
	Field MemberType = "Field"
	// Method ...
	Method MemberType = "Method"
	// NestedType ...
	NestedType MemberType = "NestedType"
	// Property ...
	Property MemberType = "Property"
	// TypeInfo ...
	TypeInfo MemberType = "TypeInfo"
)

// PossibleMemberTypeValues returns an array of possible values for the MemberType const type.
func PossibleMemberTypeValues() []MemberType {
	return []MemberType{All, Constructor, Custom, Event, Field, Method, NestedType, Property, TypeInfo}
}

// MemberType1 enumerates the values for member type 1.
type MemberType1 string

const (
	// MemberType1All ...
	MemberType1All MemberType1 = "All"
	// MemberType1Constructor ...
	MemberType1Constructor MemberType1 = "Constructor"
	// MemberType1Custom ...
	MemberType1Custom MemberType1 = "Custom"
	// MemberType1Event ...
	MemberType1Event MemberType1 = "Event"
	// MemberType1Field ...
	MemberType1Field MemberType1 = "Field"
	// MemberType1Method ...
	MemberType1Method MemberType1 = "Method"
	// MemberType1NestedType ...
	MemberType1NestedType MemberType1 = "NestedType"
	// MemberType1Property ...
	MemberType1Property MemberType1 = "Property"
	// MemberType1TypeInfo ...
	MemberType1TypeInfo MemberType1 = "TypeInfo"
)

// PossibleMemberType1Values returns an array of possible values for the MemberType1 const type.
func PossibleMemberType1Values() []MemberType1 {
	return []MemberType1{MemberType1All, MemberType1Constructor, MemberType1Custom, MemberType1Event, MemberType1Field, MemberType1Method, MemberType1NestedType, MemberType1Property, MemberType1TypeInfo}
}

// MemberType2 enumerates the values for member type 2.
type MemberType2 string

const (
	// MemberType2All ...
	MemberType2All MemberType2 = "All"
	// MemberType2Constructor ...
	MemberType2Constructor MemberType2 = "Constructor"
	// MemberType2Custom ...
	MemberType2Custom MemberType2 = "Custom"
	// MemberType2Event ...
	MemberType2Event MemberType2 = "Event"
	// MemberType2Field ...
	MemberType2Field MemberType2 = "Field"
	// MemberType2Method ...
	MemberType2Method MemberType2 = "Method"
	// MemberType2NestedType ...
	MemberType2NestedType MemberType2 = "NestedType"
	// MemberType2Property ...
	MemberType2Property MemberType2 = "Property"
	// MemberType2TypeInfo ...
	MemberType2TypeInfo MemberType2 = "TypeInfo"
)

// PossibleMemberType2Values returns an array of possible values for the MemberType2 const type.
func PossibleMemberType2Values() []MemberType2 {
	return []MemberType2{MemberType2All, MemberType2Constructor, MemberType2Custom, MemberType2Event, MemberType2Field, MemberType2Method, MemberType2NestedType, MemberType2Property, MemberType2TypeInfo}
}

// MemberType3 enumerates the values for member type 3.
type MemberType3 string

const (
	// MemberType3All ...
	MemberType3All MemberType3 = "All"
	// MemberType3Constructor ...
	MemberType3Constructor MemberType3 = "Constructor"
	// MemberType3Custom ...
	MemberType3Custom MemberType3 = "Custom"
	// MemberType3Event ...
	MemberType3Event MemberType3 = "Event"
	// MemberType3Field ...
	MemberType3Field MemberType3 = "Field"
	// MemberType3Method ...
	MemberType3Method MemberType3 = "Method"
	// MemberType3NestedType ...
	MemberType3NestedType MemberType3 = "NestedType"
	// MemberType3Property ...
	MemberType3Property MemberType3 = "Property"
	// MemberType3TypeInfo ...
	MemberType3TypeInfo MemberType3 = "TypeInfo"
)

// PossibleMemberType3Values returns an array of possible values for the MemberType3 const type.
func PossibleMemberType3Values() []MemberType3 {
	return []MemberType3{MemberType3All, MemberType3Constructor, MemberType3Custom, MemberType3Event, MemberType3Field, MemberType3Method, MemberType3NestedType, MemberType3Property, MemberType3TypeInfo}
}

// MemberType4 enumerates the values for member type 4.
type MemberType4 string

const (
	// MemberType4All ...
	MemberType4All MemberType4 = "All"
	// MemberType4Constructor ...
	MemberType4Constructor MemberType4 = "Constructor"
	// MemberType4Custom ...
	MemberType4Custom MemberType4 = "Custom"
	// MemberType4Event ...
	MemberType4Event MemberType4 = "Event"
	// MemberType4Field ...
	MemberType4Field MemberType4 = "Field"
	// MemberType4Method ...
	MemberType4Method MemberType4 = "Method"
	// MemberType4NestedType ...
	MemberType4NestedType MemberType4 = "NestedType"
	// MemberType4Property ...
	MemberType4Property MemberType4 = "Property"
	// MemberType4TypeInfo ...
	MemberType4TypeInfo MemberType4 = "TypeInfo"
)

// PossibleMemberType4Values returns an array of possible values for the MemberType4 const type.
func PossibleMemberType4Values() []MemberType4 {
	return []MemberType4{MemberType4All, MemberType4Constructor, MemberType4Custom, MemberType4Event, MemberType4Field, MemberType4Method, MemberType4NestedType, MemberType4Property, MemberType4TypeInfo}
}

// MemberType5 enumerates the values for member type 5.
type MemberType5 string

const (
	// MemberType5All ...
	MemberType5All MemberType5 = "All"
	// MemberType5Constructor ...
	MemberType5Constructor MemberType5 = "Constructor"
	// MemberType5Custom ...
	MemberType5Custom MemberType5 = "Custom"
	// MemberType5Event ...
	MemberType5Event MemberType5 = "Event"
	// MemberType5Field ...
	MemberType5Field MemberType5 = "Field"
	// MemberType5Method ...
	MemberType5Method MemberType5 = "Method"
	// MemberType5NestedType ...
	MemberType5NestedType MemberType5 = "NestedType"
	// MemberType5Property ...
	MemberType5Property MemberType5 = "Property"
	// MemberType5TypeInfo ...
	MemberType5TypeInfo MemberType5 = "TypeInfo"
)

// PossibleMemberType5Values returns an array of possible values for the MemberType5 const type.
func PossibleMemberType5Values() []MemberType5 {
	return []MemberType5{MemberType5All, MemberType5Constructor, MemberType5Custom, MemberType5Event, MemberType5Field, MemberType5Method, MemberType5NestedType, MemberType5Property, MemberType5TypeInfo}
}

// MemberType6 enumerates the values for member type 6.
type MemberType6 string

const (
	// MemberType6All ...
	MemberType6All MemberType6 = "All"
	// MemberType6Constructor ...
	MemberType6Constructor MemberType6 = "Constructor"
	// MemberType6Custom ...
	MemberType6Custom MemberType6 = "Custom"
	// MemberType6Event ...
	MemberType6Event MemberType6 = "Event"
	// MemberType6Field ...
	MemberType6Field MemberType6 = "Field"
	// MemberType6Method ...
	MemberType6Method MemberType6 = "Method"
	// MemberType6NestedType ...
	MemberType6NestedType MemberType6 = "NestedType"
	// MemberType6Property ...
	MemberType6Property MemberType6 = "Property"
	// MemberType6TypeInfo ...
	MemberType6TypeInfo MemberType6 = "TypeInfo"
)

// PossibleMemberType6Values returns an array of possible values for the MemberType6 const type.
func PossibleMemberType6Values() []MemberType6 {
	return []MemberType6{MemberType6All, MemberType6Constructor, MemberType6Custom, MemberType6Event, MemberType6Field, MemberType6Method, MemberType6NestedType, MemberType6Property, MemberType6TypeInfo}
}

// MemberType7 enumerates the values for member type 7.
type MemberType7 string

const (
	// MemberType7All ...
	MemberType7All MemberType7 = "All"
	// MemberType7Constructor ...
	MemberType7Constructor MemberType7 = "Constructor"
	// MemberType7Custom ...
	MemberType7Custom MemberType7 = "Custom"
	// MemberType7Event ...
	MemberType7Event MemberType7 = "Event"
	// MemberType7Field ...
	MemberType7Field MemberType7 = "Field"
	// MemberType7Method ...
	MemberType7Method MemberType7 = "Method"
	// MemberType7NestedType ...
	MemberType7NestedType MemberType7 = "NestedType"
	// MemberType7Property ...
	MemberType7Property MemberType7 = "Property"
	// MemberType7TypeInfo ...
	MemberType7TypeInfo MemberType7 = "TypeInfo"
)

// PossibleMemberType7Values returns an array of possible values for the MemberType7 const type.
func PossibleMemberType7Values() []MemberType7 {
	return []MemberType7{MemberType7All, MemberType7Constructor, MemberType7Custom, MemberType7Event, MemberType7Field, MemberType7Method, MemberType7NestedType, MemberType7Property, MemberType7TypeInfo}
}

// MemberType8 enumerates the values for member type 8.
type MemberType8 string

const (
	// MemberType8All ...
	MemberType8All MemberType8 = "All"
	// MemberType8Constructor ...
	MemberType8Constructor MemberType8 = "Constructor"
	// MemberType8Custom ...
	MemberType8Custom MemberType8 = "Custom"
	// MemberType8Event ...
	MemberType8Event MemberType8 = "Event"
	// MemberType8Field ...
	MemberType8Field MemberType8 = "Field"
	// MemberType8Method ...
	MemberType8Method MemberType8 = "Method"
	// MemberType8NestedType ...
	MemberType8NestedType MemberType8 = "NestedType"
	// MemberType8Property ...
	MemberType8Property MemberType8 = "Property"
	// MemberType8TypeInfo ...
	MemberType8TypeInfo MemberType8 = "TypeInfo"
)

// PossibleMemberType8Values returns an array of possible values for the MemberType8 const type.
func PossibleMemberType8Values() []MemberType8 {
	return []MemberType8{MemberType8All, MemberType8Constructor, MemberType8Custom, MemberType8Event, MemberType8Field, MemberType8Method, MemberType8NestedType, MemberType8Property, MemberType8TypeInfo}
}

// MethodImplementationFlags enumerates the values for method implementation flags.
type MethodImplementationFlags string

const (
	// AggressiveInlining ...
	AggressiveInlining MethodImplementationFlags = "AggressiveInlining"
	// CodeTypeMask ...
	CodeTypeMask MethodImplementationFlags = "CodeTypeMask"
	// ForwardRef ...
	ForwardRef MethodImplementationFlags = "ForwardRef"
	// IL ...
	IL MethodImplementationFlags = "IL"
	// InternalCall ...
	InternalCall MethodImplementationFlags = "InternalCall"
	// Managed ...
	Managed MethodImplementationFlags = "Managed"
	// ManagedMask ...
	ManagedMask MethodImplementationFlags = "ManagedMask"
	// MaxMethodImplVal ...
	MaxMethodImplVal MethodImplementationFlags = "MaxMethodImplVal"
	// Native ...
	Native MethodImplementationFlags = "Native"
	// NoInlining ...
	NoInlining MethodImplementationFlags = "NoInlining"
	// NoOptimization ...
	NoOptimization MethodImplementationFlags = "NoOptimization"
	// OPTIL ...
	OPTIL MethodImplementationFlags = "OPTIL"
	// PreserveSig ...
	PreserveSig MethodImplementationFlags = "PreserveSig"
	// Runtime ...
	Runtime MethodImplementationFlags = "Runtime"
	// Synchronized ...
	Synchronized MethodImplementationFlags = "Synchronized"
	// Unmanaged ...
	Unmanaged MethodImplementationFlags = "Unmanaged"
)

// PossibleMethodImplementationFlagsValues returns an array of possible values for the MethodImplementationFlags const type.
func PossibleMethodImplementationFlagsValues() []MethodImplementationFlags {
	return []MethodImplementationFlags{AggressiveInlining, CodeTypeMask, ForwardRef, IL, InternalCall, Managed, ManagedMask, MaxMethodImplVal, Native, NoInlining, NoOptimization, OPTIL, PreserveSig, Runtime, Synchronized, Unmanaged}
}

// MethodImplementationFlags1 enumerates the values for method implementation flags 1.
type MethodImplementationFlags1 string

const (
	// MethodImplementationFlags1AggressiveInlining ...
	MethodImplementationFlags1AggressiveInlining MethodImplementationFlags1 = "AggressiveInlining"
	// MethodImplementationFlags1CodeTypeMask ...
	MethodImplementationFlags1CodeTypeMask MethodImplementationFlags1 = "CodeTypeMask"
	// MethodImplementationFlags1ForwardRef ...
	MethodImplementationFlags1ForwardRef MethodImplementationFlags1 = "ForwardRef"
	// MethodImplementationFlags1IL ...
	MethodImplementationFlags1IL MethodImplementationFlags1 = "IL"
	// MethodImplementationFlags1InternalCall ...
	MethodImplementationFlags1InternalCall MethodImplementationFlags1 = "InternalCall"
	// MethodImplementationFlags1Managed ...
	MethodImplementationFlags1Managed MethodImplementationFlags1 = "Managed"
	// MethodImplementationFlags1ManagedMask ...
	MethodImplementationFlags1ManagedMask MethodImplementationFlags1 = "ManagedMask"
	// MethodImplementationFlags1MaxMethodImplVal ...
	MethodImplementationFlags1MaxMethodImplVal MethodImplementationFlags1 = "MaxMethodImplVal"
	// MethodImplementationFlags1Native ...
	MethodImplementationFlags1Native MethodImplementationFlags1 = "Native"
	// MethodImplementationFlags1NoInlining ...
	MethodImplementationFlags1NoInlining MethodImplementationFlags1 = "NoInlining"
	// MethodImplementationFlags1NoOptimization ...
	MethodImplementationFlags1NoOptimization MethodImplementationFlags1 = "NoOptimization"
	// MethodImplementationFlags1OPTIL ...
	MethodImplementationFlags1OPTIL MethodImplementationFlags1 = "OPTIL"
	// MethodImplementationFlags1PreserveSig ...
	MethodImplementationFlags1PreserveSig MethodImplementationFlags1 = "PreserveSig"
	// MethodImplementationFlags1Runtime ...
	MethodImplementationFlags1Runtime MethodImplementationFlags1 = "Runtime"
	// MethodImplementationFlags1Synchronized ...
	MethodImplementationFlags1Synchronized MethodImplementationFlags1 = "Synchronized"
	// MethodImplementationFlags1Unmanaged ...
	MethodImplementationFlags1Unmanaged MethodImplementationFlags1 = "Unmanaged"
)

// PossibleMethodImplementationFlags1Values returns an array of possible values for the MethodImplementationFlags1 const type.
func PossibleMethodImplementationFlags1Values() []MethodImplementationFlags1 {
	return []MethodImplementationFlags1{MethodImplementationFlags1AggressiveInlining, MethodImplementationFlags1CodeTypeMask, MethodImplementationFlags1ForwardRef, MethodImplementationFlags1IL, MethodImplementationFlags1InternalCall, MethodImplementationFlags1Managed, MethodImplementationFlags1ManagedMask, MethodImplementationFlags1MaxMethodImplVal, MethodImplementationFlags1Native, MethodImplementationFlags1NoInlining, MethodImplementationFlags1NoOptimization, MethodImplementationFlags1OPTIL, MethodImplementationFlags1PreserveSig, MethodImplementationFlags1Runtime, MethodImplementationFlags1Synchronized, MethodImplementationFlags1Unmanaged}
}

// MethodImplementationFlags2 enumerates the values for method implementation flags 2.
type MethodImplementationFlags2 string

const (
	// MethodImplementationFlags2AggressiveInlining ...
	MethodImplementationFlags2AggressiveInlining MethodImplementationFlags2 = "AggressiveInlining"
	// MethodImplementationFlags2CodeTypeMask ...
	MethodImplementationFlags2CodeTypeMask MethodImplementationFlags2 = "CodeTypeMask"
	// MethodImplementationFlags2ForwardRef ...
	MethodImplementationFlags2ForwardRef MethodImplementationFlags2 = "ForwardRef"
	// MethodImplementationFlags2IL ...
	MethodImplementationFlags2IL MethodImplementationFlags2 = "IL"
	// MethodImplementationFlags2InternalCall ...
	MethodImplementationFlags2InternalCall MethodImplementationFlags2 = "InternalCall"
	// MethodImplementationFlags2Managed ...
	MethodImplementationFlags2Managed MethodImplementationFlags2 = "Managed"
	// MethodImplementationFlags2ManagedMask ...
	MethodImplementationFlags2ManagedMask MethodImplementationFlags2 = "ManagedMask"
	// MethodImplementationFlags2MaxMethodImplVal ...
	MethodImplementationFlags2MaxMethodImplVal MethodImplementationFlags2 = "MaxMethodImplVal"
	// MethodImplementationFlags2Native ...
	MethodImplementationFlags2Native MethodImplementationFlags2 = "Native"
	// MethodImplementationFlags2NoInlining ...
	MethodImplementationFlags2NoInlining MethodImplementationFlags2 = "NoInlining"
	// MethodImplementationFlags2NoOptimization ...
	MethodImplementationFlags2NoOptimization MethodImplementationFlags2 = "NoOptimization"
	// MethodImplementationFlags2OPTIL ...
	MethodImplementationFlags2OPTIL MethodImplementationFlags2 = "OPTIL"
	// MethodImplementationFlags2PreserveSig ...
	MethodImplementationFlags2PreserveSig MethodImplementationFlags2 = "PreserveSig"
	// MethodImplementationFlags2Runtime ...
	MethodImplementationFlags2Runtime MethodImplementationFlags2 = "Runtime"
	// MethodImplementationFlags2Synchronized ...
	MethodImplementationFlags2Synchronized MethodImplementationFlags2 = "Synchronized"
	// MethodImplementationFlags2Unmanaged ...
	MethodImplementationFlags2Unmanaged MethodImplementationFlags2 = "Unmanaged"
)

// PossibleMethodImplementationFlags2Values returns an array of possible values for the MethodImplementationFlags2 const type.
func PossibleMethodImplementationFlags2Values() []MethodImplementationFlags2 {
	return []MethodImplementationFlags2{MethodImplementationFlags2AggressiveInlining, MethodImplementationFlags2CodeTypeMask, MethodImplementationFlags2ForwardRef, MethodImplementationFlags2IL, MethodImplementationFlags2InternalCall, MethodImplementationFlags2Managed, MethodImplementationFlags2ManagedMask, MethodImplementationFlags2MaxMethodImplVal, MethodImplementationFlags2Native, MethodImplementationFlags2NoInlining, MethodImplementationFlags2NoOptimization, MethodImplementationFlags2OPTIL, MethodImplementationFlags2PreserveSig, MethodImplementationFlags2Runtime, MethodImplementationFlags2Synchronized, MethodImplementationFlags2Unmanaged}
}

// SecurityRuleSet enumerates the values for security rule set.
type SecurityRuleSet string

const (
	// SecurityRuleSetLevel1 ...
	SecurityRuleSetLevel1 SecurityRuleSet = "Level1"
	// SecurityRuleSetLevel2 ...
	SecurityRuleSetLevel2 SecurityRuleSet = "Level2"
	// SecurityRuleSetNone ...
	SecurityRuleSetNone SecurityRuleSet = "None"
)

// PossibleSecurityRuleSetValues returns an array of possible values for the SecurityRuleSet const type.
func PossibleSecurityRuleSetValues() []SecurityRuleSet {
	return []SecurityRuleSet{SecurityRuleSetLevel1, SecurityRuleSetLevel2, SecurityRuleSetNone}
}

// Value enumerates the values for value.
type Value string

const (
	// Auto ...
	Auto Value = "Auto"
	// Explicit ...
	Explicit Value = "Explicit"
	// Sequential ...
	Sequential Value = "Sequential"
)

// PossibleValueValues returns an array of possible values for the Value const type.
func PossibleValueValues() []Value {
	return []Value{Auto, Explicit, Sequential}
}

// AzureMetricsBaseData ...
type AzureMetricsBaseData struct {
	// Metric - Gets or sets the Metric name
	Metric *string `json:"Metric,omitempty"`
	// Namespace - Gets or sets the Metric namespace
	Namespace *string `json:"Namespace,omitempty"`
	// DimNames - Gets or sets the list of dimension names (optional)
	DimNames *[]string `json:"DimNames,omitempty"`
	// Series - Gets or sets the list of time series data for the metric (one per unique dimension combination)
	Series *[]AzureTimeSeriesData `json:"Series,omitempty"`
}

// AzureMetricsData ...
type AzureMetricsData struct {
	BaseData *AzureMetricsBaseData `json:"BaseData,omitempty"`
}

// AzureMetricsDocument ...
type AzureMetricsDocument struct {
	// Time - Gets or sets Time property (in ISO 8601 format)
	Time *string           `json:"Time,omitempty"`
	Data *AzureMetricsData `json:"Data,omitempty"`
}

// AzureTimeSeriesData ...
type AzureTimeSeriesData struct {
	// DimValues - Gets or sets dimension values
	DimValues *[]string `json:"DimValues,omitempty"`
	// Min - Gets or sets Min value
	Min *float64 `json:"Min,omitempty"`
	// Max - Gets or sets Max value
	Max *float64 `json:"Max,omitempty"`
	// Sum - Gets or sets Sum value
	Sum *float64 `json:"Sum,omitempty"`
	// Count - Gets or sets Count value
	Count *int32 `json:"Count,omitempty"`
}

// MicrosoftAspNetCoreMvcObjectResult ...
type MicrosoftAspNetCoreMvcObjectResult struct {
	autorest.Response `json:"-"`
	Value             interface{}    `json:"Value,omitempty"`
	Formatters        *[]interface{} `json:"Formatters,omitempty"`
	ContentTypes      *[]interface{} `json:"ContentTypes,omitempty"`
	DeclaredType      *SystemType    `json:"DeclaredType,omitempty"`
	StatusCode        *int32         `json:"StatusCode,omitempty"`
}

// SystemIntPtr ...
type SystemIntPtr struct {
	Size *int32 `json:"Size,omitempty"`
}

// SystemModuleHandle ...
type SystemModuleHandle struct {
	MDStreamVersion *int32 `json:"MDStreamVersion,omitempty"`
}

// SystemReflectionAssembly ...
type SystemReflectionAssembly struct {
	CodeBase        *string                     `json:"CodeBase,omitempty"`
	EscapedCodeBase *string                     `json:"EscapedCodeBase,omitempty"`
	FullName        *string                     `json:"FullName,omitempty"`
	EntryPoint      *SystemReflectionMethodInfo `json:"EntryPoint,omitempty"`
	ExportedTypes   *[]SystemType               `json:"ExportedTypes,omitempty"`
	DefinedTypes    *[]SystemReflectionTypeInfo `json:"DefinedTypes,omitempty"`
	Evidence        *[]interface{}              `json:"Evidence,omitempty"`
	PermissionSet   *[]interface{}              `json:"PermissionSet,omitempty"`
	IsFullyTrusted  *bool                       `json:"IsFullyTrusted,omitempty"`
	// SecurityRuleSet - Possible values include: 'SecurityRuleSetNone', 'SecurityRuleSetLevel1', 'SecurityRuleSetLevel2'
	SecurityRuleSet     SecurityRuleSet                        `json:"SecurityRuleSet,omitempty"`
	ManifestModule      *SystemReflectionModule                `json:"ManifestModule,omitempty"`
	CustomAttributes    *[]SystemReflectionCustomAttributeData `json:"CustomAttributes,omitempty"`
	ReflectionOnly      *bool                                  `json:"ReflectionOnly,omitempty"`
	Modules             *[]SystemReflectionModule              `json:"Modules,omitempty"`
	Location            *string                                `json:"Location,omitempty"`
	ImageRuntimeVersion *string                                `json:"ImageRuntimeVersion,omitempty"`
	GlobalAssemblyCache *bool                                  `json:"GlobalAssemblyCache,omitempty"`
	HostContext         *int64                                 `json:"HostContext,omitempty"`
	IsDynamic           *bool                                  `json:"IsDynamic,omitempty"`
}

// SystemReflectionConstructorInfo ...
type SystemReflectionConstructorInfo struct {
	// MemberType - Possible values include: 'MemberType6Constructor', 'MemberType6Event', 'MemberType6Field', 'MemberType6Method', 'MemberType6Property', 'MemberType6TypeInfo', 'MemberType6Custom', 'MemberType6NestedType', 'MemberType6All'
	MemberType MemberType6 `json:"MemberType,omitempty"`
	// MethodImplementationFlags - Possible values include: 'MethodImplementationFlags1Managed', 'MethodImplementationFlags1IL', 'MethodImplementationFlags1Native', 'MethodImplementationFlags1OPTIL', 'MethodImplementationFlags1Runtime', 'MethodImplementationFlags1CodeTypeMask', 'MethodImplementationFlags1Unmanaged', 'MethodImplementationFlags1ManagedMask', 'MethodImplementationFlags1NoInlining', 'MethodImplementationFlags1ForwardRef', 'MethodImplementationFlags1Synchronized', 'MethodImplementationFlags1NoOptimization', 'MethodImplementationFlags1PreserveSig', 'MethodImplementationFlags1AggressiveInlining', 'MethodImplementationFlags1InternalCall', 'MethodImplementationFlags1MaxMethodImplVal'
	MethodImplementationFlags MethodImplementationFlags1 `json:"MethodImplementationFlags,omitempty"`
	MethodHandle              *SystemRuntimeMethodHandle `json:"MethodHandle,omitempty"`
	// Attributes - Possible values include: 'Attributes6ReuseSlot', 'Attributes6PrivateScope', 'Attributes6Private', 'Attributes6FamANDAssem', 'Attributes6Assembly', 'Attributes6Family', 'Attributes6FamORAssem', 'Attributes6Public', 'Attributes6MemberAccessMask', 'Attributes6UnmanagedExport', 'Attributes6Static', 'Attributes6Final', 'Attributes6Virtual', 'Attributes6HideBySig', 'Attributes6NewSlot', 'Attributes6VtableLayoutMask', 'Attributes6CheckAccessOnOverride', 'Attributes6Abstract', 'Attributes6SpecialName', 'Attributes6RTSpecialName', 'Attributes6PinvokeImpl', 'Attributes6HasSecurity', 'Attributes6RequireSecObject', 'Attributes6ReservedMask'
	Attributes Attributes6 `json:"Attributes,omitempty"`
	// CallingConvention - Possible values include: 'CallingConvention1Standard', 'CallingConvention1VarArgs', 'CallingConvention1Any', 'CallingConvention1HasThis', 'CallingConvention1ExplicitThis'
	CallingConvention         CallingConvention1                     `json:"CallingConvention,omitempty"`
	IsGenericMethodDefinition *bool                                  `json:"IsGenericMethodDefinition,omitempty"`
	ContainsGenericParameters *bool                                  `json:"ContainsGenericParameters,omitempty"`
	IsGenericMethod           *bool                                  `json:"IsGenericMethod,omitempty"`
	IsSecurityCritical        *bool                                  `json:"IsSecurityCritical,omitempty"`
	IsSecuritySafeCritical    *bool                                  `json:"IsSecuritySafeCritical,omitempty"`
	IsSecurityTransparent     *bool                                  `json:"IsSecurityTransparent,omitempty"`
	IsPublic                  *bool                                  `json:"IsPublic,omitempty"`
	IsPrivate                 *bool                                  `json:"IsPrivate,omitempty"`
	IsFamily                  *bool                                  `json:"IsFamily,omitempty"`
	IsAssembly                *bool                                  `json:"IsAssembly,omitempty"`
	IsFamilyAndAssembly       *bool                                  `json:"IsFamilyAndAssembly,omitempty"`
	IsFamilyOrAssembly        *bool                                  `json:"IsFamilyOrAssembly,omitempty"`
	IsStatic                  *bool                                  `json:"IsStatic,omitempty"`
	IsFinal                   *bool                                  `json:"IsFinal,omitempty"`
	IsVirtual                 *bool                                  `json:"IsVirtual,omitempty"`
	IsHideBySig               *bool                                  `json:"IsHideBySig,omitempty"`
	IsAbstract                *bool                                  `json:"IsAbstract,omitempty"`
	IsSpecialName             *bool                                  `json:"IsSpecialName,omitempty"`
	IsConstructor             *bool                                  `json:"IsConstructor,omitempty"`
	Name                      *string                                `json:"Name,omitempty"`
	DeclaringType             *SystemType                            `json:"DeclaringType,omitempty"`
	ReflectedType             *SystemType                            `json:"ReflectedType,omitempty"`
	CustomAttributes          *[]SystemReflectionCustomAttributeData `json:"CustomAttributes,omitempty"`
	MetadataToken             *int32                                 `json:"MetadataToken,omitempty"`
	Module                    *SystemReflectionModule                `json:"Module,omitempty"`
}

// SystemReflectionCustomAttributeData ...
type SystemReflectionCustomAttributeData struct {
	AttributeType        *SystemType                                     `json:"AttributeType,omitempty"`
	Constructor          *SystemReflectionConstructorInfo                `json:"Constructor,omitempty"`
	ConstructorArguments *[]SystemReflectionCustomAttributeTypedArgument `json:"ConstructorArguments,omitempty"`
	NamedArguments       *[]SystemReflectionCustomAttributeNamedArgument `json:"NamedArguments,omitempty"`
}

// SystemReflectionCustomAttributeNamedArgument ...
type SystemReflectionCustomAttributeNamedArgument struct {
	MemberInfo *SystemReflectionMemberInfo                   `json:"MemberInfo,omitempty"`
	TypedValue *SystemReflectionCustomAttributeTypedArgument `json:"TypedValue,omitempty"`
	MemberName *string                                       `json:"MemberName,omitempty"`
	IsField    *bool                                         `json:"IsField,omitempty"`
}

// SystemReflectionCustomAttributeTypedArgument ...
type SystemReflectionCustomAttributeTypedArgument struct {
	ArgumentType *SystemType `json:"ArgumentType,omitempty"`
	Value        interface{} `json:"Value,omitempty"`
}

// SystemReflectionEventInfo ...
type SystemReflectionEventInfo struct {
	// MemberType - Possible values include: 'MemberType2Constructor', 'MemberType2Event', 'MemberType2Field', 'MemberType2Method', 'MemberType2Property', 'MemberType2TypeInfo', 'MemberType2Custom', 'MemberType2NestedType', 'MemberType2All'
	MemberType MemberType2 `json:"MemberType,omitempty"`
	// Attributes - Possible values include: 'Attributes2None', 'Attributes2SpecialName', 'Attributes2ReservedMask', 'Attributes2RTSpecialName'
	Attributes       Attributes2                            `json:"Attributes,omitempty"`
	AddMethod        *SystemReflectionMethodInfo            `json:"AddMethod,omitempty"`
	RemoveMethod     *SystemReflectionMethodInfo            `json:"RemoveMethod,omitempty"`
	RaiseMethod      *SystemReflectionMethodInfo            `json:"RaiseMethod,omitempty"`
	EventHandlerType *SystemType                            `json:"EventHandlerType,omitempty"`
	IsSpecialName    *bool                                  `json:"IsSpecialName,omitempty"`
	IsMulticast      *bool                                  `json:"IsMulticast,omitempty"`
	Name             *string                                `json:"Name,omitempty"`
	DeclaringType    *SystemType                            `json:"DeclaringType,omitempty"`
	ReflectedType    *SystemType                            `json:"ReflectedType,omitempty"`
	CustomAttributes *[]SystemReflectionCustomAttributeData `json:"CustomAttributes,omitempty"`
	MetadataToken    *int32                                 `json:"MetadataToken,omitempty"`
	Module           *SystemReflectionModule                `json:"Module,omitempty"`
}

// SystemReflectionFieldInfo ...
type SystemReflectionFieldInfo struct {
	// MemberType - Possible values include: 'MemberType3Constructor', 'MemberType3Event', 'MemberType3Field', 'MemberType3Method', 'MemberType3Property', 'MemberType3TypeInfo', 'MemberType3Custom', 'MemberType3NestedType', 'MemberType3All'
	MemberType  MemberType3               `json:"MemberType,omitempty"`
	FieldHandle *SystemRuntimeFieldHandle `json:"FieldHandle,omitempty"`
	FieldType   *SystemType               `json:"FieldType,omitempty"`
	// Attributes - Possible values include: 'Attributes3PrivateScope', 'Attributes3Private', 'Attributes3FamANDAssem', 'Attributes3Assembly', 'Attributes3Family', 'Attributes3FamORAssem', 'Attributes3Public', 'Attributes3FieldAccessMask', 'Attributes3Static', 'Attributes3InitOnly', 'Attributes3Literal', 'Attributes3NotSerialized', 'Attributes3HasFieldRVA', 'Attributes3SpecialName', 'Attributes3RTSpecialName', 'Attributes3HasFieldMarshal', 'Attributes3PinvokeImpl', 'Attributes3HasDefault', 'Attributes3ReservedMask'
	Attributes             Attributes3                            `json:"Attributes,omitempty"`
	IsPublic               *bool                                  `json:"IsPublic,omitempty"`
	IsPrivate              *bool                                  `json:"IsPrivate,omitempty"`
	IsFamily               *bool                                  `json:"IsFamily,omitempty"`
	IsAssembly             *bool                                  `json:"IsAssembly,omitempty"`
	IsFamilyAndAssembly    *bool                                  `json:"IsFamilyAndAssembly,omitempty"`
	IsFamilyOrAssembly     *bool                                  `json:"IsFamilyOrAssembly,omitempty"`
	IsStatic               *bool                                  `json:"IsStatic,omitempty"`
	IsInitOnly             *bool                                  `json:"IsInitOnly,omitempty"`
	IsLiteral              *bool                                  `json:"IsLiteral,omitempty"`
	IsNotSerialized        *bool                                  `json:"IsNotSerialized,omitempty"`
	IsSpecialName          *bool                                  `json:"IsSpecialName,omitempty"`
	IsPinvokeImpl          *bool                                  `json:"IsPinvokeImpl,omitempty"`
	IsSecurityCritical     *bool                                  `json:"IsSecurityCritical,omitempty"`
	IsSecuritySafeCritical *bool                                  `json:"IsSecuritySafeCritical,omitempty"`
	IsSecurityTransparent  *bool                                  `json:"IsSecurityTransparent,omitempty"`
	Name                   *string                                `json:"Name,omitempty"`
	DeclaringType          *SystemType                            `json:"DeclaringType,omitempty"`
	ReflectedType          *SystemType                            `json:"ReflectedType,omitempty"`
	CustomAttributes       *[]SystemReflectionCustomAttributeData `json:"CustomAttributes,omitempty"`
	MetadataToken          *int32                                 `json:"MetadataToken,omitempty"`
	Module                 *SystemReflectionModule                `json:"Module,omitempty"`
}

// SystemReflectionMemberInfo ...
type SystemReflectionMemberInfo struct {
	// MemberType - Possible values include: 'Constructor', 'Event', 'Field', 'Method', 'Property', 'TypeInfo', 'Custom', 'NestedType', 'All'
	MemberType       MemberType                             `json:"MemberType,omitempty"`
	Name             *string                                `json:"Name,omitempty"`
	DeclaringType    *SystemType                            `json:"DeclaringType,omitempty"`
	ReflectedType    *SystemType                            `json:"ReflectedType,omitempty"`
	CustomAttributes *[]SystemReflectionCustomAttributeData `json:"CustomAttributes,omitempty"`
	MetadataToken    *int32                                 `json:"MetadataToken,omitempty"`
	Module           *SystemReflectionModule                `json:"Module,omitempty"`
}

// SystemReflectionMethodBase ...
type SystemReflectionMethodBase struct {
	// MethodImplementationFlags - Possible values include: 'MethodImplementationFlags2Managed', 'MethodImplementationFlags2IL', 'MethodImplementationFlags2Native', 'MethodImplementationFlags2OPTIL', 'MethodImplementationFlags2Runtime', 'MethodImplementationFlags2CodeTypeMask', 'MethodImplementationFlags2Unmanaged', 'MethodImplementationFlags2ManagedMask', 'MethodImplementationFlags2NoInlining', 'MethodImplementationFlags2ForwardRef', 'MethodImplementationFlags2Synchronized', 'MethodImplementationFlags2NoOptimization', 'MethodImplementationFlags2PreserveSig', 'MethodImplementationFlags2AggressiveInlining', 'MethodImplementationFlags2InternalCall', 'MethodImplementationFlags2MaxMethodImplVal'
	MethodImplementationFlags MethodImplementationFlags2 `json:"MethodImplementationFlags,omitempty"`
	MethodHandle              *SystemRuntimeMethodHandle `json:"MethodHandle,omitempty"`
	// Attributes - Possible values include: 'Attributes7ReuseSlot', 'Attributes7PrivateScope', 'Attributes7Private', 'Attributes7FamANDAssem', 'Attributes7Assembly', 'Attributes7Family', 'Attributes7FamORAssem', 'Attributes7Public', 'Attributes7MemberAccessMask', 'Attributes7UnmanagedExport', 'Attributes7Static', 'Attributes7Final', 'Attributes7Virtual', 'Attributes7HideBySig', 'Attributes7NewSlot', 'Attributes7VtableLayoutMask', 'Attributes7CheckAccessOnOverride', 'Attributes7Abstract', 'Attributes7SpecialName', 'Attributes7RTSpecialName', 'Attributes7PinvokeImpl', 'Attributes7HasSecurity', 'Attributes7RequireSecObject', 'Attributes7ReservedMask'
	Attributes Attributes7 `json:"Attributes,omitempty"`
	// CallingConvention - Possible values include: 'CallingConvention2Standard', 'CallingConvention2VarArgs', 'CallingConvention2Any', 'CallingConvention2HasThis', 'CallingConvention2ExplicitThis'
	CallingConvention         CallingConvention2 `json:"CallingConvention,omitempty"`
	IsGenericMethodDefinition *bool              `json:"IsGenericMethodDefinition,omitempty"`
	ContainsGenericParameters *bool              `json:"ContainsGenericParameters,omitempty"`
	IsGenericMethod           *bool              `json:"IsGenericMethod,omitempty"`
	IsSecurityCritical        *bool              `json:"IsSecurityCritical,omitempty"`
	IsSecuritySafeCritical    *bool              `json:"IsSecuritySafeCritical,omitempty"`
	IsSecurityTransparent     *bool              `json:"IsSecurityTransparent,omitempty"`
	IsPublic                  *bool              `json:"IsPublic,omitempty"`
	IsPrivate                 *bool              `json:"IsPrivate,omitempty"`
	IsFamily                  *bool              `json:"IsFamily,omitempty"`
	IsAssembly                *bool              `json:"IsAssembly,omitempty"`
	IsFamilyAndAssembly       *bool              `json:"IsFamilyAndAssembly,omitempty"`
	IsFamilyOrAssembly        *bool              `json:"IsFamilyOrAssembly,omitempty"`
	IsStatic                  *bool              `json:"IsStatic,omitempty"`
	IsFinal                   *bool              `json:"IsFinal,omitempty"`
	IsVirtual                 *bool              `json:"IsVirtual,omitempty"`
	IsHideBySig               *bool              `json:"IsHideBySig,omitempty"`
	IsAbstract                *bool              `json:"IsAbstract,omitempty"`
	IsSpecialName             *bool              `json:"IsSpecialName,omitempty"`
	IsConstructor             *bool              `json:"IsConstructor,omitempty"`
	// MemberType - Possible values include: 'MemberType7Constructor', 'MemberType7Event', 'MemberType7Field', 'MemberType7Method', 'MemberType7Property', 'MemberType7TypeInfo', 'MemberType7Custom', 'MemberType7NestedType', 'MemberType7All'
	MemberType       MemberType7                            `json:"MemberType,omitempty"`
	Name             *string                                `json:"Name,omitempty"`
	DeclaringType    *SystemType                            `json:"DeclaringType,omitempty"`
	ReflectedType    *SystemType                            `json:"ReflectedType,omitempty"`
	CustomAttributes *[]SystemReflectionCustomAttributeData `json:"CustomAttributes,omitempty"`
	MetadataToken    *int32                                 `json:"MetadataToken,omitempty"`
	Module           *SystemReflectionModule                `json:"Module,omitempty"`
}

// SystemReflectionMethodInfo ...
type SystemReflectionMethodInfo struct {
	// MemberType - Possible values include: 'MemberType1Constructor', 'MemberType1Event', 'MemberType1Field', 'MemberType1Method', 'MemberType1Property', 'MemberType1TypeInfo', 'MemberType1Custom', 'MemberType1NestedType', 'MemberType1All'
	MemberType                 MemberType1                    `json:"MemberType,omitempty"`
	ReturnType                 *SystemType                    `json:"ReturnType,omitempty"`
	ReturnParameter            *SystemReflectionParameterInfo `json:"ReturnParameter,omitempty"`
	ReturnTypeCustomAttributes interface{}                    `json:"ReturnTypeCustomAttributes,omitempty"`
	// MethodImplementationFlags - Possible values include: 'Managed', 'IL', 'Native', 'OPTIL', 'Runtime', 'CodeTypeMask', 'Unmanaged', 'ManagedMask', 'NoInlining', 'ForwardRef', 'Synchronized', 'NoOptimization', 'PreserveSig', 'AggressiveInlining', 'InternalCall', 'MaxMethodImplVal'
	MethodImplementationFlags MethodImplementationFlags  `json:"MethodImplementationFlags,omitempty"`
	MethodHandle              *SystemRuntimeMethodHandle `json:"MethodHandle,omitempty"`
	// Attributes - Possible values include: 'Attributes1ReuseSlot', 'Attributes1PrivateScope', 'Attributes1Private', 'Attributes1FamANDAssem', 'Attributes1Assembly', 'Attributes1Family', 'Attributes1FamORAssem', 'Attributes1Public', 'Attributes1MemberAccessMask', 'Attributes1UnmanagedExport', 'Attributes1Static', 'Attributes1Final', 'Attributes1Virtual', 'Attributes1HideBySig', 'Attributes1NewSlot', 'Attributes1VtableLayoutMask', 'Attributes1CheckAccessOnOverride', 'Attributes1Abstract', 'Attributes1SpecialName', 'Attributes1RTSpecialName', 'Attributes1PinvokeImpl', 'Attributes1HasSecurity', 'Attributes1RequireSecObject', 'Attributes1ReservedMask'
	Attributes Attributes1 `json:"Attributes,omitempty"`
	// CallingConvention - Possible values include: 'Standard', 'VarArgs', 'Any', 'HasThis', 'ExplicitThis'
	CallingConvention         CallingConvention                      `json:"CallingConvention,omitempty"`
	IsGenericMethodDefinition *bool                                  `json:"IsGenericMethodDefinition,omitempty"`
	ContainsGenericParameters *bool                                  `json:"ContainsGenericParameters,omitempty"`
	IsGenericMethod           *bool                                  `json:"IsGenericMethod,omitempty"`
	IsSecurityCritical        *bool                                  `json:"IsSecurityCritical,omitempty"`
	IsSecuritySafeCritical    *bool                                  `json:"IsSecuritySafeCritical,omitempty"`
	IsSecurityTransparent     *bool                                  `json:"IsSecurityTransparent,omitempty"`
	IsPublic                  *bool                                  `json:"IsPublic,omitempty"`
	IsPrivate                 *bool                                  `json:"IsPrivate,omitempty"`
	IsFamily                  *bool                                  `json:"IsFamily,omitempty"`
	IsAssembly                *bool                                  `json:"IsAssembly,omitempty"`
	IsFamilyAndAssembly       *bool                                  `json:"IsFamilyAndAssembly,omitempty"`
	IsFamilyOrAssembly        *bool                                  `json:"IsFamilyOrAssembly,omitempty"`
	IsStatic                  *bool                                  `json:"IsStatic,omitempty"`
	IsFinal                   *bool                                  `json:"IsFinal,omitempty"`
	IsVirtual                 *bool                                  `json:"IsVirtual,omitempty"`
	IsHideBySig               *bool                                  `json:"IsHideBySig,omitempty"`
	IsAbstract                *bool                                  `json:"IsAbstract,omitempty"`
	IsSpecialName             *bool                                  `json:"IsSpecialName,omitempty"`
	IsConstructor             *bool                                  `json:"IsConstructor,omitempty"`
	Name                      *string                                `json:"Name,omitempty"`
	DeclaringType             *SystemType                            `json:"DeclaringType,omitempty"`
	ReflectedType             *SystemType                            `json:"ReflectedType,omitempty"`
	CustomAttributes          *[]SystemReflectionCustomAttributeData `json:"CustomAttributes,omitempty"`
	MetadataToken             *int32                                 `json:"MetadataToken,omitempty"`
	Module                    *SystemReflectionModule                `json:"Module,omitempty"`
}

// SystemReflectionModule ...
type SystemReflectionModule struct {
	CustomAttributes   *[]SystemReflectionCustomAttributeData `json:"CustomAttributes,omitempty"`
	MDStreamVersion    *int32                                 `json:"MDStreamVersion,omitempty"`
	FullyQualifiedName *string                                `json:"FullyQualifiedName,omitempty"`
	ModuleVersionID    *uuid.UUID                             `json:"ModuleVersionId,omitempty"`
	MetadataToken      *int32                                 `json:"MetadataToken,omitempty"`
	ScopeName          *string                                `json:"ScopeName,omitempty"`
	Name               *string                                `json:"Name,omitempty"`
	Assembly           *SystemReflectionAssembly              `json:"Assembly,omitempty"`
	ModuleHandle       *SystemModuleHandle                    `json:"ModuleHandle,omitempty"`
}

// SystemReflectionParameterInfo ...
type SystemReflectionParameterInfo struct {
	ParameterType   *SystemType `json:"ParameterType,omitempty"`
	Name            *string     `json:"Name,omitempty"`
	HasDefaultValue *bool       `json:"HasDefaultValue,omitempty"`
	DefaultValue    interface{} `json:"DefaultValue,omitempty"`
	RawDefaultValue interface{} `json:"RawDefaultValue,omitempty"`
	Position        *int32      `json:"Position,omitempty"`
	// Attributes - Possible values include: 'None', 'In', 'Out', 'Lcid', 'Retval', 'Optional', 'HasDefault', 'HasFieldMarshal', 'Reserved3', 'Reserved4', 'ReservedMask'
	Attributes       Attributes                             `json:"Attributes,omitempty"`
	Member           *SystemReflectionMemberInfo            `json:"Member,omitempty"`
	IsIn             *bool                                  `json:"IsIn,omitempty"`
	IsOut            *bool                                  `json:"IsOut,omitempty"`
	IsLcid           *bool                                  `json:"IsLcid,omitempty"`
	IsRetval         *bool                                  `json:"IsRetval,omitempty"`
	IsOptional       *bool                                  `json:"IsOptional,omitempty"`
	MetadataToken    *int32                                 `json:"MetadataToken,omitempty"`
	CustomAttributes *[]SystemReflectionCustomAttributeData `json:"CustomAttributes,omitempty"`
}

// SystemReflectionPropertyInfo ...
type SystemReflectionPropertyInfo struct {
	// MemberType - Possible values include: 'MemberType4Constructor', 'MemberType4Event', 'MemberType4Field', 'MemberType4Method', 'MemberType4Property', 'MemberType4TypeInfo', 'MemberType4Custom', 'MemberType4NestedType', 'MemberType4All'
	MemberType   MemberType4 `json:"MemberType,omitempty"`
	PropertyType *SystemType `json:"PropertyType,omitempty"`
	// Attributes - Possible values include: 'Attributes4None', 'Attributes4SpecialName', 'Attributes4RTSpecialName', 'Attributes4HasDefault', 'Attributes4Reserved2', 'Attributes4Reserved3', 'Attributes4Reserved4', 'Attributes4ReservedMask'
	Attributes       Attributes4                            `json:"Attributes,omitempty"`
	CanRead          *bool                                  `json:"CanRead,omitempty"`
	CanWrite         *bool                                  `json:"CanWrite,omitempty"`
	GetMethod        *SystemReflectionMethodInfo            `json:"GetMethod,omitempty"`
	SetMethod        *SystemReflectionMethodInfo            `json:"SetMethod,omitempty"`
	IsSpecialName    *bool                                  `json:"IsSpecialName,omitempty"`
	Name             *string                                `json:"Name,omitempty"`
	DeclaringType    *SystemType                            `json:"DeclaringType,omitempty"`
	ReflectedType    *SystemType                            `json:"ReflectedType,omitempty"`
	CustomAttributes *[]SystemReflectionCustomAttributeData `json:"CustomAttributes,omitempty"`
	MetadataToken    *int32                                 `json:"MetadataToken,omitempty"`
	Module           *SystemReflectionModule                `json:"Module,omitempty"`
}

// SystemReflectionTypeInfo ...
type SystemReflectionTypeInfo struct {
	GenericTypeParameters *[]SystemType                      `json:"GenericTypeParameters,omitempty"`
	DeclaredConstructors  *[]SystemReflectionConstructorInfo `json:"DeclaredConstructors,omitempty"`
	DeclaredEvents        *[]SystemReflectionEventInfo       `json:"DeclaredEvents,omitempty"`
	DeclaredFields        *[]SystemReflectionFieldInfo       `json:"DeclaredFields,omitempty"`
	DeclaredMembers       *[]SystemReflectionMemberInfo      `json:"DeclaredMembers,omitempty"`
	DeclaredMethods       *[]SystemReflectionMethodInfo      `json:"DeclaredMethods,omitempty"`
	DeclaredNestedTypes   *[]SystemReflectionTypeInfo        `json:"DeclaredNestedTypes,omitempty"`
	DeclaredProperties    *[]SystemReflectionPropertyInfo    `json:"DeclaredProperties,omitempty"`
	ImplementedInterfaces *[]SystemType                      `json:"ImplementedInterfaces,omitempty"`
	// MemberType - Possible values include: 'MemberType5Constructor', 'MemberType5Event', 'MemberType5Field', 'MemberType5Method', 'MemberType5Property', 'MemberType5TypeInfo', 'MemberType5Custom', 'MemberType5NestedType', 'MemberType5All'
	MemberType            MemberType5                                        `json:"MemberType,omitempty"`
	DeclaringType         *SystemType                                        `json:"DeclaringType,omitempty"`
	DeclaringMethod       *SystemReflectionMethodBase                        `json:"DeclaringMethod,omitempty"`
	ReflectedType         *SystemType                                        `json:"ReflectedType,omitempty"`
	StructLayoutAttribute *SystemRuntimeInteropServicesStructLayoutAttribute `json:"StructLayoutAttribute,omitempty"`
	GUID                  *uuid.UUID                                         `json:"GUID,omitempty"`
	Module                *SystemReflectionModule                            `json:"Module,omitempty"`
	Assembly              *SystemReflectionAssembly                          `json:"Assembly,omitempty"`
	TypeHandle            *SystemRuntimeTypeHandle                           `json:"TypeHandle,omitempty"`
	FullName              *string                                            `json:"FullName,omitempty"`
	Namespace             *string                                            `json:"Namespace,omitempty"`
	AssemblyQualifiedName *string                                            `json:"AssemblyQualifiedName,omitempty"`
	BaseType              *SystemType                                        `json:"BaseType,omitempty"`
	TypeInitializer       *SystemReflectionConstructorInfo                   `json:"TypeInitializer,omitempty"`
	IsNested              *bool                                              `json:"IsNested,omitempty"`
	// Attributes - Possible values include: 'Attributes5NotPublic', 'Attributes5AutoLayout', 'Attributes5AnsiClass', 'Attributes5Class', 'Attributes5Public', 'Attributes5NestedPublic', 'Attributes5NestedPrivate', 'Attributes5NestedFamily', 'Attributes5NestedAssembly', 'Attributes5NestedFamANDAssem', 'Attributes5NestedFamORAssem', 'Attributes5VisibilityMask', 'Attributes5SequentialLayout', 'Attributes5ExplicitLayout', 'Attributes5LayoutMask', 'Attributes5Interface', 'Attributes5ClassSemanticsMask', 'Attributes5Abstract', 'Attributes5Sealed', 'Attributes5SpecialName', 'Attributes5RTSpecialName', 'Attributes5Import', 'Attributes5Serializable', 'Attributes5WindowsRuntime', 'Attributes5UnicodeClass', 'Attributes5AutoClass', 'Attributes5StringFormatMask', 'Attributes5CustomFormatClass', 'Attributes5HasSecurity', 'Attributes5ReservedMask', 'Attributes5BeforeFieldInit', 'Attributes5CustomFormatMask'
	Attributes Attributes5 `json:"Attributes,omitempty"`
	// GenericParameterAttributes - Possible values include: 'GenericParameterAttributesNone', 'GenericParameterAttributesCovariant', 'GenericParameterAttributesContravariant', 'GenericParameterAttributesVarianceMask', 'GenericParameterAttributesReferenceTypeConstraint', 'GenericParameterAttributesNotNullableValueTypeConstraint', 'GenericParameterAttributesDefaultConstructorConstraint', 'GenericParameterAttributesSpecialConstraintMask'
	GenericParameterAttributes GenericParameterAttributes             `json:"GenericParameterAttributes,omitempty"`
	IsVisible                  *bool                                  `json:"IsVisible,omitempty"`
	IsNotPublic                *bool                                  `json:"IsNotPublic,omitempty"`
	IsPublic                   *bool                                  `json:"IsPublic,omitempty"`
	IsNestedPublic             *bool                                  `json:"IsNestedPublic,omitempty"`
	IsNestedPrivate            *bool                                  `json:"IsNestedPrivate,omitempty"`
	IsNestedFamily             *bool                                  `json:"IsNestedFamily,omitempty"`
	IsNestedAssembly           *bool                                  `json:"IsNestedAssembly,omitempty"`
	IsNestedFamANDAssem        *bool                                  `json:"IsNestedFamANDAssem,omitempty"`
	IsNestedFamORAssem         *bool                                  `json:"IsNestedFamORAssem,omitempty"`
	IsAutoLayout               *bool                                  `json:"IsAutoLayout,omitempty"`
	IsLayoutSequential         *bool                                  `json:"IsLayoutSequential,omitempty"`
	IsExplicitLayout           *bool                                  `json:"IsExplicitLayout,omitempty"`
	IsClass                    *bool                                  `json:"IsClass,omitempty"`
	IsInterface                *bool                                  `json:"IsInterface,omitempty"`
	IsValueType                *bool                                  `json:"IsValueType,omitempty"`
	IsAbstract                 *bool                                  `json:"IsAbstract,omitempty"`
	IsSealed                   *bool                                  `json:"IsSealed,omitempty"`
	IsEnum                     *bool                                  `json:"IsEnum,omitempty"`
	IsSpecialName              *bool                                  `json:"IsSpecialName,omitempty"`
	IsImport                   *bool                                  `json:"IsImport,omitempty"`
	IsSerializable             *bool                                  `json:"IsSerializable,omitempty"`
	IsAnsiClass                *bool                                  `json:"IsAnsiClass,omitempty"`
	IsUnicodeClass             *bool                                  `json:"IsUnicodeClass,omitempty"`
	IsAutoClass                *bool                                  `json:"IsAutoClass,omitempty"`
	IsArray                    *bool                                  `json:"IsArray,omitempty"`
	IsGenericType              *bool                                  `json:"IsGenericType,omitempty"`
	IsGenericTypeDefinition    *bool                                  `json:"IsGenericTypeDefinition,omitempty"`
	IsConstructedGenericType   *bool                                  `json:"IsConstructedGenericType,omitempty"`
	IsGenericParameter         *bool                                  `json:"IsGenericParameter,omitempty"`
	GenericParameterPosition   *int32                                 `json:"GenericParameterPosition,omitempty"`
	ContainsGenericParameters  *bool                                  `json:"ContainsGenericParameters,omitempty"`
	IsByRef                    *bool                                  `json:"IsByRef,omitempty"`
	IsPointer                  *bool                                  `json:"IsPointer,omitempty"`
	IsPrimitive                *bool                                  `json:"IsPrimitive,omitempty"`
	IsCOMObject                *bool                                  `json:"IsCOMObject,omitempty"`
	HasElementType             *bool                                  `json:"HasElementType,omitempty"`
	IsContextful               *bool                                  `json:"IsContextful,omitempty"`
	IsMarshalByRef             *bool                                  `json:"IsMarshalByRef,omitempty"`
	GenericTypeArguments       *[]SystemType                          `json:"GenericTypeArguments,omitempty"`
	IsSecurityCritical         *bool                                  `json:"IsSecurityCritical,omitempty"`
	IsSecuritySafeCritical     *bool                                  `json:"IsSecuritySafeCritical,omitempty"`
	IsSecurityTransparent      *bool                                  `json:"IsSecurityTransparent,omitempty"`
	UnderlyingSystemType       *SystemType                            `json:"UnderlyingSystemType,omitempty"`
	Name                       *string                                `json:"Name,omitempty"`
	CustomAttributes           *[]SystemReflectionCustomAttributeData `json:"CustomAttributes,omitempty"`
	MetadataToken              *int32                                 `json:"MetadataToken,omitempty"`
}

// SystemRuntimeFieldHandle ...
type SystemRuntimeFieldHandle struct {
	Value *SystemIntPtr `json:"Value,omitempty"`
}

// SystemRuntimeInteropServicesStructLayoutAttribute ...
type SystemRuntimeInteropServicesStructLayoutAttribute struct {
	// Value - Possible values include: 'Sequential', 'Explicit', 'Auto'
	Value  Value       `json:"Value,omitempty"`
	TypeID interface{} `json:"TypeId,omitempty"`
}

// SystemRuntimeMethodHandle ...
type SystemRuntimeMethodHandle struct {
	Value *SystemIntPtr `json:"Value,omitempty"`
}

// SystemRuntimeTypeHandle ...
type SystemRuntimeTypeHandle struct {
	Value *SystemIntPtr `json:"Value,omitempty"`
}

// SystemType ...
type SystemType struct {
	// MemberType - Possible values include: 'MemberType8Constructor', 'MemberType8Event', 'MemberType8Field', 'MemberType8Method', 'MemberType8Property', 'MemberType8TypeInfo', 'MemberType8Custom', 'MemberType8NestedType', 'MemberType8All'
	MemberType            MemberType8                                        `json:"MemberType,omitempty"`
	DeclaringType         *SystemType                                        `json:"DeclaringType,omitempty"`
	DeclaringMethod       *SystemReflectionMethodBase                        `json:"DeclaringMethod,omitempty"`
	ReflectedType         *SystemType                                        `json:"ReflectedType,omitempty"`
	StructLayoutAttribute *SystemRuntimeInteropServicesStructLayoutAttribute `json:"StructLayoutAttribute,omitempty"`
	GUID                  *uuid.UUID                                         `json:"GUID,omitempty"`
	DefaultBinder         interface{}                                        `json:"DefaultBinder,omitempty"`
	Module                *SystemReflectionModule                            `json:"Module,omitempty"`
	Assembly              *SystemReflectionAssembly                          `json:"Assembly,omitempty"`
	TypeHandle            *SystemRuntimeTypeHandle                           `json:"TypeHandle,omitempty"`
	FullName              *string                                            `json:"FullName,omitempty"`
	Namespace             *string                                            `json:"Namespace,omitempty"`
	AssemblyQualifiedName *string                                            `json:"AssemblyQualifiedName,omitempty"`
	BaseType              *SystemType                                        `json:"BaseType,omitempty"`
	TypeInitializer       *SystemReflectionConstructorInfo                   `json:"TypeInitializer,omitempty"`
	IsNested              *bool                                              `json:"IsNested,omitempty"`
	// Attributes - Possible values include: 'Attributes8NotPublic', 'Attributes8AutoLayout', 'Attributes8AnsiClass', 'Attributes8Class', 'Attributes8Public', 'Attributes8NestedPublic', 'Attributes8NestedPrivate', 'Attributes8NestedFamily', 'Attributes8NestedAssembly', 'Attributes8NestedFamANDAssem', 'Attributes8NestedFamORAssem', 'Attributes8VisibilityMask', 'Attributes8SequentialLayout', 'Attributes8ExplicitLayout', 'Attributes8LayoutMask', 'Attributes8Interface', 'Attributes8ClassSemanticsMask', 'Attributes8Abstract', 'Attributes8Sealed', 'Attributes8SpecialName', 'Attributes8RTSpecialName', 'Attributes8Import', 'Attributes8Serializable', 'Attributes8WindowsRuntime', 'Attributes8UnicodeClass', 'Attributes8AutoClass', 'Attributes8StringFormatMask', 'Attributes8CustomFormatClass', 'Attributes8HasSecurity', 'Attributes8ReservedMask', 'Attributes8BeforeFieldInit', 'Attributes8CustomFormatMask'
	Attributes Attributes8 `json:"Attributes,omitempty"`
	// GenericParameterAttributes - Possible values include: 'GenericParameterAttributes1None', 'GenericParameterAttributes1Covariant', 'GenericParameterAttributes1Contravariant', 'GenericParameterAttributes1VarianceMask', 'GenericParameterAttributes1ReferenceTypeConstraint', 'GenericParameterAttributes1NotNullableValueTypeConstraint', 'GenericParameterAttributes1DefaultConstructorConstraint', 'GenericParameterAttributes1SpecialConstraintMask'
	GenericParameterAttributes GenericParameterAttributes1            `json:"GenericParameterAttributes,omitempty"`
	IsVisible                  *bool                                  `json:"IsVisible,omitempty"`
	IsNotPublic                *bool                                  `json:"IsNotPublic,omitempty"`
	IsPublic                   *bool                                  `json:"IsPublic,omitempty"`
	IsNestedPublic             *bool                                  `json:"IsNestedPublic,omitempty"`
	IsNestedPrivate            *bool                                  `json:"IsNestedPrivate,omitempty"`
	IsNestedFamily             *bool                                  `json:"IsNestedFamily,omitempty"`
	IsNestedAssembly           *bool                                  `json:"IsNestedAssembly,omitempty"`
	IsNestedFamANDAssem        *bool                                  `json:"IsNestedFamANDAssem,omitempty"`
	IsNestedFamORAssem         *bool                                  `json:"IsNestedFamORAssem,omitempty"`
	IsAutoLayout               *bool                                  `json:"IsAutoLayout,omitempty"`
	IsLayoutSequential         *bool                                  `json:"IsLayoutSequential,omitempty"`
	IsExplicitLayout           *bool                                  `json:"IsExplicitLayout,omitempty"`
	IsClass                    *bool                                  `json:"IsClass,omitempty"`
	IsInterface                *bool                                  `json:"IsInterface,omitempty"`
	IsValueType                *bool                                  `json:"IsValueType,omitempty"`
	IsAbstract                 *bool                                  `json:"IsAbstract,omitempty"`
	IsSealed                   *bool                                  `json:"IsSealed,omitempty"`
	IsEnum                     *bool                                  `json:"IsEnum,omitempty"`
	IsSpecialName              *bool                                  `json:"IsSpecialName,omitempty"`
	IsImport                   *bool                                  `json:"IsImport,omitempty"`
	IsSerializable             *bool                                  `json:"IsSerializable,omitempty"`
	IsAnsiClass                *bool                                  `json:"IsAnsiClass,omitempty"`
	IsUnicodeClass             *bool                                  `json:"IsUnicodeClass,omitempty"`
	IsAutoClass                *bool                                  `json:"IsAutoClass,omitempty"`
	IsArray                    *bool                                  `json:"IsArray,omitempty"`
	IsGenericType              *bool                                  `json:"IsGenericType,omitempty"`
	IsGenericTypeDefinition    *bool                                  `json:"IsGenericTypeDefinition,omitempty"`
	IsConstructedGenericType   *bool                                  `json:"IsConstructedGenericType,omitempty"`
	IsGenericParameter         *bool                                  `json:"IsGenericParameter,omitempty"`
	GenericParameterPosition   *int32                                 `json:"GenericParameterPosition,omitempty"`
	ContainsGenericParameters  *bool                                  `json:"ContainsGenericParameters,omitempty"`
	IsByRef                    *bool                                  `json:"IsByRef,omitempty"`
	IsPointer                  *bool                                  `json:"IsPointer,omitempty"`
	IsPrimitive                *bool                                  `json:"IsPrimitive,omitempty"`
	IsCOMObject                *bool                                  `json:"IsCOMObject,omitempty"`
	HasElementType             *bool                                  `json:"HasElementType,omitempty"`
	IsContextful               *bool                                  `json:"IsContextful,omitempty"`
	IsMarshalByRef             *bool                                  `json:"IsMarshalByRef,omitempty"`
	GenericTypeArguments       *[]SystemType                          `json:"GenericTypeArguments,omitempty"`
	IsSecurityCritical         *bool                                  `json:"IsSecurityCritical,omitempty"`
	IsSecuritySafeCritical     *bool                                  `json:"IsSecuritySafeCritical,omitempty"`
	IsSecurityTransparent      *bool                                  `json:"IsSecurityTransparent,omitempty"`
	UnderlyingSystemType       *SystemType                            `json:"UnderlyingSystemType,omitempty"`
	Name                       *string                                `json:"Name,omitempty"`
	CustomAttributes           *[]SystemReflectionCustomAttributeData `json:"CustomAttributes,omitempty"`
	MetadataToken              *int32                                 `json:"MetadataToken,omitempty"`
}
