package insights

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"encoding/json"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/to"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// The package's fully qualified name.
const fqdn = "github.com/Azure/azure-sdk-for-go/services/preview/monitor/mgmt/2019-11-01-preview/insights"

// AzureMonitorMetricsDestination azure Monitor Metrics destination.
type AzureMonitorMetricsDestination struct {
	// Name - A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `json:"name,omitempty"`
}

// DataCollectionRule definition of what monitoring data to collect and where that data should be sent.
type DataCollectionRule struct {
	// Description - Description of the data collection rule.
	Description *string `json:"description,omitempty"`
	// DataSources - The specification of data sources.
	// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
	DataSources *DataCollectionRuleDataSources `json:"dataSources,omitempty"`
	// Destinations - The specification of destinations.
	Destinations *DataCollectionRuleDestinations `json:"destinations,omitempty"`
	// DataFlows - The specification of data flows.
	DataFlows *[]DataFlow `json:"dataFlows,omitempty"`
	// ProvisioningState - READ-ONLY; The resource provisioning state. Possible values include: 'KnownDataCollectionRuleProvisioningStateCreating', 'KnownDataCollectionRuleProvisioningStateUpdating', 'KnownDataCollectionRuleProvisioningStateDeleting', 'KnownDataCollectionRuleProvisioningStateSucceeded', 'KnownDataCollectionRuleProvisioningStateFailed'
	ProvisioningState KnownDataCollectionRuleProvisioningState `json:"provisioningState,omitempty"`
}

// MarshalJSON is the custom marshaler for DataCollectionRule.
func (dcr DataCollectionRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if dcr.Description != nil {
		objectMap["description"] = dcr.Description
	}
	if dcr.DataSources != nil {
		objectMap["dataSources"] = dcr.DataSources
	}
	if dcr.Destinations != nil {
		objectMap["destinations"] = dcr.Destinations
	}
	if dcr.DataFlows != nil {
		objectMap["dataFlows"] = dcr.DataFlows
	}
	return json.Marshal(objectMap)
}

// DataCollectionRuleAssociation definition of association of a data collection rule with a monitored Azure
// resource.
type DataCollectionRuleAssociation struct {
	// Description - Description of the association.
	Description *string `json:"description,omitempty"`
	// DataCollectionRuleID - The resource ID of the data collection rule that is to be associated.
	DataCollectionRuleID *string `json:"dataCollectionRuleId,omitempty"`
	// ProvisioningState - READ-ONLY; The resource provisioning state. Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed'
	ProvisioningState KnownDataCollectionRuleAssociationProvisioningState `json:"provisioningState,omitempty"`
}

// MarshalJSON is the custom marshaler for DataCollectionRuleAssociation.
func (dcra DataCollectionRuleAssociation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if dcra.Description != nil {
		objectMap["description"] = dcra.Description
	}
	if dcra.DataCollectionRuleID != nil {
		objectMap["dataCollectionRuleId"] = dcra.DataCollectionRuleID
	}
	return json.Marshal(objectMap)
}

// DataCollectionRuleAssociationProxyOnlyResource definition of generic ARM proxy resource.
type DataCollectionRuleAssociationProxyOnlyResource struct {
	autorest.Response `json:"-"`
	// DataCollectionRuleAssociationProxyOnlyResourceProperties - Resource properties.
	*DataCollectionRuleAssociationProxyOnlyResourceProperties `json:"properties,omitempty"`
	// ID - READ-ONLY; Fully qualified ID of the resource.
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty"`
	// Etag - READ-ONLY; Resource entity tag (ETag).
	Etag *string `json:"etag,omitempty"`
}

// MarshalJSON is the custom marshaler for DataCollectionRuleAssociationProxyOnlyResource.
func (dcrapor DataCollectionRuleAssociationProxyOnlyResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if dcrapor.DataCollectionRuleAssociationProxyOnlyResourceProperties != nil {
		objectMap["properties"] = dcrapor.DataCollectionRuleAssociationProxyOnlyResourceProperties
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for DataCollectionRuleAssociationProxyOnlyResource struct.
func (dcrapor *DataCollectionRuleAssociationProxyOnlyResource) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var dataCollectionRuleAssociationProxyOnlyResourceProperties DataCollectionRuleAssociationProxyOnlyResourceProperties
				err = json.Unmarshal(*v, &dataCollectionRuleAssociationProxyOnlyResourceProperties)
				if err != nil {
					return err
				}
				dcrapor.DataCollectionRuleAssociationProxyOnlyResourceProperties = &dataCollectionRuleAssociationProxyOnlyResourceProperties
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				dcrapor.ID = &ID
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				dcrapor.Name = &name
			}
		case "type":
			if v != nil {
				var typeVar string
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				dcrapor.Type = &typeVar
			}
		case "etag":
			if v != nil {
				var etag string
				err = json.Unmarshal(*v, &etag)
				if err != nil {
					return err
				}
				dcrapor.Etag = &etag
			}
		}
	}

	return nil
}

// DataCollectionRuleAssociationProxyOnlyResourceListResult a pageable list of resources.
type DataCollectionRuleAssociationProxyOnlyResourceListResult struct {
	autorest.Response `json:"-"`
	// Value - A list of resources.
	Value *[]DataCollectionRuleAssociationProxyOnlyResource `json:"value,omitempty"`
	// NextLink - The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// DataCollectionRuleAssociationProxyOnlyResourceListResultIterator provides access to a complete listing
// of DataCollectionRuleAssociationProxyOnlyResource values.
type DataCollectionRuleAssociationProxyOnlyResourceListResultIterator struct {
	i    int
	page DataCollectionRuleAssociationProxyOnlyResourceListResultPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *DataCollectionRuleAssociationProxyOnlyResourceListResultIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DataCollectionRuleAssociationProxyOnlyResourceListResultIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *DataCollectionRuleAssociationProxyOnlyResourceListResultIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter DataCollectionRuleAssociationProxyOnlyResourceListResultIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter DataCollectionRuleAssociationProxyOnlyResourceListResultIterator) Response() DataCollectionRuleAssociationProxyOnlyResourceListResult {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter DataCollectionRuleAssociationProxyOnlyResourceListResultIterator) Value() DataCollectionRuleAssociationProxyOnlyResource {
	if !iter.page.NotDone() {
		return DataCollectionRuleAssociationProxyOnlyResource{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the DataCollectionRuleAssociationProxyOnlyResourceListResultIterator type.
func NewDataCollectionRuleAssociationProxyOnlyResourceListResultIterator(page DataCollectionRuleAssociationProxyOnlyResourceListResultPage) DataCollectionRuleAssociationProxyOnlyResourceListResultIterator {
	return DataCollectionRuleAssociationProxyOnlyResourceListResultIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (dcraporlr DataCollectionRuleAssociationProxyOnlyResourceListResult) IsEmpty() bool {
	return dcraporlr.Value == nil || len(*dcraporlr.Value) == 0
}

// hasNextLink returns true if the NextLink is not empty.
func (dcraporlr DataCollectionRuleAssociationProxyOnlyResourceListResult) hasNextLink() bool {
	return dcraporlr.NextLink != nil && len(*dcraporlr.NextLink) != 0
}

// dataCollectionRuleAssociationProxyOnlyResourceListResultPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (dcraporlr DataCollectionRuleAssociationProxyOnlyResourceListResult) dataCollectionRuleAssociationProxyOnlyResourceListResultPreparer(ctx context.Context) (*http.Request, error) {
	if !dcraporlr.hasNextLink() {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(dcraporlr.NextLink)))
}

// DataCollectionRuleAssociationProxyOnlyResourceListResultPage contains a page of
// DataCollectionRuleAssociationProxyOnlyResource values.
type DataCollectionRuleAssociationProxyOnlyResourceListResultPage struct {
	fn        func(context.Context, DataCollectionRuleAssociationProxyOnlyResourceListResult) (DataCollectionRuleAssociationProxyOnlyResourceListResult, error)
	dcraporlr DataCollectionRuleAssociationProxyOnlyResourceListResult
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *DataCollectionRuleAssociationProxyOnlyResourceListResultPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DataCollectionRuleAssociationProxyOnlyResourceListResultPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	for {
		next, err := page.fn(ctx, page.dcraporlr)
		if err != nil {
			return err
		}
		page.dcraporlr = next
		if !next.hasNextLink() || !next.IsEmpty() {
			break
		}
	}
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *DataCollectionRuleAssociationProxyOnlyResourceListResultPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page DataCollectionRuleAssociationProxyOnlyResourceListResultPage) NotDone() bool {
	return !page.dcraporlr.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page DataCollectionRuleAssociationProxyOnlyResourceListResultPage) Response() DataCollectionRuleAssociationProxyOnlyResourceListResult {
	return page.dcraporlr
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page DataCollectionRuleAssociationProxyOnlyResourceListResultPage) Values() []DataCollectionRuleAssociationProxyOnlyResource {
	if page.dcraporlr.IsEmpty() {
		return nil
	}
	return *page.dcraporlr.Value
}

// Creates a new instance of the DataCollectionRuleAssociationProxyOnlyResourceListResultPage type.
func NewDataCollectionRuleAssociationProxyOnlyResourceListResultPage(cur DataCollectionRuleAssociationProxyOnlyResourceListResult, getNextPage func(context.Context, DataCollectionRuleAssociationProxyOnlyResourceListResult) (DataCollectionRuleAssociationProxyOnlyResourceListResult, error)) DataCollectionRuleAssociationProxyOnlyResourceListResultPage {
	return DataCollectionRuleAssociationProxyOnlyResourceListResultPage{
		fn:        getNextPage,
		dcraporlr: cur,
	}
}

// DataCollectionRuleAssociationProxyOnlyResourceProperties resource properties.
type DataCollectionRuleAssociationProxyOnlyResourceProperties struct {
	// Description - Description of the association.
	Description *string `json:"description,omitempty"`
	// DataCollectionRuleID - The resource ID of the data collection rule that is to be associated.
	DataCollectionRuleID *string `json:"dataCollectionRuleId,omitempty"`
	// ProvisioningState - READ-ONLY; The resource provisioning state. Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed'
	ProvisioningState KnownDataCollectionRuleAssociationProvisioningState `json:"provisioningState,omitempty"`
}

// MarshalJSON is the custom marshaler for DataCollectionRuleAssociationProxyOnlyResourceProperties.
func (dcrapor DataCollectionRuleAssociationProxyOnlyResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if dcrapor.Description != nil {
		objectMap["description"] = dcrapor.Description
	}
	if dcrapor.DataCollectionRuleID != nil {
		objectMap["dataCollectionRuleId"] = dcrapor.DataCollectionRuleID
	}
	return json.Marshal(objectMap)
}

// DataCollectionRuleDataSources the specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the
// provisioned endpoint.
type DataCollectionRuleDataSources struct {
	// PerformanceCounters - The list of performance counter data source configurations.
	PerformanceCounters *[]PerfCounterDataSource `json:"performanceCounters,omitempty"`
	// WindowsEventLogs - The list of Windows Event Log data source configurations.
	WindowsEventLogs *[]WindowsEventLogDataSource `json:"windowsEventLogs,omitempty"`
	// Syslog - The list of Syslog data source configurations.
	Syslog *[]SyslogDataSource `json:"syslog,omitempty"`
	// Extensions - The list of Azure VM extension data source configurations.
	Extensions *[]ExtensionDataSource `json:"extensions,omitempty"`
}

// DataCollectionRuleDestinations the specification of destinations.
type DataCollectionRuleDestinations struct {
	// LogAnalytics - List of Log Analytics destinations.
	LogAnalytics *[]LogAnalyticsDestination `json:"logAnalytics,omitempty"`
	// AzureMonitorMetrics - Azure Monitor Metrics destination.
	AzureMonitorMetrics *DestinationsSpecAzureMonitorMetrics `json:"azureMonitorMetrics,omitempty"`
}

// DataCollectionRuleResource definition of ARM tracked top level resource.
type DataCollectionRuleResource struct {
	autorest.Response `json:"-"`
	// DataCollectionRuleResourceProperties - Resource properties.
	*DataCollectionRuleResourceProperties `json:"properties,omitempty"`
	// Location - The geo-location where the resource lives.
	Location *string `json:"location,omitempty"`
	// Tags - Resource tags.
	Tags map[string]*string `json:"tags"`
	// ID - READ-ONLY; Fully qualified ID of the resource.
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty"`
	// Etag - READ-ONLY; Resource entity tag (ETag).
	Etag *string `json:"etag,omitempty"`
}

// MarshalJSON is the custom marshaler for DataCollectionRuleResource.
func (dcrr DataCollectionRuleResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if dcrr.DataCollectionRuleResourceProperties != nil {
		objectMap["properties"] = dcrr.DataCollectionRuleResourceProperties
	}
	if dcrr.Location != nil {
		objectMap["location"] = dcrr.Location
	}
	if dcrr.Tags != nil {
		objectMap["tags"] = dcrr.Tags
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for DataCollectionRuleResource struct.
func (dcrr *DataCollectionRuleResource) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var dataCollectionRuleResourceProperties DataCollectionRuleResourceProperties
				err = json.Unmarshal(*v, &dataCollectionRuleResourceProperties)
				if err != nil {
					return err
				}
				dcrr.DataCollectionRuleResourceProperties = &dataCollectionRuleResourceProperties
			}
		case "location":
			if v != nil {
				var location string
				err = json.Unmarshal(*v, &location)
				if err != nil {
					return err
				}
				dcrr.Location = &location
			}
		case "tags":
			if v != nil {
				var tags map[string]*string
				err = json.Unmarshal(*v, &tags)
				if err != nil {
					return err
				}
				dcrr.Tags = tags
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				dcrr.ID = &ID
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				dcrr.Name = &name
			}
		case "type":
			if v != nil {
				var typeVar string
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				dcrr.Type = &typeVar
			}
		case "etag":
			if v != nil {
				var etag string
				err = json.Unmarshal(*v, &etag)
				if err != nil {
					return err
				}
				dcrr.Etag = &etag
			}
		}
	}

	return nil
}

// DataCollectionRuleResourceListResult a pageable list of resources.
type DataCollectionRuleResourceListResult struct {
	autorest.Response `json:"-"`
	// Value - A list of resources.
	Value *[]DataCollectionRuleResource `json:"value,omitempty"`
	// NextLink - The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// DataCollectionRuleResourceListResultIterator provides access to a complete listing of
// DataCollectionRuleResource values.
type DataCollectionRuleResourceListResultIterator struct {
	i    int
	page DataCollectionRuleResourceListResultPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *DataCollectionRuleResourceListResultIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DataCollectionRuleResourceListResultIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *DataCollectionRuleResourceListResultIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter DataCollectionRuleResourceListResultIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter DataCollectionRuleResourceListResultIterator) Response() DataCollectionRuleResourceListResult {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter DataCollectionRuleResourceListResultIterator) Value() DataCollectionRuleResource {
	if !iter.page.NotDone() {
		return DataCollectionRuleResource{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the DataCollectionRuleResourceListResultIterator type.
func NewDataCollectionRuleResourceListResultIterator(page DataCollectionRuleResourceListResultPage) DataCollectionRuleResourceListResultIterator {
	return DataCollectionRuleResourceListResultIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (dcrrlr DataCollectionRuleResourceListResult) IsEmpty() bool {
	return dcrrlr.Value == nil || len(*dcrrlr.Value) == 0
}

// hasNextLink returns true if the NextLink is not empty.
func (dcrrlr DataCollectionRuleResourceListResult) hasNextLink() bool {
	return dcrrlr.NextLink != nil && len(*dcrrlr.NextLink) != 0
}

// dataCollectionRuleResourceListResultPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (dcrrlr DataCollectionRuleResourceListResult) dataCollectionRuleResourceListResultPreparer(ctx context.Context) (*http.Request, error) {
	if !dcrrlr.hasNextLink() {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(dcrrlr.NextLink)))
}

// DataCollectionRuleResourceListResultPage contains a page of DataCollectionRuleResource values.
type DataCollectionRuleResourceListResultPage struct {
	fn     func(context.Context, DataCollectionRuleResourceListResult) (DataCollectionRuleResourceListResult, error)
	dcrrlr DataCollectionRuleResourceListResult
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *DataCollectionRuleResourceListResultPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DataCollectionRuleResourceListResultPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	for {
		next, err := page.fn(ctx, page.dcrrlr)
		if err != nil {
			return err
		}
		page.dcrrlr = next
		if !next.hasNextLink() || !next.IsEmpty() {
			break
		}
	}
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *DataCollectionRuleResourceListResultPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page DataCollectionRuleResourceListResultPage) NotDone() bool {
	return !page.dcrrlr.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page DataCollectionRuleResourceListResultPage) Response() DataCollectionRuleResourceListResult {
	return page.dcrrlr
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page DataCollectionRuleResourceListResultPage) Values() []DataCollectionRuleResource {
	if page.dcrrlr.IsEmpty() {
		return nil
	}
	return *page.dcrrlr.Value
}

// Creates a new instance of the DataCollectionRuleResourceListResultPage type.
func NewDataCollectionRuleResourceListResultPage(cur DataCollectionRuleResourceListResult, getNextPage func(context.Context, DataCollectionRuleResourceListResult) (DataCollectionRuleResourceListResult, error)) DataCollectionRuleResourceListResultPage {
	return DataCollectionRuleResourceListResultPage{
		fn:     getNextPage,
		dcrrlr: cur,
	}
}

// DataCollectionRuleResourceProperties resource properties.
type DataCollectionRuleResourceProperties struct {
	// Description - Description of the data collection rule.
	Description *string `json:"description,omitempty"`
	// DataSources - The specification of data sources.
	// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
	DataSources *DataCollectionRuleDataSources `json:"dataSources,omitempty"`
	// Destinations - The specification of destinations.
	Destinations *DataCollectionRuleDestinations `json:"destinations,omitempty"`
	// DataFlows - The specification of data flows.
	DataFlows *[]DataFlow `json:"dataFlows,omitempty"`
	// ProvisioningState - READ-ONLY; The resource provisioning state. Possible values include: 'KnownDataCollectionRuleProvisioningStateCreating', 'KnownDataCollectionRuleProvisioningStateUpdating', 'KnownDataCollectionRuleProvisioningStateDeleting', 'KnownDataCollectionRuleProvisioningStateSucceeded', 'KnownDataCollectionRuleProvisioningStateFailed'
	ProvisioningState KnownDataCollectionRuleProvisioningState `json:"provisioningState,omitempty"`
}

// MarshalJSON is the custom marshaler for DataCollectionRuleResourceProperties.
func (dcrr DataCollectionRuleResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if dcrr.Description != nil {
		objectMap["description"] = dcrr.Description
	}
	if dcrr.DataSources != nil {
		objectMap["dataSources"] = dcrr.DataSources
	}
	if dcrr.Destinations != nil {
		objectMap["destinations"] = dcrr.Destinations
	}
	if dcrr.DataFlows != nil {
		objectMap["dataFlows"] = dcrr.DataFlows
	}
	return json.Marshal(objectMap)
}

// DataFlow definition of which streams are sent to which destinations.
type DataFlow struct {
	// Streams - List of streams for this data flow.
	Streams *[]KnownDataFlowStreams `json:"streams,omitempty"`
	// Destinations - List of destinations for this data flow.
	Destinations *[]string `json:"destinations,omitempty"`
}

// DataSourcesSpec specification of data sources that will be collected.
type DataSourcesSpec struct {
	// PerformanceCounters - The list of performance counter data source configurations.
	PerformanceCounters *[]PerfCounterDataSource `json:"performanceCounters,omitempty"`
	// WindowsEventLogs - The list of Windows Event Log data source configurations.
	WindowsEventLogs *[]WindowsEventLogDataSource `json:"windowsEventLogs,omitempty"`
	// Syslog - The list of Syslog data source configurations.
	Syslog *[]SyslogDataSource `json:"syslog,omitempty"`
	// Extensions - The list of Azure VM extension data source configurations.
	Extensions *[]ExtensionDataSource `json:"extensions,omitempty"`
}

// DestinationsSpec specification of destinations that can be used in data flows.
type DestinationsSpec struct {
	// LogAnalytics - List of Log Analytics destinations.
	LogAnalytics *[]LogAnalyticsDestination `json:"logAnalytics,omitempty"`
	// AzureMonitorMetrics - Azure Monitor Metrics destination.
	AzureMonitorMetrics *DestinationsSpecAzureMonitorMetrics `json:"azureMonitorMetrics,omitempty"`
}

// DestinationsSpecAzureMonitorMetrics azure Monitor Metrics destination.
type DestinationsSpecAzureMonitorMetrics struct {
	// Name - A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `json:"name,omitempty"`
}

// ErrorAdditionalInfo additional information for common error response.
type ErrorAdditionalInfo struct {
	// Type - READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty"`
	// Info - READ-ONLY; The additional info.
	Info interface{} `json:"info,omitempty"`
}

// ErrorDetails common error details.
type ErrorDetails struct {
	// Code - READ-ONLY; Error code which can be used to programmatically identify the class of error.
	Code *string `json:"code,omitempty"`
	// Message - READ-ONLY; Describes the error in detail and provides debugging information.
	Message *string `json:"message,omitempty"`
	// Target - READ-ONLY; The target of the particular error (for example, the name of the property in error).
	Target *string `json:"target,omitempty"`
	// Details - READ-ONLY; Additional nested error detail objects.
	Details *[]ErrorDetails `json:"details,omitempty"`
	// AdditionalInfo - READ-ONLY; Additional error information.
	AdditionalInfo *[]ErrorAdditionalInfo `json:"additionalInfo,omitempty"`
}

// ErrorResponse common error response.
type ErrorResponse struct {
	// Error - READ-ONLY; Error details.
	Error *ErrorResponseError `json:"error,omitempty"`
}

// ErrorResponseError error details.
type ErrorResponseError struct {
	// Code - READ-ONLY; Error code which can be used to programmatically identify the class of error.
	Code *string `json:"code,omitempty"`
	// Message - READ-ONLY; Describes the error in detail and provides debugging information.
	Message *string `json:"message,omitempty"`
	// Target - READ-ONLY; The target of the particular error (for example, the name of the property in error).
	Target *string `json:"target,omitempty"`
	// Details - READ-ONLY; Additional nested error detail objects.
	Details *[]ErrorDetails `json:"details,omitempty"`
	// AdditionalInfo - READ-ONLY; Additional error information.
	AdditionalInfo *[]ErrorAdditionalInfo `json:"additionalInfo,omitempty"`
}

// ExtensionDataSource definition of which data will be collected from a separate VM extension that
// integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSource struct {
	// Streams - List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams *[]KnownExtensionDataSourceStreams `json:"streams,omitempty"`
	// ExtensionName - The name of the VM extension.
	ExtensionName *string `json:"extensionName,omitempty"`
	// ExtensionSettings - The extension settings. The format is specific for particular extension.
	ExtensionSettings interface{} `json:"extensionSettings,omitempty"`
	// Name - A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `json:"name,omitempty"`
}

// LogAnalyticsDestination log Analytics destination.
type LogAnalyticsDestination struct {
	// WorkspaceResourceID - The resource ID of the Log Analytics workspace.
	WorkspaceResourceID *string `json:"workspaceResourceId,omitempty"`
	// Name - A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `json:"name,omitempty"`
}

// PerfCounterDataSource definition of which performance counters will be collected and how they will be
// collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSource struct {
	// Streams - List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams *[]KnownPerfCounterDataSourceStreams `json:"streams,omitempty"`
	// ScheduledTransferPeriod - The interval between data uploads (scheduled transfers), rounded up to the nearest minute. Possible values include: 'PT1M', 'PT5M', 'PT15M', 'PT30M', 'PT60M'
	ScheduledTransferPeriod KnownPerfCounterDataSourceScheduledTransferPeriod `json:"scheduledTransferPeriod,omitempty"`
	// SamplingFrequencyInSeconds - The number of seconds between consecutive counter measurements (samples).
	SamplingFrequencyInSeconds *int32 `json:"samplingFrequencyInSeconds,omitempty"`
	// CounterSpecifiers - A list of specifier names of the performance counters you want to collect.
	// Use a wildcard (*) to collect a counter for all instances.
	// To get a list of performance counters on Windows, run the command 'typeperf'.
	CounterSpecifiers *[]string `json:"counterSpecifiers,omitempty"`
	// Name - A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `json:"name,omitempty"`
}

// ResourceForUpdate definition of ARM tracked top level resource properties for update operation.
type ResourceForUpdate struct {
	// Tags - Resource tags.
	Tags map[string]*string `json:"tags"`
}

// MarshalJSON is the custom marshaler for ResourceForUpdate.
func (rfu ResourceForUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if rfu.Tags != nil {
		objectMap["tags"] = rfu.Tags
	}
	return json.Marshal(objectMap)
}

// SyslogDataSource definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSource struct {
	// Streams - List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams *[]KnownSyslogDataSourceStreams `json:"streams,omitempty"`
	// FacilityNames - The list of facility names.
	FacilityNames *[]KnownSyslogDataSourceFacilityNames `json:"facilityNames,omitempty"`
	// LogLevels - The log levels to collect.
	LogLevels *[]KnownSyslogDataSourceLogLevels `json:"logLevels,omitempty"`
	// Name - A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `json:"name,omitempty"`
}

// WindowsEventLogDataSource definition of which Windows Event Log events will be collected and how they
// will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSource struct {
	// Streams - List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams *[]KnownWindowsEventLogDataSourceStreams `json:"streams,omitempty"`
	// ScheduledTransferPeriod - The interval between data uploads (scheduled transfers), rounded up to the nearest minute. Possible values include: 'KnownWindowsEventLogDataSourceScheduledTransferPeriodPT1M', 'KnownWindowsEventLogDataSourceScheduledTransferPeriodPT5M', 'KnownWindowsEventLogDataSourceScheduledTransferPeriodPT15M', 'KnownWindowsEventLogDataSourceScheduledTransferPeriodPT30M', 'KnownWindowsEventLogDataSourceScheduledTransferPeriodPT60M'
	ScheduledTransferPeriod KnownWindowsEventLogDataSourceScheduledTransferPeriod `json:"scheduledTransferPeriod,omitempty"`
	// XPathQueries - A list of Windows Event Log queries in XPATH format.
	XPathQueries *[]string `json:"xPathQueries,omitempty"`
	// Name - A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `json:"name,omitempty"`
}
