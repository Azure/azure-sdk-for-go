package monitorconfiguration

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// AssignmentsClient is the aPIs for workload monitoring
type AssignmentsClient struct {
	BaseClient
}

// NewAssignmentsClient creates an instance of the AssignmentsClient client.
func NewAssignmentsClient(subscriptionID string) AssignmentsClient {
	return NewAssignmentsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewAssignmentsClientWithBaseURI creates an instance of the AssignmentsClient client.
func NewAssignmentsClientWithBaseURI(baseURI string, subscriptionID string) AssignmentsClient {
	return AssignmentsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// CreateOnScope sends the create on scope request.
// Parameters:
// scope - scope for assignment.
// assignmentName - name for monitor configuration assignment.
// assignmentCreateParameters - assignment create parameters.
func (client AssignmentsClient) CreateOnScope(ctx context.Context, scope string, assignmentName string, assignmentCreateParameters AssignmentCreateParameters) (result AssignmentsCreateOnScopeFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AssignmentsClient.CreateOnScope")
		defer func() {
			sc := -1
			if result.Response() != nil {
				sc = result.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreateOnScopePreparer(ctx, scope, assignmentName, assignmentCreateParameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "CreateOnScope", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOnScopeSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "CreateOnScope", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreateOnScopePreparer prepares the CreateOnScope request.
func (client AssignmentsClient) CreateOnScopePreparer(ctx context.Context, scope string, assignmentName string, assignmentCreateParameters AssignmentCreateParameters) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"assignmentName": autorest.Encode("path", assignmentName),
		"scope":          autorest.Encode("path", scope),
	}

	const APIVersion = "2019-07-01-privatepreview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{scope}/providers/Microsoft.MonitorConfiguration/assignments/{assignmentName}", pathParameters),
		autorest.WithJSON(assignmentCreateParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOnScopeSender sends the CreateOnScope request. The method will close the
// http.Response Body if it receives an error.
func (client AssignmentsClient) CreateOnScopeSender(req *http.Request) (future AssignmentsCreateOnScopeFuture, err error) {
	var resp *http.Response
	resp, err = autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if err != nil {
		return
	}
	future.Future, err = azure.NewFutureFromResponse(resp)
	return
}

// CreateOnScopeResponder handles the response to the CreateOnScope request. The method always
// closes the http.Response Body.
func (client AssignmentsClient) CreateOnScopeResponder(resp *http.Response) (result Assignment, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteFromScope sends the delete from scope request.
// Parameters:
// scope - scope for assignment.
// assignmentName - name for monitor configuration assignment.
func (client AssignmentsClient) DeleteFromScope(ctx context.Context, scope string, assignmentName string) (result AssignmentsDeleteFromScopeFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AssignmentsClient.DeleteFromScope")
		defer func() {
			sc := -1
			if result.Response() != nil {
				sc = result.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeleteFromScopePreparer(ctx, scope, assignmentName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "DeleteFromScope", nil, "Failure preparing request")
		return
	}

	result, err = client.DeleteFromScopeSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "DeleteFromScope", result.Response(), "Failure sending request")
		return
	}

	return
}

// DeleteFromScopePreparer prepares the DeleteFromScope request.
func (client AssignmentsClient) DeleteFromScopePreparer(ctx context.Context, scope string, assignmentName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"assignmentName": autorest.Encode("path", assignmentName),
		"scope":          autorest.Encode("path", scope),
	}

	const APIVersion = "2019-07-01-privatepreview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{scope}/providers/Microsoft.MonitorConfiguration/assignments/{assignmentName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteFromScopeSender sends the DeleteFromScope request. The method will close the
// http.Response Body if it receives an error.
func (client AssignmentsClient) DeleteFromScopeSender(req *http.Request) (future AssignmentsDeleteFromScopeFuture, err error) {
	var resp *http.Response
	resp, err = autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if err != nil {
		return
	}
	future.Future, err = azure.NewFutureFromResponse(resp)
	return
}

// DeleteFromScopeResponder handles the response to the DeleteFromScope request. The method always
// closes the http.Response Body.
func (client AssignmentsClient) DeleteFromScopeResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetForScope sends the get for scope request.
// Parameters:
// scope - scope for assignment.
// assignmentName - name for monitor configuration assignment.
func (client AssignmentsClient) GetForScope(ctx context.Context, scope string, assignmentName string) (result Assignment, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AssignmentsClient.GetForScope")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetForScopePreparer(ctx, scope, assignmentName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "GetForScope", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetForScopeSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "GetForScope", resp, "Failure sending request")
		return
	}

	result, err = client.GetForScopeResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "GetForScope", resp, "Failure responding to request")
	}

	return
}

// GetForScopePreparer prepares the GetForScope request.
func (client AssignmentsClient) GetForScopePreparer(ctx context.Context, scope string, assignmentName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"assignmentName": autorest.Encode("path", assignmentName),
		"scope":          autorest.Encode("path", scope),
	}

	const APIVersion = "2019-07-01-privatepreview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{scope}/providers/Microsoft.MonitorConfiguration/assignments/{assignmentName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetForScopeSender sends the GetForScope request. The method will close the
// http.Response Body if it receives an error.
func (client AssignmentsClient) GetForScopeSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetForScopeResponder handles the response to the GetForScope request. The method always
// closes the http.Response Body.
func (client AssignmentsClient) GetForScopeResponder(resp *http.Response) (result Assignment, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByConfiguration sends the list by configuration request.
// Parameters:
// resourceGroupName - the name of the resource group.
// monitorConfigurationName - the name of monitor configuration.
// skiptoken - the page-continuation token to use with a paged version of this API
func (client AssignmentsClient) ListByConfiguration(ctx context.Context, resourceGroupName string, monitorConfigurationName string, skiptoken string) (result AssignmentCollectionPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AssignmentsClient.ListByConfiguration")
		defer func() {
			sc := -1
			if result.ac.Response.Response != nil {
				sc = result.ac.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByConfigurationNextResults
	req, err := client.ListByConfigurationPreparer(ctx, resourceGroupName, monitorConfigurationName, skiptoken)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "ListByConfiguration", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByConfigurationSender(req)
	if err != nil {
		result.ac.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "ListByConfiguration", resp, "Failure sending request")
		return
	}

	result.ac, err = client.ListByConfigurationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "ListByConfiguration", resp, "Failure responding to request")
	}

	return
}

// ListByConfigurationPreparer prepares the ListByConfiguration request.
func (client AssignmentsClient) ListByConfigurationPreparer(ctx context.Context, resourceGroupName string, monitorConfigurationName string, skiptoken string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"monitorConfigurationName": autorest.Encode("path", monitorConfigurationName),
		"resourceGroupName":        autorest.Encode("path", resourceGroupName),
		"subscriptionId":           autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2019-07-01-privatepreview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(skiptoken) > 0 {
		queryParameters["$skiptoken"] = autorest.Encode("query", skiptoken)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MonitorConfiguration/monitorConfigurations/{monitorConfigurationName}/assignments", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByConfigurationSender sends the ListByConfiguration request. The method will close the
// http.Response Body if it receives an error.
func (client AssignmentsClient) ListByConfigurationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// ListByConfigurationResponder handles the response to the ListByConfiguration request. The method always
// closes the http.Response Body.
func (client AssignmentsClient) ListByConfigurationResponder(resp *http.Response) (result AssignmentCollection, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByConfigurationNextResults retrieves the next set of results, if any.
func (client AssignmentsClient) listByConfigurationNextResults(ctx context.Context, lastResults AssignmentCollection) (result AssignmentCollection, err error) {
	req, err := lastResults.assignmentCollectionPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "listByConfigurationNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByConfigurationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "listByConfigurationNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByConfigurationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "listByConfigurationNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByConfigurationComplete enumerates all values, automatically crossing page boundaries as required.
func (client AssignmentsClient) ListByConfigurationComplete(ctx context.Context, resourceGroupName string, monitorConfigurationName string, skiptoken string) (result AssignmentCollectionIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AssignmentsClient.ListByConfiguration")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByConfiguration(ctx, resourceGroupName, monitorConfigurationName, skiptoken)
	return
}

// ListByScope sends the list by scope request.
// Parameters:
// scope - scope for assignment.
// skiptoken - the page-continuation token to use with a paged version of this API
func (client AssignmentsClient) ListByScope(ctx context.Context, scope string, skiptoken string) (result AssignmentCollectionPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AssignmentsClient.ListByScope")
		defer func() {
			sc := -1
			if result.ac.Response.Response != nil {
				sc = result.ac.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByScopeNextResults
	req, err := client.ListByScopePreparer(ctx, scope, skiptoken)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "ListByScope", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByScopeSender(req)
	if err != nil {
		result.ac.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "ListByScope", resp, "Failure sending request")
		return
	}

	result.ac, err = client.ListByScopeResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "ListByScope", resp, "Failure responding to request")
	}

	return
}

// ListByScopePreparer prepares the ListByScope request.
func (client AssignmentsClient) ListByScopePreparer(ctx context.Context, scope string, skiptoken string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"scope": autorest.Encode("path", scope),
	}

	const APIVersion = "2019-07-01-privatepreview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(skiptoken) > 0 {
		queryParameters["$skiptoken"] = autorest.Encode("query", skiptoken)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{scope}/providers/Microsoft.MonitorConfiguration/assignments", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByScopeSender sends the ListByScope request. The method will close the
// http.Response Body if it receives an error.
func (client AssignmentsClient) ListByScopeSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListByScopeResponder handles the response to the ListByScope request. The method always
// closes the http.Response Body.
func (client AssignmentsClient) ListByScopeResponder(resp *http.Response) (result AssignmentCollection, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByScopeNextResults retrieves the next set of results, if any.
func (client AssignmentsClient) listByScopeNextResults(ctx context.Context, lastResults AssignmentCollection) (result AssignmentCollection, err error) {
	req, err := lastResults.assignmentCollectionPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "listByScopeNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByScopeSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "listByScopeNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByScopeResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsClient", "listByScopeNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByScopeComplete enumerates all values, automatically crossing page boundaries as required.
func (client AssignmentsClient) ListByScopeComplete(ctx context.Context, scope string, skiptoken string) (result AssignmentCollectionIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AssignmentsClient.ListByScope")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByScope(ctx, scope, skiptoken)
	return
}
