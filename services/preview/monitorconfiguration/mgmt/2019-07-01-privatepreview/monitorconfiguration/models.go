package monitorconfiguration

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"encoding/json"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/to"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// The package's fully qualified name.
const fqdn = "github.com/Azure/azure-sdk-for-go/services/preview/monitorconfiguration/mgmt/2019-07-01-privatepreview/monitorconfiguration"

// ConfigurationType enumerates the values for configuration type.
type ConfigurationType string

const (
	// BaseOS ...
	BaseOS ConfigurationType = "BaseOS"
)

// PossibleConfigurationTypeValues returns an array of possible values for the ConfigurationType const type.
func PossibleConfigurationTypeValues() []ConfigurationType {
	return []ConfigurationType{BaseOS}
}

// MonitoringEngine enumerates the values for monitoring engine.
type MonitoringEngine string

const (
	// VMHealth ...
	VMHealth MonitoringEngine = "VMHealth"
)

// PossibleMonitoringEngineValues returns an array of possible values for the MonitoringEngine const type.
func PossibleMonitoringEngineValues() []MonitoringEngine {
	return []MonitoringEngine{VMHealth}
}

// Assignment model for Assignments resource type.
type Assignment struct {
	autorest.Response `json:"-"`
	// AssignmentProperties - Assignment properties.
	*AssignmentProperties `json:"properties,omitempty"`
	// ID - READ-ONLY; Fully qualified resource Id for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for Assignment.
func (a Assignment) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if a.AssignmentProperties != nil {
		objectMap["properties"] = a.AssignmentProperties
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for Assignment struct.
func (a *Assignment) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var assignmentProperties AssignmentProperties
				err = json.Unmarshal(*v, &assignmentProperties)
				if err != nil {
					return err
				}
				a.AssignmentProperties = &assignmentProperties
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				a.ID = &ID
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				a.Name = &name
			}
		case "type":
			if v != nil {
				var typeVar string
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				a.Type = &typeVar
			}
		}
	}

	return nil
}

// AssignmentCollection model for collection of assignments.
type AssignmentCollection struct {
	autorest.Response `json:"-"`
	// Value - Collection of assignments.
	Value *[]Assignment `json:"value,omitempty"`
	// NextLink - URL to the next set of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// AssignmentCollectionIterator provides access to a complete listing of Assignment values.
type AssignmentCollectionIterator struct {
	i    int
	page AssignmentCollectionPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *AssignmentCollectionIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AssignmentCollectionIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *AssignmentCollectionIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter AssignmentCollectionIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter AssignmentCollectionIterator) Response() AssignmentCollection {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter AssignmentCollectionIterator) Value() Assignment {
	if !iter.page.NotDone() {
		return Assignment{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the AssignmentCollectionIterator type.
func NewAssignmentCollectionIterator(page AssignmentCollectionPage) AssignmentCollectionIterator {
	return AssignmentCollectionIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (ac AssignmentCollection) IsEmpty() bool {
	return ac.Value == nil || len(*ac.Value) == 0
}

// assignmentCollectionPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (ac AssignmentCollection) assignmentCollectionPreparer(ctx context.Context) (*http.Request, error) {
	if ac.NextLink == nil || len(to.String(ac.NextLink)) < 1 {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(ac.NextLink)))
}

// AssignmentCollectionPage contains a page of Assignment values.
type AssignmentCollectionPage struct {
	fn func(context.Context, AssignmentCollection) (AssignmentCollection, error)
	ac AssignmentCollection
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *AssignmentCollectionPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AssignmentCollectionPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	next, err := page.fn(ctx, page.ac)
	if err != nil {
		return err
	}
	page.ac = next
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *AssignmentCollectionPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page AssignmentCollectionPage) NotDone() bool {
	return !page.ac.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page AssignmentCollectionPage) Response() AssignmentCollection {
	return page.ac
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page AssignmentCollectionPage) Values() []Assignment {
	if page.ac.IsEmpty() {
		return nil
	}
	return *page.ac.Value
}

// Creates a new instance of the AssignmentCollectionPage type.
func NewAssignmentCollectionPage(getNextPage func(context.Context, AssignmentCollection) (AssignmentCollection, error)) AssignmentCollectionPage {
	return AssignmentCollectionPage{fn: getNextPage}
}

// AssignmentCreateParameters model for AssignmentCreateParameters properties.
type AssignmentCreateParameters struct {
	// MonitorConfigurationID - Id of assigned monitor configuration.
	MonitorConfigurationID *string `json:"monitorConfigurationId,omitempty"`
}

// AssignmentProperties model for Assignment properties.
type AssignmentProperties struct {
	// Scope - Scope of assignment.
	Scope *string `json:"scope,omitempty"`
	// MonitorConfigurationID - Id of assigned monitor configuration.
	MonitorConfigurationID *string `json:"monitorConfigurationId,omitempty"`
}

// AssignmentsCreateOnScopeFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type AssignmentsCreateOnScopeFuture struct {
	azure.Future
}

// Result returns the result of the asynchronous operation.
// If the operation has not completed it will return an error.
func (future *AssignmentsCreateOnScopeFuture) Result(client AssignmentsClient) (a Assignment, err error) {
	var done bool
	done, err = future.DoneWithContext(context.Background(), client)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsCreateOnScopeFuture", "Result", future.Response(), "Polling failure")
		return
	}
	if !done {
		err = azure.NewAsyncOpIncompleteError("monitorconfiguration.AssignmentsCreateOnScopeFuture")
		return
	}
	sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if a.Response.Response, err = future.GetResult(sender); err == nil && a.Response.Response.StatusCode != http.StatusNoContent {
		a, err = client.CreateOnScopeResponder(a.Response.Response)
		if err != nil {
			err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsCreateOnScopeFuture", "Result", a.Response.Response, "Failure responding to request")
		}
	}
	return
}

// AssignmentsDeleteFromScopeFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type AssignmentsDeleteFromScopeFuture struct {
	azure.Future
}

// Result returns the result of the asynchronous operation.
// If the operation has not completed it will return an error.
func (future *AssignmentsDeleteFromScopeFuture) Result(client AssignmentsClient) (so SetObject, err error) {
	var done bool
	done, err = future.DoneWithContext(context.Background(), client)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsDeleteFromScopeFuture", "Result", future.Response(), "Polling failure")
		return
	}
	if !done {
		err = azure.NewAsyncOpIncompleteError("monitorconfiguration.AssignmentsDeleteFromScopeFuture")
		return
	}
	sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if so.Response.Response, err = future.GetResult(sender); err == nil && so.Response.Response.StatusCode != http.StatusNoContent {
		so, err = client.DeleteFromScopeResponder(so.Response.Response)
		if err != nil {
			err = autorest.NewErrorWithError(err, "monitorconfiguration.AssignmentsDeleteFromScopeFuture", "Result", so.Response.Response, "Failure responding to request")
		}
	}
	return
}

// CreateOrUpdateParameters the resource model definition for MonitorConfigurationCreateOrUpdateParameters
// resource.
type CreateOrUpdateParameters struct {
	// Tags - Resource tags.
	Tags interface{} `json:"tags,omitempty"`
	// Location - The geo-location where the resource lives.
	Location *string `json:"location,omitempty"`
	// Properties - MonitorConfiguration resource properties.
	*Properties `json:"properties,omitempty"`
}

// MarshalJSON is the custom marshaler for CreateOrUpdateParameters.
func (coup CreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if coup.Tags != nil {
		objectMap["tags"] = coup.Tags
	}
	if coup.Location != nil {
		objectMap["location"] = coup.Location
	}
	if coup.Properties != nil {
		objectMap["properties"] = coup.Properties
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for CreateOrUpdateParameters struct.
func (coup *CreateOrUpdateParameters) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "tags":
			if v != nil {
				var tags interface{}
				err = json.Unmarshal(*v, &tags)
				if err != nil {
					return err
				}
				coup.Tags = tags
			}
		case "location":
			if v != nil {
				var location string
				err = json.Unmarshal(*v, &location)
				if err != nil {
					return err
				}
				coup.Location = &location
			}
		case "properties":
			if v != nil {
				var properties Properties
				err = json.Unmarshal(*v, &properties)
				if err != nil {
					return err
				}
				coup.Properties = &properties
			}
		}
	}

	return nil
}

// HealthRollup model for health rollup.
type HealthRollup struct {
	// Name - Name of the health rollup.
	Name *string `json:"name,omitempty"`
	// Description - Description of the health rollup.
	Description *string `json:"description,omitempty"`
	// Properties - Health rollup properties.
	Properties interface{} `json:"properties,omitempty"`
}

// HealthRule model for health rule.
type HealthRule struct {
	// Name - Name of the health rule.
	Name *string `json:"name,omitempty"`
	// Description - Description of the health rule.
	Description *string `json:"description,omitempty"`
	// Properties - Health rule properties.
	Properties interface{} `json:"properties,omitempty"`
}

// MonitorConfiguration the resource model definition for MonitorConfiguration resource.
type MonitorConfiguration struct {
	autorest.Response `json:"-"`
	// Properties - MonitorConfiguration resource properties.
	*Properties `json:"properties,omitempty"`
	// Tags - Resource tags.
	Tags interface{} `json:"tags,omitempty"`
	// Location - The geo-location where the resource lives.
	Location *string `json:"location,omitempty"`
	// ID - READ-ONLY; Fully qualified resource Id for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for MonitorConfiguration.
func (mc MonitorConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if mc.Properties != nil {
		objectMap["properties"] = mc.Properties
	}
	if mc.Tags != nil {
		objectMap["tags"] = mc.Tags
	}
	if mc.Location != nil {
		objectMap["location"] = mc.Location
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for MonitorConfiguration struct.
func (mc *MonitorConfiguration) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var properties Properties
				err = json.Unmarshal(*v, &properties)
				if err != nil {
					return err
				}
				mc.Properties = &properties
			}
		case "tags":
			if v != nil {
				var tags interface{}
				err = json.Unmarshal(*v, &tags)
				if err != nil {
					return err
				}
				mc.Tags = tags
			}
		case "location":
			if v != nil {
				var location string
				err = json.Unmarshal(*v, &location)
				if err != nil {
					return err
				}
				mc.Location = &location
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				mc.ID = &ID
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				mc.Name = &name
			}
		case "type":
			if v != nil {
				var typeVar string
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				mc.Type = &typeVar
			}
		}
	}

	return nil
}

// MonitorConfigurationsCollectionIteratorType provides access to a complete listing of
// MonitorConfiguration values.
type MonitorConfigurationsCollectionIteratorType struct {
	i    int
	page MonitorConfigurationsCollectionPageType
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *MonitorConfigurationsCollectionIteratorType) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MonitorConfigurationsCollectionIteratorType.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *MonitorConfigurationsCollectionIteratorType) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter MonitorConfigurationsCollectionIteratorType) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter MonitorConfigurationsCollectionIteratorType) Response() MonitorConfigurationsCollectionType {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter MonitorConfigurationsCollectionIteratorType) Value() MonitorConfiguration {
	if !iter.page.NotDone() {
		return MonitorConfiguration{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the MonitorConfigurationsCollectionIteratorType type.
func NewMonitorConfigurationsCollectionIteratorType(page MonitorConfigurationsCollectionPageType) MonitorConfigurationsCollectionIteratorType {
	return MonitorConfigurationsCollectionIteratorType{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (mcct MonitorConfigurationsCollectionType) IsEmpty() bool {
	return mcct.Value == nil || len(*mcct.Value) == 0
}

// monitorConfigurationsCollectionTypePreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (mcct MonitorConfigurationsCollectionType) monitorConfigurationsCollectionTypePreparer(ctx context.Context) (*http.Request, error) {
	if mcct.NextLink == nil || len(to.String(mcct.NextLink)) < 1 {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(mcct.NextLink)))
}

// MonitorConfigurationsCollectionPageType contains a page of MonitorConfiguration values.
type MonitorConfigurationsCollectionPageType struct {
	fn   func(context.Context, MonitorConfigurationsCollectionType) (MonitorConfigurationsCollectionType, error)
	mcct MonitorConfigurationsCollectionType
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *MonitorConfigurationsCollectionPageType) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MonitorConfigurationsCollectionPageType.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	next, err := page.fn(ctx, page.mcct)
	if err != nil {
		return err
	}
	page.mcct = next
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *MonitorConfigurationsCollectionPageType) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page MonitorConfigurationsCollectionPageType) NotDone() bool {
	return !page.mcct.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page MonitorConfigurationsCollectionPageType) Response() MonitorConfigurationsCollectionType {
	return page.mcct
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page MonitorConfigurationsCollectionPageType) Values() []MonitorConfiguration {
	if page.mcct.IsEmpty() {
		return nil
	}
	return *page.mcct.Value
}

// Creates a new instance of the MonitorConfigurationsCollectionPageType type.
func NewMonitorConfigurationsCollectionPageType(getNextPage func(context.Context, MonitorConfigurationsCollectionType) (MonitorConfigurationsCollectionType, error)) MonitorConfigurationsCollectionPageType {
	return MonitorConfigurationsCollectionPageType{fn: getNextPage}
}

// MonitorConfigurationsCollectionType model for collection of MonitorConfiguration resources.
type MonitorConfigurationsCollectionType struct {
	autorest.Response `json:"-"`
	// Value - Collection of MonitorConfiguration resources.
	Value *[]MonitorConfiguration `json:"value,omitempty"`
	// NextLink - URL to the next set of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// MonitorConfigurationsCreateOrUpdateFutureType an abstraction for monitoring and retrieving the results
// of a long-running operation.
type MonitorConfigurationsCreateOrUpdateFutureType struct {
	azure.Future
}

// Result returns the result of the asynchronous operation.
// If the operation has not completed it will return an error.
func (future *MonitorConfigurationsCreateOrUpdateFutureType) Result(client MonitorConfigurationsClient) (mc MonitorConfiguration, err error) {
	var done bool
	done, err = future.DoneWithContext(context.Background(), client)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.MonitorConfigurationsCreateOrUpdateFutureType", "Result", future.Response(), "Polling failure")
		return
	}
	if !done {
		err = azure.NewAsyncOpIncompleteError("monitorconfiguration.MonitorConfigurationsCreateOrUpdateFutureType")
		return
	}
	sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if mc.Response.Response, err = future.GetResult(sender); err == nil && mc.Response.Response.StatusCode != http.StatusNoContent {
		mc, err = client.CreateOrUpdateResponder(mc.Response.Response)
		if err != nil {
			err = autorest.NewErrorWithError(err, "monitorconfiguration.MonitorConfigurationsCreateOrUpdateFutureType", "Result", mc.Response.Response, "Failure responding to request")
		}
	}
	return
}

// MonitorConfigurationsUpdateFutureType an abstraction for monitoring and retrieving the results of a
// long-running operation.
type MonitorConfigurationsUpdateFutureType struct {
	azure.Future
}

// Result returns the result of the asynchronous operation.
// If the operation has not completed it will return an error.
func (future *MonitorConfigurationsUpdateFutureType) Result(client MonitorConfigurationsClient) (mc MonitorConfiguration, err error) {
	var done bool
	done, err = future.DoneWithContext(context.Background(), client)
	if err != nil {
		err = autorest.NewErrorWithError(err, "monitorconfiguration.MonitorConfigurationsUpdateFutureType", "Result", future.Response(), "Polling failure")
		return
	}
	if !done {
		err = azure.NewAsyncOpIncompleteError("monitorconfiguration.MonitorConfigurationsUpdateFutureType")
		return
	}
	sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if mc.Response.Response, err = future.GetResult(sender); err == nil && mc.Response.Response.StatusCode != http.StatusNoContent {
		mc, err = client.UpdateResponder(mc.Response.Response)
		if err != nil {
			err = autorest.NewErrorWithError(err, "monitorconfiguration.MonitorConfigurationsUpdateFutureType", "Result", mc.Response.Response, "Failure responding to request")
		}
	}
	return
}

// Operation operation supported by the resource provider.
type Operation struct {
	// Display - The properties of the resource operation.
	Display *OperationProperties `json:"display,omitempty"`
	// Name - The name of the resource operation.
	Name *string `json:"name,omitempty"`
	// Origin - The origin of the operation.
	Origin *string `json:"origin,omitempty"`
}

// OperationListResult container for a list of operations supported by the resource provider.
type OperationListResult struct {
	autorest.Response `json:"-"`
	// Value - List of operations.
	Value *[]Operation `json:"value,omitempty"`
	// NextLink - URL to the next set of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// OperationListResultIterator provides access to a complete listing of Operation values.
type OperationListResultIterator struct {
	i    int
	page OperationListResultPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *OperationListResultIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OperationListResultIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *OperationListResultIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter OperationListResultIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter OperationListResultIterator) Response() OperationListResult {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter OperationListResultIterator) Value() Operation {
	if !iter.page.NotDone() {
		return Operation{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the OperationListResultIterator type.
func NewOperationListResultIterator(page OperationListResultPage) OperationListResultIterator {
	return OperationListResultIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (olr OperationListResult) IsEmpty() bool {
	return olr.Value == nil || len(*olr.Value) == 0
}

// operationListResultPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (olr OperationListResult) operationListResultPreparer(ctx context.Context) (*http.Request, error) {
	if olr.NextLink == nil || len(to.String(olr.NextLink)) < 1 {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(olr.NextLink)))
}

// OperationListResultPage contains a page of Operation values.
type OperationListResultPage struct {
	fn  func(context.Context, OperationListResult) (OperationListResult, error)
	olr OperationListResult
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *OperationListResultPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OperationListResultPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	next, err := page.fn(ctx, page.olr)
	if err != nil {
		return err
	}
	page.olr = next
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *OperationListResultPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page OperationListResultPage) NotDone() bool {
	return !page.olr.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page OperationListResultPage) Response() OperationListResult {
	return page.olr
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page OperationListResultPage) Values() []Operation {
	if page.olr.IsEmpty() {
		return nil
	}
	return *page.olr.Value
}

// Creates a new instance of the OperationListResultPage type.
func NewOperationListResultPage(getNextPage func(context.Context, OperationListResult) (OperationListResult, error)) OperationListResultPage {
	return OperationListResultPage{fn: getNextPage}
}

// OperationProperties properties of an operation supported by the resource provider.
type OperationProperties struct {
	// Description - The description of the resource provider.
	Description *string `json:"description,omitempty"`
	// Operation - This operation name.
	Operation *string `json:"operation,omitempty"`
	// Provider - The provider name.
	Provider *string `json:"provider,omitempty"`
	// Resource - The resource name.
	Resource *string `json:"resource,omitempty"`
}

// Properties model for properties of MonitorConfiguration resource.
type Properties struct {
	// SchemaVersion - Schema version.
	SchemaVersion *string `json:"schemaVersion,omitempty"`
	// TargetResourceTypes - Target resource types.
	TargetResourceTypes *[]string `json:"targetResourceTypes,omitempty"`
	// ConfigurationType - Type of monitor configuration. Possible values include: 'BaseOS'
	ConfigurationType ConfigurationType `json:"configurationType,omitempty"`
	// MonitoringEngine - Service handling the configuration. Possible values include: 'VMHealth'
	MonitoringEngine MonitoringEngine `json:"monitoringEngine,omitempty"`
	// HealthRules - Collection of health rules.
	HealthRules *[]HealthRule `json:"healthRules,omitempty"`
	// HealthRollups - Collection of health rollups.
	HealthRollups *[]HealthRollup `json:"healthRollups,omitempty"`
}

// SetObject ...
type SetObject struct {
	autorest.Response `json:"-"`
	Value             interface{} `json:"value,omitempty"`
}
