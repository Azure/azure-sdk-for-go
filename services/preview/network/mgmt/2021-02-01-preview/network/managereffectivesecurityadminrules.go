package network

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// ManagerEffectiveSecurityAdminRulesClient is the network Client
type ManagerEffectiveSecurityAdminRulesClient struct {
	BaseClient
}

// NewManagerEffectiveSecurityAdminRulesClient creates an instance of the ManagerEffectiveSecurityAdminRulesClient
// client.
func NewManagerEffectiveSecurityAdminRulesClient(subscriptionID string) ManagerEffectiveSecurityAdminRulesClient {
	return NewManagerEffectiveSecurityAdminRulesClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewManagerEffectiveSecurityAdminRulesClientWithBaseURI creates an instance of the
// ManagerEffectiveSecurityAdminRulesClient client using a custom endpoint.  Use this when interacting with an Azure
// cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewManagerEffectiveSecurityAdminRulesClientWithBaseURI(baseURI string, subscriptionID string) ManagerEffectiveSecurityAdminRulesClient {
	return ManagerEffectiveSecurityAdminRulesClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// List list all effective security admin rules applied on a virtual network.
// Parameters:
// parameters - parameters supplied to list correct page.
// resourceGroupName - the name of the resource group.
// virtualNetworkName - the name of the virtual network.
func (client ManagerEffectiveSecurityAdminRulesClient) List(ctx context.Context, parameters QueryRequestOptions, resourceGroupName string, virtualNetworkName string) (result ManagerEffectiveSecurityAdminRulesListResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ManagerEffectiveSecurityAdminRulesClient.List")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListPreparer(ctx, parameters, resourceGroupName, virtualNetworkName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "network.ManagerEffectiveSecurityAdminRulesClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "network.ManagerEffectiveSecurityAdminRulesClient", "List", resp, "Failure sending request")
		return
	}

	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "network.ManagerEffectiveSecurityAdminRulesClient", "List", resp, "Failure responding to request")
		return
	}

	return
}

// ListPreparer prepares the List request.
func (client ManagerEffectiveSecurityAdminRulesClient) ListPreparer(ctx context.Context, parameters QueryRequestOptions, resourceGroupName string, virtualNetworkName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
		"virtualNetworkName": autorest.Encode("path", virtualNetworkName),
	}

	const APIVersion = "2021-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/listNetworkManagerEffectiveSecurityAdminRules", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client ManagerEffectiveSecurityAdminRulesClient) ListSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client ManagerEffectiveSecurityAdminRulesClient) ListResponder(resp *http.Response) (result ManagerEffectiveSecurityAdminRulesListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
