package policyinsights

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// AttestationsClient is the client for the Attestations methods of the Policyinsights service.
type AttestationsClient struct {
	BaseClient
}

// NewAttestationsClient creates an instance of the AttestationsClient client.
func NewAttestationsClient(subscriptionID2 string) AttestationsClient {
	return NewAttestationsClientWithBaseURI(DefaultBaseURI, subscriptionID2)
}

// NewAttestationsClientWithBaseURI creates an instance of the AttestationsClient client using a custom endpoint.  Use
// this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewAttestationsClientWithBaseURI(baseURI string, subscriptionID2 string) AttestationsClient {
	return AttestationsClient{NewWithBaseURI(baseURI, subscriptionID2)}
}

// CreateOrUpdateAtResource creates or updates an attestation at resource scope.
// Parameters:
// resourceID - resource ID.
// attestationName - the name of the attestation.
// parameters - the attestation parameters.
func (client AttestationsClient) CreateOrUpdateAtResource(ctx context.Context, resourceID string, attestationName string, parameters Attestation) (result AttestationsCreateOrUpdateAtResourceFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestationsClient.CreateOrUpdateAtResource")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: parameters,
			Constraints: []validation.Constraint{{Target: "parameters.AttestationProperties", Name: validation.Null, Rule: true,
				Chain: []validation.Constraint{{Target: "parameters.AttestationProperties.PolicyAssignmentID", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("policyinsights.AttestationsClient", "CreateOrUpdateAtResource", err.Error())
	}

	req, err := client.CreateOrUpdateAtResourcePreparer(ctx, resourceID, attestationName, parameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "CreateOrUpdateAtResource", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOrUpdateAtResourceSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "CreateOrUpdateAtResource", nil, "Failure sending request")
		return
	}

	return
}

// CreateOrUpdateAtResourcePreparer prepares the CreateOrUpdateAtResource request.
func (client AttestationsClient) CreateOrUpdateAtResourcePreparer(ctx context.Context, resourceID string, attestationName string, parameters Attestation) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"attestationName": autorest.Encode("path", attestationName),
		"resourceId":      resourceID,
	}

	const APIVersion = "2021-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	parameters.SystemData = nil
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateAtResourceSender sends the CreateOrUpdateAtResource request. The method will close the
// http.Response Body if it receives an error.
func (client AttestationsClient) CreateOrUpdateAtResourceSender(req *http.Request) (future AttestationsCreateOrUpdateAtResourceFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateOrUpdateAtResourceResponder handles the response to the CreateOrUpdateAtResource request. The method always
// closes the http.Response Body.
func (client AttestationsClient) CreateOrUpdateAtResourceResponder(resp *http.Response) (result Attestation, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateOrUpdateAtResourceGroup creates or updates an attestation at resource group scope.
// Parameters:
// subscriptionID - the ID of the target subscription.
// resourceGroupName - the name of the resource group. The name is case insensitive.
// attestationName - the name of the attestation.
// parameters - the attestation parameters.
func (client AttestationsClient) CreateOrUpdateAtResourceGroup(ctx context.Context, subscriptionID string, resourceGroupName string, attestationName string, parameters Attestation) (result AttestationsCreateOrUpdateAtResourceGroupFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestationsClient.CreateOrUpdateAtResourceGroup")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: subscriptionID,
			Constraints: []validation.Constraint{{Target: "subscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
				{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
		{TargetValue: parameters,
			Constraints: []validation.Constraint{{Target: "parameters.AttestationProperties", Name: validation.Null, Rule: true,
				Chain: []validation.Constraint{{Target: "parameters.AttestationProperties.PolicyAssignmentID", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("policyinsights.AttestationsClient", "CreateOrUpdateAtResourceGroup", err.Error())
	}

	req, err := client.CreateOrUpdateAtResourceGroupPreparer(ctx, subscriptionID, resourceGroupName, attestationName, parameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "CreateOrUpdateAtResourceGroup", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOrUpdateAtResourceGroupSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "CreateOrUpdateAtResourceGroup", nil, "Failure sending request")
		return
	}

	return
}

// CreateOrUpdateAtResourceGroupPreparer prepares the CreateOrUpdateAtResourceGroup request.
func (client AttestationsClient) CreateOrUpdateAtResourceGroupPreparer(ctx context.Context, subscriptionID string, resourceGroupName string, attestationName string, parameters Attestation) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"attestationName":   autorest.Encode("path", attestationName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2021-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	parameters.SystemData = nil
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateAtResourceGroupSender sends the CreateOrUpdateAtResourceGroup request. The method will close the
// http.Response Body if it receives an error.
func (client AttestationsClient) CreateOrUpdateAtResourceGroupSender(req *http.Request) (future AttestationsCreateOrUpdateAtResourceGroupFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateOrUpdateAtResourceGroupResponder handles the response to the CreateOrUpdateAtResourceGroup request. The method always
// closes the http.Response Body.
func (client AttestationsClient) CreateOrUpdateAtResourceGroupResponder(resp *http.Response) (result Attestation, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateOrUpdateAtSubscription creates or updates an attestation at subscription scope.
// Parameters:
// subscriptionID - the ID of the target subscription.
// attestationName - the name of the attestation.
// parameters - the attestation parameters.
func (client AttestationsClient) CreateOrUpdateAtSubscription(ctx context.Context, subscriptionID string, attestationName string, parameters Attestation) (result AttestationsCreateOrUpdateAtSubscriptionFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestationsClient.CreateOrUpdateAtSubscription")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: subscriptionID,
			Constraints: []validation.Constraint{{Target: "subscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: parameters,
			Constraints: []validation.Constraint{{Target: "parameters.AttestationProperties", Name: validation.Null, Rule: true,
				Chain: []validation.Constraint{{Target: "parameters.AttestationProperties.PolicyAssignmentID", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("policyinsights.AttestationsClient", "CreateOrUpdateAtSubscription", err.Error())
	}

	req, err := client.CreateOrUpdateAtSubscriptionPreparer(ctx, subscriptionID, attestationName, parameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "CreateOrUpdateAtSubscription", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOrUpdateAtSubscriptionSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "CreateOrUpdateAtSubscription", nil, "Failure sending request")
		return
	}

	return
}

// CreateOrUpdateAtSubscriptionPreparer prepares the CreateOrUpdateAtSubscription request.
func (client AttestationsClient) CreateOrUpdateAtSubscriptionPreparer(ctx context.Context, subscriptionID string, attestationName string, parameters Attestation) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"attestationName": autorest.Encode("path", attestationName),
		"subscriptionId":  autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2021-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	parameters.SystemData = nil
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateAtSubscriptionSender sends the CreateOrUpdateAtSubscription request. The method will close the
// http.Response Body if it receives an error.
func (client AttestationsClient) CreateOrUpdateAtSubscriptionSender(req *http.Request) (future AttestationsCreateOrUpdateAtSubscriptionFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateOrUpdateAtSubscriptionResponder handles the response to the CreateOrUpdateAtSubscription request. The method always
// closes the http.Response Body.
func (client AttestationsClient) CreateOrUpdateAtSubscriptionResponder(resp *http.Response) (result Attestation, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteAtResource deletes an existing attestation at individual resource scope.
// Parameters:
// resourceID - resource ID.
// attestationName - the name of the attestation.
func (client AttestationsClient) DeleteAtResource(ctx context.Context, resourceID string, attestationName string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestationsClient.DeleteAtResource")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeleteAtResourcePreparer(ctx, resourceID, attestationName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "DeleteAtResource", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteAtResourceSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "DeleteAtResource", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteAtResourceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "DeleteAtResource", resp, "Failure responding to request")
		return
	}

	return
}

// DeleteAtResourcePreparer prepares the DeleteAtResource request.
func (client AttestationsClient) DeleteAtResourcePreparer(ctx context.Context, resourceID string, attestationName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"attestationName": autorest.Encode("path", attestationName),
		"resourceId":      resourceID,
	}

	const APIVersion = "2021-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteAtResourceSender sends the DeleteAtResource request. The method will close the
// http.Response Body if it receives an error.
func (client AttestationsClient) DeleteAtResourceSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteAtResourceResponder handles the response to the DeleteAtResource request. The method always
// closes the http.Response Body.
func (client AttestationsClient) DeleteAtResourceResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DeleteAtResourceGroup deletes an existing attestation at resource group scope.
// Parameters:
// subscriptionID - the ID of the target subscription.
// resourceGroupName - the name of the resource group. The name is case insensitive.
// attestationName - the name of the attestation.
func (client AttestationsClient) DeleteAtResourceGroup(ctx context.Context, subscriptionID string, resourceGroupName string, attestationName string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestationsClient.DeleteAtResourceGroup")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: subscriptionID,
			Constraints: []validation.Constraint{{Target: "subscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
				{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("policyinsights.AttestationsClient", "DeleteAtResourceGroup", err.Error())
	}

	req, err := client.DeleteAtResourceGroupPreparer(ctx, subscriptionID, resourceGroupName, attestationName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "DeleteAtResourceGroup", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteAtResourceGroupSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "DeleteAtResourceGroup", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteAtResourceGroupResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "DeleteAtResourceGroup", resp, "Failure responding to request")
		return
	}

	return
}

// DeleteAtResourceGroupPreparer prepares the DeleteAtResourceGroup request.
func (client AttestationsClient) DeleteAtResourceGroupPreparer(ctx context.Context, subscriptionID string, resourceGroupName string, attestationName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"attestationName":   autorest.Encode("path", attestationName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2021-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteAtResourceGroupSender sends the DeleteAtResourceGroup request. The method will close the
// http.Response Body if it receives an error.
func (client AttestationsClient) DeleteAtResourceGroupSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteAtResourceGroupResponder handles the response to the DeleteAtResourceGroup request. The method always
// closes the http.Response Body.
func (client AttestationsClient) DeleteAtResourceGroupResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DeleteAtSubscription deletes an existing attestation at subscription scope.
// Parameters:
// subscriptionID - the ID of the target subscription.
// attestationName - the name of the attestation.
func (client AttestationsClient) DeleteAtSubscription(ctx context.Context, subscriptionID string, attestationName string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestationsClient.DeleteAtSubscription")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: subscriptionID,
			Constraints: []validation.Constraint{{Target: "subscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("policyinsights.AttestationsClient", "DeleteAtSubscription", err.Error())
	}

	req, err := client.DeleteAtSubscriptionPreparer(ctx, subscriptionID, attestationName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "DeleteAtSubscription", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteAtSubscriptionSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "DeleteAtSubscription", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteAtSubscriptionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "DeleteAtSubscription", resp, "Failure responding to request")
		return
	}

	return
}

// DeleteAtSubscriptionPreparer prepares the DeleteAtSubscription request.
func (client AttestationsClient) DeleteAtSubscriptionPreparer(ctx context.Context, subscriptionID string, attestationName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"attestationName": autorest.Encode("path", attestationName),
		"subscriptionId":  autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2021-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteAtSubscriptionSender sends the DeleteAtSubscription request. The method will close the
// http.Response Body if it receives an error.
func (client AttestationsClient) DeleteAtSubscriptionSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteAtSubscriptionResponder handles the response to the DeleteAtSubscription request. The method always
// closes the http.Response Body.
func (client AttestationsClient) DeleteAtSubscriptionResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetAtResource gets an existing attestation at resource scope.
// Parameters:
// resourceID - resource ID.
// attestationName - the name of the attestation.
func (client AttestationsClient) GetAtResource(ctx context.Context, resourceID string, attestationName string) (result Attestation, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestationsClient.GetAtResource")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetAtResourcePreparer(ctx, resourceID, attestationName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "GetAtResource", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAtResourceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "GetAtResource", resp, "Failure sending request")
		return
	}

	result, err = client.GetAtResourceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "GetAtResource", resp, "Failure responding to request")
		return
	}

	return
}

// GetAtResourcePreparer prepares the GetAtResource request.
func (client AttestationsClient) GetAtResourcePreparer(ctx context.Context, resourceID string, attestationName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"attestationName": autorest.Encode("path", attestationName),
		"resourceId":      resourceID,
	}

	const APIVersion = "2021-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAtResourceSender sends the GetAtResource request. The method will close the
// http.Response Body if it receives an error.
func (client AttestationsClient) GetAtResourceSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAtResourceResponder handles the response to the GetAtResource request. The method always
// closes the http.Response Body.
func (client AttestationsClient) GetAtResourceResponder(resp *http.Response) (result Attestation, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAtResourceGroup gets an existing attestation at resource group scope.
// Parameters:
// subscriptionID - the ID of the target subscription.
// resourceGroupName - the name of the resource group. The name is case insensitive.
// attestationName - the name of the attestation.
func (client AttestationsClient) GetAtResourceGroup(ctx context.Context, subscriptionID string, resourceGroupName string, attestationName string) (result Attestation, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestationsClient.GetAtResourceGroup")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: subscriptionID,
			Constraints: []validation.Constraint{{Target: "subscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
				{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("policyinsights.AttestationsClient", "GetAtResourceGroup", err.Error())
	}

	req, err := client.GetAtResourceGroupPreparer(ctx, subscriptionID, resourceGroupName, attestationName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "GetAtResourceGroup", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAtResourceGroupSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "GetAtResourceGroup", resp, "Failure sending request")
		return
	}

	result, err = client.GetAtResourceGroupResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "GetAtResourceGroup", resp, "Failure responding to request")
		return
	}

	return
}

// GetAtResourceGroupPreparer prepares the GetAtResourceGroup request.
func (client AttestationsClient) GetAtResourceGroupPreparer(ctx context.Context, subscriptionID string, resourceGroupName string, attestationName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"attestationName":   autorest.Encode("path", attestationName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2021-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAtResourceGroupSender sends the GetAtResourceGroup request. The method will close the
// http.Response Body if it receives an error.
func (client AttestationsClient) GetAtResourceGroupSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetAtResourceGroupResponder handles the response to the GetAtResourceGroup request. The method always
// closes the http.Response Body.
func (client AttestationsClient) GetAtResourceGroupResponder(resp *http.Response) (result Attestation, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAtSubscription gets an existing attestation at subscription scope.
// Parameters:
// subscriptionID - the ID of the target subscription.
// attestationName - the name of the attestation.
func (client AttestationsClient) GetAtSubscription(ctx context.Context, subscriptionID string, attestationName string) (result Attestation, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestationsClient.GetAtSubscription")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: subscriptionID,
			Constraints: []validation.Constraint{{Target: "subscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("policyinsights.AttestationsClient", "GetAtSubscription", err.Error())
	}

	req, err := client.GetAtSubscriptionPreparer(ctx, subscriptionID, attestationName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "GetAtSubscription", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAtSubscriptionSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "GetAtSubscription", resp, "Failure sending request")
		return
	}

	result, err = client.GetAtSubscriptionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "GetAtSubscription", resp, "Failure responding to request")
		return
	}

	return
}

// GetAtSubscriptionPreparer prepares the GetAtSubscription request.
func (client AttestationsClient) GetAtSubscriptionPreparer(ctx context.Context, subscriptionID string, attestationName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"attestationName": autorest.Encode("path", attestationName),
		"subscriptionId":  autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2021-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAtSubscriptionSender sends the GetAtSubscription request. The method will close the
// http.Response Body if it receives an error.
func (client AttestationsClient) GetAtSubscriptionSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetAtSubscriptionResponder handles the response to the GetAtSubscription request. The method always
// closes the http.Response Body.
func (client AttestationsClient) GetAtSubscriptionResponder(resp *http.Response) (result Attestation, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListForResource gets all attestations for a resource.
// Parameters:
// resourceID - resource ID.
// top - maximum number of records to return.
// filter - oData filter expression.
func (client AttestationsClient) ListForResource(ctx context.Context, resourceID string, top *int32, filter string) (result AttestationListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestationsClient.ListForResource")
		defer func() {
			sc := -1
			if result.alr.Response.Response != nil {
				sc = result.alr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: top,
			Constraints: []validation.Constraint{{Target: "top", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "top", Name: validation.InclusiveMinimum, Rule: int64(0), Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("policyinsights.AttestationsClient", "ListForResource", err.Error())
	}

	result.fn = client.listForResourceNextResults
	req, err := client.ListForResourcePreparer(ctx, resourceID, top, filter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "ListForResource", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListForResourceSender(req)
	if err != nil {
		result.alr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "ListForResource", resp, "Failure sending request")
		return
	}

	result.alr, err = client.ListForResourceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "ListForResource", resp, "Failure responding to request")
		return
	}
	if result.alr.hasNextLink() && result.alr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListForResourcePreparer prepares the ListForResource request.
func (client AttestationsClient) ListForResourcePreparer(ctx context.Context, resourceID string, top *int32, filter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceId": resourceID,
	}

	const APIVersion = "2021-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if top != nil {
		queryParameters["$top"] = autorest.Encode("query", *top)
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{resourceId}/providers/Microsoft.PolicyInsights/attestations", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListForResourceSender sends the ListForResource request. The method will close the
// http.Response Body if it receives an error.
func (client AttestationsClient) ListForResourceSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListForResourceResponder handles the response to the ListForResource request. The method always
// closes the http.Response Body.
func (client AttestationsClient) ListForResourceResponder(resp *http.Response) (result AttestationListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listForResourceNextResults retrieves the next set of results, if any.
func (client AttestationsClient) listForResourceNextResults(ctx context.Context, lastResults AttestationListResult) (result AttestationListResult, err error) {
	req, err := lastResults.attestationListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "listForResourceNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListForResourceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "listForResourceNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListForResourceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "listForResourceNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListForResourceComplete enumerates all values, automatically crossing page boundaries as required.
func (client AttestationsClient) ListForResourceComplete(ctx context.Context, resourceID string, top *int32, filter string) (result AttestationListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestationsClient.ListForResource")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListForResource(ctx, resourceID, top, filter)
	return
}

// ListForResourceGroup gets all attestations for the resource group.
// Parameters:
// subscriptionID - the ID of the target subscription.
// resourceGroupName - the name of the resource group. The name is case insensitive.
// top - maximum number of records to return.
// filter - oData filter expression.
func (client AttestationsClient) ListForResourceGroup(ctx context.Context, subscriptionID string, resourceGroupName string, top *int32, filter string) (result AttestationListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestationsClient.ListForResourceGroup")
		defer func() {
			sc := -1
			if result.alr.Response.Response != nil {
				sc = result.alr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: subscriptionID,
			Constraints: []validation.Constraint{{Target: "subscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
				{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
		{TargetValue: top,
			Constraints: []validation.Constraint{{Target: "top", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "top", Name: validation.InclusiveMinimum, Rule: int64(0), Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("policyinsights.AttestationsClient", "ListForResourceGroup", err.Error())
	}

	result.fn = client.listForResourceGroupNextResults
	req, err := client.ListForResourceGroupPreparer(ctx, subscriptionID, resourceGroupName, top, filter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "ListForResourceGroup", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListForResourceGroupSender(req)
	if err != nil {
		result.alr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "ListForResourceGroup", resp, "Failure sending request")
		return
	}

	result.alr, err = client.ListForResourceGroupResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "ListForResourceGroup", resp, "Failure responding to request")
		return
	}
	if result.alr.hasNextLink() && result.alr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListForResourceGroupPreparer prepares the ListForResourceGroup request.
func (client AttestationsClient) ListForResourceGroupPreparer(ctx context.Context, subscriptionID string, resourceGroupName string, top *int32, filter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2021-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if top != nil {
		queryParameters["$top"] = autorest.Encode("query", *top)
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListForResourceGroupSender sends the ListForResourceGroup request. The method will close the
// http.Response Body if it receives an error.
func (client AttestationsClient) ListForResourceGroupSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListForResourceGroupResponder handles the response to the ListForResourceGroup request. The method always
// closes the http.Response Body.
func (client AttestationsClient) ListForResourceGroupResponder(resp *http.Response) (result AttestationListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listForResourceGroupNextResults retrieves the next set of results, if any.
func (client AttestationsClient) listForResourceGroupNextResults(ctx context.Context, lastResults AttestationListResult) (result AttestationListResult, err error) {
	req, err := lastResults.attestationListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "listForResourceGroupNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListForResourceGroupSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "listForResourceGroupNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListForResourceGroupResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "listForResourceGroupNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListForResourceGroupComplete enumerates all values, automatically crossing page boundaries as required.
func (client AttestationsClient) ListForResourceGroupComplete(ctx context.Context, subscriptionID string, resourceGroupName string, top *int32, filter string) (result AttestationListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestationsClient.ListForResourceGroup")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListForResourceGroup(ctx, subscriptionID, resourceGroupName, top, filter)
	return
}

// ListForSubscription gets all attestations for the subscription.
// Parameters:
// subscriptionID - the ID of the target subscription.
// top - maximum number of records to return.
// filter - oData filter expression.
func (client AttestationsClient) ListForSubscription(ctx context.Context, subscriptionID string, top *int32, filter string) (result AttestationListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestationsClient.ListForSubscription")
		defer func() {
			sc := -1
			if result.alr.Response.Response != nil {
				sc = result.alr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: subscriptionID,
			Constraints: []validation.Constraint{{Target: "subscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: top,
			Constraints: []validation.Constraint{{Target: "top", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "top", Name: validation.InclusiveMinimum, Rule: int64(0), Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("policyinsights.AttestationsClient", "ListForSubscription", err.Error())
	}

	result.fn = client.listForSubscriptionNextResults
	req, err := client.ListForSubscriptionPreparer(ctx, subscriptionID, top, filter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "ListForSubscription", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListForSubscriptionSender(req)
	if err != nil {
		result.alr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "ListForSubscription", resp, "Failure sending request")
		return
	}

	result.alr, err = client.ListForSubscriptionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "ListForSubscription", resp, "Failure responding to request")
		return
	}
	if result.alr.hasNextLink() && result.alr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListForSubscriptionPreparer prepares the ListForSubscription request.
func (client AttestationsClient) ListForSubscriptionPreparer(ctx context.Context, subscriptionID string, top *int32, filter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"subscriptionId": autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2021-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if top != nil {
		queryParameters["$top"] = autorest.Encode("query", *top)
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListForSubscriptionSender sends the ListForSubscription request. The method will close the
// http.Response Body if it receives an error.
func (client AttestationsClient) ListForSubscriptionSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListForSubscriptionResponder handles the response to the ListForSubscription request. The method always
// closes the http.Response Body.
func (client AttestationsClient) ListForSubscriptionResponder(resp *http.Response) (result AttestationListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listForSubscriptionNextResults retrieves the next set of results, if any.
func (client AttestationsClient) listForSubscriptionNextResults(ctx context.Context, lastResults AttestationListResult) (result AttestationListResult, err error) {
	req, err := lastResults.attestationListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "listForSubscriptionNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListForSubscriptionSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "listForSubscriptionNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListForSubscriptionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "policyinsights.AttestationsClient", "listForSubscriptionNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListForSubscriptionComplete enumerates all values, automatically crossing page boundaries as required.
func (client AttestationsClient) ListForSubscriptionComplete(ctx context.Context, subscriptionID string, top *int32, filter string) (result AttestationListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestationsClient.ListForSubscription")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListForSubscription(ctx, subscriptionID, top, filter)
	return
}
