package qnamaker

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// PrebuiltClient is the an API for QnAMaker Service
type PrebuiltClient struct {
	BaseClient
}

// NewPrebuiltClient creates an instance of the PrebuiltClient client.
func NewPrebuiltClient(endpoint string) PrebuiltClient {
	return PrebuiltClient{New(endpoint)}
}

// GenerateAnswer sends the generate answer request.
// Parameters:
// prebuiltGenerateAnswerPayload - post body of the request.
// stringIndexType - (Optional) Specifies the method used to interpret string offsets.  Defaults to Text
// Elements (Graphemes) according to Unicode v8.0.0.
func (client PrebuiltClient) GenerateAnswer(ctx context.Context, prebuiltGenerateAnswerPayload PrebuiltQuery, stringIndexType string) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PrebuiltClient.GenerateAnswer")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: prebuiltGenerateAnswerPayload,
			Constraints: []validation.Constraint{{Target: "prebuiltGenerateAnswerPayload.Question", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "prebuiltGenerateAnswerPayload.Documents", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "prebuiltGenerateAnswerPayload.Language", Name: validation.Null, Rule: false,
					Chain: []validation.Constraint{{Target: "prebuiltGenerateAnswerPayload.Language", Name: validation.MaxLength, Rule: 100, Chain: nil},
						{Target: "prebuiltGenerateAnswerPayload.Language", Name: validation.MinLength, Rule: 2, Chain: nil},
					}}}}}); err != nil {
		return result, validation.NewError("qnamaker.PrebuiltClient", "GenerateAnswer", err.Error())
	}

	req, err := client.GenerateAnswerPreparer(ctx, prebuiltGenerateAnswerPayload, stringIndexType)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.PrebuiltClient", "GenerateAnswer", nil, "Failure preparing request")
		return
	}

	resp, err := client.GenerateAnswerSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "qnamaker.PrebuiltClient", "GenerateAnswer", resp, "Failure sending request")
		return
	}

	result, err = client.GenerateAnswerResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.PrebuiltClient", "GenerateAnswer", resp, "Failure responding to request")
		return
	}

	return
}

// GenerateAnswerPreparer prepares the GenerateAnswer request.
func (client PrebuiltClient) GenerateAnswerPreparer(ctx context.Context, prebuiltGenerateAnswerPayload PrebuiltQuery, stringIndexType string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	queryParameters := map[string]interface{}{}
	if len(string(stringIndexType)) > 0 {
		queryParameters["stringIndexType"] = autorest.Encode("query", stringIndexType)
	} else {
		queryParameters["stringIndexType"] = autorest.Encode("query", "TextElements_v8")
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/qnamaker/v5.0-preview.2", urlParameters),
		autorest.WithPath("/generateAnswer"),
		autorest.WithJSON(prebuiltGenerateAnswerPayload),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GenerateAnswerSender sends the GenerateAnswer request. The method will close the
// http.Response Body if it receives an error.
func (client PrebuiltClient) GenerateAnswerSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GenerateAnswerResponder handles the response to the GenerateAnswer request. The method always
// closes the http.Response Body.
func (client PrebuiltClient) GenerateAnswerResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
