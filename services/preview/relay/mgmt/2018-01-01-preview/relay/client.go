// Package relay implements the Azure ARM Relay service API version 2018-01-01-preview.
//
// Use these API to manage Azure Relay resources through Azure Resource Manager.
package relay

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

const (
	// DefaultBaseURI is the default URI used for the service Relay
	DefaultBaseURI = "https://management.azure.com"
)

// BaseClient is the base client for Relay.
type BaseClient struct {
	autorest.Client
	BaseURI        string
	SubscriptionID string
	OperationType  string
}

// New creates an instance of the BaseClient client.
func New(subscriptionID string, operationType string) BaseClient {
	return NewWithBaseURI(DefaultBaseURI, subscriptionID, operationType)
}

// NewWithBaseURI creates an instance of the BaseClient client using a custom endpoint.  Use this when interacting with
// an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewWithBaseURI(baseURI string, subscriptionID string, operationType string) BaseClient {
	return BaseClient{
		Client:         autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI:        baseURI,
		SubscriptionID: subscriptionID,
		OperationType:  operationType,
	}
}

// PrivateLinkResourcesGet gets the private link resources supported for the Relay namespace
// Parameters:
// resourceGroupName - name of the Resource group within the Azure subscription.
// namespaceName - the namespace name
func (client BaseClient) PrivateLinkResourcesGet(ctx context.Context, resourceGroupName string, namespaceName string) (result PrivateLinkResourceListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.PrivateLinkResourcesGet")
		defer func() {
			sc := -1
			if result.plrlr.Response.Response != nil {
				sc = result.plrlr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: namespaceName,
			Constraints: []validation.Constraint{{Target: "namespaceName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "namespaceName", Name: validation.MinLength, Rule: 6, Chain: nil}}}}); err != nil {
		return result, validation.NewError("relay.BaseClient", "PrivateLinkResourcesGet", err.Error())
	}

	result.fn = client.privateLinkResourcesGetNextResults
	req, err := client.PrivateLinkResourcesGetPreparer(ctx, resourceGroupName, namespaceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "relay.BaseClient", "PrivateLinkResourcesGet", nil, "Failure preparing request")
		return
	}

	resp, err := client.PrivateLinkResourcesGetSender(req)
	if err != nil {
		result.plrlr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "relay.BaseClient", "PrivateLinkResourcesGet", resp, "Failure sending request")
		return
	}

	result.plrlr, err = client.PrivateLinkResourcesGetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "relay.BaseClient", "PrivateLinkResourcesGet", resp, "Failure responding to request")
		return
	}
	if result.plrlr.hasNextLink() && result.plrlr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// PrivateLinkResourcesGetPreparer prepares the PrivateLinkResourcesGet request.
func (client BaseClient) PrivateLinkResourcesGetPreparer(ctx context.Context, resourceGroupName string, namespaceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"namespaceName":     autorest.Encode("path", namespaceName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-01-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/privateLinkResources", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PrivateLinkResourcesGetSender sends the PrivateLinkResourcesGet request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) PrivateLinkResourcesGetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// PrivateLinkResourcesGetResponder handles the response to the PrivateLinkResourcesGet request. The method always
// closes the http.Response Body.
func (client BaseClient) PrivateLinkResourcesGetResponder(resp *http.Response) (result PrivateLinkResourceListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// privateLinkResourcesGetNextResults retrieves the next set of results, if any.
func (client BaseClient) privateLinkResourcesGetNextResults(ctx context.Context, lastResults PrivateLinkResourceListResult) (result PrivateLinkResourceListResult, err error) {
	req, err := lastResults.privateLinkResourceListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "relay.BaseClient", "privateLinkResourcesGetNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.PrivateLinkResourcesGetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "relay.BaseClient", "privateLinkResourcesGetNextResults", resp, "Failure sending next results request")
	}
	result, err = client.PrivateLinkResourcesGetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "relay.BaseClient", "privateLinkResourcesGetNextResults", resp, "Failure responding to next results request")
	}
	return
}

// PrivateLinkResourcesGetComplete enumerates all values, automatically crossing page boundaries as required.
func (client BaseClient) PrivateLinkResourcesGetComplete(ctx context.Context, resourceGroupName string, namespaceName string) (result PrivateLinkResourceListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.PrivateLinkResourcesGet")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.PrivateLinkResourcesGet(ctx, resourceGroupName, namespaceName)
	return
}
