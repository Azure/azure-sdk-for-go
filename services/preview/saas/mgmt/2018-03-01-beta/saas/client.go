// Package saas implements the Azure ARM Saas service API version 2018-03-01-beta.
//
// REST APIs for Azure Marketplace SaaS Offers
package saas

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

const (
	// DefaultBaseURI is the default URI used for the service Saas
	DefaultBaseURI = "https://management.azure.com"
)

// BaseClient is the base client for Saas.
type BaseClient struct {
	autorest.Client
	BaseURI        string
	SubscriptionID string
}

// New creates an instance of the BaseClient client.
func New(subscriptionID string) BaseClient {
	return NewWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewWithBaseURI creates an instance of the BaseClient client using a custom endpoint.  Use this when interacting with
// an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewWithBaseURI(baseURI string, subscriptionID string) BaseClient {
	return BaseClient{
		Client:         autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI:        baseURI,
		SubscriptionID: subscriptionID,
	}
}

// ResourceListAccessToken gets the ISV access token for a SaaS resource.
// Parameters:
// resourceID - the Saas resource ID. This is a GUID-formatted string (e.g.
// 00000000-0000-0000-0000-000000000000)
func (client BaseClient) ResourceListAccessToken(ctx context.Context, resourceID string) (result AccessTokenResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.ResourceListAccessToken")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ResourceListAccessTokenPreparer(ctx, resourceID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.BaseClient", "ResourceListAccessToken", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResourceListAccessTokenSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "saas.BaseClient", "ResourceListAccessToken", resp, "Failure sending request")
		return
	}

	result, err = client.ResourceListAccessTokenResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.BaseClient", "ResourceListAccessToken", resp, "Failure responding to request")
		return
	}

	return
}

// ResourceListAccessTokenPreparer prepares the ResourceListAccessToken request.
func (client BaseClient) ResourceListAccessTokenPreparer(ctx context.Context, resourceID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceId": autorest.Encode("path", resourceID),
	}

	const APIVersion = "2018-03-01-beta"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.SaaS/saasresources/{resourceId}/listAccessToken", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ResourceListAccessTokenSender sends the ResourceListAccessToken request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) ResourceListAccessTokenSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResourceListAccessTokenResponder handles the response to the ResourceListAccessToken request. The method always
// closes the http.Response Body.
func (client BaseClient) ResourceListAccessTokenResponder(resp *http.Response) (result AccessTokenResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
