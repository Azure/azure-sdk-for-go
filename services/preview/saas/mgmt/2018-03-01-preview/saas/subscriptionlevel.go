package saas

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// SubscriptionLevelClient is the REST APIs for Azure Marketplace SaaS Offers
type SubscriptionLevelClient struct {
	BaseClient
}

// NewSubscriptionLevelClient creates an instance of the SubscriptionLevelClient client.
func NewSubscriptionLevelClient(subscriptionID string) SubscriptionLevelClient {
	return NewSubscriptionLevelClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewSubscriptionLevelClientWithBaseURI creates an instance of the SubscriptionLevelClient client using a custom
// endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure
// stack).
func NewSubscriptionLevelClientWithBaseURI(baseURI string, subscriptionID string) SubscriptionLevelClient {
	return SubscriptionLevelClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// CreateOrUpdate creates or updates a SaaS resource.
// Parameters:
// resourceGroupName - the name of the resource group.
// resourceName - the name of the resource.
// parameters - parameters supplied to the create or update subscription level saas operation.
func (client SubscriptionLevelClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, resourceName string, parameters ResourceCreation) (result SubscriptionLevelCreateOrUpdateFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SubscriptionLevelClient.CreateOrUpdate")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreateOrUpdatePreparer(ctx, resourceGroupName, resourceName, parameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "CreateOrUpdate", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOrUpdateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "CreateOrUpdate", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreateOrUpdatePreparer prepares the CreateOrUpdate request.
func (client SubscriptionLevelClient) CreateOrUpdatePreparer(ctx context.Context, resourceGroupName string, resourceName string, parameters ResourceCreation) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-03-01-beta"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	parameters.ID = nil
	parameters.Type = nil
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SaaS/resources/{resourceName}", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateSender sends the CreateOrUpdate request. The method will close the
// http.Response Body if it receives an error.
func (client SubscriptionLevelClient) CreateOrUpdateSender(req *http.Request) (future SubscriptionLevelCreateOrUpdateFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always
// closes the http.Response Body.
func (client SubscriptionLevelClient) CreateOrUpdateResponder(resp *http.Response) (result Resource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete deletes the specified SaaS.
// Parameters:
// resourceGroupName - the name of the resource group.
// resourceName - the name of the resource.
func (client SubscriptionLevelClient) Delete(ctx context.Context, resourceGroupName string, resourceName string) (result SubscriptionLevelDeleteFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SubscriptionLevelClient.Delete")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeletePreparer(ctx, resourceGroupName, resourceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "Delete", nil, "Failure preparing request")
		return
	}

	result, err = client.DeleteSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "Delete", result.Response(), "Failure sending request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client SubscriptionLevelClient) DeletePreparer(ctx context.Context, resourceGroupName string, resourceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-03-01-beta"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SaaS/resources/{resourceName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client SubscriptionLevelClient) DeleteSender(req *http.Request) (future SubscriptionLevelDeleteFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client SubscriptionLevelClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get gets information about the specified Subscription Level SaaS.
// Parameters:
// resourceGroupName - the name of the resource group.
// resourceName - the name of the resource.
func (client SubscriptionLevelClient) Get(ctx context.Context, resourceGroupName string, resourceName string) (result Resource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SubscriptionLevelClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, resourceGroupName, resourceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client SubscriptionLevelClient) GetPreparer(ctx context.Context, resourceGroupName string, resourceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-03-01-beta"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SaaS/resources/{resourceName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client SubscriptionLevelClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client SubscriptionLevelClient) GetResponder(resp *http.Response) (result Resource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListAccessToken gets the ISV access token for a specified Subscription Level SaaS.
// Parameters:
// resourceGroupName - the name of the resource group.
// resourceName - the name of the resource.
func (client SubscriptionLevelClient) ListAccessToken(ctx context.Context, resourceGroupName string, resourceName string) (result AccessTokenResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SubscriptionLevelClient.ListAccessToken")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListAccessTokenPreparer(ctx, resourceGroupName, resourceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "ListAccessToken", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListAccessTokenSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "ListAccessToken", resp, "Failure sending request")
		return
	}

	result, err = client.ListAccessTokenResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "ListAccessToken", resp, "Failure responding to request")
		return
	}

	return
}

// ListAccessTokenPreparer prepares the ListAccessToken request.
func (client SubscriptionLevelClient) ListAccessTokenPreparer(ctx context.Context, resourceGroupName string, resourceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-03-01-beta"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SaaS/resources/{resourceName}/listAccessToken", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListAccessTokenSender sends the ListAccessToken request. The method will close the
// http.Response Body if it receives an error.
func (client SubscriptionLevelClient) ListAccessTokenSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListAccessTokenResponder handles the response to the ListAccessToken request. The method always
// closes the http.Response Body.
func (client SubscriptionLevelClient) ListAccessTokenResponder(resp *http.Response) (result AccessTokenResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByAzureSubscription gets information about all the Subscription Level SaaS in a certain Azure subscription.
func (client SubscriptionLevelClient) ListByAzureSubscription(ctx context.Context) (result ResourceResponseWithContinuationPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SubscriptionLevelClient.ListByAzureSubscription")
		defer func() {
			sc := -1
			if result.rrwc.Response.Response != nil {
				sc = result.rrwc.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByAzureSubscriptionNextResults
	req, err := client.ListByAzureSubscriptionPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "ListByAzureSubscription", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByAzureSubscriptionSender(req)
	if err != nil {
		result.rrwc.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "ListByAzureSubscription", resp, "Failure sending request")
		return
	}

	result.rrwc, err = client.ListByAzureSubscriptionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "ListByAzureSubscription", resp, "Failure responding to request")
		return
	}
	if result.rrwc.hasNextLink() && result.rrwc.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByAzureSubscriptionPreparer prepares the ListByAzureSubscription request.
func (client SubscriptionLevelClient) ListByAzureSubscriptionPreparer(ctx context.Context) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-03-01-beta"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.SaaS/resources", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByAzureSubscriptionSender sends the ListByAzureSubscription request. The method will close the
// http.Response Body if it receives an error.
func (client SubscriptionLevelClient) ListByAzureSubscriptionSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByAzureSubscriptionResponder handles the response to the ListByAzureSubscription request. The method always
// closes the http.Response Body.
func (client SubscriptionLevelClient) ListByAzureSubscriptionResponder(resp *http.Response) (result ResourceResponseWithContinuation, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByAzureSubscriptionNextResults retrieves the next set of results, if any.
func (client SubscriptionLevelClient) listByAzureSubscriptionNextResults(ctx context.Context, lastResults ResourceResponseWithContinuation) (result ResourceResponseWithContinuation, err error) {
	req, err := lastResults.resourceResponseWithContinuationPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "listByAzureSubscriptionNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByAzureSubscriptionSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "listByAzureSubscriptionNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByAzureSubscriptionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "listByAzureSubscriptionNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByAzureSubscriptionComplete enumerates all values, automatically crossing page boundaries as required.
func (client SubscriptionLevelClient) ListByAzureSubscriptionComplete(ctx context.Context) (result ResourceResponseWithContinuationIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SubscriptionLevelClient.ListByAzureSubscription")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByAzureSubscription(ctx)
	return
}

// ListByResourceGroup gets information about all the Subscription Level SaaS in a certain resource group.
// Parameters:
// resourceGroupName - the name of the resource group.
func (client SubscriptionLevelClient) ListByResourceGroup(ctx context.Context, resourceGroupName string) (result ResourceResponseWithContinuationPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SubscriptionLevelClient.ListByResourceGroup")
		defer func() {
			sc := -1
			if result.rrwc.Response.Response != nil {
				sc = result.rrwc.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByResourceGroupNextResults
	req, err := client.ListByResourceGroupPreparer(ctx, resourceGroupName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "ListByResourceGroup", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByResourceGroupSender(req)
	if err != nil {
		result.rrwc.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "ListByResourceGroup", resp, "Failure sending request")
		return
	}

	result.rrwc, err = client.ListByResourceGroupResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "ListByResourceGroup", resp, "Failure responding to request")
		return
	}
	if result.rrwc.hasNextLink() && result.rrwc.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByResourceGroupPreparer prepares the ListByResourceGroup request.
func (client SubscriptionLevelClient) ListByResourceGroupPreparer(ctx context.Context, resourceGroupName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-03-01-beta"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SaaS/resources", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByResourceGroupSender sends the ListByResourceGroup request. The method will close the
// http.Response Body if it receives an error.
func (client SubscriptionLevelClient) ListByResourceGroupSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByResourceGroupResponder handles the response to the ListByResourceGroup request. The method always
// closes the http.Response Body.
func (client SubscriptionLevelClient) ListByResourceGroupResponder(resp *http.Response) (result ResourceResponseWithContinuation, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByResourceGroupNextResults retrieves the next set of results, if any.
func (client SubscriptionLevelClient) listByResourceGroupNextResults(ctx context.Context, lastResults ResourceResponseWithContinuation) (result ResourceResponseWithContinuation, err error) {
	req, err := lastResults.resourceResponseWithContinuationPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "listByResourceGroupNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByResourceGroupSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "listByResourceGroupNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByResourceGroupResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "listByResourceGroupNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByResourceGroupComplete enumerates all values, automatically crossing page boundaries as required.
func (client SubscriptionLevelClient) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (result ResourceResponseWithContinuationIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SubscriptionLevelClient.ListByResourceGroup")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByResourceGroup(ctx, resourceGroupName)
	return
}

// MoveResources move a specified Subscription Level SaaS.
// Parameters:
// resourceGroupName - the name of the resource group.
// moveResourceParameter - object that represents the resources to move.
func (client SubscriptionLevelClient) MoveResources(ctx context.Context, resourceGroupName string, moveResourceParameter MoveResource) (result SubscriptionLevelMoveResourcesFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SubscriptionLevelClient.MoveResources")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.MoveResourcesPreparer(ctx, resourceGroupName, moveResourceParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "MoveResources", nil, "Failure preparing request")
		return
	}

	result, err = client.MoveResourcesSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "MoveResources", result.Response(), "Failure sending request")
		return
	}

	return
}

// MoveResourcesPreparer prepares the MoveResources request.
func (client SubscriptionLevelClient) MoveResourcesPreparer(ctx context.Context, resourceGroupName string, moveResourceParameter MoveResource) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-03-01-beta"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources", pathParameters),
		autorest.WithJSON(moveResourceParameter),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// MoveResourcesSender sends the MoveResources request. The method will close the
// http.Response Body if it receives an error.
func (client SubscriptionLevelClient) MoveResourcesSender(req *http.Request) (future SubscriptionLevelMoveResourcesFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// MoveResourcesResponder handles the response to the MoveResources request. The method always
// closes the http.Response Body.
func (client SubscriptionLevelClient) MoveResourcesResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Update updates a SaaS Subscription Level resource.
// Parameters:
// resourceGroupName - the name of the resource group.
// resourceName - the name of the resource.
// parameters - parameters supplied to the update saas operation.
func (client SubscriptionLevelClient) Update(ctx context.Context, resourceGroupName string, resourceName string, parameters ResourceCreation) (result SubscriptionLevelUpdateFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SubscriptionLevelClient.Update")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UpdatePreparer(ctx, resourceGroupName, resourceName, parameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "Update", nil, "Failure preparing request")
		return
	}

	result, err = client.UpdateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "Update", result.Response(), "Failure sending request")
		return
	}

	return
}

// UpdatePreparer prepares the Update request.
func (client SubscriptionLevelClient) UpdatePreparer(ctx context.Context, resourceGroupName string, resourceName string, parameters ResourceCreation) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-03-01-beta"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	parameters.ID = nil
	parameters.Type = nil
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SaaS/resources/{resourceName}", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateSender sends the Update request. The method will close the
// http.Response Body if it receives an error.
func (client SubscriptionLevelClient) UpdateSender(req *http.Request) (future SubscriptionLevelUpdateFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// UpdateResponder handles the response to the Update request. The method always
// closes the http.Response Body.
func (client SubscriptionLevelClient) UpdateResponder(resp *http.Response) (result Resource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// UpdateToUnsubscribed unsubscribe from a specified Subscription Level SaaS.
// Parameters:
// resourceGroupName - the name of the resource group.
// resourceName - the name of the resource.
// parameters - parameters supplied to unsubscribe saas operation.
func (client SubscriptionLevelClient) UpdateToUnsubscribed(ctx context.Context, resourceGroupName string, resourceName string, parameters DeleteOptions) (result SubscriptionLevelUpdateToUnsubscribedFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SubscriptionLevelClient.UpdateToUnsubscribed")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UpdateToUnsubscribedPreparer(ctx, resourceGroupName, resourceName, parameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "UpdateToUnsubscribed", nil, "Failure preparing request")
		return
	}

	result, err = client.UpdateToUnsubscribedSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "UpdateToUnsubscribed", result.Response(), "Failure sending request")
		return
	}

	return
}

// UpdateToUnsubscribedPreparer prepares the UpdateToUnsubscribed request.
func (client SubscriptionLevelClient) UpdateToUnsubscribedPreparer(ctx context.Context, resourceGroupName string, resourceName string, parameters DeleteOptions) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-03-01-beta"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SaaS/resources/{resourceName}/unsubscribe", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateToUnsubscribedSender sends the UpdateToUnsubscribed request. The method will close the
// http.Response Body if it receives an error.
func (client SubscriptionLevelClient) UpdateToUnsubscribedSender(req *http.Request) (future SubscriptionLevelUpdateToUnsubscribedFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// UpdateToUnsubscribedResponder handles the response to the UpdateToUnsubscribed request. The method always
// closes the http.Response Body.
func (client SubscriptionLevelClient) UpdateToUnsubscribedResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ValidateMoveResources validate whether a specified Subscription Level SaaS can be moved.
// Parameters:
// resourceGroupName - the name of the resource group.
// moveResourceParameter - object that represents the resources to move.
func (client SubscriptionLevelClient) ValidateMoveResources(ctx context.Context, resourceGroupName string, moveResourceParameter MoveResource) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SubscriptionLevelClient.ValidateMoveResources")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ValidateMoveResourcesPreparer(ctx, resourceGroupName, moveResourceParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "ValidateMoveResources", nil, "Failure preparing request")
		return
	}

	resp, err := client.ValidateMoveResourcesSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "ValidateMoveResources", resp, "Failure sending request")
		return
	}

	result, err = client.ValidateMoveResourcesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "saas.SubscriptionLevelClient", "ValidateMoveResources", resp, "Failure responding to request")
		return
	}

	return
}

// ValidateMoveResourcesPreparer prepares the ValidateMoveResources request.
func (client SubscriptionLevelClient) ValidateMoveResourcesPreparer(ctx context.Context, resourceGroupName string, moveResourceParameter MoveResource) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-03-01-beta"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/validateMoveResources", pathParameters),
		autorest.WithJSON(moveResourceParameter),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ValidateMoveResourcesSender sends the ValidateMoveResources request. The method will close the
// http.Response Body if it receives an error.
func (client SubscriptionLevelClient) ValidateMoveResourcesSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ValidateMoveResourcesResponder handles the response to the ValidateMoveResources request. The method always
// closes the http.Response Body.
func (client SubscriptionLevelClient) ValidateMoveResourcesResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
