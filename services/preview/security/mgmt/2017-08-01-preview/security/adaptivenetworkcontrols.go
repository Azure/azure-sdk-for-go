package security

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// AdaptiveNetworkControlsClient is the API spec for Microsoft.Security (Azure Security Center) resource provider
type AdaptiveNetworkControlsClient struct {
	BaseClient
}

// NewAdaptiveNetworkControlsClient creates an instance of the AdaptiveNetworkControlsClient client.
func NewAdaptiveNetworkControlsClient(subscriptionID string, ascLocation string) AdaptiveNetworkControlsClient {
	return NewAdaptiveNetworkControlsClientWithBaseURI(DefaultBaseURI, subscriptionID, ascLocation)
}

// NewAdaptiveNetworkControlsClientWithBaseURI creates an instance of the AdaptiveNetworkControlsClient client.
func NewAdaptiveNetworkControlsClientWithBaseURI(baseURI string, subscriptionID string, ascLocation string) AdaptiveNetworkControlsClient {
	return AdaptiveNetworkControlsClient{NewWithBaseURI(baseURI, subscriptionID, ascLocation)}
}

// Enforce enforces the given rules on the NSG(s) listed in the request
// Parameters:
// resourceGroupName - the name of the resource group within the user's subscription. The name is case
// insensitive.
// extendedResourceProvider - resource provider name of the base resource
// extendedResourceType - type of the base resource
// extendedResourceName - the name of the base resource
// adaptiveNetworkControlsResourceName - the name of the Adaptive Network Controls resource.
func (client AdaptiveNetworkControlsClient) Enforce(ctx context.Context, resourceGroupName string, extendedResourceProvider string, extendedResourceType string, extendedResourceName string, adaptiveNetworkControlsResourceName string) (result AdaptiveNetworkControlsEnforceFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AdaptiveNetworkControlsClient.Enforce")
		defer func() {
			sc := -1
			if result.Response() != nil {
				sc = result.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.Pattern, Rule: `^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$`, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
				{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("security.AdaptiveNetworkControlsClient", "Enforce", err.Error())
	}

	req, err := client.EnforcePreparer(ctx, resourceGroupName, extendedResourceProvider, extendedResourceType, extendedResourceName, adaptiveNetworkControlsResourceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "security.AdaptiveNetworkControlsClient", "Enforce", nil, "Failure preparing request")
		return
	}

	result, err = client.EnforceSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "security.AdaptiveNetworkControlsClient", "Enforce", result.Response(), "Failure sending request")
		return
	}

	return
}

// EnforcePreparer prepares the Enforce request.
func (client AdaptiveNetworkControlsClient) EnforcePreparer(ctx context.Context, resourceGroupName string, extendedResourceProvider string, extendedResourceType string, extendedResourceName string, adaptiveNetworkControlsResourceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"adaptiveNetworkControlsEnforceAction": autorest.Encode("path", "enforce"),
		"adaptiveNetworkControlsResourceName":  autorest.Encode("path", adaptiveNetworkControlsResourceName),
		"extendedResourceName":                 autorest.Encode("path", extendedResourceName),
		"extendedResourceProvider":             autorest.Encode("path", extendedResourceProvider),
		"extendedResourceType":                 autorest.Encode("path", extendedResourceType),
		"resourceGroupName":                    autorest.Encode("path", resourceGroupName),
		"subscriptionId":                       autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2015-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{extendedResourceProvider}/{extendedResourceType}/{extendedResourceName}/providers/Microsoft.Security/adaptiveNetworkControls/{adaptiveNetworkControlsResourceName}/{adaptiveNetworkControlsEnforceAction}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// EnforceSender sends the Enforce request. The method will close the
// http.Response Body if it receives an error.
func (client AdaptiveNetworkControlsClient) EnforceSender(req *http.Request) (future AdaptiveNetworkControlsEnforceFuture, err error) {
	var resp *http.Response
	resp, err = autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	future.Future, err = azure.NewFutureFromResponse(resp)
	return
}

// EnforceResponder handles the response to the Enforce request. The method always
// closes the http.Response Body.
func (client AdaptiveNetworkControlsClient) EnforceResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get gets the Adaptive Network Controls resource matching the given resource ID
// Parameters:
// resourceGroupName - the name of the resource group within the user's subscription. The name is case
// insensitive.
// extendedResourceProvider - resource provider name of the base resource
// extendedResourceType - type of the base resource
// extendedResourceName - the name of the base resource
// adaptiveNetworkControlsResourceName - the name of the Adaptive Network Controls resource.
func (client AdaptiveNetworkControlsClient) Get(ctx context.Context, resourceGroupName string, extendedResourceProvider string, extendedResourceType string, extendedResourceName string, adaptiveNetworkControlsResourceName string) (result AdaptiveNetworkControls, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AdaptiveNetworkControlsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.Pattern, Rule: `^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$`, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
				{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("security.AdaptiveNetworkControlsClient", "Get", err.Error())
	}

	req, err := client.GetPreparer(ctx, resourceGroupName, extendedResourceProvider, extendedResourceType, extendedResourceName, adaptiveNetworkControlsResourceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "security.AdaptiveNetworkControlsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "security.AdaptiveNetworkControlsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "security.AdaptiveNetworkControlsClient", "Get", resp, "Failure responding to request")
	}

	return
}

// GetPreparer prepares the Get request.
func (client AdaptiveNetworkControlsClient) GetPreparer(ctx context.Context, resourceGroupName string, extendedResourceProvider string, extendedResourceType string, extendedResourceName string, adaptiveNetworkControlsResourceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"adaptiveNetworkControlsResourceName": autorest.Encode("path", adaptiveNetworkControlsResourceName),
		"extendedResourceName":                autorest.Encode("path", extendedResourceName),
		"extendedResourceProvider":            autorest.Encode("path", extendedResourceProvider),
		"extendedResourceType":                autorest.Encode("path", extendedResourceType),
		"resourceGroupName":                   autorest.Encode("path", resourceGroupName),
		"subscriptionId":                      autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2015-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{extendedResourceProvider}/{extendedResourceType}/{extendedResourceName}/providers/Microsoft.Security/adaptiveNetworkControls/{adaptiveNetworkControlsResourceName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client AdaptiveNetworkControlsClient) GetSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client AdaptiveNetworkControlsClient) GetResponder(resp *http.Response) (result AdaptiveNetworkControls, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByExtendedResource gets a list of Adaptive Network Controls resources in scope of the given extended resource.
// Parameters:
// resourceGroupName - the name of the resource group within the user's subscription. The name is case
// insensitive.
// extendedResourceProvider - resource provider name of the base resource
// extendedResourceType - type of the base resource
// extendedResourceName - the name of the base resource
func (client AdaptiveNetworkControlsClient) ListByExtendedResource(ctx context.Context, resourceGroupName string, extendedResourceProvider string, extendedResourceType string, extendedResourceName string) (result AdaptiveNetworkControlsListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AdaptiveNetworkControlsClient.ListByExtendedResource")
		defer func() {
			sc := -1
			if result.ancl.Response.Response != nil {
				sc = result.ancl.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.Pattern, Rule: `^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$`, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
				{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("security.AdaptiveNetworkControlsClient", "ListByExtendedResource", err.Error())
	}

	result.fn = client.listByExtendedResourceNextResults
	req, err := client.ListByExtendedResourcePreparer(ctx, resourceGroupName, extendedResourceProvider, extendedResourceType, extendedResourceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "security.AdaptiveNetworkControlsClient", "ListByExtendedResource", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByExtendedResourceSender(req)
	if err != nil {
		result.ancl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "security.AdaptiveNetworkControlsClient", "ListByExtendedResource", resp, "Failure sending request")
		return
	}

	result.ancl, err = client.ListByExtendedResourceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "security.AdaptiveNetworkControlsClient", "ListByExtendedResource", resp, "Failure responding to request")
	}

	return
}

// ListByExtendedResourcePreparer prepares the ListByExtendedResource request.
func (client AdaptiveNetworkControlsClient) ListByExtendedResourcePreparer(ctx context.Context, resourceGroupName string, extendedResourceProvider string, extendedResourceType string, extendedResourceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"extendedResourceName":     autorest.Encode("path", extendedResourceName),
		"extendedResourceProvider": autorest.Encode("path", extendedResourceProvider),
		"extendedResourceType":     autorest.Encode("path", extendedResourceType),
		"resourceGroupName":        autorest.Encode("path", resourceGroupName),
		"subscriptionId":           autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2015-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{extendedResourceProvider}/{extendedResourceType}/{extendedResourceName}/providers/Microsoft.Security/adaptiveNetworkControls", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByExtendedResourceSender sends the ListByExtendedResource request. The method will close the
// http.Response Body if it receives an error.
func (client AdaptiveNetworkControlsClient) ListByExtendedResourceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// ListByExtendedResourceResponder handles the response to the ListByExtendedResource request. The method always
// closes the http.Response Body.
func (client AdaptiveNetworkControlsClient) ListByExtendedResourceResponder(resp *http.Response) (result AdaptiveNetworkControlsList, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByExtendedResourceNextResults retrieves the next set of results, if any.
func (client AdaptiveNetworkControlsClient) listByExtendedResourceNextResults(ctx context.Context, lastResults AdaptiveNetworkControlsList) (result AdaptiveNetworkControlsList, err error) {
	req, err := lastResults.adaptiveNetworkControlsListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "security.AdaptiveNetworkControlsClient", "listByExtendedResourceNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByExtendedResourceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "security.AdaptiveNetworkControlsClient", "listByExtendedResourceNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByExtendedResourceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "security.AdaptiveNetworkControlsClient", "listByExtendedResourceNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByExtendedResourceComplete enumerates all values, automatically crossing page boundaries as required.
func (client AdaptiveNetworkControlsClient) ListByExtendedResourceComplete(ctx context.Context, resourceGroupName string, extendedResourceProvider string, extendedResourceType string, extendedResourceName string) (result AdaptiveNetworkControlsListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AdaptiveNetworkControlsClient.ListByExtendedResource")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByExtendedResource(ctx, resourceGroupName, extendedResourceProvider, extendedResourceType, extendedResourceName)
	return
}
