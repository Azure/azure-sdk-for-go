package security

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// AutoDismissAlertsRulesSimulationClient is the API spec for Microsoft.Security (Azure Security Center) resource
// provider
type AutoDismissAlertsRulesSimulationClient struct {
	BaseClient
}

// NewAutoDismissAlertsRulesSimulationClient creates an instance of the AutoDismissAlertsRulesSimulationClient client.
func NewAutoDismissAlertsRulesSimulationClient(subscriptionID string, ascLocation string) AutoDismissAlertsRulesSimulationClient {
	return NewAutoDismissAlertsRulesSimulationClientWithBaseURI(DefaultBaseURI, subscriptionID, ascLocation)
}

// NewAutoDismissAlertsRulesSimulationClientWithBaseURI creates an instance of the
// AutoDismissAlertsRulesSimulationClient client.
func NewAutoDismissAlertsRulesSimulationClientWithBaseURI(baseURI string, subscriptionID string, ascLocation string) AutoDismissAlertsRulesSimulationClient {
	return AutoDismissAlertsRulesSimulationClient{NewWithBaseURI(baseURI, subscriptionID, ascLocation)}
}

// Simulate this API simulate the given auto-dismiss rule against alert in the given subscription and reruns relevant
// statistics
// Parameters:
// autoDismissAlertsRuleName - the unique name of the auto dismiss alert rule
// autoDismissAlertsRule - auto dismiss rule object
func (client AutoDismissAlertsRulesSimulationClient) Simulate(ctx context.Context, autoDismissAlertsRuleName string, autoDismissAlertsRule AutoDismissAlertsRule) (result AutoDismissAlertsRulesSimulationList, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AutoDismissAlertsRulesSimulationClient.Simulate")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.Pattern, Rule: `^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$`, Chain: nil}}},
		{TargetValue: autoDismissAlertsRule,
			Constraints: []validation.Constraint{{Target: "autoDismissAlertsRule.AutoDismissAlertsRuleProperties", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "autoDismissAlertsRule.AutoDismissAlertsRuleProperties.AlertType", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "autoDismissAlertsRule.AutoDismissAlertsRuleProperties.Reason", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "autoDismissAlertsRule.AutoDismissAlertsRuleProperties.AutoDismissAlertsScope", Name: validation.Null, Rule: false,
						Chain: []validation.Constraint{{Target: "autoDismissAlertsRule.AutoDismissAlertsRuleProperties.AutoDismissAlertsScope.AllOf", Name: validation.Null, Rule: true, Chain: nil}}},
				}}}}}); err != nil {
		return result, validation.NewError("security.AutoDismissAlertsRulesSimulationClient", "Simulate", err.Error())
	}

	req, err := client.SimulatePreparer(ctx, autoDismissAlertsRuleName, autoDismissAlertsRule)
	if err != nil {
		err = autorest.NewErrorWithError(err, "security.AutoDismissAlertsRulesSimulationClient", "Simulate", nil, "Failure preparing request")
		return
	}

	resp, err := client.SimulateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "security.AutoDismissAlertsRulesSimulationClient", "Simulate", resp, "Failure sending request")
		return
	}

	result, err = client.SimulateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "security.AutoDismissAlertsRulesSimulationClient", "Simulate", resp, "Failure responding to request")
	}

	return
}

// SimulatePreparer prepares the Simulate request.
func (client AutoDismissAlertsRulesSimulationClient) SimulatePreparer(ctx context.Context, autoDismissAlertsRuleName string, autoDismissAlertsRule AutoDismissAlertsRule) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"autoDismissAlertsRuleName": autorest.Encode("path", autoDismissAlertsRuleName),
		"subscriptionId":            autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2019-01-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Security/autoDismissAlertsRulesSimulation/{autoDismissAlertsRuleName}", pathParameters),
		autorest.WithJSON(autoDismissAlertsRule),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// SimulateSender sends the Simulate request. The method will close the
// http.Response Body if it receives an error.
func (client AutoDismissAlertsRulesSimulationClient) SimulateSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), azure.DoRetryWithRegistration(client.Client))
	return autorest.SendWithSender(client, req, sd...)
}

// SimulateResponder handles the response to the Simulate request. The method always
// closes the http.Response Body.
func (client AutoDismissAlertsRulesSimulationClient) SimulateResponder(resp *http.Response) (result AutoDismissAlertsRulesSimulationList, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
