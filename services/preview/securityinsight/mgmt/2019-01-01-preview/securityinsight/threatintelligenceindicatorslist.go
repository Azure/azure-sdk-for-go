package securityinsight

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// ThreatIntelligenceIndicatorsListClient is the API spec for Microsoft.SecurityInsights (Azure Security Insights)
// resource provider
type ThreatIntelligenceIndicatorsListClient struct {
	BaseClient
}

// NewThreatIntelligenceIndicatorsListClient creates an instance of the ThreatIntelligenceIndicatorsListClient client.
func NewThreatIntelligenceIndicatorsListClient(subscriptionID string) ThreatIntelligenceIndicatorsListClient {
	return NewThreatIntelligenceIndicatorsListClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewThreatIntelligenceIndicatorsListClientWithBaseURI creates an instance of the
// ThreatIntelligenceIndicatorsListClient client using a custom endpoint.  Use this when interacting with an Azure
// cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewThreatIntelligenceIndicatorsListClientWithBaseURI(baseURI string, subscriptionID string) ThreatIntelligenceIndicatorsListClient {
	return ThreatIntelligenceIndicatorsListClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Query query all threat intelligence.
// Parameters:
// resourceGroupName - the name of the resource group within the user's subscription. The name is case
// insensitive.
// operationalInsightsResourceProvider - the namespace of workspaces resource provider-
// Microsoft.OperationalInsights.
// workspaceName - the name of the workspace.
// threatIntelligenceArmStixQuery - the threat intelligence ARM STIX query
func (client ThreatIntelligenceIndicatorsListClient) Query(ctx context.Context, resourceGroupName string, operationalInsightsResourceProvider string, workspaceName string, threatIntelligenceArmStixQuery ThreatIntelligenceArmStixQuery) (result ThreatIntelligenceResourceListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ThreatIntelligenceIndicatorsListClient.Query")
		defer func() {
			sc := -1
			if result.tirl.Response.Response != nil {
				sc = result.tirl.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.Pattern, Rule: `^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$`, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
				{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
		{TargetValue: workspaceName,
			Constraints: []validation.Constraint{{Target: "workspaceName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "workspaceName", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("securityinsight.ThreatIntelligenceIndicatorsListClient", "Query", err.Error())
	}

	result.fn = client.queryNextResults
	req, err := client.QueryPreparer(ctx, resourceGroupName, operationalInsightsResourceProvider, workspaceName, threatIntelligenceArmStixQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "securityinsight.ThreatIntelligenceIndicatorsListClient", "Query", nil, "Failure preparing request")
		return
	}

	resp, err := client.QuerySender(req)
	if err != nil {
		result.tirl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "securityinsight.ThreatIntelligenceIndicatorsListClient", "Query", resp, "Failure sending request")
		return
	}

	result.tirl, err = client.QueryResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "securityinsight.ThreatIntelligenceIndicatorsListClient", "Query", resp, "Failure responding to request")
	}
	if result.tirl.hasNextLink() && result.tirl.IsEmpty() {
		err = result.NextWithContext(ctx)
	}

	return
}

// QueryPreparer prepares the Query request.
func (client ThreatIntelligenceIndicatorsListClient) QueryPreparer(ctx context.Context, resourceGroupName string, operationalInsightsResourceProvider string, workspaceName string, threatIntelligenceArmStixQuery ThreatIntelligenceArmStixQuery) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"operationalInsightsResourceProvider": autorest.Encode("path", operationalInsightsResourceProvider),
		"resourceGroupName":                   autorest.Encode("path", resourceGroupName),
		"subscriptionId":                      autorest.Encode("path", client.SubscriptionID),
		"workspaceName":                       autorest.Encode("path", workspaceName),
	}

	const APIVersion = "2019-01-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/queryIndicators", pathParameters),
		autorest.WithJSON(threatIntelligenceArmStixQuery),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// QuerySender sends the Query request. The method will close the
// http.Response Body if it receives an error.
func (client ThreatIntelligenceIndicatorsListClient) QuerySender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// QueryResponder handles the response to the Query request. The method always
// closes the http.Response Body.
func (client ThreatIntelligenceIndicatorsListClient) QueryResponder(resp *http.Response) (result ThreatIntelligenceResourceList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// queryNextResults retrieves the next set of results, if any.
func (client ThreatIntelligenceIndicatorsListClient) queryNextResults(ctx context.Context, lastResults ThreatIntelligenceResourceList) (result ThreatIntelligenceResourceList, err error) {
	req, err := lastResults.threatIntelligenceResourceListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "securityinsight.ThreatIntelligenceIndicatorsListClient", "queryNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.QuerySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "securityinsight.ThreatIntelligenceIndicatorsListClient", "queryNextResults", resp, "Failure sending next results request")
	}
	result, err = client.QueryResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "securityinsight.ThreatIntelligenceIndicatorsListClient", "queryNextResults", resp, "Failure responding to next results request")
	}
	return
}

// QueryComplete enumerates all values, automatically crossing page boundaries as required.
func (client ThreatIntelligenceIndicatorsListClient) QueryComplete(ctx context.Context, resourceGroupName string, operationalInsightsResourceProvider string, workspaceName string, threatIntelligenceArmStixQuery ThreatIntelligenceArmStixQuery) (result ThreatIntelligenceResourceListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ThreatIntelligenceIndicatorsListClient.Query")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.Query(ctx, resourceGroupName, operationalInsightsResourceProvider, workspaceName, threatIntelligenceArmStixQuery)
	return
}
