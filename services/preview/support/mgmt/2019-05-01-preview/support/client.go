// Package support implements the Azure ARM Support service API version 2019-05-01-preview.
//
// Microsoft Azure Support Resource Provider.
package support

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

const (
	// DefaultBaseURI is the default URI used for the service Support
	DefaultBaseURI = "https://management.azure.com"
)

// BaseClient is the base client for Support.
type BaseClient struct {
	autorest.Client
	BaseURI        string
	SubscriptionID string
}

// New creates an instance of the BaseClient client.
func New(subscriptionID string) BaseClient {
	return NewWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewWithBaseURI creates an instance of the BaseClient client using a custom endpoint.  Use this when interacting with
// an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewWithBaseURI(baseURI string, subscriptionID string) BaseClient {
	return BaseClient{
		Client:         autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI:        baseURI,
		SubscriptionID: subscriptionID,
	}
}

// CheckNameAvailabilityForSupportTicketCommunication check the availability of a resource name.
// Parameters:
// supportTicketName - support ticket name.
// checkNameAvailabilityInput - input to check.
func (client BaseClient) CheckNameAvailabilityForSupportTicketCommunication(ctx context.Context, supportTicketName string, checkNameAvailabilityInput CheckNameAvailabilityInput) (result CheckNameAvailabilityOutput, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CheckNameAvailabilityForSupportTicketCommunication")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: checkNameAvailabilityInput,
			Constraints: []validation.Constraint{{Target: "checkNameAvailabilityInput.Name", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("support.BaseClient", "CheckNameAvailabilityForSupportTicketCommunication", err.Error())
	}

	req, err := client.CheckNameAvailabilityForSupportTicketCommunicationPreparer(ctx, supportTicketName, checkNameAvailabilityInput)
	if err != nil {
		err = autorest.NewErrorWithError(err, "support.BaseClient", "CheckNameAvailabilityForSupportTicketCommunication", nil, "Failure preparing request")
		return
	}

	resp, err := client.CheckNameAvailabilityForSupportTicketCommunicationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "support.BaseClient", "CheckNameAvailabilityForSupportTicketCommunication", resp, "Failure sending request")
		return
	}

	result, err = client.CheckNameAvailabilityForSupportTicketCommunicationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "support.BaseClient", "CheckNameAvailabilityForSupportTicketCommunication", resp, "Failure responding to request")
	}

	return
}

// CheckNameAvailabilityForSupportTicketCommunicationPreparer prepares the CheckNameAvailabilityForSupportTicketCommunication request.
func (client BaseClient) CheckNameAvailabilityForSupportTicketCommunicationPreparer(ctx context.Context, supportTicketName string, checkNameAvailabilityInput CheckNameAvailabilityInput) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"supportTicketName": autorest.Encode("path", supportTicketName),
	}

	const APIVersion = "2019-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/checkNameAvailability", pathParameters),
		autorest.WithJSON(checkNameAvailabilityInput),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CheckNameAvailabilityForSupportTicketCommunicationSender sends the CheckNameAvailabilityForSupportTicketCommunication request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CheckNameAvailabilityForSupportTicketCommunicationSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), azure.DoRetryWithRegistration(client.Client))
	return autorest.SendWithSender(client, req, sd...)
}

// CheckNameAvailabilityForSupportTicketCommunicationResponder handles the response to the CheckNameAvailabilityForSupportTicketCommunication request. The method always
// closes the http.Response Body.
func (client BaseClient) CheckNameAvailabilityForSupportTicketCommunicationResponder(resp *http.Response) (result CheckNameAvailabilityOutput, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CheckNameAvailabilityWithSubscription check the availability of a resource name.
// Parameters:
// checkNameAvailabilityInput - input to check.
func (client BaseClient) CheckNameAvailabilityWithSubscription(ctx context.Context, checkNameAvailabilityInput CheckNameAvailabilityInput) (result CheckNameAvailabilityOutput, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CheckNameAvailabilityWithSubscription")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: checkNameAvailabilityInput,
			Constraints: []validation.Constraint{{Target: "checkNameAvailabilityInput.Name", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("support.BaseClient", "CheckNameAvailabilityWithSubscription", err.Error())
	}

	req, err := client.CheckNameAvailabilityWithSubscriptionPreparer(ctx, checkNameAvailabilityInput)
	if err != nil {
		err = autorest.NewErrorWithError(err, "support.BaseClient", "CheckNameAvailabilityWithSubscription", nil, "Failure preparing request")
		return
	}

	resp, err := client.CheckNameAvailabilityWithSubscriptionSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "support.BaseClient", "CheckNameAvailabilityWithSubscription", resp, "Failure sending request")
		return
	}

	result, err = client.CheckNameAvailabilityWithSubscriptionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "support.BaseClient", "CheckNameAvailabilityWithSubscription", resp, "Failure responding to request")
	}

	return
}

// CheckNameAvailabilityWithSubscriptionPreparer prepares the CheckNameAvailabilityWithSubscription request.
func (client BaseClient) CheckNameAvailabilityWithSubscriptionPreparer(ctx context.Context, checkNameAvailabilityInput CheckNameAvailabilityInput) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2019-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Support/checkNameAvailability", pathParameters),
		autorest.WithJSON(checkNameAvailabilityInput),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CheckNameAvailabilityWithSubscriptionSender sends the CheckNameAvailabilityWithSubscription request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CheckNameAvailabilityWithSubscriptionSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), azure.DoRetryWithRegistration(client.Client))
	return autorest.SendWithSender(client, req, sd...)
}

// CheckNameAvailabilityWithSubscriptionResponder handles the response to the CheckNameAvailabilityWithSubscription request. The method always
// closes the http.Response Body.
func (client BaseClient) CheckNameAvailabilityWithSubscriptionResponder(resp *http.Response) (result CheckNameAvailabilityOutput, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateSupportTicketCommunication creates a support ticket communication.
// Parameters:
// supportTicketName - support ticket name.
// communicationName - communication name.
// createCommunicationParameters - communication object.
func (client BaseClient) CreateSupportTicketCommunication(ctx context.Context, supportTicketName string, communicationName string, createCommunicationParameters CommunicationDetails) (result CreateSupportTicketCommunicationFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CreateSupportTicketCommunication")
		defer func() {
			sc := -1
			if result.Response() != nil {
				sc = result.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: createCommunicationParameters,
			Constraints: []validation.Constraint{{Target: "createCommunicationParameters.CommunicationDetailsProperties", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "createCommunicationParameters.CommunicationDetailsProperties.Subject", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "createCommunicationParameters.CommunicationDetailsProperties.Body", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("support.BaseClient", "CreateSupportTicketCommunication", err.Error())
	}

	req, err := client.CreateSupportTicketCommunicationPreparer(ctx, supportTicketName, communicationName, createCommunicationParameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "support.BaseClient", "CreateSupportTicketCommunication", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateSupportTicketCommunicationSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "support.BaseClient", "CreateSupportTicketCommunication", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreateSupportTicketCommunicationPreparer prepares the CreateSupportTicketCommunication request.
func (client BaseClient) CreateSupportTicketCommunicationPreparer(ctx context.Context, supportTicketName string, communicationName string, createCommunicationParameters CommunicationDetails) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"communicationName": autorest.Encode("path", communicationName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"supportTicketName": autorest.Encode("path", supportTicketName),
	}

	const APIVersion = "2019-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	createCommunicationParameters.ID = nil
	createCommunicationParameters.Name = nil
	createCommunicationParameters.Type = nil
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}", pathParameters),
		autorest.WithJSON(createCommunicationParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSupportTicketCommunicationSender sends the CreateSupportTicketCommunication request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CreateSupportTicketCommunicationSender(req *http.Request) (future CreateSupportTicketCommunicationFuture, err error) {
	sd := autorest.GetSendDecorators(req.Context(), azure.DoRetryWithRegistration(client.Client))
	var resp *http.Response
	resp, err = autorest.SendWithSender(client, req, sd...)
	if err != nil {
		return
	}
	future.Future, err = azure.NewFutureFromResponse(resp)
	return
}

// CreateSupportTicketCommunicationResponder handles the response to the CreateSupportTicketCommunication request. The method always
// closes the http.Response Body.
func (client BaseClient) CreateSupportTicketCommunicationResponder(resp *http.Response) (result CommunicationDetails, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateSupportTicketForSubscription a paid support plan is required to use this API to create a support ticket. Users
// can create tickets for issues relating to Billing, Subscription Management, Quota or any of the supported Azure
// technical services as indicated by the 'serviceId' in the request. <br/><br/>**Billing tickets**<br/>For billing
// issues, user must set *serviceId* to
// *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.<br/><br/>**Subscription Management
// tickets**<br/> For issues relating to subscription management, *serviceId* should be set to
// *'/providers/Microsoft.Support/services/f3dc5421-79ef-1efa-41a5-42bf3cbb52c6'*.<br/><br/>**Technical
// tickets**<br/>For technical support ticket, user must set *serviceId* to one of the technical service ids and must
// provide additional information in TechnicalScopingInformation. <br/>Users must also provide problemClassificationId
// when creating a support ticket.<br/>
// Parameters:
// supportTicketName - support ticket name.
// createSupportTicketParameters - support ticket request payload.
func (client BaseClient) CreateSupportTicketForSubscription(ctx context.Context, supportTicketName string, createSupportTicketParameters TicketDetails) (result CreateSupportTicketForSubscriptionFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CreateSupportTicketForSubscription")
		defer func() {
			sc := -1
			if result.Response() != nil {
				sc = result.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: createSupportTicketParameters,
			Constraints: []validation.Constraint{{Target: "createSupportTicketParameters.TicketDetailsProperties", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "createSupportTicketParameters.TicketDetailsProperties.Description", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "createSupportTicketParameters.TicketDetailsProperties.ProblemClassificationID", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "createSupportTicketParameters.TicketDetailsProperties.ContactDetails", Name: validation.Null, Rule: true,
						Chain: []validation.Constraint{{Target: "createSupportTicketParameters.TicketDetailsProperties.ContactDetails.FirstName", Name: validation.Null, Rule: true, Chain: nil},
							{Target: "createSupportTicketParameters.TicketDetailsProperties.ContactDetails.LastName", Name: validation.Null, Rule: true, Chain: nil},
							{Target: "createSupportTicketParameters.TicketDetailsProperties.ContactDetails.PrimaryEmailAddress", Name: validation.Null, Rule: true, Chain: nil},
							{Target: "createSupportTicketParameters.TicketDetailsProperties.ContactDetails.PreferredTimeZone", Name: validation.Null, Rule: true, Chain: nil},
							{Target: "createSupportTicketParameters.TicketDetailsProperties.ContactDetails.Country", Name: validation.Null, Rule: true, Chain: nil},
							{Target: "createSupportTicketParameters.TicketDetailsProperties.ContactDetails.PreferredSupportLanguage", Name: validation.Null, Rule: true, Chain: nil},
						}},
					{Target: "createSupportTicketParameters.TicketDetailsProperties.Title", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "createSupportTicketParameters.TicketDetailsProperties.ServiceID", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("support.BaseClient", "CreateSupportTicketForSubscription", err.Error())
	}

	req, err := client.CreateSupportTicketForSubscriptionPreparer(ctx, supportTicketName, createSupportTicketParameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "support.BaseClient", "CreateSupportTicketForSubscription", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateSupportTicketForSubscriptionSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "support.BaseClient", "CreateSupportTicketForSubscription", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreateSupportTicketForSubscriptionPreparer prepares the CreateSupportTicketForSubscription request.
func (client BaseClient) CreateSupportTicketForSubscriptionPreparer(ctx context.Context, supportTicketName string, createSupportTicketParameters TicketDetails) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"supportTicketName": autorest.Encode("path", supportTicketName),
	}

	const APIVersion = "2019-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	createSupportTicketParameters.ID = nil
	createSupportTicketParameters.Name = nil
	createSupportTicketParameters.Type = nil
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}", pathParameters),
		autorest.WithJSON(createSupportTicketParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSupportTicketForSubscriptionSender sends the CreateSupportTicketForSubscription request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CreateSupportTicketForSubscriptionSender(req *http.Request) (future CreateSupportTicketForSubscriptionFuture, err error) {
	sd := autorest.GetSendDecorators(req.Context(), azure.DoRetryWithRegistration(client.Client))
	var resp *http.Response
	resp, err = autorest.SendWithSender(client, req, sd...)
	if err != nil {
		return
	}
	future.Future, err = azure.NewFutureFromResponse(resp)
	return
}

// CreateSupportTicketForSubscriptionResponder handles the response to the CreateSupportTicketForSubscription request. The method always
// closes the http.Response Body.
func (client BaseClient) CreateSupportTicketForSubscriptionResponder(resp *http.Response) (result TicketDetails, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
