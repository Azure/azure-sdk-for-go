package support

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// CommunicationsClient is the microsoft Azure Support Resource Provider.
type CommunicationsClient struct {
	BaseClient
}

// NewCommunicationsClient creates an instance of the CommunicationsClient client.
func NewCommunicationsClient(subscriptionID string) CommunicationsClient {
	return NewCommunicationsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewCommunicationsClientWithBaseURI creates an instance of the CommunicationsClient client using a custom endpoint.
// Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewCommunicationsClientWithBaseURI(baseURI string, subscriptionID string) CommunicationsClient {
	return CommunicationsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// GetBySubscriptionTicket gets details of a specific communication.
// Parameters:
// supportTicketName - support ticket name.
// communicationName - communication name.
func (client CommunicationsClient) GetBySubscriptionTicket(ctx context.Context, supportTicketName string, communicationName string) (result CommunicationDetails, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CommunicationsClient.GetBySubscriptionTicket")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetBySubscriptionTicketPreparer(ctx, supportTicketName, communicationName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "support.CommunicationsClient", "GetBySubscriptionTicket", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetBySubscriptionTicketSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "support.CommunicationsClient", "GetBySubscriptionTicket", resp, "Failure sending request")
		return
	}

	result, err = client.GetBySubscriptionTicketResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "support.CommunicationsClient", "GetBySubscriptionTicket", resp, "Failure responding to request")
	}

	return
}

// GetBySubscriptionTicketPreparer prepares the GetBySubscriptionTicket request.
func (client CommunicationsClient) GetBySubscriptionTicketPreparer(ctx context.Context, supportTicketName string, communicationName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"communicationName": autorest.Encode("path", communicationName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"supportTicketName": autorest.Encode("path", supportTicketName),
	}

	const APIVersion = "2019-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetBySubscriptionTicketSender sends the GetBySubscriptionTicket request. The method will close the
// http.Response Body if it receives an error.
func (client CommunicationsClient) GetBySubscriptionTicketSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), azure.DoRetryWithRegistration(client.Client))
	return autorest.SendWithSender(client, req, sd...)
}

// GetBySubscriptionTicketResponder handles the response to the GetBySubscriptionTicket request. The method always
// closes the http.Response Body.
func (client CommunicationsClient) GetBySubscriptionTicketResponder(resp *http.Response) (result CommunicationDetails, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListBySubscriptionTicket lists all communications for a support ticket.
// Parameters:
// supportTicketName - support ticket name.
// top - the number of values to return in the collection. Default is 10 and max is 10.
// filter - the filter to apply on the operation.
func (client CommunicationsClient) ListBySubscriptionTicket(ctx context.Context, supportTicketName string, top *int32, filter string) (result CommunicationsListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CommunicationsClient.ListBySubscriptionTicket")
		defer func() {
			sc := -1
			if result.clr.Response.Response != nil {
				sc = result.clr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listBySubscriptionTicketNextResults
	req, err := client.ListBySubscriptionTicketPreparer(ctx, supportTicketName, top, filter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "support.CommunicationsClient", "ListBySubscriptionTicket", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListBySubscriptionTicketSender(req)
	if err != nil {
		result.clr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "support.CommunicationsClient", "ListBySubscriptionTicket", resp, "Failure sending request")
		return
	}

	result.clr, err = client.ListBySubscriptionTicketResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "support.CommunicationsClient", "ListBySubscriptionTicket", resp, "Failure responding to request")
	}

	return
}

// ListBySubscriptionTicketPreparer prepares the ListBySubscriptionTicket request.
func (client CommunicationsClient) ListBySubscriptionTicketPreparer(ctx context.Context, supportTicketName string, top *int32, filter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"supportTicketName": autorest.Encode("path", supportTicketName),
	}

	const APIVersion = "2019-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if top != nil {
		queryParameters["$top"] = autorest.Encode("query", *top)
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListBySubscriptionTicketSender sends the ListBySubscriptionTicket request. The method will close the
// http.Response Body if it receives an error.
func (client CommunicationsClient) ListBySubscriptionTicketSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), azure.DoRetryWithRegistration(client.Client))
	return autorest.SendWithSender(client, req, sd...)
}

// ListBySubscriptionTicketResponder handles the response to the ListBySubscriptionTicket request. The method always
// closes the http.Response Body.
func (client CommunicationsClient) ListBySubscriptionTicketResponder(resp *http.Response) (result CommunicationsListResult, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listBySubscriptionTicketNextResults retrieves the next set of results, if any.
func (client CommunicationsClient) listBySubscriptionTicketNextResults(ctx context.Context, lastResults CommunicationsListResult) (result CommunicationsListResult, err error) {
	req, err := lastResults.communicationsListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "support.CommunicationsClient", "listBySubscriptionTicketNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListBySubscriptionTicketSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "support.CommunicationsClient", "listBySubscriptionTicketNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListBySubscriptionTicketResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "support.CommunicationsClient", "listBySubscriptionTicketNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListBySubscriptionTicketComplete enumerates all values, automatically crossing page boundaries as required.
func (client CommunicationsClient) ListBySubscriptionTicketComplete(ctx context.Context, supportTicketName string, top *int32, filter string) (result CommunicationsListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CommunicationsClient.ListBySubscriptionTicket")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListBySubscriptionTicket(ctx, supportTicketName, top, filter)
	return
}
