package sparkapi

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/services/preview/synapse/2019-11-01-preview/spark"
	"github.com/Azure/go-autorest/autorest"
)

// BatchClientAPI contains the set of methods on the BatchClient type.
type BatchClientAPI interface {
	CancelSparkBatchJob(ctx context.Context, batchID int32) (result autorest.Response, err error)
	CreateSparkBatchJob(ctx context.Context, sparkBatchJobOptions spark.BatchJobOptions, detailed *bool) (result spark.BatchJob, err error)
	GetSparkBatchJob(ctx context.Context, batchID int32, detailed *bool) (result spark.BatchJob, err error)
	GetSparkBatchJobs(ctx context.Context, from *int32, size *int32, detailed *bool) (result spark.BatchJobCollection, err error)
}

var _ BatchClientAPI = (*spark.BatchClient)(nil)

// SessionClientAPI contains the set of methods on the SessionClient type.
type SessionClientAPI interface {
	CancelSparkSession(ctx context.Context, sessionID int32) (result autorest.Response, err error)
	CancelSparkStatement(ctx context.Context, sessionID int32, statementID int32) (result spark.StatementCancellationResult, err error)
	CreateSparkSession(ctx context.Context, sparkSessionOptions spark.SessionOptions, detailed *bool) (result spark.Session, err error)
	CreateSparkStatement(ctx context.Context, sessionID int32, sparkStatementOptions spark.StatementOptions) (result spark.Statement, err error)
	GetSparkSession(ctx context.Context, sessionID int32, detailed *bool) (result spark.Session, err error)
	GetSparkSessions(ctx context.Context, from *int32, size *int32, detailed *bool) (result spark.SessionCollection, err error)
	GetSparkStatement(ctx context.Context, sessionID int32, statementID int32) (result spark.Statement, err error)
	GetSparkStatements(ctx context.Context, sessionID int32) (result spark.StatementCollection, err error)
	ResetSparkSessionTimeout(ctx context.Context, sessionID int32) (result autorest.Response, err error)
}

var _ SessionClientAPI = (*spark.SessionClient)(nil)
