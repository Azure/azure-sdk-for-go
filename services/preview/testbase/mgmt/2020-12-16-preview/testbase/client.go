// Package testbase implements the Azure ARM Testbase service API version 2020-12-16-preview.
//
// REST API for Test Base
package testbase

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

const (
	// DefaultBaseURI is the default URI used for the service Testbase
	DefaultBaseURI = "https://management.azure.com"
)

// BaseClient is the base client for Testbase.
type BaseClient struct {
	autorest.Client
	BaseURI        string
	SubscriptionID string
}

// New creates an instance of the BaseClient client.
func New(subscriptionID string) BaseClient {
	return NewWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewWithBaseURI creates an instance of the BaseClient client using a custom endpoint.  Use this when interacting with
// an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewWithBaseURI(baseURI string, subscriptionID string) BaseClient {
	return BaseClient{
		Client:         autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI:        baseURI,
		SubscriptionID: subscriptionID,
	}
}

// AccountGetFileUploadURL gets the file upload URL of a Test Base Account.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource.
// testBaseAccountName - the resource name of the Test Base Account.
// parameters - parameters supplied to the Test Base Account GetFileUploadURL operation.
func (client BaseClient) AccountGetFileUploadURL(ctx context.Context, resourceGroupName string, testBaseAccountName string, parameters *GetFileUploadURLParameters) (result FileUploadURLResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.AccountGetFileUploadURL")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.AccountGetFileUploadURLPreparer(ctx, resourceGroupName, testBaseAccountName, parameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.BaseClient", "AccountGetFileUploadURL", nil, "Failure preparing request")
		return
	}

	resp, err := client.AccountGetFileUploadURLSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "testbase.BaseClient", "AccountGetFileUploadURL", resp, "Failure sending request")
		return
	}

	result, err = client.AccountGetFileUploadURLResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.BaseClient", "AccountGetFileUploadURL", resp, "Failure responding to request")
		return
	}

	return
}

// AccountGetFileUploadURLPreparer prepares the AccountGetFileUploadURL request.
func (client BaseClient) AccountGetFileUploadURLPreparer(ctx context.Context, resourceGroupName string, testBaseAccountName string, parameters *GetFileUploadURLParameters) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
		"testBaseAccountName": autorest.Encode("path", testBaseAccountName),
	}

	const APIVersion = "2020-12-16-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/getFileUploadUrl", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	if parameters != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(parameters))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// AccountGetFileUploadURLSender sends the AccountGetFileUploadURL request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) AccountGetFileUploadURLSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// AccountGetFileUploadURLResponder handles the response to the AccountGetFileUploadURL request. The method always
// closes the http.Response Body.
func (client BaseClient) AccountGetFileUploadURLResponder(resp *http.Response) (result FileUploadURLResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CheckPackageNameAvailability checks that the Test Base Package name and version is valid and is not already in use.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource.
// testBaseAccountName - the resource name of the Test Base Account.
// parameters - parameters supplied to the Test Base Package CheckNameAvailability operation.
func (client BaseClient) CheckPackageNameAvailability(ctx context.Context, resourceGroupName string, testBaseAccountName string, parameters PackageCheckNameAvailabilityParameters) (result CheckNameAvailabilityResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CheckPackageNameAvailability")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: parameters,
			Constraints: []validation.Constraint{{Target: "parameters.Name", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "parameters.ApplicationName", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "parameters.Version", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "parameters.Type", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("testbase.BaseClient", "CheckPackageNameAvailability", err.Error())
	}

	req, err := client.CheckPackageNameAvailabilityPreparer(ctx, resourceGroupName, testBaseAccountName, parameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.BaseClient", "CheckPackageNameAvailability", nil, "Failure preparing request")
		return
	}

	resp, err := client.CheckPackageNameAvailabilitySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "testbase.BaseClient", "CheckPackageNameAvailability", resp, "Failure sending request")
		return
	}

	result, err = client.CheckPackageNameAvailabilityResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.BaseClient", "CheckPackageNameAvailability", resp, "Failure responding to request")
		return
	}

	return
}

// CheckPackageNameAvailabilityPreparer prepares the CheckPackageNameAvailability request.
func (client BaseClient) CheckPackageNameAvailabilityPreparer(ctx context.Context, resourceGroupName string, testBaseAccountName string, parameters PackageCheckNameAvailabilityParameters) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
		"testBaseAccountName": autorest.Encode("path", testBaseAccountName),
	}

	const APIVersion = "2020-12-16-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/checkPackageNameAvailability", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CheckPackageNameAvailabilitySender sends the CheckPackageNameAvailability request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CheckPackageNameAvailabilitySender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CheckPackageNameAvailabilityResponder handles the response to the CheckPackageNameAvailability request. The method always
// closes the http.Response Body.
func (client BaseClient) CheckPackageNameAvailabilityResponder(resp *http.Response) (result CheckNameAvailabilityResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PackageGetDownloadURL gets the download URL of a package.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource.
// testBaseAccountName - the resource name of the Test Base Account.
// packageName - the resource name of the Test Base Package.
func (client BaseClient) PackageGetDownloadURL(ctx context.Context, resourceGroupName string, testBaseAccountName string, packageName string) (result DownloadURLResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.PackageGetDownloadURL")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.PackageGetDownloadURLPreparer(ctx, resourceGroupName, testBaseAccountName, packageName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.BaseClient", "PackageGetDownloadURL", nil, "Failure preparing request")
		return
	}

	resp, err := client.PackageGetDownloadURLSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "testbase.BaseClient", "PackageGetDownloadURL", resp, "Failure sending request")
		return
	}

	result, err = client.PackageGetDownloadURLResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.BaseClient", "PackageGetDownloadURL", resp, "Failure responding to request")
		return
	}

	return
}

// PackageGetDownloadURLPreparer prepares the PackageGetDownloadURL request.
func (client BaseClient) PackageGetDownloadURLPreparer(ctx context.Context, resourceGroupName string, testBaseAccountName string, packageName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"packageName":         autorest.Encode("path", packageName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
		"testBaseAccountName": autorest.Encode("path", testBaseAccountName),
	}

	const APIVersion = "2020-12-16-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/getDownloadUrl", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PackageGetDownloadURLSender sends the PackageGetDownloadURL request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) PackageGetDownloadURLSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// PackageGetDownloadURLResponder handles the response to the PackageGetDownloadURL request. The method always
// closes the http.Response Body.
func (client BaseClient) PackageGetDownloadURLResponder(resp *http.Response) (result DownloadURLResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// TestResultGetDownloadURL gets the download URL or the test result.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource.
// testBaseAccountName - the resource name of the Test Base Account.
// packageName - the resource name of the Test Base Package.
// testResultName - the Test Result Name. It equals to {osName}-{TestResultId} string.
func (client BaseClient) TestResultGetDownloadURL(ctx context.Context, resourceGroupName string, testBaseAccountName string, packageName string, testResultName string) (result DownloadURLResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.TestResultGetDownloadURL")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.TestResultGetDownloadURLPreparer(ctx, resourceGroupName, testBaseAccountName, packageName, testResultName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.BaseClient", "TestResultGetDownloadURL", nil, "Failure preparing request")
		return
	}

	resp, err := client.TestResultGetDownloadURLSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "testbase.BaseClient", "TestResultGetDownloadURL", resp, "Failure sending request")
		return
	}

	result, err = client.TestResultGetDownloadURLResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.BaseClient", "TestResultGetDownloadURL", resp, "Failure responding to request")
		return
	}

	return
}

// TestResultGetDownloadURLPreparer prepares the TestResultGetDownloadURL request.
func (client BaseClient) TestResultGetDownloadURLPreparer(ctx context.Context, resourceGroupName string, testBaseAccountName string, packageName string, testResultName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"packageName":         autorest.Encode("path", packageName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
		"testBaseAccountName": autorest.Encode("path", testBaseAccountName),
		"testResultName":      autorest.Encode("path", testResultName),
	}

	const APIVersion = "2020-12-16-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/testResults/{testResultName}/getDownloadUrl", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// TestResultGetDownloadURLSender sends the TestResultGetDownloadURL request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) TestResultGetDownloadURLSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// TestResultGetDownloadURLResponder handles the response to the TestResultGetDownloadURL request. The method always
// closes the http.Response Body.
func (client BaseClient) TestResultGetDownloadURLResponder(resp *http.Response) (result DownloadURLResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// TestResultGetVideoDownloadURL gets the download URL of the test execution screen recording.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource.
// testBaseAccountName - the resource name of the Test Base Account.
// packageName - the resource name of the Test Base Package.
// testResultName - the Test Result Name. It equals to {osName}-{TestResultId} string.
func (client BaseClient) TestResultGetVideoDownloadURL(ctx context.Context, resourceGroupName string, testBaseAccountName string, packageName string, testResultName string) (result DownloadURLResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.TestResultGetVideoDownloadURL")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.TestResultGetVideoDownloadURLPreparer(ctx, resourceGroupName, testBaseAccountName, packageName, testResultName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.BaseClient", "TestResultGetVideoDownloadURL", nil, "Failure preparing request")
		return
	}

	resp, err := client.TestResultGetVideoDownloadURLSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "testbase.BaseClient", "TestResultGetVideoDownloadURL", resp, "Failure sending request")
		return
	}

	result, err = client.TestResultGetVideoDownloadURLResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.BaseClient", "TestResultGetVideoDownloadURL", resp, "Failure responding to request")
		return
	}

	return
}

// TestResultGetVideoDownloadURLPreparer prepares the TestResultGetVideoDownloadURL request.
func (client BaseClient) TestResultGetVideoDownloadURLPreparer(ctx context.Context, resourceGroupName string, testBaseAccountName string, packageName string, testResultName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"packageName":         autorest.Encode("path", packageName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
		"testBaseAccountName": autorest.Encode("path", testBaseAccountName),
		"testResultName":      autorest.Encode("path", testResultName),
	}

	const APIVersion = "2020-12-16-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/testResults/{testResultName}/getVideoDownloadUrl", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// TestResultGetVideoDownloadURLSender sends the TestResultGetVideoDownloadURL request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) TestResultGetVideoDownloadURLSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// TestResultGetVideoDownloadURLResponder handles the response to the TestResultGetVideoDownloadURL request. The method always
// closes the http.Response Body.
func (client BaseClient) TestResultGetVideoDownloadURLResponder(resp *http.Response) (result DownloadURLResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
