package testbase

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// CustomerEventsClient is the test Base
type CustomerEventsClient struct {
	BaseClient
}

// NewCustomerEventsClient creates an instance of the CustomerEventsClient client.
func NewCustomerEventsClient(subscriptionID string) CustomerEventsClient {
	return NewCustomerEventsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewCustomerEventsClientWithBaseURI creates an instance of the CustomerEventsClient client using a custom endpoint.
// Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewCustomerEventsClientWithBaseURI(baseURI string, subscriptionID string) CustomerEventsClient {
	return CustomerEventsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Create create or replace a Test Base Customer Event.
// Parameters:
// parameters - parameters supplied to create a Test Base CustomerEvent.
// resourceGroupName - the name of the resource group that contains the resource.
// testBaseAccountName - the resource name of the Test Base Account.
// customerEventName - the resource name of the Test Base Customer event.
func (client CustomerEventsClient) Create(ctx context.Context, parameters CustomerEventResource, resourceGroupName string, testBaseAccountName string, customerEventName string) (result CustomerEventsCreateFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CustomerEventsClient.Create")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: parameters,
			Constraints: []validation.Constraint{{Target: "parameters.CustomerEventProperties", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "parameters.CustomerEventProperties.EventName", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "parameters.CustomerEventProperties.Receivers", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("testbase.CustomerEventsClient", "Create", err.Error())
	}

	req, err := client.CreatePreparer(ctx, parameters, resourceGroupName, testBaseAccountName, customerEventName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.CustomerEventsClient", "Create", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.CustomerEventsClient", "Create", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client CustomerEventsClient) CreatePreparer(ctx context.Context, parameters CustomerEventResource, resourceGroupName string, testBaseAccountName string, customerEventName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"customerEventName":   autorest.Encode("path", customerEventName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
		"testBaseAccountName": autorest.Encode("path", testBaseAccountName),
	}

	const APIVersion = "2020-12-16-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/customerEvents/{customerEventName}", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client CustomerEventsClient) CreateSender(req *http.Request) (future CustomerEventsCreateFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client CustomerEventsClient) CreateResponder(resp *http.Response) (result CustomerEventResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete deletes a Test Base Customer Event.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource.
// testBaseAccountName - the resource name of the Test Base Account.
// customerEventName - the resource name of the Test Base Customer event.
func (client CustomerEventsClient) Delete(ctx context.Context, resourceGroupName string, testBaseAccountName string, customerEventName string) (result CustomerEventsDeleteFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CustomerEventsClient.Delete")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeletePreparer(ctx, resourceGroupName, testBaseAccountName, customerEventName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.CustomerEventsClient", "Delete", nil, "Failure preparing request")
		return
	}

	result, err = client.DeleteSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.CustomerEventsClient", "Delete", result.Response(), "Failure sending request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client CustomerEventsClient) DeletePreparer(ctx context.Context, resourceGroupName string, testBaseAccountName string, customerEventName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"customerEventName":   autorest.Encode("path", customerEventName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
		"testBaseAccountName": autorest.Encode("path", testBaseAccountName),
	}

	const APIVersion = "2020-12-16-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/customerEvents/{customerEventName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client CustomerEventsClient) DeleteSender(req *http.Request) (future CustomerEventsDeleteFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client CustomerEventsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get gets a Test Base CustomerEvent.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource.
// testBaseAccountName - the resource name of the Test Base Account.
// customerEventName - the resource name of the Test Base Customer event.
func (client CustomerEventsClient) Get(ctx context.Context, resourceGroupName string, testBaseAccountName string, customerEventName string) (result CustomerEventResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CustomerEventsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, resourceGroupName, testBaseAccountName, customerEventName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.CustomerEventsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "testbase.CustomerEventsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.CustomerEventsClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client CustomerEventsClient) GetPreparer(ctx context.Context, resourceGroupName string, testBaseAccountName string, customerEventName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"customerEventName":   autorest.Encode("path", customerEventName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
		"testBaseAccountName": autorest.Encode("path", testBaseAccountName),
	}

	const APIVersion = "2020-12-16-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/customerEvents/{customerEventName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client CustomerEventsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client CustomerEventsClient) GetResponder(resp *http.Response) (result CustomerEventResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByTestBaseAccount lists all notification events subscribed under a Test Base Account.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource.
// testBaseAccountName - the resource name of the Test Base Account.
func (client CustomerEventsClient) ListByTestBaseAccount(ctx context.Context, resourceGroupName string, testBaseAccountName string) (result CustomerEventListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CustomerEventsClient.ListByTestBaseAccount")
		defer func() {
			sc := -1
			if result.celr.Response.Response != nil {
				sc = result.celr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByTestBaseAccountNextResults
	req, err := client.ListByTestBaseAccountPreparer(ctx, resourceGroupName, testBaseAccountName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.CustomerEventsClient", "ListByTestBaseAccount", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByTestBaseAccountSender(req)
	if err != nil {
		result.celr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "testbase.CustomerEventsClient", "ListByTestBaseAccount", resp, "Failure sending request")
		return
	}

	result.celr, err = client.ListByTestBaseAccountResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.CustomerEventsClient", "ListByTestBaseAccount", resp, "Failure responding to request")
		return
	}
	if result.celr.hasNextLink() && result.celr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByTestBaseAccountPreparer prepares the ListByTestBaseAccount request.
func (client CustomerEventsClient) ListByTestBaseAccountPreparer(ctx context.Context, resourceGroupName string, testBaseAccountName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
		"testBaseAccountName": autorest.Encode("path", testBaseAccountName),
	}

	const APIVersion = "2020-12-16-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/customerEvents", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByTestBaseAccountSender sends the ListByTestBaseAccount request. The method will close the
// http.Response Body if it receives an error.
func (client CustomerEventsClient) ListByTestBaseAccountSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByTestBaseAccountResponder handles the response to the ListByTestBaseAccount request. The method always
// closes the http.Response Body.
func (client CustomerEventsClient) ListByTestBaseAccountResponder(resp *http.Response) (result CustomerEventListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByTestBaseAccountNextResults retrieves the next set of results, if any.
func (client CustomerEventsClient) listByTestBaseAccountNextResults(ctx context.Context, lastResults CustomerEventListResult) (result CustomerEventListResult, err error) {
	req, err := lastResults.customerEventListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "testbase.CustomerEventsClient", "listByTestBaseAccountNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByTestBaseAccountSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "testbase.CustomerEventsClient", "listByTestBaseAccountNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByTestBaseAccountResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.CustomerEventsClient", "listByTestBaseAccountNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByTestBaseAccountComplete enumerates all values, automatically crossing page boundaries as required.
func (client CustomerEventsClient) ListByTestBaseAccountComplete(ctx context.Context, resourceGroupName string, testBaseAccountName string) (result CustomerEventListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CustomerEventsClient.ListByTestBaseAccount")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByTestBaseAccount(ctx, resourceGroupName, testBaseAccountName)
	return
}
