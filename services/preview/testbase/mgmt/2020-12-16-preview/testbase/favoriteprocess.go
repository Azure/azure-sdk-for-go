package testbase

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// FavoriteProcessClient is the REST API for Test Base
type FavoriteProcessClient struct {
	BaseClient
}

// NewFavoriteProcessClient creates an instance of the FavoriteProcessClient client.
func NewFavoriteProcessClient(subscriptionID string) FavoriteProcessClient {
	return NewFavoriteProcessClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewFavoriteProcessClientWithBaseURI creates an instance of the FavoriteProcessClient client using a custom endpoint.
// Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewFavoriteProcessClientWithBaseURI(baseURI string, subscriptionID string) FavoriteProcessClient {
	return FavoriteProcessClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Create create or replace a favorite process for a Test Base Package.
// Parameters:
// parameters - parameters supplied to create a favorite process in a package.
// resourceGroupName - the name of the resource group that contains the resource.
// testBaseAccountName - the resource name of the Test Base Account.
// packageName - the resource name of the Test Base Package.
// favoriteProcessResourceName - the resource name of a favorite process in a package. If the process name
// contains characters that are not allowed in Azure Resource Name, we use 'actualProcessName' in request body
// to submit the name.
func (client FavoriteProcessClient) Create(ctx context.Context, parameters FavoriteProcessResource, resourceGroupName string, testBaseAccountName string, packageName string, favoriteProcessResourceName string) (result FavoriteProcessResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/FavoriteProcessClient.Create")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: parameters,
			Constraints: []validation.Constraint{{Target: "parameters.FavoriteProcessProperties", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "parameters.FavoriteProcessProperties.ActualProcessName", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("testbase.FavoriteProcessClient", "Create", err.Error())
	}

	req, err := client.CreatePreparer(ctx, parameters, resourceGroupName, testBaseAccountName, packageName, favoriteProcessResourceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.FavoriteProcessClient", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "testbase.FavoriteProcessClient", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.FavoriteProcessClient", "Create", resp, "Failure responding to request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client FavoriteProcessClient) CreatePreparer(ctx context.Context, parameters FavoriteProcessResource, resourceGroupName string, testBaseAccountName string, packageName string, favoriteProcessResourceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"favoriteProcessResourceName": autorest.Encode("path", favoriteProcessResourceName),
		"packageName":                 autorest.Encode("path", packageName),
		"resourceGroupName":           autorest.Encode("path", resourceGroupName),
		"subscriptionId":              autorest.Encode("path", client.SubscriptionID),
		"testBaseAccountName":         autorest.Encode("path", testBaseAccountName),
	}

	const APIVersion = "2020-12-16-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/favoriteProcesses/{favoriteProcessResourceName}", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client FavoriteProcessClient) CreateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client FavoriteProcessClient) CreateResponder(resp *http.Response) (result FavoriteProcessResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete deletes a favorite process for a specific package.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource.
// testBaseAccountName - the resource name of the Test Base Account.
// packageName - the resource name of the Test Base Package.
// favoriteProcessResourceName - the resource name of a favorite process in a package. If the process name
// contains characters that are not allowed in Azure Resource Name, we use 'actualProcessName' in request body
// to submit the name.
func (client FavoriteProcessClient) Delete(ctx context.Context, resourceGroupName string, testBaseAccountName string, packageName string, favoriteProcessResourceName string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/FavoriteProcessClient.Delete")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeletePreparer(ctx, resourceGroupName, testBaseAccountName, packageName, favoriteProcessResourceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.FavoriteProcessClient", "Delete", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "testbase.FavoriteProcessClient", "Delete", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.FavoriteProcessClient", "Delete", resp, "Failure responding to request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client FavoriteProcessClient) DeletePreparer(ctx context.Context, resourceGroupName string, testBaseAccountName string, packageName string, favoriteProcessResourceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"favoriteProcessResourceName": autorest.Encode("path", favoriteProcessResourceName),
		"packageName":                 autorest.Encode("path", packageName),
		"resourceGroupName":           autorest.Encode("path", resourceGroupName),
		"subscriptionId":              autorest.Encode("path", client.SubscriptionID),
		"testBaseAccountName":         autorest.Encode("path", testBaseAccountName),
	}

	const APIVersion = "2020-12-16-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/favoriteProcesses/{favoriteProcessResourceName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client FavoriteProcessClient) DeleteSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client FavoriteProcessClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get gets a favorite process for a Test Base Package.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource.
// testBaseAccountName - the resource name of the Test Base Account.
// packageName - the resource name of the Test Base Package.
// favoriteProcessResourceName - the resource name of a favorite process in a package. If the process name
// contains characters that are not allowed in Azure Resource Name, we use 'actualProcessName' in request body
// to submit the name.
func (client FavoriteProcessClient) Get(ctx context.Context, resourceGroupName string, testBaseAccountName string, packageName string, favoriteProcessResourceName string) (result FavoriteProcessResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/FavoriteProcessClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, resourceGroupName, testBaseAccountName, packageName, favoriteProcessResourceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.FavoriteProcessClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "testbase.FavoriteProcessClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.FavoriteProcessClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client FavoriteProcessClient) GetPreparer(ctx context.Context, resourceGroupName string, testBaseAccountName string, packageName string, favoriteProcessResourceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"favoriteProcessResourceName": autorest.Encode("path", favoriteProcessResourceName),
		"packageName":                 autorest.Encode("path", packageName),
		"resourceGroupName":           autorest.Encode("path", resourceGroupName),
		"subscriptionId":              autorest.Encode("path", client.SubscriptionID),
		"testBaseAccountName":         autorest.Encode("path", testBaseAccountName),
	}

	const APIVersion = "2020-12-16-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/favoriteProcesses/{favoriteProcessResourceName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client FavoriteProcessClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client FavoriteProcessClient) GetResponder(resp *http.Response) (result FavoriteProcessResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
