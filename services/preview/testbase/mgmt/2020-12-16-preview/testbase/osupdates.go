package testbase

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// OSUpdatesClient is the test Base
type OSUpdatesClient struct {
	BaseClient
}

// NewOSUpdatesClient creates an instance of the OSUpdatesClient client.
func NewOSUpdatesClient(subscriptionID string) OSUpdatesClient {
	return NewOSUpdatesClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewOSUpdatesClientWithBaseURI creates an instance of the OSUpdatesClient client using a custom endpoint.  Use this
// when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewOSUpdatesClientWithBaseURI(baseURI string, subscriptionID string) OSUpdatesClient {
	return OSUpdatesClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Get gets an OS Update by name in which the package was tested before.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource.
// testBaseAccountName - the resource name of the Test Base Account.
// packageName - the resource name of the Test Base Package.
// osUpdateResourceName - the resource name of an OS Update.
func (client OSUpdatesClient) Get(ctx context.Context, resourceGroupName string, testBaseAccountName string, packageName string, osUpdateResourceName string) (result OSUpdateResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OSUpdatesClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, resourceGroupName, testBaseAccountName, packageName, osUpdateResourceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.OSUpdatesClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "testbase.OSUpdatesClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.OSUpdatesClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client OSUpdatesClient) GetPreparer(ctx context.Context, resourceGroupName string, testBaseAccountName string, packageName string, osUpdateResourceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"osUpdateResourceName": autorest.Encode("path", osUpdateResourceName),
		"packageName":          autorest.Encode("path", packageName),
		"resourceGroupName":    autorest.Encode("path", resourceGroupName),
		"subscriptionId":       autorest.Encode("path", client.SubscriptionID),
		"testBaseAccountName":  autorest.Encode("path", testBaseAccountName),
	}

	const APIVersion = "2020-12-16-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/osUpdates/{osUpdateResourceName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client OSUpdatesClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client OSUpdatesClient) GetResponder(resp *http.Response) (result OSUpdateResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List lists the OS Updates in which the package were tested before.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource.
// testBaseAccountName - the resource name of the Test Base Account.
// packageName - the resource name of the Test Base Package.
// osUpdateType - the type of the OS Update.
func (client OSUpdatesClient) List(ctx context.Context, resourceGroupName string, testBaseAccountName string, packageName string, osUpdateType OsUpdateType) (result OSUpdateListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OSUpdatesClient.List")
		defer func() {
			sc := -1
			if result.oulr.Response.Response != nil {
				sc = result.oulr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listNextResults
	req, err := client.ListPreparer(ctx, resourceGroupName, testBaseAccountName, packageName, osUpdateType)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.OSUpdatesClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.oulr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "testbase.OSUpdatesClient", "List", resp, "Failure sending request")
		return
	}

	result.oulr, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.OSUpdatesClient", "List", resp, "Failure responding to request")
		return
	}
	if result.oulr.hasNextLink() && result.oulr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListPreparer prepares the List request.
func (client OSUpdatesClient) ListPreparer(ctx context.Context, resourceGroupName string, testBaseAccountName string, packageName string, osUpdateType OsUpdateType) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"packageName":         autorest.Encode("path", packageName),
		"resourceGroupName":   autorest.Encode("path", resourceGroupName),
		"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
		"testBaseAccountName": autorest.Encode("path", testBaseAccountName),
	}

	const APIVersion = "2020-12-16-preview"
	queryParameters := map[string]interface{}{
		"api-version":  APIVersion,
		"osUpdateType": autorest.Encode("query", osUpdateType),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/osUpdates", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client OSUpdatesClient) ListSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client OSUpdatesClient) ListResponder(resp *http.Response) (result OSUpdateListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listNextResults retrieves the next set of results, if any.
func (client OSUpdatesClient) listNextResults(ctx context.Context, lastResults OSUpdateListResult) (result OSUpdateListResult, err error) {
	req, err := lastResults.oSUpdateListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "testbase.OSUpdatesClient", "listNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "testbase.OSUpdatesClient", "listNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "testbase.OSUpdatesClient", "listNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListComplete enumerates all values, automatically crossing page boundaries as required.
func (client OSUpdatesClient) ListComplete(ctx context.Context, resourceGroupName string, testBaseAccountName string, packageName string, osUpdateType OsUpdateType) (result OSUpdateListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OSUpdatesClient.List")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.List(ctx, resourceGroupName, testBaseAccountName, packageName, osUpdateType)
	return
}
