package vi

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// ClassicAccountsClient is the microsoft Azure Video Analyzer for Media
type ClassicAccountsClient struct {
	BaseClient
}

// NewClassicAccountsClient creates an instance of the ClassicAccountsClient client.
func NewClassicAccountsClient(subscriptionID string) ClassicAccountsClient {
	return NewClassicAccountsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewClassicAccountsClientWithBaseURI creates an instance of the ClassicAccountsClient client using a custom endpoint.
// Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewClassicAccountsClientWithBaseURI(baseURI string, subscriptionID string) ClassicAccountsClient {
	return ClassicAccountsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// GetDetails gets the properties of an Azure Video Analyzer for Media Classic account.
// Parameters:
// location - the name of Azure region.
// accountName - the name of the Azure Video Analyzer for Media account.
func (client ClassicAccountsClient) GetDetails(ctx context.Context, location string, accountName string) (result ClassicAccount, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ClassicAccountsClient.GetDetails")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: location,
			Constraints: []validation.Constraint{{Target: "location", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: accountName,
			Constraints: []validation.Constraint{{Target: "accountName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "accountName", Name: validation.Pattern, Rule: `^[a-z0-9]+(-[a-z0-9]+)*`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("vi.ClassicAccountsClient", "GetDetails", err.Error())
	}

	req, err := client.GetDetailsPreparer(ctx, location, accountName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vi.ClassicAccountsClient", "GetDetails", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDetailsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "vi.ClassicAccountsClient", "GetDetails", resp, "Failure sending request")
		return
	}

	result, err = client.GetDetailsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "vi.ClassicAccountsClient", "GetDetails", resp, "Failure responding to request")
		return
	}

	return
}

// GetDetailsPreparer prepares the GetDetails request.
func (client ClassicAccountsClient) GetDetailsPreparer(ctx context.Context, location string, accountName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"accountName": autorest.Encode("path", accountName),
		"location":    autorest.Encode("path", location),
	}

	const APIVersion = "2021-10-27-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.VideoIndexer/locations/{location}/classicAccounts/{accountName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetDetailsSender sends the GetDetails request. The method will close the
// http.Response Body if it receives an error.
func (client ClassicAccountsClient) GetDetailsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetDetailsResponder handles the response to the GetDetails request. The method always
// closes the http.Response Body.
func (client ClassicAccountsClient) GetDetailsResponder(resp *http.Response) (result ClassicAccount, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
