package workloadmonitor

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// MonitorsClient is the workload Monitor API
type MonitorsClient struct {
	BaseClient
}

// NewMonitorsClient creates an instance of the MonitorsClient client.
func NewMonitorsClient() MonitorsClient {
	return NewMonitorsClientWithBaseURI(DefaultBaseURI)
}

// NewMonitorsClientWithBaseURI creates an instance of the MonitorsClient client using a custom endpoint.  Use this
// when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewMonitorsClientWithBaseURI(baseURI string) MonitorsClient {
	return MonitorsClient{NewWithBaseURI(baseURI)}
}

// Get sends the get request.
// Parameters:
// subscriptionID - the subscriptionId of the resource
// resourceGroupName - the resourceGroupName of the resource
// resourceNamespace - the resourceNamespace of the resource
// resourceType - the resourceType of the resource
// resourceName - the resourceType of the resource
// monitorID - the monitorId of the resource (url encoded)
// expand - ex: $expand=evidence,configuration
func (client MonitorsClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, resourceNamespace string, resourceType string, resourceName string, monitorID string, expand string) (result Monitor, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MonitorsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, subscriptionID, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorID, expand)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "Get", resp, "Failure responding to request")
	}

	return
}

// GetPreparer prepares the Get request.
func (client MonitorsClient) GetPreparer(ctx context.Context, subscriptionID string, resourceGroupName string, resourceNamespace string, resourceType string, resourceName string, monitorID string, expand string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"monitorId":         autorest.Encode("path", monitorID),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"resourceNamespace": autorest.Encode("path", resourceNamespace),
		"resourceType":      autorest.Encode("path", resourceType),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2020-01-13-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(expand) > 0 {
		queryParameters["$expand"] = autorest.Encode("query", expand)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client MonitorsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client MonitorsClient) GetResponder(resp *http.Response) (result Monitor, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetStateChange sends the get state change request.
// Parameters:
// subscriptionID - the subscriptionId of the resource
// resourceGroupName - the resourceGroupName of the resource
// resourceNamespace - the resourceNamespace of the resource
// resourceType - the resourceType of the resource
// resourceName - the resourceType of the resource
// monitorID - the monitorId of the resource (url encoded)
// timestampUnix - the timestamp of the state change (Unix format)
// expand - ex: $expand=evidence,configuration
func (client MonitorsClient) GetStateChange(ctx context.Context, subscriptionID string, resourceGroupName string, resourceNamespace string, resourceType string, resourceName string, monitorID string, timestampUnix string, expand string) (result MonitorStateChange, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MonitorsClient.GetStateChange")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetStateChangePreparer(ctx, subscriptionID, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorID, timestampUnix, expand)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "GetStateChange", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetStateChangeSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "GetStateChange", resp, "Failure sending request")
		return
	}

	result, err = client.GetStateChangeResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "GetStateChange", resp, "Failure responding to request")
	}

	return
}

// GetStateChangePreparer prepares the GetStateChange request.
func (client MonitorsClient) GetStateChangePreparer(ctx context.Context, subscriptionID string, resourceGroupName string, resourceNamespace string, resourceType string, resourceName string, monitorID string, timestampUnix string, expand string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"monitorId":         autorest.Encode("path", monitorID),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"resourceNamespace": autorest.Encode("path", resourceNamespace),
		"resourceType":      autorest.Encode("path", resourceType),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"timestampUnix":     autorest.Encode("path", timestampUnix),
	}

	const APIVersion = "2020-01-13-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(expand) > 0 {
		queryParameters["$expand"] = autorest.Encode("query", expand)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}/history/{timestampUnix}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetStateChangeSender sends the GetStateChange request. The method will close the
// http.Response Body if it receives an error.
func (client MonitorsClient) GetStateChangeSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetStateChangeResponder handles the response to the GetStateChange request. The method always
// closes the http.Response Body.
func (client MonitorsClient) GetStateChangeResponder(resp *http.Response) (result MonitorStateChange, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List sends the list request.
// Parameters:
// subscriptionID - the subscriptionId of the resource
// resourceGroupName - the resourceGroupName of the resource
// resourceNamespace - the resourceNamespace of the resource
// resourceType - the resourceType of the resource
// resourceName - the resourceType of the resource
// filter - list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example:
// $filter=isHeartbeat eq false
// expand - ex: $expand=evidence,configuration
func (client MonitorsClient) List(ctx context.Context, subscriptionID string, resourceGroupName string, resourceNamespace string, resourceType string, resourceName string, filter string, expand string) (result MonitorListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MonitorsClient.List")
		defer func() {
			sc := -1
			if result.ml.Response.Response != nil {
				sc = result.ml.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listNextResults
	req, err := client.ListPreparer(ctx, subscriptionID, resourceGroupName, resourceNamespace, resourceType, resourceName, filter, expand)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.ml.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "List", resp, "Failure sending request")
		return
	}

	result.ml, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "List", resp, "Failure responding to request")
	}
	if result.ml.hasNextLink() && result.ml.IsEmpty() {
		err = result.NextWithContext(ctx)
	}

	return
}

// ListPreparer prepares the List request.
func (client MonitorsClient) ListPreparer(ctx context.Context, subscriptionID string, resourceGroupName string, resourceNamespace string, resourceType string, resourceName string, filter string, expand string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"resourceNamespace": autorest.Encode("path", resourceNamespace),
		"resourceType":      autorest.Encode("path", resourceType),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2020-01-13-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}
	if len(expand) > 0 {
		queryParameters["$expand"] = autorest.Encode("query", expand)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client MonitorsClient) ListSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client MonitorsClient) ListResponder(resp *http.Response) (result MonitorList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listNextResults retrieves the next set of results, if any.
func (client MonitorsClient) listNextResults(ctx context.Context, lastResults MonitorList) (result MonitorList, err error) {
	req, err := lastResults.monitorListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "listNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "listNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "listNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListComplete enumerates all values, automatically crossing page boundaries as required.
func (client MonitorsClient) ListComplete(ctx context.Context, subscriptionID string, resourceGroupName string, resourceNamespace string, resourceType string, resourceName string, filter string, expand string) (result MonitorListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MonitorsClient.List")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.List(ctx, subscriptionID, resourceGroupName, resourceNamespace, resourceType, resourceName, filter, expand)
	return
}

// ListStateChanges sends the list state changes request.
// Parameters:
// subscriptionID - the subscriptionId of the resource
// resourceGroupName - the resourceGroupName of the resource
// resourceNamespace - the resourceNamespace of the resource
// resourceType - the resourceType of the resource
// resourceName - the resourceType of the resource
// monitorID - the monitorId of the resource (url encoded)
// filter - list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example:
// $filter=isHeartbeat eq false
// expand - ex: $expand=evidence,configuration
// startTimestampUtc - the start Timestamp for the desired history
// endTimestampUtc - the end Timestamp for the desired history
func (client MonitorsClient) ListStateChanges(ctx context.Context, subscriptionID string, resourceGroupName string, resourceNamespace string, resourceType string, resourceName string, monitorID string, filter string, expand string, startTimestampUtc *date.Time, endTimestampUtc *date.Time) (result MonitorStateChangeListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MonitorsClient.ListStateChanges")
		defer func() {
			sc := -1
			if result.mscl.Response.Response != nil {
				sc = result.mscl.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listStateChangesNextResults
	req, err := client.ListStateChangesPreparer(ctx, subscriptionID, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorID, filter, expand, startTimestampUtc, endTimestampUtc)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "ListStateChanges", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListStateChangesSender(req)
	if err != nil {
		result.mscl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "ListStateChanges", resp, "Failure sending request")
		return
	}

	result.mscl, err = client.ListStateChangesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "ListStateChanges", resp, "Failure responding to request")
	}
	if result.mscl.hasNextLink() && result.mscl.IsEmpty() {
		err = result.NextWithContext(ctx)
	}

	return
}

// ListStateChangesPreparer prepares the ListStateChanges request.
func (client MonitorsClient) ListStateChangesPreparer(ctx context.Context, subscriptionID string, resourceGroupName string, resourceNamespace string, resourceType string, resourceName string, monitorID string, filter string, expand string, startTimestampUtc *date.Time, endTimestampUtc *date.Time) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"monitorId":         autorest.Encode("path", monitorID),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"resourceNamespace": autorest.Encode("path", resourceNamespace),
		"resourceType":      autorest.Encode("path", resourceType),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2020-01-13-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}
	if len(expand) > 0 {
		queryParameters["$expand"] = autorest.Encode("query", expand)
	}
	if startTimestampUtc != nil {
		queryParameters["startTimestampUtc"] = autorest.Encode("query", *startTimestampUtc)
	}
	if endTimestampUtc != nil {
		queryParameters["endTimestampUtc"] = autorest.Encode("query", *endTimestampUtc)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}/history", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListStateChangesSender sends the ListStateChanges request. The method will close the
// http.Response Body if it receives an error.
func (client MonitorsClient) ListStateChangesSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListStateChangesResponder handles the response to the ListStateChanges request. The method always
// closes the http.Response Body.
func (client MonitorsClient) ListStateChangesResponder(resp *http.Response) (result MonitorStateChangeList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listStateChangesNextResults retrieves the next set of results, if any.
func (client MonitorsClient) listStateChangesNextResults(ctx context.Context, lastResults MonitorStateChangeList) (result MonitorStateChangeList, err error) {
	req, err := lastResults.monitorStateChangeListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "listStateChangesNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListStateChangesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "listStateChangesNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListStateChangesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorsClient", "listStateChangesNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListStateChangesComplete enumerates all values, automatically crossing page boundaries as required.
func (client MonitorsClient) ListStateChangesComplete(ctx context.Context, subscriptionID string, resourceGroupName string, resourceNamespace string, resourceType string, resourceName string, monitorID string, filter string, expand string, startTimestampUtc *date.Time, endTimestampUtc *date.Time) (result MonitorStateChangeListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MonitorsClient.ListStateChanges")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListStateChanges(ctx, subscriptionID, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorID, filter, expand, startTimestampUtc, endTimestampUtc)
	return
}
