package workloads

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"encoding/json"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// The package's fully qualified name.
const fqdn = "github.com/Azure/azure-sdk-for-go/services/preview/workloads/mgmt/2021-12-01-preview/workloads"

// AzureEntityResource the resource model definition for an Azure Resource Manager resource with an etag.
type AzureEntityResource struct {
	// Etag - READ-ONLY; Resource Etag.
	Etag *string `json:"etag,omitempty"`
	// ID - READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
	// SystemData - READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureEntityResource.
func (aer AzureEntityResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// DB2ProviderInstanceProperties gets or sets the DB2 provider properties.
type DB2ProviderInstanceProperties struct {
	// Hostname - Gets or sets the target virtual machine name.
	Hostname *string `json:"hostname,omitempty"`
	// DbName - Gets or sets the db2 database name.
	DbName *string `json:"dbName,omitempty"`
	// DbPort - Gets or sets the db2 database sql port.
	DbPort *string `json:"dbPort,omitempty"`
	// DbUsername - Gets or sets the db2 database user name.
	DbUsername *string `json:"dbUsername,omitempty"`
	// DbPassword - Gets or sets the db2 database password.
	DbPassword *string `json:"dbPassword,omitempty"`
	// DbPasswordURI - Gets or sets the key vault URI to secret with the database password.
	DbPasswordURI *string `json:"dbPasswordUri,omitempty"`
	// SapSid - Gets or sets the SAP System Identifier
	SapSid *string `json:"sapSid,omitempty"`
	// ProviderType - Possible values include: 'ProviderTypeProviderSpecificProperties', 'ProviderTypeSapHana', 'ProviderTypeSapNetWeaver', 'ProviderTypePrometheusOS', 'ProviderTypeDb2', 'ProviderTypePrometheusHaCluster', 'ProviderTypeMsSQLServer'
	ProviderType ProviderType `json:"providerType,omitempty"`
}

// MarshalJSON is the custom marshaler for DB2ProviderInstanceProperties.
func (dpip DB2ProviderInstanceProperties) MarshalJSON() ([]byte, error) {
	dpip.ProviderType = ProviderTypeDb2
	objectMap := make(map[string]interface{})
	if dpip.Hostname != nil {
		objectMap["hostname"] = dpip.Hostname
	}
	if dpip.DbName != nil {
		objectMap["dbName"] = dpip.DbName
	}
	if dpip.DbPort != nil {
		objectMap["dbPort"] = dpip.DbPort
	}
	if dpip.DbUsername != nil {
		objectMap["dbUsername"] = dpip.DbUsername
	}
	if dpip.DbPassword != nil {
		objectMap["dbPassword"] = dpip.DbPassword
	}
	if dpip.DbPasswordURI != nil {
		objectMap["dbPasswordUri"] = dpip.DbPasswordURI
	}
	if dpip.SapSid != nil {
		objectMap["sapSid"] = dpip.SapSid
	}
	if dpip.ProviderType != "" {
		objectMap["providerType"] = dpip.ProviderType
	}
	return json.Marshal(objectMap)
}

// AsHanaDbProviderInstanceProperties is the BasicProviderSpecificProperties implementation for DB2ProviderInstanceProperties.
func (dpip DB2ProviderInstanceProperties) AsHanaDbProviderInstanceProperties() (*HanaDbProviderInstanceProperties, bool) {
	return nil, false
}

// AsSapNetWeaverProviderInstanceProperties is the BasicProviderSpecificProperties implementation for DB2ProviderInstanceProperties.
func (dpip DB2ProviderInstanceProperties) AsSapNetWeaverProviderInstanceProperties() (*SapNetWeaverProviderInstanceProperties, bool) {
	return nil, false
}

// AsPrometheusOSProviderInstanceProperties is the BasicProviderSpecificProperties implementation for DB2ProviderInstanceProperties.
func (dpip DB2ProviderInstanceProperties) AsPrometheusOSProviderInstanceProperties() (*PrometheusOSProviderInstanceProperties, bool) {
	return nil, false
}

// AsDB2ProviderInstanceProperties is the BasicProviderSpecificProperties implementation for DB2ProviderInstanceProperties.
func (dpip DB2ProviderInstanceProperties) AsDB2ProviderInstanceProperties() (*DB2ProviderInstanceProperties, bool) {
	return &dpip, true
}

// AsPrometheusHaClusterProviderInstanceProperties is the BasicProviderSpecificProperties implementation for DB2ProviderInstanceProperties.
func (dpip DB2ProviderInstanceProperties) AsPrometheusHaClusterProviderInstanceProperties() (*PrometheusHaClusterProviderInstanceProperties, bool) {
	return nil, false
}

// AsMsSQLServerProviderInstanceProperties is the BasicProviderSpecificProperties implementation for DB2ProviderInstanceProperties.
func (dpip DB2ProviderInstanceProperties) AsMsSQLServerProviderInstanceProperties() (*MsSQLServerProviderInstanceProperties, bool) {
	return nil, false
}

// AsProviderSpecificProperties is the BasicProviderSpecificProperties implementation for DB2ProviderInstanceProperties.
func (dpip DB2ProviderInstanceProperties) AsProviderSpecificProperties() (*ProviderSpecificProperties, bool) {
	return nil, false
}

// AsBasicProviderSpecificProperties is the BasicProviderSpecificProperties implementation for DB2ProviderInstanceProperties.
func (dpip DB2ProviderInstanceProperties) AsBasicProviderSpecificProperties() (BasicProviderSpecificProperties, bool) {
	return &dpip, true
}

// Error standard error object.
type Error struct {
	// Code - READ-ONLY; Server-defined set of error codes.
	Code *string `json:"code,omitempty"`
	// Message - READ-ONLY; Human-readable representation of the error.
	Message *string `json:"message,omitempty"`
	// Target - READ-ONLY; Target of the error.
	Target *string `json:"target,omitempty"`
	// Details - READ-ONLY; Array of details about specific errors that led to this reported error.
	Details *[]Error `json:"details,omitempty"`
	// InnerError - READ-ONLY; Object containing more specific information than  the current object about the error.
	InnerError *ErrorInnerError `json:"innerError,omitempty"`
}

// MarshalJSON is the custom marshaler for Error.
func (e Error) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// ErrorAdditionalInfo the resource management error additional info.
type ErrorAdditionalInfo struct {
	// Type - READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty"`
	// Info - READ-ONLY; The additional info.
	Info interface{} `json:"info,omitempty"`
}

// MarshalJSON is the custom marshaler for ErrorAdditionalInfo.
func (eai ErrorAdditionalInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// ErrorDetail the error detail.
type ErrorDetail struct {
	// Code - READ-ONLY; The error code.
	Code *string `json:"code,omitempty"`
	// Message - READ-ONLY; The error message.
	Message *string `json:"message,omitempty"`
	// Target - READ-ONLY; The error target.
	Target *string `json:"target,omitempty"`
	// Details - READ-ONLY; The error details.
	Details *[]ErrorDetail `json:"details,omitempty"`
	// AdditionalInfo - READ-ONLY; The error additional info.
	AdditionalInfo *[]ErrorAdditionalInfo `json:"additionalInfo,omitempty"`
}

// MarshalJSON is the custom marshaler for ErrorDetail.
func (ed ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// ErrorInnerError object containing more specific information than  the current object about the error.
type ErrorInnerError struct {
	InnerError *Error `json:"innerError,omitempty"`
}

// ErrorResponse common error response for all Azure Resource Manager APIs to return error details for
// failed operations. (This also follows the OData error response format.).
type ErrorResponse struct {
	// Error - The error object.
	Error *ErrorDetail `json:"error,omitempty"`
}

// HanaDbProviderInstanceProperties gets or sets the provider properties.
type HanaDbProviderInstanceProperties struct {
	// Hostname - Gets or sets the target virtual machine size.
	Hostname *string `json:"hostname,omitempty"`
	// DbName - Gets or sets the hana database name.
	DbName *string `json:"dbName,omitempty"`
	// SQLPort - Gets or sets the database sql port.
	SQLPort *string `json:"sqlPort,omitempty"`
	// InstanceNumber - Gets or sets the database instance number.
	InstanceNumber *string `json:"instanceNumber,omitempty"`
	// DbUsername - Gets or sets the database user name.
	DbUsername *string `json:"dbUsername,omitempty"`
	// DbPassword - Gets or sets the database password.
	DbPassword *string `json:"dbPassword,omitempty"`
	// DbPasswordURI - Gets or sets the key vault URI to secret with the database password.
	DbPasswordURI *string `json:"dbPasswordUri,omitempty"`
	// DbSslCertificateURI - Gets or sets the blob URI to SSL certificate for the DB.
	DbSslCertificateURI *string `json:"dbSslCertificateUri,omitempty"`
	// SslHostNameInCertificate - Gets or sets the hostname(s) in the SSL certificate.
	SslHostNameInCertificate *string `json:"sslHostNameInCertificate,omitempty"`
	// ProviderType - Possible values include: 'ProviderTypeProviderSpecificProperties', 'ProviderTypeSapHana', 'ProviderTypeSapNetWeaver', 'ProviderTypePrometheusOS', 'ProviderTypeDb2', 'ProviderTypePrometheusHaCluster', 'ProviderTypeMsSQLServer'
	ProviderType ProviderType `json:"providerType,omitempty"`
}

// MarshalJSON is the custom marshaler for HanaDbProviderInstanceProperties.
func (hdpip HanaDbProviderInstanceProperties) MarshalJSON() ([]byte, error) {
	hdpip.ProviderType = ProviderTypeSapHana
	objectMap := make(map[string]interface{})
	if hdpip.Hostname != nil {
		objectMap["hostname"] = hdpip.Hostname
	}
	if hdpip.DbName != nil {
		objectMap["dbName"] = hdpip.DbName
	}
	if hdpip.SQLPort != nil {
		objectMap["sqlPort"] = hdpip.SQLPort
	}
	if hdpip.InstanceNumber != nil {
		objectMap["instanceNumber"] = hdpip.InstanceNumber
	}
	if hdpip.DbUsername != nil {
		objectMap["dbUsername"] = hdpip.DbUsername
	}
	if hdpip.DbPassword != nil {
		objectMap["dbPassword"] = hdpip.DbPassword
	}
	if hdpip.DbPasswordURI != nil {
		objectMap["dbPasswordUri"] = hdpip.DbPasswordURI
	}
	if hdpip.DbSslCertificateURI != nil {
		objectMap["dbSslCertificateUri"] = hdpip.DbSslCertificateURI
	}
	if hdpip.SslHostNameInCertificate != nil {
		objectMap["sslHostNameInCertificate"] = hdpip.SslHostNameInCertificate
	}
	if hdpip.ProviderType != "" {
		objectMap["providerType"] = hdpip.ProviderType
	}
	return json.Marshal(objectMap)
}

// AsHanaDbProviderInstanceProperties is the BasicProviderSpecificProperties implementation for HanaDbProviderInstanceProperties.
func (hdpip HanaDbProviderInstanceProperties) AsHanaDbProviderInstanceProperties() (*HanaDbProviderInstanceProperties, bool) {
	return &hdpip, true
}

// AsSapNetWeaverProviderInstanceProperties is the BasicProviderSpecificProperties implementation for HanaDbProviderInstanceProperties.
func (hdpip HanaDbProviderInstanceProperties) AsSapNetWeaverProviderInstanceProperties() (*SapNetWeaverProviderInstanceProperties, bool) {
	return nil, false
}

// AsPrometheusOSProviderInstanceProperties is the BasicProviderSpecificProperties implementation for HanaDbProviderInstanceProperties.
func (hdpip HanaDbProviderInstanceProperties) AsPrometheusOSProviderInstanceProperties() (*PrometheusOSProviderInstanceProperties, bool) {
	return nil, false
}

// AsDB2ProviderInstanceProperties is the BasicProviderSpecificProperties implementation for HanaDbProviderInstanceProperties.
func (hdpip HanaDbProviderInstanceProperties) AsDB2ProviderInstanceProperties() (*DB2ProviderInstanceProperties, bool) {
	return nil, false
}

// AsPrometheusHaClusterProviderInstanceProperties is the BasicProviderSpecificProperties implementation for HanaDbProviderInstanceProperties.
func (hdpip HanaDbProviderInstanceProperties) AsPrometheusHaClusterProviderInstanceProperties() (*PrometheusHaClusterProviderInstanceProperties, bool) {
	return nil, false
}

// AsMsSQLServerProviderInstanceProperties is the BasicProviderSpecificProperties implementation for HanaDbProviderInstanceProperties.
func (hdpip HanaDbProviderInstanceProperties) AsMsSQLServerProviderInstanceProperties() (*MsSQLServerProviderInstanceProperties, bool) {
	return nil, false
}

// AsProviderSpecificProperties is the BasicProviderSpecificProperties implementation for HanaDbProviderInstanceProperties.
func (hdpip HanaDbProviderInstanceProperties) AsProviderSpecificProperties() (*ProviderSpecificProperties, bool) {
	return nil, false
}

// AsBasicProviderSpecificProperties is the BasicProviderSpecificProperties implementation for HanaDbProviderInstanceProperties.
func (hdpip HanaDbProviderInstanceProperties) AsBasicProviderSpecificProperties() (BasicProviderSpecificProperties, bool) {
	return &hdpip, true
}

// Identity identity for the resource.
type Identity struct {
	// PrincipalID - READ-ONLY; The principal ID of resource identity.
	PrincipalID *string `json:"principalId,omitempty"`
	// TenantID - READ-ONLY; The tenant ID of resource.
	TenantID *string `json:"tenantId,omitempty"`
	// Type - The identity type. Possible values include: 'SystemAssigned'
	Type ResourceIdentityType `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for Identity.
func (i Identity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if i.Type != "" {
		objectMap["type"] = i.Type
	}
	return json.Marshal(objectMap)
}

// ManagedRGConfiguration managed resource group configuration
type ManagedRGConfiguration struct {
	// Name - Managed resource group name
	Name *string `json:"name,omitempty"`
}

// Monitor SAP monitor info on Azure (ARM properties and SAP monitor properties)
type Monitor struct {
	autorest.Response `json:"-"`
	// MonitorProperties - SAP monitor properties
	*MonitorProperties `json:"properties,omitempty"`
	// Tags - Resource tags.
	Tags map[string]*string `json:"tags"`
	// Location - The geo-location where the resource lives
	Location *string `json:"location,omitempty"`
	// ID - READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
	// SystemData - READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty"`
}

// MarshalJSON is the custom marshaler for Monitor.
func (mVar Monitor) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if mVar.MonitorProperties != nil {
		objectMap["properties"] = mVar.MonitorProperties
	}
	if mVar.Tags != nil {
		objectMap["tags"] = mVar.Tags
	}
	if mVar.Location != nil {
		objectMap["location"] = mVar.Location
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for Monitor struct.
func (mVar *Monitor) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var monitorProperties MonitorProperties
				err = json.Unmarshal(*v, &monitorProperties)
				if err != nil {
					return err
				}
				mVar.MonitorProperties = &monitorProperties
			}
		case "tags":
			if v != nil {
				var tags map[string]*string
				err = json.Unmarshal(*v, &tags)
				if err != nil {
					return err
				}
				mVar.Tags = tags
			}
		case "location":
			if v != nil {
				var location string
				err = json.Unmarshal(*v, &location)
				if err != nil {
					return err
				}
				mVar.Location = &location
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				mVar.ID = &ID
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				mVar.Name = &name
			}
		case "type":
			if v != nil {
				var typeVar string
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				mVar.Type = &typeVar
			}
		case "systemData":
			if v != nil {
				var systemData SystemData
				err = json.Unmarshal(*v, &systemData)
				if err != nil {
					return err
				}
				mVar.SystemData = &systemData
			}
		}
	}

	return nil
}

// MonitorListResult the response from the List SAP monitors operation.
type MonitorListResult struct {
	autorest.Response `json:"-"`
	// Value - The list of SAP monitors.
	Value *[]Monitor `json:"value,omitempty"`
	// NextLink - The URL to get the next set of SAP monitors.
	NextLink *string `json:"nextLink,omitempty"`
}

// MonitorListResultIterator provides access to a complete listing of Monitor values.
type MonitorListResultIterator struct {
	i    int
	page MonitorListResultPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *MonitorListResultIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MonitorListResultIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *MonitorListResultIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter MonitorListResultIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter MonitorListResultIterator) Response() MonitorListResult {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter MonitorListResultIterator) Value() Monitor {
	if !iter.page.NotDone() {
		return Monitor{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the MonitorListResultIterator type.
func NewMonitorListResultIterator(page MonitorListResultPage) MonitorListResultIterator {
	return MonitorListResultIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (mlr MonitorListResult) IsEmpty() bool {
	return mlr.Value == nil || len(*mlr.Value) == 0
}

// hasNextLink returns true if the NextLink is not empty.
func (mlr MonitorListResult) hasNextLink() bool {
	return mlr.NextLink != nil && len(*mlr.NextLink) != 0
}

// monitorListResultPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (mlr MonitorListResult) monitorListResultPreparer(ctx context.Context) (*http.Request, error) {
	if !mlr.hasNextLink() {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(mlr.NextLink)))
}

// MonitorListResultPage contains a page of Monitor values.
type MonitorListResultPage struct {
	fn  func(context.Context, MonitorListResult) (MonitorListResult, error)
	mlr MonitorListResult
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *MonitorListResultPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MonitorListResultPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	for {
		next, err := page.fn(ctx, page.mlr)
		if err != nil {
			return err
		}
		page.mlr = next
		if !next.hasNextLink() || !next.IsEmpty() {
			break
		}
	}
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *MonitorListResultPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page MonitorListResultPage) NotDone() bool {
	return !page.mlr.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page MonitorListResultPage) Response() MonitorListResult {
	return page.mlr
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page MonitorListResultPage) Values() []Monitor {
	if page.mlr.IsEmpty() {
		return nil
	}
	return *page.mlr.Value
}

// Creates a new instance of the MonitorListResultPage type.
func NewMonitorListResultPage(cur MonitorListResult, getNextPage func(context.Context, MonitorListResult) (MonitorListResult, error)) MonitorListResultPage {
	return MonitorListResultPage{
		fn:  getNextPage,
		mlr: cur,
	}
}

// MonitorProperties describes the properties of a SAP monitor.
type MonitorProperties struct {
	// ProvisioningState - READ-ONLY; State of provisioning of the monitor. Possible values include: 'Accepted', 'Creating', 'Updating', 'Failed', 'Succeeded', 'Deleting', 'Migrating'
	ProvisioningState WorkloadMonitorProvisioningState `json:"provisioningState,omitempty"`
	// Errors - READ-ONLY; Defines the SAP monitor errors.
	Errors *MonitorPropertiesErrors `json:"errors,omitempty"`
	// AppLocation - The monitor resources will be deployed in the monitoring region. The subnet region should be same as the monitoring region.
	AppLocation *string `json:"appLocation,omitempty"`
	// RoutingPreference - Sets the routing preference of the monitor. By default only RFC1918 traffic is routed to the customer VNET. Possible values include: 'Default', 'RouteAll'
	RoutingPreference RoutingPreference `json:"routingPreference,omitempty"`
	// ManagedResourceGroupConfiguration - Managed resource group configuration
	ManagedResourceGroupConfiguration *ManagedRGConfiguration `json:"managedResourceGroupConfiguration,omitempty"`
	// LogAnalyticsWorkspaceArmID - The ARM ID of the Log Analytics Workspace that is used for monitoring.
	LogAnalyticsWorkspaceArmID *string `json:"logAnalyticsWorkspaceArmId,omitempty"`
	// MonitorSubnet - The subnet which the SAP monitor will be deployed in
	MonitorSubnet *string `json:"monitorSubnet,omitempty"`
	// MsiArmID - READ-ONLY; The ARM ID of the MSI used for monitoring.
	MsiArmID *string `json:"msiArmId,omitempty"`
}

// MarshalJSON is the custom marshaler for MonitorProperties.
func (mp MonitorProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if mp.AppLocation != nil {
		objectMap["appLocation"] = mp.AppLocation
	}
	if mp.RoutingPreference != "" {
		objectMap["routingPreference"] = mp.RoutingPreference
	}
	if mp.ManagedResourceGroupConfiguration != nil {
		objectMap["managedResourceGroupConfiguration"] = mp.ManagedResourceGroupConfiguration
	}
	if mp.LogAnalyticsWorkspaceArmID != nil {
		objectMap["logAnalyticsWorkspaceArmId"] = mp.LogAnalyticsWorkspaceArmID
	}
	if mp.MonitorSubnet != nil {
		objectMap["monitorSubnet"] = mp.MonitorSubnet
	}
	return json.Marshal(objectMap)
}

// MonitorPropertiesErrors defines the SAP monitor errors.
type MonitorPropertiesErrors struct {
	// Code - READ-ONLY; Server-defined set of error codes.
	Code *string `json:"code,omitempty"`
	// Message - READ-ONLY; Human-readable representation of the error.
	Message *string `json:"message,omitempty"`
	// Target - READ-ONLY; Target of the error.
	Target *string `json:"target,omitempty"`
	// Details - READ-ONLY; Array of details about specific errors that led to this reported error.
	Details *[]Error `json:"details,omitempty"`
	// InnerError - READ-ONLY; Object containing more specific information than  the current object about the error.
	InnerError *ErrorInnerError `json:"innerError,omitempty"`
}

// MarshalJSON is the custom marshaler for MonitorPropertiesErrors.
func (mp MonitorPropertiesErrors) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// MonitorsCreateFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type MonitorsCreateFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(MonitorsClient) (Monitor, error)
}

// UnmarshalJSON is the custom unmarshaller for CreateFuture.
func (future *MonitorsCreateFuture) UnmarshalJSON(body []byte) error {
	var azFuture azure.Future
	if err := json.Unmarshal(body, &azFuture); err != nil {
		return err
	}
	future.FutureAPI = &azFuture
	future.Result = future.result
	return nil
}

// result is the default implementation for MonitorsCreateFuture.Result.
func (future *MonitorsCreateFuture) result(client MonitorsClient) (mVar Monitor, err error) {
	var done bool
	done, err = future.DoneWithContext(context.Background(), client)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.MonitorsCreateFuture", "Result", future.Response(), "Polling failure")
		return
	}
	if !done {
		mVar.Response.Response = future.Response()
		err = azure.NewAsyncOpIncompleteError("workloads.MonitorsCreateFuture")
		return
	}
	sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if mVar.Response.Response, err = future.GetResult(sender); err == nil && mVar.Response.Response.StatusCode != http.StatusNoContent {
		mVar, err = client.CreateResponder(mVar.Response.Response)
		if err != nil {
			err = autorest.NewErrorWithError(err, "workloads.MonitorsCreateFuture", "Result", mVar.Response.Response, "Failure responding to request")
		}
	}
	return
}

// MonitorsDeleteFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type MonitorsDeleteFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(MonitorsClient) (OperationStatusResult, error)
}

// UnmarshalJSON is the custom unmarshaller for CreateFuture.
func (future *MonitorsDeleteFuture) UnmarshalJSON(body []byte) error {
	var azFuture azure.Future
	if err := json.Unmarshal(body, &azFuture); err != nil {
		return err
	}
	future.FutureAPI = &azFuture
	future.Result = future.result
	return nil
}

// result is the default implementation for MonitorsDeleteFuture.Result.
func (future *MonitorsDeleteFuture) result(client MonitorsClient) (osr OperationStatusResult, err error) {
	var done bool
	done, err = future.DoneWithContext(context.Background(), client)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.MonitorsDeleteFuture", "Result", future.Response(), "Polling failure")
		return
	}
	if !done {
		osr.Response.Response = future.Response()
		err = azure.NewAsyncOpIncompleteError("workloads.MonitorsDeleteFuture")
		return
	}
	sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if osr.Response.Response, err = future.GetResult(sender); err == nil && osr.Response.Response.StatusCode != http.StatusNoContent {
		osr, err = client.DeleteResponder(osr.Response.Response)
		if err != nil {
			err = autorest.NewErrorWithError(err, "workloads.MonitorsDeleteFuture", "Result", osr.Response.Response, "Failure responding to request")
		}
	}
	return
}

// MsSQLServerProviderInstanceProperties gets or sets the SQL server provider properties.
type MsSQLServerProviderInstanceProperties struct {
	// Hostname - Gets or sets the SQL server host name.
	Hostname *string `json:"hostname,omitempty"`
	// DbPort - Gets or sets the database sql port.
	DbPort *string `json:"dbPort,omitempty"`
	// DbUsername - Gets or sets the database user name.
	DbUsername *string `json:"dbUsername,omitempty"`
	// DbPassword - Gets or sets the database password.
	DbPassword *string `json:"dbPassword,omitempty"`
	// DbPasswordURI - Gets or sets the key vault URI to secret with the database password.
	DbPasswordURI *string `json:"dbPasswordUri,omitempty"`
	// SapSid - Gets or sets the SAP System Identifier
	SapSid *string `json:"sapSid,omitempty"`
	// ProviderType - Possible values include: 'ProviderTypeProviderSpecificProperties', 'ProviderTypeSapHana', 'ProviderTypeSapNetWeaver', 'ProviderTypePrometheusOS', 'ProviderTypeDb2', 'ProviderTypePrometheusHaCluster', 'ProviderTypeMsSQLServer'
	ProviderType ProviderType `json:"providerType,omitempty"`
}

// MarshalJSON is the custom marshaler for MsSQLServerProviderInstanceProperties.
func (msspip MsSQLServerProviderInstanceProperties) MarshalJSON() ([]byte, error) {
	msspip.ProviderType = ProviderTypeMsSQLServer
	objectMap := make(map[string]interface{})
	if msspip.Hostname != nil {
		objectMap["hostname"] = msspip.Hostname
	}
	if msspip.DbPort != nil {
		objectMap["dbPort"] = msspip.DbPort
	}
	if msspip.DbUsername != nil {
		objectMap["dbUsername"] = msspip.DbUsername
	}
	if msspip.DbPassword != nil {
		objectMap["dbPassword"] = msspip.DbPassword
	}
	if msspip.DbPasswordURI != nil {
		objectMap["dbPasswordUri"] = msspip.DbPasswordURI
	}
	if msspip.SapSid != nil {
		objectMap["sapSid"] = msspip.SapSid
	}
	if msspip.ProviderType != "" {
		objectMap["providerType"] = msspip.ProviderType
	}
	return json.Marshal(objectMap)
}

// AsHanaDbProviderInstanceProperties is the BasicProviderSpecificProperties implementation for MsSQLServerProviderInstanceProperties.
func (msspip MsSQLServerProviderInstanceProperties) AsHanaDbProviderInstanceProperties() (*HanaDbProviderInstanceProperties, bool) {
	return nil, false
}

// AsSapNetWeaverProviderInstanceProperties is the BasicProviderSpecificProperties implementation for MsSQLServerProviderInstanceProperties.
func (msspip MsSQLServerProviderInstanceProperties) AsSapNetWeaverProviderInstanceProperties() (*SapNetWeaverProviderInstanceProperties, bool) {
	return nil, false
}

// AsPrometheusOSProviderInstanceProperties is the BasicProviderSpecificProperties implementation for MsSQLServerProviderInstanceProperties.
func (msspip MsSQLServerProviderInstanceProperties) AsPrometheusOSProviderInstanceProperties() (*PrometheusOSProviderInstanceProperties, bool) {
	return nil, false
}

// AsDB2ProviderInstanceProperties is the BasicProviderSpecificProperties implementation for MsSQLServerProviderInstanceProperties.
func (msspip MsSQLServerProviderInstanceProperties) AsDB2ProviderInstanceProperties() (*DB2ProviderInstanceProperties, bool) {
	return nil, false
}

// AsPrometheusHaClusterProviderInstanceProperties is the BasicProviderSpecificProperties implementation for MsSQLServerProviderInstanceProperties.
func (msspip MsSQLServerProviderInstanceProperties) AsPrometheusHaClusterProviderInstanceProperties() (*PrometheusHaClusterProviderInstanceProperties, bool) {
	return nil, false
}

// AsMsSQLServerProviderInstanceProperties is the BasicProviderSpecificProperties implementation for MsSQLServerProviderInstanceProperties.
func (msspip MsSQLServerProviderInstanceProperties) AsMsSQLServerProviderInstanceProperties() (*MsSQLServerProviderInstanceProperties, bool) {
	return &msspip, true
}

// AsProviderSpecificProperties is the BasicProviderSpecificProperties implementation for MsSQLServerProviderInstanceProperties.
func (msspip MsSQLServerProviderInstanceProperties) AsProviderSpecificProperties() (*ProviderSpecificProperties, bool) {
	return nil, false
}

// AsBasicProviderSpecificProperties is the BasicProviderSpecificProperties implementation for MsSQLServerProviderInstanceProperties.
func (msspip MsSQLServerProviderInstanceProperties) AsBasicProviderSpecificProperties() (BasicProviderSpecificProperties, bool) {
	return &msspip, true
}

// Operation details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Name - READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
	Name *string `json:"name,omitempty"`
	// IsDataAction - READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
	IsDataAction *bool `json:"isDataAction,omitempty"`
	// Display - Localized display information for this particular operation.
	Display *OperationDisplay `json:"display,omitempty"`
	// Origin - READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system". Possible values include: 'OriginUser', 'OriginSystem', 'OriginUsersystem'
	Origin Origin `json:"origin,omitempty"`
	// ActionType - READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs. Possible values include: 'Internal'
	ActionType ActionType `json:"actionType,omitempty"`
}

// MarshalJSON is the custom marshaler for Operation.
func (o Operation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if o.Display != nil {
		objectMap["display"] = o.Display
	}
	return json.Marshal(objectMap)
}

// OperationDisplay localized display information for this particular operation.
type OperationDisplay struct {
	// Provider - READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
	Provider *string `json:"provider,omitempty"`
	// Resource - READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
	Resource *string `json:"resource,omitempty"`
	// Operation - READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
	Operation *string `json:"operation,omitempty"`
	// Description - READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string `json:"description,omitempty"`
}

// MarshalJSON is the custom marshaler for OperationDisplay.
func (o OperationDisplay) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// OperationListResult a list of REST API operations supported by an Azure Resource Provider. It contains
// an URL link to get the next set of results.
type OperationListResult struct {
	autorest.Response `json:"-"`
	// Value - READ-ONLY; List of operations supported by the resource provider
	Value *[]Operation `json:"value,omitempty"`
	// NextLink - READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON is the custom marshaler for OperationListResult.
func (olr OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// OperationListResultIterator provides access to a complete listing of Operation values.
type OperationListResultIterator struct {
	i    int
	page OperationListResultPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *OperationListResultIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OperationListResultIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *OperationListResultIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter OperationListResultIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter OperationListResultIterator) Response() OperationListResult {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter OperationListResultIterator) Value() Operation {
	if !iter.page.NotDone() {
		return Operation{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the OperationListResultIterator type.
func NewOperationListResultIterator(page OperationListResultPage) OperationListResultIterator {
	return OperationListResultIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (olr OperationListResult) IsEmpty() bool {
	return olr.Value == nil || len(*olr.Value) == 0
}

// hasNextLink returns true if the NextLink is not empty.
func (olr OperationListResult) hasNextLink() bool {
	return olr.NextLink != nil && len(*olr.NextLink) != 0
}

// operationListResultPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (olr OperationListResult) operationListResultPreparer(ctx context.Context) (*http.Request, error) {
	if !olr.hasNextLink() {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(olr.NextLink)))
}

// OperationListResultPage contains a page of Operation values.
type OperationListResultPage struct {
	fn  func(context.Context, OperationListResult) (OperationListResult, error)
	olr OperationListResult
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *OperationListResultPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OperationListResultPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	for {
		next, err := page.fn(ctx, page.olr)
		if err != nil {
			return err
		}
		page.olr = next
		if !next.hasNextLink() || !next.IsEmpty() {
			break
		}
	}
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *OperationListResultPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page OperationListResultPage) NotDone() bool {
	return !page.olr.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page OperationListResultPage) Response() OperationListResult {
	return page.olr
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page OperationListResultPage) Values() []Operation {
	if page.olr.IsEmpty() {
		return nil
	}
	return *page.olr.Value
}

// Creates a new instance of the OperationListResultPage type.
func NewOperationListResultPage(cur OperationListResult, getNextPage func(context.Context, OperationListResult) (OperationListResult, error)) OperationListResultPage {
	return OperationListResultPage{
		fn:  getNextPage,
		olr: cur,
	}
}

// OperationsContent defines the workload operation content.
type OperationsContent struct {
	// OperationsDefinition - Operations content.
	*OperationsDefinition `json:"properties,omitempty"`
	// ID - READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
	// SystemData - READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty"`
}

// MarshalJSON is the custom marshaler for OperationsContent.
func (oc OperationsContent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if oc.OperationsDefinition != nil {
		objectMap["properties"] = oc.OperationsDefinition
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for OperationsContent struct.
func (oc *OperationsContent) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var operationsDefinition OperationsDefinition
				err = json.Unmarshal(*v, &operationsDefinition)
				if err != nil {
					return err
				}
				oc.OperationsDefinition = &operationsDefinition
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				oc.ID = &ID
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				oc.Name = &name
			}
		case "type":
			if v != nil {
				var typeVar string
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				oc.Type = &typeVar
			}
		case "systemData":
			if v != nil {
				var systemData SystemData
				err = json.Unmarshal(*v, &systemData)
				if err != nil {
					return err
				}
				oc.SystemData = &systemData
			}
		}
	}

	return nil
}

// OperationsDefinition properties of an Operation.
type OperationsDefinition struct {
	// Name - Name of the operation.
	Name *string `json:"name,omitempty"`
	// IsDataAction - Indicates whether the operation applies to data-plane.
	IsDataAction *bool `json:"isDataAction,omitempty"`
	// Origin - Defines the workload operation origin. Possible values include: 'OperationPropertiesNotSpecified', 'OperationPropertiesUser', 'OperationPropertiesSystem'
	Origin OperationProperties `json:"origin,omitempty"`
	// Display - Display information of the operation.
	Display *OperationsDefinitionDisplay `json:"display,omitempty"`
	// ActionType - Defines the action type of workload operation. Possible values include: 'WorkloadMonitorActionTypeNotSpecified', 'WorkloadMonitorActionTypeInternal'
	ActionType WorkloadMonitorActionType `json:"actionType,omitempty"`
	// Properties - Defines the workload operation properties.
	Properties interface{} `json:"properties,omitempty"`
}

// OperationsDefinitionArrayResponseWithContinuation defines the workload operation definition response.
type OperationsDefinitionArrayResponseWithContinuation struct {
	// Value - Defines the workload operation definition response properties.
	Value *[]OperationsDefinition `json:"value,omitempty"`
	// NextLink - The URL to get to the next set of results, if there are any.
	NextLink *string `json:"nextLink,omitempty"`
}

// OperationsDefinitionDisplay display information of the operation.
type OperationsDefinitionDisplay struct {
	// Provider - Defines the workload provider.
	Provider *string `json:"provider,omitempty"`
	// Resource - Defines the workload resource.
	Resource *string `json:"resource,omitempty"`
	// Operation - Defines the workload operation.
	Operation *string `json:"operation,omitempty"`
	// Description - Describes the workload operation.
	Description *string `json:"description,omitempty"`
}

// OperationsDisplayDefinition defines the workload operation.
type OperationsDisplayDefinition struct {
	// Provider - Defines the workload provider.
	Provider *string `json:"provider,omitempty"`
	// Resource - Defines the workload resource.
	Resource *string `json:"resource,omitempty"`
	// Operation - Defines the workload operation.
	Operation *string `json:"operation,omitempty"`
	// Description - Describes the workload operation.
	Description *string `json:"description,omitempty"`
}

// OperationStatusResult the current status of an async operation.
type OperationStatusResult struct {
	autorest.Response `json:"-"`
	// ID - Fully qualified ID for the async operation.
	ID *string `json:"id,omitempty"`
	// Name - Name of the async operation.
	Name *string `json:"name,omitempty"`
	// Status - Operation status.
	Status *string `json:"status,omitempty"`
	// PercentComplete - Percent of the operation that is complete.
	PercentComplete *float64 `json:"percentComplete,omitempty"`
	// StartTime - The start time of the operation.
	StartTime *date.Time `json:"startTime,omitempty"`
	// EndTime - The end time of the operation.
	EndTime *date.Time `json:"endTime,omitempty"`
	// Operations - The operations list.
	Operations *[]OperationStatusResult `json:"operations,omitempty"`
	// Error - If present, details of the operation error.
	Error *ErrorDetail `json:"error,omitempty"`
}

// Plan plan for the resource.
type Plan struct {
	// Name - A user defined name of the 3rd Party Artifact that is being procured.
	Name *string `json:"name,omitempty"`
	// Publisher - The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
	Publisher *string `json:"publisher,omitempty"`
	// Product - The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
	Product *string `json:"product,omitempty"`
	// PromotionCode - A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
	PromotionCode *string `json:"promotionCode,omitempty"`
	// Version - The version of the desired product/artifact.
	Version *string `json:"version,omitempty"`
}

// PrometheusHaClusterProviderInstanceProperties gets or sets the PrometheusHaCluster provider properties.
type PrometheusHaClusterProviderInstanceProperties struct {
	// PrometheusURL - URL of the Node Exporter endpoint.
	PrometheusURL *string `json:"prometheusUrl,omitempty"`
	// Hostname - Gets or sets the target machine name.
	Hostname *string `json:"hostname,omitempty"`
	// Sid - Gets or sets the cluster sid.
	Sid *string `json:"sid,omitempty"`
	// ClusterName - Gets or sets the clusterName.
	ClusterName *string `json:"clusterName,omitempty"`
	// ProviderType - Possible values include: 'ProviderTypeProviderSpecificProperties', 'ProviderTypeSapHana', 'ProviderTypeSapNetWeaver', 'ProviderTypePrometheusOS', 'ProviderTypeDb2', 'ProviderTypePrometheusHaCluster', 'ProviderTypeMsSQLServer'
	ProviderType ProviderType `json:"providerType,omitempty"`
}

// MarshalJSON is the custom marshaler for PrometheusHaClusterProviderInstanceProperties.
func (phcpip PrometheusHaClusterProviderInstanceProperties) MarshalJSON() ([]byte, error) {
	phcpip.ProviderType = ProviderTypePrometheusHaCluster
	objectMap := make(map[string]interface{})
	if phcpip.PrometheusURL != nil {
		objectMap["prometheusUrl"] = phcpip.PrometheusURL
	}
	if phcpip.Hostname != nil {
		objectMap["hostname"] = phcpip.Hostname
	}
	if phcpip.Sid != nil {
		objectMap["sid"] = phcpip.Sid
	}
	if phcpip.ClusterName != nil {
		objectMap["clusterName"] = phcpip.ClusterName
	}
	if phcpip.ProviderType != "" {
		objectMap["providerType"] = phcpip.ProviderType
	}
	return json.Marshal(objectMap)
}

// AsHanaDbProviderInstanceProperties is the BasicProviderSpecificProperties implementation for PrometheusHaClusterProviderInstanceProperties.
func (phcpip PrometheusHaClusterProviderInstanceProperties) AsHanaDbProviderInstanceProperties() (*HanaDbProviderInstanceProperties, bool) {
	return nil, false
}

// AsSapNetWeaverProviderInstanceProperties is the BasicProviderSpecificProperties implementation for PrometheusHaClusterProviderInstanceProperties.
func (phcpip PrometheusHaClusterProviderInstanceProperties) AsSapNetWeaverProviderInstanceProperties() (*SapNetWeaverProviderInstanceProperties, bool) {
	return nil, false
}

// AsPrometheusOSProviderInstanceProperties is the BasicProviderSpecificProperties implementation for PrometheusHaClusterProviderInstanceProperties.
func (phcpip PrometheusHaClusterProviderInstanceProperties) AsPrometheusOSProviderInstanceProperties() (*PrometheusOSProviderInstanceProperties, bool) {
	return nil, false
}

// AsDB2ProviderInstanceProperties is the BasicProviderSpecificProperties implementation for PrometheusHaClusterProviderInstanceProperties.
func (phcpip PrometheusHaClusterProviderInstanceProperties) AsDB2ProviderInstanceProperties() (*DB2ProviderInstanceProperties, bool) {
	return nil, false
}

// AsPrometheusHaClusterProviderInstanceProperties is the BasicProviderSpecificProperties implementation for PrometheusHaClusterProviderInstanceProperties.
func (phcpip PrometheusHaClusterProviderInstanceProperties) AsPrometheusHaClusterProviderInstanceProperties() (*PrometheusHaClusterProviderInstanceProperties, bool) {
	return &phcpip, true
}

// AsMsSQLServerProviderInstanceProperties is the BasicProviderSpecificProperties implementation for PrometheusHaClusterProviderInstanceProperties.
func (phcpip PrometheusHaClusterProviderInstanceProperties) AsMsSQLServerProviderInstanceProperties() (*MsSQLServerProviderInstanceProperties, bool) {
	return nil, false
}

// AsProviderSpecificProperties is the BasicProviderSpecificProperties implementation for PrometheusHaClusterProviderInstanceProperties.
func (phcpip PrometheusHaClusterProviderInstanceProperties) AsProviderSpecificProperties() (*ProviderSpecificProperties, bool) {
	return nil, false
}

// AsBasicProviderSpecificProperties is the BasicProviderSpecificProperties implementation for PrometheusHaClusterProviderInstanceProperties.
func (phcpip PrometheusHaClusterProviderInstanceProperties) AsBasicProviderSpecificProperties() (BasicProviderSpecificProperties, bool) {
	return &phcpip, true
}

// PrometheusOSProviderInstanceProperties gets or sets the PrometheusOS provider properties.
type PrometheusOSProviderInstanceProperties struct {
	// PrometheusURL - URL of the Node Exporter endpoint
	PrometheusURL *string `json:"prometheusUrl,omitempty"`
	// ProviderType - Possible values include: 'ProviderTypeProviderSpecificProperties', 'ProviderTypeSapHana', 'ProviderTypeSapNetWeaver', 'ProviderTypePrometheusOS', 'ProviderTypeDb2', 'ProviderTypePrometheusHaCluster', 'ProviderTypeMsSQLServer'
	ProviderType ProviderType `json:"providerType,omitempty"`
}

// MarshalJSON is the custom marshaler for PrometheusOSProviderInstanceProperties.
func (popip PrometheusOSProviderInstanceProperties) MarshalJSON() ([]byte, error) {
	popip.ProviderType = ProviderTypePrometheusOS
	objectMap := make(map[string]interface{})
	if popip.PrometheusURL != nil {
		objectMap["prometheusUrl"] = popip.PrometheusURL
	}
	if popip.ProviderType != "" {
		objectMap["providerType"] = popip.ProviderType
	}
	return json.Marshal(objectMap)
}

// AsHanaDbProviderInstanceProperties is the BasicProviderSpecificProperties implementation for PrometheusOSProviderInstanceProperties.
func (popip PrometheusOSProviderInstanceProperties) AsHanaDbProviderInstanceProperties() (*HanaDbProviderInstanceProperties, bool) {
	return nil, false
}

// AsSapNetWeaverProviderInstanceProperties is the BasicProviderSpecificProperties implementation for PrometheusOSProviderInstanceProperties.
func (popip PrometheusOSProviderInstanceProperties) AsSapNetWeaverProviderInstanceProperties() (*SapNetWeaverProviderInstanceProperties, bool) {
	return nil, false
}

// AsPrometheusOSProviderInstanceProperties is the BasicProviderSpecificProperties implementation for PrometheusOSProviderInstanceProperties.
func (popip PrometheusOSProviderInstanceProperties) AsPrometheusOSProviderInstanceProperties() (*PrometheusOSProviderInstanceProperties, bool) {
	return &popip, true
}

// AsDB2ProviderInstanceProperties is the BasicProviderSpecificProperties implementation for PrometheusOSProviderInstanceProperties.
func (popip PrometheusOSProviderInstanceProperties) AsDB2ProviderInstanceProperties() (*DB2ProviderInstanceProperties, bool) {
	return nil, false
}

// AsPrometheusHaClusterProviderInstanceProperties is the BasicProviderSpecificProperties implementation for PrometheusOSProviderInstanceProperties.
func (popip PrometheusOSProviderInstanceProperties) AsPrometheusHaClusterProviderInstanceProperties() (*PrometheusHaClusterProviderInstanceProperties, bool) {
	return nil, false
}

// AsMsSQLServerProviderInstanceProperties is the BasicProviderSpecificProperties implementation for PrometheusOSProviderInstanceProperties.
func (popip PrometheusOSProviderInstanceProperties) AsMsSQLServerProviderInstanceProperties() (*MsSQLServerProviderInstanceProperties, bool) {
	return nil, false
}

// AsProviderSpecificProperties is the BasicProviderSpecificProperties implementation for PrometheusOSProviderInstanceProperties.
func (popip PrometheusOSProviderInstanceProperties) AsProviderSpecificProperties() (*ProviderSpecificProperties, bool) {
	return nil, false
}

// AsBasicProviderSpecificProperties is the BasicProviderSpecificProperties implementation for PrometheusOSProviderInstanceProperties.
func (popip PrometheusOSProviderInstanceProperties) AsBasicProviderSpecificProperties() (BasicProviderSpecificProperties, bool) {
	return &popip, true
}

// ProviderInstance a provider instance associated with monitor.
type ProviderInstance struct {
	autorest.Response `json:"-"`
	// ProviderInstanceProperties - Provider Instance properties
	*ProviderInstanceProperties `json:"properties,omitempty"`
	// ID - READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
	// SystemData - READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty"`
}

// MarshalJSON is the custom marshaler for ProviderInstance.
func (pi ProviderInstance) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if pi.ProviderInstanceProperties != nil {
		objectMap["properties"] = pi.ProviderInstanceProperties
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for ProviderInstance struct.
func (pi *ProviderInstance) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var providerInstanceProperties ProviderInstanceProperties
				err = json.Unmarshal(*v, &providerInstanceProperties)
				if err != nil {
					return err
				}
				pi.ProviderInstanceProperties = &providerInstanceProperties
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				pi.ID = &ID
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				pi.Name = &name
			}
		case "type":
			if v != nil {
				var typeVar string
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				pi.Type = &typeVar
			}
		case "systemData":
			if v != nil {
				var systemData SystemData
				err = json.Unmarshal(*v, &systemData)
				if err != nil {
					return err
				}
				pi.SystemData = &systemData
			}
		}
	}

	return nil
}

// ProviderInstanceListResult the response from the List provider instances operation.
type ProviderInstanceListResult struct {
	autorest.Response `json:"-"`
	// Value - The list of provider instances.
	Value *[]ProviderInstance `json:"value,omitempty"`
	// NextLink - The URL to get the next set of provider instances.
	NextLink *string `json:"nextLink,omitempty"`
}

// ProviderInstanceListResultIterator provides access to a complete listing of ProviderInstance values.
type ProviderInstanceListResultIterator struct {
	i    int
	page ProviderInstanceListResultPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *ProviderInstanceListResultIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ProviderInstanceListResultIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *ProviderInstanceListResultIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter ProviderInstanceListResultIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter ProviderInstanceListResultIterator) Response() ProviderInstanceListResult {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter ProviderInstanceListResultIterator) Value() ProviderInstance {
	if !iter.page.NotDone() {
		return ProviderInstance{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the ProviderInstanceListResultIterator type.
func NewProviderInstanceListResultIterator(page ProviderInstanceListResultPage) ProviderInstanceListResultIterator {
	return ProviderInstanceListResultIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (pilr ProviderInstanceListResult) IsEmpty() bool {
	return pilr.Value == nil || len(*pilr.Value) == 0
}

// hasNextLink returns true if the NextLink is not empty.
func (pilr ProviderInstanceListResult) hasNextLink() bool {
	return pilr.NextLink != nil && len(*pilr.NextLink) != 0
}

// providerInstanceListResultPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (pilr ProviderInstanceListResult) providerInstanceListResultPreparer(ctx context.Context) (*http.Request, error) {
	if !pilr.hasNextLink() {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(pilr.NextLink)))
}

// ProviderInstanceListResultPage contains a page of ProviderInstance values.
type ProviderInstanceListResultPage struct {
	fn   func(context.Context, ProviderInstanceListResult) (ProviderInstanceListResult, error)
	pilr ProviderInstanceListResult
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *ProviderInstanceListResultPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ProviderInstanceListResultPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	for {
		next, err := page.fn(ctx, page.pilr)
		if err != nil {
			return err
		}
		page.pilr = next
		if !next.hasNextLink() || !next.IsEmpty() {
			break
		}
	}
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *ProviderInstanceListResultPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page ProviderInstanceListResultPage) NotDone() bool {
	return !page.pilr.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page ProviderInstanceListResultPage) Response() ProviderInstanceListResult {
	return page.pilr
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page ProviderInstanceListResultPage) Values() []ProviderInstance {
	if page.pilr.IsEmpty() {
		return nil
	}
	return *page.pilr.Value
}

// Creates a new instance of the ProviderInstanceListResultPage type.
func NewProviderInstanceListResultPage(cur ProviderInstanceListResult, getNextPage func(context.Context, ProviderInstanceListResult) (ProviderInstanceListResult, error)) ProviderInstanceListResultPage {
	return ProviderInstanceListResultPage{
		fn:   getNextPage,
		pilr: cur,
	}
}

// ProviderInstanceProperties describes the properties of a provider instance.
type ProviderInstanceProperties struct {
	// ProvisioningState - READ-ONLY; State of provisioning of the provider instance. Possible values include: 'Accepted', 'Creating', 'Updating', 'Failed', 'Succeeded', 'Deleting', 'Migrating'
	ProvisioningState WorkloadMonitorProvisioningState `json:"provisioningState,omitempty"`
	// Errors - READ-ONLY; Defines the provider instance errors.
	Errors *ProviderInstancePropertiesErrors `json:"errors,omitempty"`
	// ProviderSettings - Defines the provider instance errors.
	ProviderSettings BasicProviderSpecificProperties `json:"providerSettings,omitempty"`
}

// MarshalJSON is the custom marshaler for ProviderInstanceProperties.
func (pip ProviderInstanceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["providerSettings"] = pip.ProviderSettings
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for ProviderInstanceProperties struct.
func (pip *ProviderInstanceProperties) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "provisioningState":
			if v != nil {
				var provisioningState WorkloadMonitorProvisioningState
				err = json.Unmarshal(*v, &provisioningState)
				if err != nil {
					return err
				}
				pip.ProvisioningState = provisioningState
			}
		case "errors":
			if v != nil {
				var errorsVar ProviderInstancePropertiesErrors
				err = json.Unmarshal(*v, &errorsVar)
				if err != nil {
					return err
				}
				pip.Errors = &errorsVar
			}
		case "providerSettings":
			if v != nil {
				providerSettings, err := unmarshalBasicProviderSpecificProperties(*v)
				if err != nil {
					return err
				}
				pip.ProviderSettings = providerSettings
			}
		}
	}

	return nil
}

// ProviderInstancePropertiesErrors defines the provider instance errors.
type ProviderInstancePropertiesErrors struct {
	// Code - READ-ONLY; Server-defined set of error codes.
	Code *string `json:"code,omitempty"`
	// Message - READ-ONLY; Human-readable representation of the error.
	Message *string `json:"message,omitempty"`
	// Target - READ-ONLY; Target of the error.
	Target *string `json:"target,omitempty"`
	// Details - READ-ONLY; Array of details about specific errors that led to this reported error.
	Details *[]Error `json:"details,omitempty"`
	// InnerError - READ-ONLY; Object containing more specific information than  the current object about the error.
	InnerError *ErrorInnerError `json:"innerError,omitempty"`
}

// MarshalJSON is the custom marshaler for ProviderInstancePropertiesErrors.
func (pip ProviderInstancePropertiesErrors) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// ProviderInstancesCreateFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type ProviderInstancesCreateFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(ProviderInstancesClient) (ProviderInstance, error)
}

// UnmarshalJSON is the custom unmarshaller for CreateFuture.
func (future *ProviderInstancesCreateFuture) UnmarshalJSON(body []byte) error {
	var azFuture azure.Future
	if err := json.Unmarshal(body, &azFuture); err != nil {
		return err
	}
	future.FutureAPI = &azFuture
	future.Result = future.result
	return nil
}

// result is the default implementation for ProviderInstancesCreateFuture.Result.
func (future *ProviderInstancesCreateFuture) result(client ProviderInstancesClient) (pi ProviderInstance, err error) {
	var done bool
	done, err = future.DoneWithContext(context.Background(), client)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.ProviderInstancesCreateFuture", "Result", future.Response(), "Polling failure")
		return
	}
	if !done {
		pi.Response.Response = future.Response()
		err = azure.NewAsyncOpIncompleteError("workloads.ProviderInstancesCreateFuture")
		return
	}
	sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if pi.Response.Response, err = future.GetResult(sender); err == nil && pi.Response.Response.StatusCode != http.StatusNoContent {
		pi, err = client.CreateResponder(pi.Response.Response)
		if err != nil {
			err = autorest.NewErrorWithError(err, "workloads.ProviderInstancesCreateFuture", "Result", pi.Response.Response, "Failure responding to request")
		}
	}
	return
}

// ProviderInstancesDeleteFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type ProviderInstancesDeleteFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(ProviderInstancesClient) (OperationStatusResult, error)
}

// UnmarshalJSON is the custom unmarshaller for CreateFuture.
func (future *ProviderInstancesDeleteFuture) UnmarshalJSON(body []byte) error {
	var azFuture azure.Future
	if err := json.Unmarshal(body, &azFuture); err != nil {
		return err
	}
	future.FutureAPI = &azFuture
	future.Result = future.result
	return nil
}

// result is the default implementation for ProviderInstancesDeleteFuture.Result.
func (future *ProviderInstancesDeleteFuture) result(client ProviderInstancesClient) (osr OperationStatusResult, err error) {
	var done bool
	done, err = future.DoneWithContext(context.Background(), client)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.ProviderInstancesDeleteFuture", "Result", future.Response(), "Polling failure")
		return
	}
	if !done {
		osr.Response.Response = future.Response()
		err = azure.NewAsyncOpIncompleteError("workloads.ProviderInstancesDeleteFuture")
		return
	}
	sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if osr.Response.Response, err = future.GetResult(sender); err == nil && osr.Response.Response.StatusCode != http.StatusNoContent {
		osr, err = client.DeleteResponder(osr.Response.Response)
		if err != nil {
			err = autorest.NewErrorWithError(err, "workloads.ProviderInstancesDeleteFuture", "Result", osr.Response.Response, "Failure responding to request")
		}
	}
	return
}

// BasicProviderSpecificProperties gets or sets the provider specific properties.
type BasicProviderSpecificProperties interface {
	AsHanaDbProviderInstanceProperties() (*HanaDbProviderInstanceProperties, bool)
	AsSapNetWeaverProviderInstanceProperties() (*SapNetWeaverProviderInstanceProperties, bool)
	AsPrometheusOSProviderInstanceProperties() (*PrometheusOSProviderInstanceProperties, bool)
	AsDB2ProviderInstanceProperties() (*DB2ProviderInstanceProperties, bool)
	AsPrometheusHaClusterProviderInstanceProperties() (*PrometheusHaClusterProviderInstanceProperties, bool)
	AsMsSQLServerProviderInstanceProperties() (*MsSQLServerProviderInstanceProperties, bool)
	AsProviderSpecificProperties() (*ProviderSpecificProperties, bool)
}

// ProviderSpecificProperties gets or sets the provider specific properties.
type ProviderSpecificProperties struct {
	// ProviderType - Possible values include: 'ProviderTypeProviderSpecificProperties', 'ProviderTypeSapHana', 'ProviderTypeSapNetWeaver', 'ProviderTypePrometheusOS', 'ProviderTypeDb2', 'ProviderTypePrometheusHaCluster', 'ProviderTypeMsSQLServer'
	ProviderType ProviderType `json:"providerType,omitempty"`
}

func unmarshalBasicProviderSpecificProperties(body []byte) (BasicProviderSpecificProperties, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["providerType"] {
	case string(ProviderTypeSapHana):
		var hdpip HanaDbProviderInstanceProperties
		err := json.Unmarshal(body, &hdpip)
		return hdpip, err
	case string(ProviderTypeSapNetWeaver):
		var snwpip SapNetWeaverProviderInstanceProperties
		err := json.Unmarshal(body, &snwpip)
		return snwpip, err
	case string(ProviderTypePrometheusOS):
		var popip PrometheusOSProviderInstanceProperties
		err := json.Unmarshal(body, &popip)
		return popip, err
	case string(ProviderTypeDb2):
		var dpip DB2ProviderInstanceProperties
		err := json.Unmarshal(body, &dpip)
		return dpip, err
	case string(ProviderTypePrometheusHaCluster):
		var phcpip PrometheusHaClusterProviderInstanceProperties
		err := json.Unmarshal(body, &phcpip)
		return phcpip, err
	case string(ProviderTypeMsSQLServer):
		var msspip MsSQLServerProviderInstanceProperties
		err := json.Unmarshal(body, &msspip)
		return msspip, err
	default:
		var psp ProviderSpecificProperties
		err := json.Unmarshal(body, &psp)
		return psp, err
	}
}
func unmarshalBasicProviderSpecificPropertiesArray(body []byte) ([]BasicProviderSpecificProperties, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	pspArray := make([]BasicProviderSpecificProperties, len(rawMessages))

	for index, rawMessage := range rawMessages {
		psp, err := unmarshalBasicProviderSpecificProperties(*rawMessage)
		if err != nil {
			return nil, err
		}
		pspArray[index] = psp
	}
	return pspArray, nil
}

// MarshalJSON is the custom marshaler for ProviderSpecificProperties.
func (psp ProviderSpecificProperties) MarshalJSON() ([]byte, error) {
	psp.ProviderType = ProviderTypeProviderSpecificProperties
	objectMap := make(map[string]interface{})
	if psp.ProviderType != "" {
		objectMap["providerType"] = psp.ProviderType
	}
	return json.Marshal(objectMap)
}

// AsHanaDbProviderInstanceProperties is the BasicProviderSpecificProperties implementation for ProviderSpecificProperties.
func (psp ProviderSpecificProperties) AsHanaDbProviderInstanceProperties() (*HanaDbProviderInstanceProperties, bool) {
	return nil, false
}

// AsSapNetWeaverProviderInstanceProperties is the BasicProviderSpecificProperties implementation for ProviderSpecificProperties.
func (psp ProviderSpecificProperties) AsSapNetWeaverProviderInstanceProperties() (*SapNetWeaverProviderInstanceProperties, bool) {
	return nil, false
}

// AsPrometheusOSProviderInstanceProperties is the BasicProviderSpecificProperties implementation for ProviderSpecificProperties.
func (psp ProviderSpecificProperties) AsPrometheusOSProviderInstanceProperties() (*PrometheusOSProviderInstanceProperties, bool) {
	return nil, false
}

// AsDB2ProviderInstanceProperties is the BasicProviderSpecificProperties implementation for ProviderSpecificProperties.
func (psp ProviderSpecificProperties) AsDB2ProviderInstanceProperties() (*DB2ProviderInstanceProperties, bool) {
	return nil, false
}

// AsPrometheusHaClusterProviderInstanceProperties is the BasicProviderSpecificProperties implementation for ProviderSpecificProperties.
func (psp ProviderSpecificProperties) AsPrometheusHaClusterProviderInstanceProperties() (*PrometheusHaClusterProviderInstanceProperties, bool) {
	return nil, false
}

// AsMsSQLServerProviderInstanceProperties is the BasicProviderSpecificProperties implementation for ProviderSpecificProperties.
func (psp ProviderSpecificProperties) AsMsSQLServerProviderInstanceProperties() (*MsSQLServerProviderInstanceProperties, bool) {
	return nil, false
}

// AsProviderSpecificProperties is the BasicProviderSpecificProperties implementation for ProviderSpecificProperties.
func (psp ProviderSpecificProperties) AsProviderSpecificProperties() (*ProviderSpecificProperties, bool) {
	return &psp, true
}

// AsBasicProviderSpecificProperties is the BasicProviderSpecificProperties implementation for ProviderSpecificProperties.
func (psp ProviderSpecificProperties) AsBasicProviderSpecificProperties() (BasicProviderSpecificProperties, bool) {
	return &psp, true
}

// ProxyResource the resource model definition for a Azure Resource Manager proxy resource. It will not
// have tags and a location
type ProxyResource struct {
	// ID - READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
	// SystemData - READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty"`
}

// MarshalJSON is the custom marshaler for ProxyResource.
func (pr ProxyResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// Resource common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// ID - READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
	// SystemData - READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty"`
}

// MarshalJSON is the custom marshaler for Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// ResourceModelWithAllowedPropertySet the resource model definition containing the full set of allowed
// properties for a resource. Except properties bag, there cannot be a top level property outside of this
// set.
type ResourceModelWithAllowedPropertySet struct {
	// ManagedBy - The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource.
	ManagedBy *string `json:"managedBy,omitempty"`
	// Kind - Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
	Kind *string `json:"kind,omitempty"`
	// Etag - READ-ONLY; The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
	Etag     *string                                      `json:"etag,omitempty"`
	Identity *ResourceModelWithAllowedPropertySetIdentity `json:"identity,omitempty"`
	Sku      *ResourceModelWithAllowedPropertySetSku      `json:"sku,omitempty"`
	Plan     *ResourceModelWithAllowedPropertySetPlan     `json:"plan,omitempty"`
	// Tags - Resource tags.
	Tags map[string]*string `json:"tags"`
	// Location - The geo-location where the resource lives
	Location *string `json:"location,omitempty"`
	// ID - READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
	// SystemData - READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty"`
}

// MarshalJSON is the custom marshaler for ResourceModelWithAllowedPropertySet.
func (rmwaps ResourceModelWithAllowedPropertySet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if rmwaps.ManagedBy != nil {
		objectMap["managedBy"] = rmwaps.ManagedBy
	}
	if rmwaps.Kind != nil {
		objectMap["kind"] = rmwaps.Kind
	}
	if rmwaps.Identity != nil {
		objectMap["identity"] = rmwaps.Identity
	}
	if rmwaps.Sku != nil {
		objectMap["sku"] = rmwaps.Sku
	}
	if rmwaps.Plan != nil {
		objectMap["plan"] = rmwaps.Plan
	}
	if rmwaps.Tags != nil {
		objectMap["tags"] = rmwaps.Tags
	}
	if rmwaps.Location != nil {
		objectMap["location"] = rmwaps.Location
	}
	return json.Marshal(objectMap)
}

// ResourceModelWithAllowedPropertySetIdentity ...
type ResourceModelWithAllowedPropertySetIdentity struct {
	// PrincipalID - READ-ONLY; The principal ID of resource identity.
	PrincipalID *string `json:"principalId,omitempty"`
	// TenantID - READ-ONLY; The tenant ID of resource.
	TenantID *string `json:"tenantId,omitempty"`
	// Type - The identity type. Possible values include: 'SystemAssigned'
	Type ResourceIdentityType `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for ResourceModelWithAllowedPropertySetIdentity.
func (rmwaps ResourceModelWithAllowedPropertySetIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if rmwaps.Type != "" {
		objectMap["type"] = rmwaps.Type
	}
	return json.Marshal(objectMap)
}

// ResourceModelWithAllowedPropertySetPlan ...
type ResourceModelWithAllowedPropertySetPlan struct {
	// Name - A user defined name of the 3rd Party Artifact that is being procured.
	Name *string `json:"name,omitempty"`
	// Publisher - The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
	Publisher *string `json:"publisher,omitempty"`
	// Product - The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
	Product *string `json:"product,omitempty"`
	// PromotionCode - A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
	PromotionCode *string `json:"promotionCode,omitempty"`
	// Version - The version of the desired product/artifact.
	Version *string `json:"version,omitempty"`
}

// ResourceModelWithAllowedPropertySetSku ...
type ResourceModelWithAllowedPropertySetSku struct {
	// Name - The name of the SKU. Ex - P3. It is typically a letter+number code
	Name *string `json:"name,omitempty"`
	// Tier - Possible values include: 'Free', 'Basic', 'Standard', 'Premium'
	Tier SkuTier `json:"tier,omitempty"`
	// Size - The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `json:"size,omitempty"`
	// Family - If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `json:"family,omitempty"`
	// Capacity - If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int32 `json:"capacity,omitempty"`
}

// SapNetWeaverProviderInstanceProperties gets or sets the provider properties.
type SapNetWeaverProviderInstanceProperties struct {
	// SapSid - Gets or sets the SAP System Identifier
	SapSid *string `json:"sapSid,omitempty"`
	// SapHostname - Gets or sets the target virtual machine IP Address/FQDN.
	SapHostname *string `json:"sapHostname,omitempty"`
	// SapInstanceNr - Gets or sets the instance number of SAP NetWeaver.
	SapInstanceNr *string `json:"sapInstanceNr,omitempty"`
	// SapHostFileEntries - Gets or sets the list of HostFile Entries
	SapHostFileEntries *[]string `json:"sapHostFileEntries,omitempty"`
	// SapUsername - Gets or sets the SAP user name.
	SapUsername *string `json:"sapUsername,omitempty"`
	// SapPassword - Sets the SAP password.
	SapPassword *string `json:"sapPassword,omitempty"`
	// SapPasswordURI - Gets or sets the key vault URI to secret with the SAP password.
	SapPasswordURI *string `json:"sapPasswordUri,omitempty"`
	// SapClientID - Gets or sets the SAP Client ID.
	SapClientID *string `json:"sapClientId,omitempty"`
	// SapPortNumber - Gets or sets the SAP HTTP port number.
	SapPortNumber *string `json:"sapPortNumber,omitempty"`
	// SapSslCertificateURI - Gets or sets the blob URI to SSL certificate for the SAP system.
	SapSslCertificateURI *string `json:"sapSslCertificateUri,omitempty"`
	// ProviderType - Possible values include: 'ProviderTypeProviderSpecificProperties', 'ProviderTypeSapHana', 'ProviderTypeSapNetWeaver', 'ProviderTypePrometheusOS', 'ProviderTypeDb2', 'ProviderTypePrometheusHaCluster', 'ProviderTypeMsSQLServer'
	ProviderType ProviderType `json:"providerType,omitempty"`
}

// MarshalJSON is the custom marshaler for SapNetWeaverProviderInstanceProperties.
func (snwpip SapNetWeaverProviderInstanceProperties) MarshalJSON() ([]byte, error) {
	snwpip.ProviderType = ProviderTypeSapNetWeaver
	objectMap := make(map[string]interface{})
	if snwpip.SapSid != nil {
		objectMap["sapSid"] = snwpip.SapSid
	}
	if snwpip.SapHostname != nil {
		objectMap["sapHostname"] = snwpip.SapHostname
	}
	if snwpip.SapInstanceNr != nil {
		objectMap["sapInstanceNr"] = snwpip.SapInstanceNr
	}
	if snwpip.SapHostFileEntries != nil {
		objectMap["sapHostFileEntries"] = snwpip.SapHostFileEntries
	}
	if snwpip.SapUsername != nil {
		objectMap["sapUsername"] = snwpip.SapUsername
	}
	if snwpip.SapPassword != nil {
		objectMap["sapPassword"] = snwpip.SapPassword
	}
	if snwpip.SapPasswordURI != nil {
		objectMap["sapPasswordUri"] = snwpip.SapPasswordURI
	}
	if snwpip.SapClientID != nil {
		objectMap["sapClientId"] = snwpip.SapClientID
	}
	if snwpip.SapPortNumber != nil {
		objectMap["sapPortNumber"] = snwpip.SapPortNumber
	}
	if snwpip.SapSslCertificateURI != nil {
		objectMap["sapSslCertificateUri"] = snwpip.SapSslCertificateURI
	}
	if snwpip.ProviderType != "" {
		objectMap["providerType"] = snwpip.ProviderType
	}
	return json.Marshal(objectMap)
}

// AsHanaDbProviderInstanceProperties is the BasicProviderSpecificProperties implementation for SapNetWeaverProviderInstanceProperties.
func (snwpip SapNetWeaverProviderInstanceProperties) AsHanaDbProviderInstanceProperties() (*HanaDbProviderInstanceProperties, bool) {
	return nil, false
}

// AsSapNetWeaverProviderInstanceProperties is the BasicProviderSpecificProperties implementation for SapNetWeaverProviderInstanceProperties.
func (snwpip SapNetWeaverProviderInstanceProperties) AsSapNetWeaverProviderInstanceProperties() (*SapNetWeaverProviderInstanceProperties, bool) {
	return &snwpip, true
}

// AsPrometheusOSProviderInstanceProperties is the BasicProviderSpecificProperties implementation for SapNetWeaverProviderInstanceProperties.
func (snwpip SapNetWeaverProviderInstanceProperties) AsPrometheusOSProviderInstanceProperties() (*PrometheusOSProviderInstanceProperties, bool) {
	return nil, false
}

// AsDB2ProviderInstanceProperties is the BasicProviderSpecificProperties implementation for SapNetWeaverProviderInstanceProperties.
func (snwpip SapNetWeaverProviderInstanceProperties) AsDB2ProviderInstanceProperties() (*DB2ProviderInstanceProperties, bool) {
	return nil, false
}

// AsPrometheusHaClusterProviderInstanceProperties is the BasicProviderSpecificProperties implementation for SapNetWeaverProviderInstanceProperties.
func (snwpip SapNetWeaverProviderInstanceProperties) AsPrometheusHaClusterProviderInstanceProperties() (*PrometheusHaClusterProviderInstanceProperties, bool) {
	return nil, false
}

// AsMsSQLServerProviderInstanceProperties is the BasicProviderSpecificProperties implementation for SapNetWeaverProviderInstanceProperties.
func (snwpip SapNetWeaverProviderInstanceProperties) AsMsSQLServerProviderInstanceProperties() (*MsSQLServerProviderInstanceProperties, bool) {
	return nil, false
}

// AsProviderSpecificProperties is the BasicProviderSpecificProperties implementation for SapNetWeaverProviderInstanceProperties.
func (snwpip SapNetWeaverProviderInstanceProperties) AsProviderSpecificProperties() (*ProviderSpecificProperties, bool) {
	return nil, false
}

// AsBasicProviderSpecificProperties is the BasicProviderSpecificProperties implementation for SapNetWeaverProviderInstanceProperties.
func (snwpip SapNetWeaverProviderInstanceProperties) AsBasicProviderSpecificProperties() (BasicProviderSpecificProperties, bool) {
	return &snwpip, true
}

// Sku the resource model definition representing SKU
type Sku struct {
	// Name - The name of the SKU. Ex - P3. It is typically a letter+number code
	Name *string `json:"name,omitempty"`
	// Tier - Possible values include: 'Free', 'Basic', 'Standard', 'Premium'
	Tier SkuTier `json:"tier,omitempty"`
	// Size - The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `json:"size,omitempty"`
	// Family - If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `json:"family,omitempty"`
	// Capacity - If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int32 `json:"capacity,omitempty"`
}

// SystemData metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// CreatedBy - The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`
	// CreatedByType - The type of identity that created the resource. Possible values include: 'User', 'Application', 'ManagedIdentity', 'Key'
	CreatedByType CreatedByType `json:"createdByType,omitempty"`
	// CreatedAt - The timestamp of resource creation (UTC).
	CreatedAt *date.Time `json:"createdAt,omitempty"`
	// LastModifiedBy - The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`
	// LastModifiedByType - The type of identity that last modified the resource. Possible values include: 'User', 'Application', 'ManagedIdentity', 'Key'
	LastModifiedByType CreatedByType `json:"lastModifiedByType,omitempty"`
	// LastModifiedAt - The timestamp of resource last modification (UTC)
	LastModifiedAt *date.Time `json:"lastModifiedAt,omitempty"`
}

// Tags tags field of the resource.
type Tags struct {
	// Tags - Tags field of the resource.
	Tags map[string]*string `json:"tags"`
}

// MarshalJSON is the custom marshaler for Tags.
func (t Tags) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if t.Tags != nil {
		objectMap["tags"] = t.Tags
	}
	return json.Marshal(objectMap)
}

// TrackedResource the resource model definition for an Azure Resource Manager tracked top level resource
// which has 'tags' and a 'location'
type TrackedResource struct {
	// Tags - Resource tags.
	Tags map[string]*string `json:"tags"`
	// Location - The geo-location where the resource lives
	Location *string `json:"location,omitempty"`
	// ID - READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
	// SystemData - READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty"`
}

// MarshalJSON is the custom marshaler for TrackedResource.
func (tr TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if tr.Tags != nil {
		objectMap["tags"] = tr.Tags
	}
	if tr.Location != nil {
		objectMap["location"] = tr.Location
	}
	return json.Marshal(objectMap)
}
