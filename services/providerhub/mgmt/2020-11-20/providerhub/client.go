// Package providerhub implements the Azure ARM Providerhub service API version 2020-11-20.
//
// Microsoft ProviderHub
package providerhub

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

const (
	// DefaultBaseURI is the default URI used for the service Providerhub
	DefaultBaseURI = "https://management.azure.com"
)

// BaseClient is the base client for Providerhub.
type BaseClient struct {
	autorest.Client
	BaseURI        string
	SubscriptionID string
}

// New creates an instance of the BaseClient client.
func New(subscriptionID string) BaseClient {
	return NewWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewWithBaseURI creates an instance of the BaseClient client using a custom endpoint.  Use this when interacting with
// an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewWithBaseURI(baseURI string, subscriptionID string) BaseClient {
	return BaseClient{
		Client:         autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI:        baseURI,
		SubscriptionID: subscriptionID,
	}
}

// CheckinManifest checkin the manifest.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// checkinManifestParams - the required body parameters supplied to the checkin manifest operation.
func (client BaseClient) CheckinManifest(ctx context.Context, providerNamespace string, checkinManifestParams CheckinManifestParams) (result CheckinManifestInfo, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CheckinManifest")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: checkinManifestParams,
			Constraints: []validation.Constraint{{Target: "checkinManifestParams.Environment", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "checkinManifestParams.BaselineArmManifestLocation", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.BaseClient", "CheckinManifest", err.Error())
	}

	req, err := client.CheckinManifestPreparer(ctx, providerNamespace, checkinManifestParams)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.BaseClient", "CheckinManifest", nil, "Failure preparing request")
		return
	}

	resp, err := client.CheckinManifestSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.BaseClient", "CheckinManifest", resp, "Failure sending request")
		return
	}

	result, err = client.CheckinManifestResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.BaseClient", "CheckinManifest", resp, "Failure responding to request")
		return
	}

	return
}

// CheckinManifestPreparer prepares the CheckinManifest request.
func (client BaseClient) CheckinManifestPreparer(ctx context.Context, providerNamespace string, checkinManifestParams CheckinManifestParams) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"providerNamespace": autorest.Encode("path", providerNamespace),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/checkinManifest", pathParameters),
		autorest.WithJSON(checkinManifestParams),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CheckinManifestSender sends the CheckinManifest request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CheckinManifestSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CheckinManifestResponder handles the response to the CheckinManifest request. The method always
// closes the http.Response Body.
func (client BaseClient) CheckinManifestResponder(resp *http.Response) (result CheckinManifestInfo, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GenerateManifest generates the manifest for the given provider.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
func (client BaseClient) GenerateManifest(ctx context.Context, providerNamespace string) (result ResourceProviderManifest, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GenerateManifest")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.BaseClient", "GenerateManifest", err.Error())
	}

	req, err := client.GenerateManifestPreparer(ctx, providerNamespace)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.BaseClient", "GenerateManifest", nil, "Failure preparing request")
		return
	}

	resp, err := client.GenerateManifestSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.BaseClient", "GenerateManifest", resp, "Failure sending request")
		return
	}

	result, err = client.GenerateManifestResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.BaseClient", "GenerateManifest", resp, "Failure responding to request")
		return
	}

	return
}

// GenerateManifestPreparer prepares the GenerateManifest request.
func (client BaseClient) GenerateManifestPreparer(ctx context.Context, providerNamespace string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"providerNamespace": autorest.Encode("path", providerNamespace),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/generateManifest", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GenerateManifestSender sends the GenerateManifest request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GenerateManifestSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GenerateManifestResponder handles the response to the GenerateManifest request. The method always
// closes the http.Response Body.
func (client BaseClient) GenerateManifestResponder(resp *http.Response) (result ResourceProviderManifest, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
