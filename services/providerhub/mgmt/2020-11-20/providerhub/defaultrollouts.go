package providerhub

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// DefaultRolloutsClient is the microsoft ProviderHub
type DefaultRolloutsClient struct {
	BaseClient
}

// NewDefaultRolloutsClient creates an instance of the DefaultRolloutsClient client.
func NewDefaultRolloutsClient(subscriptionID string) DefaultRolloutsClient {
	return NewDefaultRolloutsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewDefaultRolloutsClientWithBaseURI creates an instance of the DefaultRolloutsClient client using a custom endpoint.
// Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewDefaultRolloutsClientWithBaseURI(baseURI string, subscriptionID string) DefaultRolloutsClient {
	return DefaultRolloutsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// CreateOrUpdate creates or updates the rollout details.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// rolloutName - the rollout name.
// properties - the Default rollout properties supplied to the CreateOrUpdate operation.
func (client DefaultRolloutsClient) CreateOrUpdate(ctx context.Context, providerNamespace string, rolloutName string, properties DefaultRollout) (result DefaultRolloutsCreateOrUpdateFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DefaultRolloutsClient.CreateOrUpdate")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.DefaultRolloutsClient", "CreateOrUpdate", err.Error())
	}

	req, err := client.CreateOrUpdatePreparer(ctx, providerNamespace, rolloutName, properties)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "CreateOrUpdate", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOrUpdateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "CreateOrUpdate", nil, "Failure sending request")
		return
	}

	return
}

// CreateOrUpdatePreparer prepares the CreateOrUpdate request.
func (client DefaultRolloutsClient) CreateOrUpdatePreparer(ctx context.Context, providerNamespace string, rolloutName string, properties DefaultRollout) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"providerNamespace": autorest.Encode("path", providerNamespace),
		"rolloutName":       autorest.Encode("path", rolloutName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/defaultRollouts/{rolloutName}", pathParameters),
		autorest.WithJSON(properties),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateSender sends the CreateOrUpdate request. The method will close the
// http.Response Body if it receives an error.
func (client DefaultRolloutsClient) CreateOrUpdateSender(req *http.Request) (future DefaultRolloutsCreateOrUpdateFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always
// closes the http.Response Body.
func (client DefaultRolloutsClient) CreateOrUpdateResponder(resp *http.Response) (result DefaultRollout, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete deletes the rollout resource. Rollout must be in terminal state.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// rolloutName - the rollout name.
func (client DefaultRolloutsClient) Delete(ctx context.Context, providerNamespace string, rolloutName string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DefaultRolloutsClient.Delete")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.DefaultRolloutsClient", "Delete", err.Error())
	}

	req, err := client.DeletePreparer(ctx, providerNamespace, rolloutName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "Delete", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "Delete", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "Delete", resp, "Failure responding to request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client DefaultRolloutsClient) DeletePreparer(ctx context.Context, providerNamespace string, rolloutName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"providerNamespace": autorest.Encode("path", providerNamespace),
		"rolloutName":       autorest.Encode("path", rolloutName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/defaultRollouts/{rolloutName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client DefaultRolloutsClient) DeleteSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client DefaultRolloutsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get gets the default rollout details.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// rolloutName - the rollout name.
func (client DefaultRolloutsClient) Get(ctx context.Context, providerNamespace string, rolloutName string) (result DefaultRollout, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DefaultRolloutsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.DefaultRolloutsClient", "Get", err.Error())
	}

	req, err := client.GetPreparer(ctx, providerNamespace, rolloutName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client DefaultRolloutsClient) GetPreparer(ctx context.Context, providerNamespace string, rolloutName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"providerNamespace": autorest.Encode("path", providerNamespace),
		"rolloutName":       autorest.Encode("path", rolloutName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/defaultRollouts/{rolloutName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client DefaultRolloutsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client DefaultRolloutsClient) GetResponder(resp *http.Response) (result DefaultRollout, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByProviderRegistration gets the list of the rollouts for the given provider.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
func (client DefaultRolloutsClient) ListByProviderRegistration(ctx context.Context, providerNamespace string) (result DefaultRolloutArrayResponseWithContinuationPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DefaultRolloutsClient.ListByProviderRegistration")
		defer func() {
			sc := -1
			if result.drarwc.Response.Response != nil {
				sc = result.drarwc.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.DefaultRolloutsClient", "ListByProviderRegistration", err.Error())
	}

	result.fn = client.listByProviderRegistrationNextResults
	req, err := client.ListByProviderRegistrationPreparer(ctx, providerNamespace)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "ListByProviderRegistration", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByProviderRegistrationSender(req)
	if err != nil {
		result.drarwc.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "ListByProviderRegistration", resp, "Failure sending request")
		return
	}

	result.drarwc, err = client.ListByProviderRegistrationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "ListByProviderRegistration", resp, "Failure responding to request")
		return
	}
	if result.drarwc.hasNextLink() && result.drarwc.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByProviderRegistrationPreparer prepares the ListByProviderRegistration request.
func (client DefaultRolloutsClient) ListByProviderRegistrationPreparer(ctx context.Context, providerNamespace string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"providerNamespace": autorest.Encode("path", providerNamespace),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/defaultRollouts", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByProviderRegistrationSender sends the ListByProviderRegistration request. The method will close the
// http.Response Body if it receives an error.
func (client DefaultRolloutsClient) ListByProviderRegistrationSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByProviderRegistrationResponder handles the response to the ListByProviderRegistration request. The method always
// closes the http.Response Body.
func (client DefaultRolloutsClient) ListByProviderRegistrationResponder(resp *http.Response) (result DefaultRolloutArrayResponseWithContinuation, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByProviderRegistrationNextResults retrieves the next set of results, if any.
func (client DefaultRolloutsClient) listByProviderRegistrationNextResults(ctx context.Context, lastResults DefaultRolloutArrayResponseWithContinuation) (result DefaultRolloutArrayResponseWithContinuation, err error) {
	req, err := lastResults.defaultRolloutArrayResponseWithContinuationPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "listByProviderRegistrationNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByProviderRegistrationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "listByProviderRegistrationNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByProviderRegistrationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "listByProviderRegistrationNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByProviderRegistrationComplete enumerates all values, automatically crossing page boundaries as required.
func (client DefaultRolloutsClient) ListByProviderRegistrationComplete(ctx context.Context, providerNamespace string) (result DefaultRolloutArrayResponseWithContinuationIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DefaultRolloutsClient.ListByProviderRegistration")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByProviderRegistration(ctx, providerNamespace)
	return
}

// Stop stops or cancels the rollout, if in progress.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// rolloutName - the rollout name.
func (client DefaultRolloutsClient) Stop(ctx context.Context, providerNamespace string, rolloutName string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DefaultRolloutsClient.Stop")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.DefaultRolloutsClient", "Stop", err.Error())
	}

	req, err := client.StopPreparer(ctx, providerNamespace, rolloutName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "Stop", nil, "Failure preparing request")
		return
	}

	resp, err := client.StopSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "Stop", resp, "Failure sending request")
		return
	}

	result, err = client.StopResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.DefaultRolloutsClient", "Stop", resp, "Failure responding to request")
		return
	}

	return
}

// StopPreparer prepares the Stop request.
func (client DefaultRolloutsClient) StopPreparer(ctx context.Context, providerNamespace string, rolloutName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"providerNamespace": autorest.Encode("path", providerNamespace),
		"rolloutName":       autorest.Encode("path", rolloutName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/defaultRollouts/{rolloutName}/stop", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// StopSender sends the Stop request. The method will close the
// http.Response Body if it receives an error.
func (client DefaultRolloutsClient) StopSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// StopResponder handles the response to the Stop request. The method always
// closes the http.Response Body.
func (client DefaultRolloutsClient) StopResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
