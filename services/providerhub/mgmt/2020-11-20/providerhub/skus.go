package providerhub

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// SkusClient is the microsoft ProviderHub
type SkusClient struct {
	BaseClient
}

// NewSkusClient creates an instance of the SkusClient client.
func NewSkusClient(subscriptionID string) SkusClient {
	return NewSkusClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewSkusClientWithBaseURI creates an instance of the SkusClient client using a custom endpoint.  Use this when
// interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewSkusClientWithBaseURI(baseURI string, subscriptionID string) SkusClient {
	return SkusClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// CreateOrUpdate creates or updates the resource type skus in the given resource type.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// sku - the SKU.
// properties - the required body parameters supplied to the resource sku operation.
func (client SkusClient) CreateOrUpdate(ctx context.Context, providerNamespace string, resourceType string, sku string, properties ResourceTypeSku) (result SkuResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.CreateOrUpdate")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: properties,
			Constraints: []validation.Constraint{{Target: "properties.SkuSettings", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "CreateOrUpdate", err.Error())
	}

	req, err := client.CreateOrUpdatePreparer(ctx, providerNamespace, resourceType, sku, properties)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "CreateOrUpdate", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateOrUpdateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "CreateOrUpdate", resp, "Failure sending request")
		return
	}

	result, err = client.CreateOrUpdateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "CreateOrUpdate", resp, "Failure responding to request")
		return
	}

	return
}

// CreateOrUpdatePreparer prepares the CreateOrUpdate request.
func (client SkusClient) CreateOrUpdatePreparer(ctx context.Context, providerNamespace string, resourceType string, sku string, properties ResourceTypeSku) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"providerNamespace": autorest.Encode("path", providerNamespace),
		"resourceType":      autorest.Encode("path", resourceType),
		"sku":               autorest.Encode("path", sku),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus/{sku}", pathParameters),
		autorest.WithJSON(properties),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateSender sends the CreateOrUpdate request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) CreateOrUpdateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always
// closes the http.Response Body.
func (client SkusClient) CreateOrUpdateResponder(resp *http.Response) (result SkuResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateOrUpdateNestedResourceTypeFirst creates or updates the resource type skus in the given resource type.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
// sku - the SKU.
// properties - the required body parameters supplied to the resource sku operation.
func (client SkusClient) CreateOrUpdateNestedResourceTypeFirst(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, sku string, properties ResourceTypeSku) (result SkuResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.CreateOrUpdateNestedResourceTypeFirst")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: properties,
			Constraints: []validation.Constraint{{Target: "properties.SkuSettings", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "CreateOrUpdateNestedResourceTypeFirst", err.Error())
	}

	req, err := client.CreateOrUpdateNestedResourceTypeFirstPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, sku, properties)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "CreateOrUpdateNestedResourceTypeFirst", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateOrUpdateNestedResourceTypeFirstSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "CreateOrUpdateNestedResourceTypeFirst", resp, "Failure sending request")
		return
	}

	result, err = client.CreateOrUpdateNestedResourceTypeFirstResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "CreateOrUpdateNestedResourceTypeFirst", resp, "Failure responding to request")
		return
	}

	return
}

// CreateOrUpdateNestedResourceTypeFirstPreparer prepares the CreateOrUpdateNestedResourceTypeFirst request.
func (client SkusClient) CreateOrUpdateNestedResourceTypeFirstPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, sku string, properties ResourceTypeSku) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst": autorest.Encode("path", nestedResourceTypeFirst),
		"providerNamespace":       autorest.Encode("path", providerNamespace),
		"resourceType":            autorest.Encode("path", resourceType),
		"sku":                     autorest.Encode("path", sku),
		"subscriptionId":          autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus/{sku}", pathParameters),
		autorest.WithJSON(properties),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateNestedResourceTypeFirstSender sends the CreateOrUpdateNestedResourceTypeFirst request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) CreateOrUpdateNestedResourceTypeFirstSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CreateOrUpdateNestedResourceTypeFirstResponder handles the response to the CreateOrUpdateNestedResourceTypeFirst request. The method always
// closes the http.Response Body.
func (client SkusClient) CreateOrUpdateNestedResourceTypeFirstResponder(resp *http.Response) (result SkuResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateOrUpdateNestedResourceTypeSecond creates or updates the resource type skus in the given resource type.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
// nestedResourceTypeSecond - the second child resource type.
// sku - the SKU.
// properties - the required body parameters supplied to the resource sku operation.
func (client SkusClient) CreateOrUpdateNestedResourceTypeSecond(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, sku string, properties ResourceTypeSku) (result SkuResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.CreateOrUpdateNestedResourceTypeSecond")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: properties,
			Constraints: []validation.Constraint{{Target: "properties.SkuSettings", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "CreateOrUpdateNestedResourceTypeSecond", err.Error())
	}

	req, err := client.CreateOrUpdateNestedResourceTypeSecondPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, sku, properties)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "CreateOrUpdateNestedResourceTypeSecond", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateOrUpdateNestedResourceTypeSecondSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "CreateOrUpdateNestedResourceTypeSecond", resp, "Failure sending request")
		return
	}

	result, err = client.CreateOrUpdateNestedResourceTypeSecondResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "CreateOrUpdateNestedResourceTypeSecond", resp, "Failure responding to request")
		return
	}

	return
}

// CreateOrUpdateNestedResourceTypeSecondPreparer prepares the CreateOrUpdateNestedResourceTypeSecond request.
func (client SkusClient) CreateOrUpdateNestedResourceTypeSecondPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, sku string, properties ResourceTypeSku) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst":  autorest.Encode("path", nestedResourceTypeFirst),
		"nestedResourceTypeSecond": autorest.Encode("path", nestedResourceTypeSecond),
		"providerNamespace":        autorest.Encode("path", providerNamespace),
		"resourceType":             autorest.Encode("path", resourceType),
		"sku":                      autorest.Encode("path", sku),
		"subscriptionId":           autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus/{sku}", pathParameters),
		autorest.WithJSON(properties),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateNestedResourceTypeSecondSender sends the CreateOrUpdateNestedResourceTypeSecond request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) CreateOrUpdateNestedResourceTypeSecondSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CreateOrUpdateNestedResourceTypeSecondResponder handles the response to the CreateOrUpdateNestedResourceTypeSecond request. The method always
// closes the http.Response Body.
func (client SkusClient) CreateOrUpdateNestedResourceTypeSecondResponder(resp *http.Response) (result SkuResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateOrUpdateNestedResourceTypeThird creates or updates the resource type skus in the given resource type.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
// nestedResourceTypeSecond - the second child resource type.
// nestedResourceTypeThird - the third child resource type.
// sku - the SKU.
// properties - the required body parameters supplied to the resource sku operation.
func (client SkusClient) CreateOrUpdateNestedResourceTypeThird(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string, sku string, properties ResourceTypeSku) (result SkuResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.CreateOrUpdateNestedResourceTypeThird")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: properties,
			Constraints: []validation.Constraint{{Target: "properties.SkuSettings", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "CreateOrUpdateNestedResourceTypeThird", err.Error())
	}

	req, err := client.CreateOrUpdateNestedResourceTypeThirdPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird, sku, properties)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "CreateOrUpdateNestedResourceTypeThird", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateOrUpdateNestedResourceTypeThirdSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "CreateOrUpdateNestedResourceTypeThird", resp, "Failure sending request")
		return
	}

	result, err = client.CreateOrUpdateNestedResourceTypeThirdResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "CreateOrUpdateNestedResourceTypeThird", resp, "Failure responding to request")
		return
	}

	return
}

// CreateOrUpdateNestedResourceTypeThirdPreparer prepares the CreateOrUpdateNestedResourceTypeThird request.
func (client SkusClient) CreateOrUpdateNestedResourceTypeThirdPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string, sku string, properties ResourceTypeSku) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst":  autorest.Encode("path", nestedResourceTypeFirst),
		"nestedResourceTypeSecond": autorest.Encode("path", nestedResourceTypeSecond),
		"nestedResourceTypeThird":  autorest.Encode("path", nestedResourceTypeThird),
		"providerNamespace":        autorest.Encode("path", providerNamespace),
		"resourceType":             autorest.Encode("path", resourceType),
		"sku":                      autorest.Encode("path", sku),
		"subscriptionId":           autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus/{sku}", pathParameters),
		autorest.WithJSON(properties),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateNestedResourceTypeThirdSender sends the CreateOrUpdateNestedResourceTypeThird request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) CreateOrUpdateNestedResourceTypeThirdSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CreateOrUpdateNestedResourceTypeThirdResponder handles the response to the CreateOrUpdateNestedResourceTypeThird request. The method always
// closes the http.Response Body.
func (client SkusClient) CreateOrUpdateNestedResourceTypeThirdResponder(resp *http.Response) (result SkuResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete deletes a resource type sku.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// sku - the SKU.
func (client SkusClient) Delete(ctx context.Context, providerNamespace string, resourceType string, sku string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.Delete")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "Delete", err.Error())
	}

	req, err := client.DeletePreparer(ctx, providerNamespace, resourceType, sku)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "Delete", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "Delete", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "Delete", resp, "Failure responding to request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client SkusClient) DeletePreparer(ctx context.Context, providerNamespace string, resourceType string, sku string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"providerNamespace": autorest.Encode("path", providerNamespace),
		"resourceType":      autorest.Encode("path", resourceType),
		"sku":               autorest.Encode("path", sku),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus/{sku}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) DeleteSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client SkusClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DeleteNestedResourceTypeFirst deletes a resource type sku.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
// sku - the SKU.
func (client SkusClient) DeleteNestedResourceTypeFirst(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, sku string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.DeleteNestedResourceTypeFirst")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "DeleteNestedResourceTypeFirst", err.Error())
	}

	req, err := client.DeleteNestedResourceTypeFirstPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, sku)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "DeleteNestedResourceTypeFirst", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteNestedResourceTypeFirstSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "DeleteNestedResourceTypeFirst", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteNestedResourceTypeFirstResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "DeleteNestedResourceTypeFirst", resp, "Failure responding to request")
		return
	}

	return
}

// DeleteNestedResourceTypeFirstPreparer prepares the DeleteNestedResourceTypeFirst request.
func (client SkusClient) DeleteNestedResourceTypeFirstPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, sku string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst": autorest.Encode("path", nestedResourceTypeFirst),
		"providerNamespace":       autorest.Encode("path", providerNamespace),
		"resourceType":            autorest.Encode("path", resourceType),
		"sku":                     autorest.Encode("path", sku),
		"subscriptionId":          autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus/{sku}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteNestedResourceTypeFirstSender sends the DeleteNestedResourceTypeFirst request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) DeleteNestedResourceTypeFirstSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteNestedResourceTypeFirstResponder handles the response to the DeleteNestedResourceTypeFirst request. The method always
// closes the http.Response Body.
func (client SkusClient) DeleteNestedResourceTypeFirstResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DeleteNestedResourceTypeSecond deletes a resource type sku.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
// nestedResourceTypeSecond - the second child resource type.
// sku - the SKU.
func (client SkusClient) DeleteNestedResourceTypeSecond(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, sku string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.DeleteNestedResourceTypeSecond")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "DeleteNestedResourceTypeSecond", err.Error())
	}

	req, err := client.DeleteNestedResourceTypeSecondPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, sku)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "DeleteNestedResourceTypeSecond", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteNestedResourceTypeSecondSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "DeleteNestedResourceTypeSecond", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteNestedResourceTypeSecondResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "DeleteNestedResourceTypeSecond", resp, "Failure responding to request")
		return
	}

	return
}

// DeleteNestedResourceTypeSecondPreparer prepares the DeleteNestedResourceTypeSecond request.
func (client SkusClient) DeleteNestedResourceTypeSecondPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, sku string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst":  autorest.Encode("path", nestedResourceTypeFirst),
		"nestedResourceTypeSecond": autorest.Encode("path", nestedResourceTypeSecond),
		"providerNamespace":        autorest.Encode("path", providerNamespace),
		"resourceType":             autorest.Encode("path", resourceType),
		"sku":                      autorest.Encode("path", sku),
		"subscriptionId":           autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus/{sku}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteNestedResourceTypeSecondSender sends the DeleteNestedResourceTypeSecond request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) DeleteNestedResourceTypeSecondSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteNestedResourceTypeSecondResponder handles the response to the DeleteNestedResourceTypeSecond request. The method always
// closes the http.Response Body.
func (client SkusClient) DeleteNestedResourceTypeSecondResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DeleteNestedResourceTypeThird deletes a resource type sku.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
// nestedResourceTypeSecond - the second child resource type.
// nestedResourceTypeThird - the third child resource type.
// sku - the SKU.
func (client SkusClient) DeleteNestedResourceTypeThird(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string, sku string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.DeleteNestedResourceTypeThird")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "DeleteNestedResourceTypeThird", err.Error())
	}

	req, err := client.DeleteNestedResourceTypeThirdPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird, sku)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "DeleteNestedResourceTypeThird", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteNestedResourceTypeThirdSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "DeleteNestedResourceTypeThird", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteNestedResourceTypeThirdResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "DeleteNestedResourceTypeThird", resp, "Failure responding to request")
		return
	}

	return
}

// DeleteNestedResourceTypeThirdPreparer prepares the DeleteNestedResourceTypeThird request.
func (client SkusClient) DeleteNestedResourceTypeThirdPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string, sku string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst":  autorest.Encode("path", nestedResourceTypeFirst),
		"nestedResourceTypeSecond": autorest.Encode("path", nestedResourceTypeSecond),
		"nestedResourceTypeThird":  autorest.Encode("path", nestedResourceTypeThird),
		"providerNamespace":        autorest.Encode("path", providerNamespace),
		"resourceType":             autorest.Encode("path", resourceType),
		"sku":                      autorest.Encode("path", sku),
		"subscriptionId":           autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus/{sku}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteNestedResourceTypeThirdSender sends the DeleteNestedResourceTypeThird request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) DeleteNestedResourceTypeThirdSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteNestedResourceTypeThirdResponder handles the response to the DeleteNestedResourceTypeThird request. The method always
// closes the http.Response Body.
func (client SkusClient) DeleteNestedResourceTypeThirdResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get gets the sku details for the given resource type and sku name.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// sku - the SKU.
func (client SkusClient) Get(ctx context.Context, providerNamespace string, resourceType string, sku string) (result SkuResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "Get", err.Error())
	}

	req, err := client.GetPreparer(ctx, providerNamespace, resourceType, sku)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client SkusClient) GetPreparer(ctx context.Context, providerNamespace string, resourceType string, sku string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"providerNamespace": autorest.Encode("path", providerNamespace),
		"resourceType":      autorest.Encode("path", resourceType),
		"sku":               autorest.Encode("path", sku),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus/{sku}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client SkusClient) GetResponder(resp *http.Response) (result SkuResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetNestedResourceTypeFirst gets the sku details for the given resource type and sku name.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
// sku - the SKU.
func (client SkusClient) GetNestedResourceTypeFirst(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, sku string) (result SkuResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.GetNestedResourceTypeFirst")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "GetNestedResourceTypeFirst", err.Error())
	}

	req, err := client.GetNestedResourceTypeFirstPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, sku)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "GetNestedResourceTypeFirst", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetNestedResourceTypeFirstSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "GetNestedResourceTypeFirst", resp, "Failure sending request")
		return
	}

	result, err = client.GetNestedResourceTypeFirstResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "GetNestedResourceTypeFirst", resp, "Failure responding to request")
		return
	}

	return
}

// GetNestedResourceTypeFirstPreparer prepares the GetNestedResourceTypeFirst request.
func (client SkusClient) GetNestedResourceTypeFirstPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, sku string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst": autorest.Encode("path", nestedResourceTypeFirst),
		"providerNamespace":       autorest.Encode("path", providerNamespace),
		"resourceType":            autorest.Encode("path", resourceType),
		"sku":                     autorest.Encode("path", sku),
		"subscriptionId":          autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus/{sku}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetNestedResourceTypeFirstSender sends the GetNestedResourceTypeFirst request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) GetNestedResourceTypeFirstSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetNestedResourceTypeFirstResponder handles the response to the GetNestedResourceTypeFirst request. The method always
// closes the http.Response Body.
func (client SkusClient) GetNestedResourceTypeFirstResponder(resp *http.Response) (result SkuResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetNestedResourceTypeSecond gets the sku details for the given resource type and sku name.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
// nestedResourceTypeSecond - the second child resource type.
// sku - the SKU.
func (client SkusClient) GetNestedResourceTypeSecond(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, sku string) (result SkuResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.GetNestedResourceTypeSecond")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "GetNestedResourceTypeSecond", err.Error())
	}

	req, err := client.GetNestedResourceTypeSecondPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, sku)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "GetNestedResourceTypeSecond", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetNestedResourceTypeSecondSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "GetNestedResourceTypeSecond", resp, "Failure sending request")
		return
	}

	result, err = client.GetNestedResourceTypeSecondResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "GetNestedResourceTypeSecond", resp, "Failure responding to request")
		return
	}

	return
}

// GetNestedResourceTypeSecondPreparer prepares the GetNestedResourceTypeSecond request.
func (client SkusClient) GetNestedResourceTypeSecondPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, sku string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst":  autorest.Encode("path", nestedResourceTypeFirst),
		"nestedResourceTypeSecond": autorest.Encode("path", nestedResourceTypeSecond),
		"providerNamespace":        autorest.Encode("path", providerNamespace),
		"resourceType":             autorest.Encode("path", resourceType),
		"sku":                      autorest.Encode("path", sku),
		"subscriptionId":           autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus/{sku}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetNestedResourceTypeSecondSender sends the GetNestedResourceTypeSecond request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) GetNestedResourceTypeSecondSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetNestedResourceTypeSecondResponder handles the response to the GetNestedResourceTypeSecond request. The method always
// closes the http.Response Body.
func (client SkusClient) GetNestedResourceTypeSecondResponder(resp *http.Response) (result SkuResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetNestedResourceTypeThird gets the sku details for the given resource type and sku name.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
// nestedResourceTypeSecond - the second child resource type.
// nestedResourceTypeThird - the third child resource type.
// sku - the SKU.
func (client SkusClient) GetNestedResourceTypeThird(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string, sku string) (result SkuResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.GetNestedResourceTypeThird")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "GetNestedResourceTypeThird", err.Error())
	}

	req, err := client.GetNestedResourceTypeThirdPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird, sku)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "GetNestedResourceTypeThird", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetNestedResourceTypeThirdSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "GetNestedResourceTypeThird", resp, "Failure sending request")
		return
	}

	result, err = client.GetNestedResourceTypeThirdResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "GetNestedResourceTypeThird", resp, "Failure responding to request")
		return
	}

	return
}

// GetNestedResourceTypeThirdPreparer prepares the GetNestedResourceTypeThird request.
func (client SkusClient) GetNestedResourceTypeThirdPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string, sku string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst":  autorest.Encode("path", nestedResourceTypeFirst),
		"nestedResourceTypeSecond": autorest.Encode("path", nestedResourceTypeSecond),
		"nestedResourceTypeThird":  autorest.Encode("path", nestedResourceTypeThird),
		"providerNamespace":        autorest.Encode("path", providerNamespace),
		"resourceType":             autorest.Encode("path", resourceType),
		"sku":                      autorest.Encode("path", sku),
		"subscriptionId":           autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus/{sku}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetNestedResourceTypeThirdSender sends the GetNestedResourceTypeThird request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) GetNestedResourceTypeThirdSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetNestedResourceTypeThirdResponder handles the response to the GetNestedResourceTypeThird request. The method always
// closes the http.Response Body.
func (client SkusClient) GetNestedResourceTypeThirdResponder(resp *http.Response) (result SkuResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByResourceTypeRegistrations gets the list of skus for the given resource type.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
func (client SkusClient) ListByResourceTypeRegistrations(ctx context.Context, providerNamespace string, resourceType string) (result SkuResourceArrayResponseWithContinuationPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.ListByResourceTypeRegistrations")
		defer func() {
			sc := -1
			if result.srarwc.Response.Response != nil {
				sc = result.srarwc.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "ListByResourceTypeRegistrations", err.Error())
	}

	result.fn = client.listByResourceTypeRegistrationsNextResults
	req, err := client.ListByResourceTypeRegistrationsPreparer(ctx, providerNamespace, resourceType)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "ListByResourceTypeRegistrations", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByResourceTypeRegistrationsSender(req)
	if err != nil {
		result.srarwc.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "ListByResourceTypeRegistrations", resp, "Failure sending request")
		return
	}

	result.srarwc, err = client.ListByResourceTypeRegistrationsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "ListByResourceTypeRegistrations", resp, "Failure responding to request")
		return
	}
	if result.srarwc.hasNextLink() && result.srarwc.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByResourceTypeRegistrationsPreparer prepares the ListByResourceTypeRegistrations request.
func (client SkusClient) ListByResourceTypeRegistrationsPreparer(ctx context.Context, providerNamespace string, resourceType string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"providerNamespace": autorest.Encode("path", providerNamespace),
		"resourceType":      autorest.Encode("path", resourceType),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByResourceTypeRegistrationsSender sends the ListByResourceTypeRegistrations request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) ListByResourceTypeRegistrationsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByResourceTypeRegistrationsResponder handles the response to the ListByResourceTypeRegistrations request. The method always
// closes the http.Response Body.
func (client SkusClient) ListByResourceTypeRegistrationsResponder(resp *http.Response) (result SkuResourceArrayResponseWithContinuation, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByResourceTypeRegistrationsNextResults retrieves the next set of results, if any.
func (client SkusClient) listByResourceTypeRegistrationsNextResults(ctx context.Context, lastResults SkuResourceArrayResponseWithContinuation) (result SkuResourceArrayResponseWithContinuation, err error) {
	req, err := lastResults.skuResourceArrayResponseWithContinuationPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "providerhub.SkusClient", "listByResourceTypeRegistrationsNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByResourceTypeRegistrationsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "providerhub.SkusClient", "listByResourceTypeRegistrationsNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByResourceTypeRegistrationsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "listByResourceTypeRegistrationsNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByResourceTypeRegistrationsComplete enumerates all values, automatically crossing page boundaries as required.
func (client SkusClient) ListByResourceTypeRegistrationsComplete(ctx context.Context, providerNamespace string, resourceType string) (result SkuResourceArrayResponseWithContinuationIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.ListByResourceTypeRegistrations")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByResourceTypeRegistrations(ctx, providerNamespace, resourceType)
	return
}

// ListByResourceTypeRegistrationsNestedResourceTypeFirst gets the list of skus for the given resource type.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
func (client SkusClient) ListByResourceTypeRegistrationsNestedResourceTypeFirst(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string) (result SkuResourceArrayResponseWithContinuationPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.ListByResourceTypeRegistrationsNestedResourceTypeFirst")
		defer func() {
			sc := -1
			if result.srarwc.Response.Response != nil {
				sc = result.srarwc.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "ListByResourceTypeRegistrationsNestedResourceTypeFirst", err.Error())
	}

	result.fn = client.listByResourceTypeRegistrationsNestedResourceTypeFirstNextResults
	req, err := client.ListByResourceTypeRegistrationsNestedResourceTypeFirstPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "ListByResourceTypeRegistrationsNestedResourceTypeFirst", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByResourceTypeRegistrationsNestedResourceTypeFirstSender(req)
	if err != nil {
		result.srarwc.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "ListByResourceTypeRegistrationsNestedResourceTypeFirst", resp, "Failure sending request")
		return
	}

	result.srarwc, err = client.ListByResourceTypeRegistrationsNestedResourceTypeFirstResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "ListByResourceTypeRegistrationsNestedResourceTypeFirst", resp, "Failure responding to request")
		return
	}
	if result.srarwc.hasNextLink() && result.srarwc.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByResourceTypeRegistrationsNestedResourceTypeFirstPreparer prepares the ListByResourceTypeRegistrationsNestedResourceTypeFirst request.
func (client SkusClient) ListByResourceTypeRegistrationsNestedResourceTypeFirstPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst": autorest.Encode("path", nestedResourceTypeFirst),
		"providerNamespace":       autorest.Encode("path", providerNamespace),
		"resourceType":            autorest.Encode("path", resourceType),
		"subscriptionId":          autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByResourceTypeRegistrationsNestedResourceTypeFirstSender sends the ListByResourceTypeRegistrationsNestedResourceTypeFirst request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) ListByResourceTypeRegistrationsNestedResourceTypeFirstSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByResourceTypeRegistrationsNestedResourceTypeFirstResponder handles the response to the ListByResourceTypeRegistrationsNestedResourceTypeFirst request. The method always
// closes the http.Response Body.
func (client SkusClient) ListByResourceTypeRegistrationsNestedResourceTypeFirstResponder(resp *http.Response) (result SkuResourceArrayResponseWithContinuation, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByResourceTypeRegistrationsNestedResourceTypeFirstNextResults retrieves the next set of results, if any.
func (client SkusClient) listByResourceTypeRegistrationsNestedResourceTypeFirstNextResults(ctx context.Context, lastResults SkuResourceArrayResponseWithContinuation) (result SkuResourceArrayResponseWithContinuation, err error) {
	req, err := lastResults.skuResourceArrayResponseWithContinuationPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "providerhub.SkusClient", "listByResourceTypeRegistrationsNestedResourceTypeFirstNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByResourceTypeRegistrationsNestedResourceTypeFirstSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "providerhub.SkusClient", "listByResourceTypeRegistrationsNestedResourceTypeFirstNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByResourceTypeRegistrationsNestedResourceTypeFirstResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "listByResourceTypeRegistrationsNestedResourceTypeFirstNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByResourceTypeRegistrationsNestedResourceTypeFirstComplete enumerates all values, automatically crossing page boundaries as required.
func (client SkusClient) ListByResourceTypeRegistrationsNestedResourceTypeFirstComplete(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string) (result SkuResourceArrayResponseWithContinuationIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.ListByResourceTypeRegistrationsNestedResourceTypeFirst")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByResourceTypeRegistrationsNestedResourceTypeFirst(ctx, providerNamespace, resourceType, nestedResourceTypeFirst)
	return
}

// ListByResourceTypeRegistrationsNestedResourceTypeSecond gets the list of skus for the given resource type.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
// nestedResourceTypeSecond - the second child resource type.
func (client SkusClient) ListByResourceTypeRegistrationsNestedResourceTypeSecond(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string) (result SkuResourceArrayResponseWithContinuationPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.ListByResourceTypeRegistrationsNestedResourceTypeSecond")
		defer func() {
			sc := -1
			if result.srarwc.Response.Response != nil {
				sc = result.srarwc.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "ListByResourceTypeRegistrationsNestedResourceTypeSecond", err.Error())
	}

	result.fn = client.listByResourceTypeRegistrationsNestedResourceTypeSecondNextResults
	req, err := client.ListByResourceTypeRegistrationsNestedResourceTypeSecondPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "ListByResourceTypeRegistrationsNestedResourceTypeSecond", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByResourceTypeRegistrationsNestedResourceTypeSecondSender(req)
	if err != nil {
		result.srarwc.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "ListByResourceTypeRegistrationsNestedResourceTypeSecond", resp, "Failure sending request")
		return
	}

	result.srarwc, err = client.ListByResourceTypeRegistrationsNestedResourceTypeSecondResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "ListByResourceTypeRegistrationsNestedResourceTypeSecond", resp, "Failure responding to request")
		return
	}
	if result.srarwc.hasNextLink() && result.srarwc.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByResourceTypeRegistrationsNestedResourceTypeSecondPreparer prepares the ListByResourceTypeRegistrationsNestedResourceTypeSecond request.
func (client SkusClient) ListByResourceTypeRegistrationsNestedResourceTypeSecondPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst":  autorest.Encode("path", nestedResourceTypeFirst),
		"nestedResourceTypeSecond": autorest.Encode("path", nestedResourceTypeSecond),
		"providerNamespace":        autorest.Encode("path", providerNamespace),
		"resourceType":             autorest.Encode("path", resourceType),
		"subscriptionId":           autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByResourceTypeRegistrationsNestedResourceTypeSecondSender sends the ListByResourceTypeRegistrationsNestedResourceTypeSecond request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) ListByResourceTypeRegistrationsNestedResourceTypeSecondSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByResourceTypeRegistrationsNestedResourceTypeSecondResponder handles the response to the ListByResourceTypeRegistrationsNestedResourceTypeSecond request. The method always
// closes the http.Response Body.
func (client SkusClient) ListByResourceTypeRegistrationsNestedResourceTypeSecondResponder(resp *http.Response) (result SkuResourceArrayResponseWithContinuation, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByResourceTypeRegistrationsNestedResourceTypeSecondNextResults retrieves the next set of results, if any.
func (client SkusClient) listByResourceTypeRegistrationsNestedResourceTypeSecondNextResults(ctx context.Context, lastResults SkuResourceArrayResponseWithContinuation) (result SkuResourceArrayResponseWithContinuation, err error) {
	req, err := lastResults.skuResourceArrayResponseWithContinuationPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "providerhub.SkusClient", "listByResourceTypeRegistrationsNestedResourceTypeSecondNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByResourceTypeRegistrationsNestedResourceTypeSecondSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "providerhub.SkusClient", "listByResourceTypeRegistrationsNestedResourceTypeSecondNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByResourceTypeRegistrationsNestedResourceTypeSecondResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "listByResourceTypeRegistrationsNestedResourceTypeSecondNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByResourceTypeRegistrationsNestedResourceTypeSecondComplete enumerates all values, automatically crossing page boundaries as required.
func (client SkusClient) ListByResourceTypeRegistrationsNestedResourceTypeSecondComplete(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string) (result SkuResourceArrayResponseWithContinuationIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.ListByResourceTypeRegistrationsNestedResourceTypeSecond")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByResourceTypeRegistrationsNestedResourceTypeSecond(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond)
	return
}

// ListByResourceTypeRegistrationsNestedResourceTypeThird gets the list of skus for the given resource type.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
// nestedResourceTypeSecond - the second child resource type.
// nestedResourceTypeThird - the third child resource type.
func (client SkusClient) ListByResourceTypeRegistrationsNestedResourceTypeThird(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string) (result SkuResourceArrayResponseWithContinuationPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.ListByResourceTypeRegistrationsNestedResourceTypeThird")
		defer func() {
			sc := -1
			if result.srarwc.Response.Response != nil {
				sc = result.srarwc.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.SkusClient", "ListByResourceTypeRegistrationsNestedResourceTypeThird", err.Error())
	}

	result.fn = client.listByResourceTypeRegistrationsNestedResourceTypeThirdNextResults
	req, err := client.ListByResourceTypeRegistrationsNestedResourceTypeThirdPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "ListByResourceTypeRegistrationsNestedResourceTypeThird", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByResourceTypeRegistrationsNestedResourceTypeThirdSender(req)
	if err != nil {
		result.srarwc.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "ListByResourceTypeRegistrationsNestedResourceTypeThird", resp, "Failure sending request")
		return
	}

	result.srarwc, err = client.ListByResourceTypeRegistrationsNestedResourceTypeThirdResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "ListByResourceTypeRegistrationsNestedResourceTypeThird", resp, "Failure responding to request")
		return
	}
	if result.srarwc.hasNextLink() && result.srarwc.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByResourceTypeRegistrationsNestedResourceTypeThirdPreparer prepares the ListByResourceTypeRegistrationsNestedResourceTypeThird request.
func (client SkusClient) ListByResourceTypeRegistrationsNestedResourceTypeThirdPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst":  autorest.Encode("path", nestedResourceTypeFirst),
		"nestedResourceTypeSecond": autorest.Encode("path", nestedResourceTypeSecond),
		"nestedResourceTypeThird":  autorest.Encode("path", nestedResourceTypeThird),
		"providerNamespace":        autorest.Encode("path", providerNamespace),
		"resourceType":             autorest.Encode("path", resourceType),
		"subscriptionId":           autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByResourceTypeRegistrationsNestedResourceTypeThirdSender sends the ListByResourceTypeRegistrationsNestedResourceTypeThird request. The method will close the
// http.Response Body if it receives an error.
func (client SkusClient) ListByResourceTypeRegistrationsNestedResourceTypeThirdSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByResourceTypeRegistrationsNestedResourceTypeThirdResponder handles the response to the ListByResourceTypeRegistrationsNestedResourceTypeThird request. The method always
// closes the http.Response Body.
func (client SkusClient) ListByResourceTypeRegistrationsNestedResourceTypeThirdResponder(resp *http.Response) (result SkuResourceArrayResponseWithContinuation, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByResourceTypeRegistrationsNestedResourceTypeThirdNextResults retrieves the next set of results, if any.
func (client SkusClient) listByResourceTypeRegistrationsNestedResourceTypeThirdNextResults(ctx context.Context, lastResults SkuResourceArrayResponseWithContinuation) (result SkuResourceArrayResponseWithContinuation, err error) {
	req, err := lastResults.skuResourceArrayResponseWithContinuationPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "providerhub.SkusClient", "listByResourceTypeRegistrationsNestedResourceTypeThirdNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByResourceTypeRegistrationsNestedResourceTypeThirdSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "providerhub.SkusClient", "listByResourceTypeRegistrationsNestedResourceTypeThirdNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByResourceTypeRegistrationsNestedResourceTypeThirdResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.SkusClient", "listByResourceTypeRegistrationsNestedResourceTypeThirdNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByResourceTypeRegistrationsNestedResourceTypeThirdComplete enumerates all values, automatically crossing page boundaries as required.
func (client SkusClient) ListByResourceTypeRegistrationsNestedResourceTypeThirdComplete(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string) (result SkuResourceArrayResponseWithContinuationIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SkusClient.ListByResourceTypeRegistrationsNestedResourceTypeThird")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByResourceTypeRegistrationsNestedResourceTypeThird(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird)
	return
}
