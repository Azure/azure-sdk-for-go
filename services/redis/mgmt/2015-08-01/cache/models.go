package cache

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// RebootType enumerates the values for reboot type.
type RebootType string

const (
	// AllNodes specifies the all nodes state for reboot type.
	AllNodes RebootType = "AllNodes"
	// PrimaryNode specifies the primary node state for reboot type.
	PrimaryNode RebootType = "PrimaryNode"
	// SecondaryNode specifies the secondary node state for reboot type.
	SecondaryNode RebootType = "SecondaryNode"
)

// RedisKeyType enumerates the values for redis key type.
type RedisKeyType string

const (
	// Primary specifies the primary state for redis key type.
	Primary RedisKeyType = "Primary"
	// Secondary specifies the secondary state for redis key type.
	Secondary RedisKeyType = "Secondary"
)

// SkuFamily enumerates the values for sku family.
type SkuFamily string

const (
	// C specifies the c state for sku family.
	C SkuFamily = "C"
	// P specifies the p state for sku family.
	P SkuFamily = "P"
)

// SkuName enumerates the values for sku name.
type SkuName string

const (
	// Basic specifies the basic state for sku name.
	Basic SkuName = "Basic"
	// Premium specifies the premium state for sku name.
	Premium SkuName = "Premium"
	// Standard specifies the standard state for sku name.
	Standard SkuName = "Standard"
)

// RedisAccessKeys is redis cache access keys.
type RedisAccessKeys struct {
	PrimaryKey   *string `json:"primaryKey,omitempty"`
	SecondaryKey *string `json:"secondaryKey,omitempty"`
}

// RedisCreateOrUpdateParameters is parameters supplied to the CreateOrUpdate Redis operation.
type RedisCreateOrUpdateParameters struct {
	ID               *string             `json:"id,omitempty"`
	Name             *string             `json:"name,omitempty"`
	Type             *string             `json:"type,omitempty"`
	Location         *string             `json:"location,omitempty"`
	Tags             *map[string]*string `json:"tags,omitempty"`
	*RedisProperties `json:"properties,omitempty"`
}

// RedisListKeysResult is the response of Redis list keys operation.
type RedisListKeysResult struct {
	autorest.Response `json:"-"`
	PrimaryKey        *string `json:"primaryKey,omitempty"`
	SecondaryKey      *string `json:"secondaryKey,omitempty"`
}

// RedisListResult is the response of list Redis operation.
type RedisListResult struct {
	autorest.Response `json:"-"`
	Value             *[]RedisResource `json:"value,omitempty"`
	NextLink          *string          `json:"nextLink,omitempty"`
}

// RedisListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client RedisListResult) RedisListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// RedisProperties is parameters supplied to CreateOrUpdate Redis operation.
type RedisProperties struct {
	RedisVersion       *string             `json:"redisVersion,omitempty"`
	Sku                *Sku                `json:"sku,omitempty"`
	RedisConfiguration *map[string]*string `json:"redisConfiguration,omitempty"`
	EnableNonSslPort   *bool               `json:"enableNonSslPort,omitempty"`
	TenantSettings     *map[string]*string `json:"tenantSettings,omitempty"`
	ShardCount         *int32              `json:"shardCount,omitempty"`
	VirtualNetwork     *string             `json:"virtualNetwork,omitempty"`
	Subnet             *string             `json:"subnet,omitempty"`
	StaticIP           *string             `json:"staticIP,omitempty"`
}

// RedisReadableProperties is parameters describing a Redis instance
type RedisReadableProperties struct {
	RedisVersion       *string             `json:"redisVersion,omitempty"`
	Sku                *Sku                `json:"sku,omitempty"`
	RedisConfiguration *map[string]*string `json:"redisConfiguration,omitempty"`
	EnableNonSslPort   *bool               `json:"enableNonSslPort,omitempty"`
	TenantSettings     *map[string]*string `json:"tenantSettings,omitempty"`
	ShardCount         *int32              `json:"shardCount,omitempty"`
	VirtualNetwork     *string             `json:"virtualNetwork,omitempty"`
	Subnet             *string             `json:"subnet,omitempty"`
	StaticIP           *string             `json:"staticIP,omitempty"`
	ProvisioningState  *string             `json:"provisioningState,omitempty"`
	HostName           *string             `json:"hostName,omitempty"`
	Port               *int32              `json:"port,omitempty"`
	SslPort            *int32              `json:"sslPort,omitempty"`
}

// RedisReadablePropertiesWithAccessKey is properties generated only in response to CreateOrUpdate Redis operation.
type RedisReadablePropertiesWithAccessKey struct {
	RedisVersion       *string             `json:"redisVersion,omitempty"`
	Sku                *Sku                `json:"sku,omitempty"`
	RedisConfiguration *map[string]*string `json:"redisConfiguration,omitempty"`
	EnableNonSslPort   *bool               `json:"enableNonSslPort,omitempty"`
	TenantSettings     *map[string]*string `json:"tenantSettings,omitempty"`
	ShardCount         *int32              `json:"shardCount,omitempty"`
	VirtualNetwork     *string             `json:"virtualNetwork,omitempty"`
	Subnet             *string             `json:"subnet,omitempty"`
	StaticIP           *string             `json:"staticIP,omitempty"`
	ProvisioningState  *string             `json:"provisioningState,omitempty"`
	HostName           *string             `json:"hostName,omitempty"`
	Port               *int32              `json:"port,omitempty"`
	SslPort            *int32              `json:"sslPort,omitempty"`
	AccessKeys         *RedisAccessKeys    `json:"accessKeys,omitempty"`
}

// RedisRebootParameters is specifies which Redis node(s) to reboot.
type RedisRebootParameters struct {
	RebootType RebootType `json:"rebootType,omitempty"`
	ShardID    *int32     `json:"shardId,omitempty"`
}

// RedisRegenerateKeyParameters is specifies which Redis access keys to reset.
type RedisRegenerateKeyParameters struct {
	KeyType RedisKeyType `json:"keyType,omitempty"`
}

// RedisResource is a single Redis item in List or Get Operation.
type RedisResource struct {
	autorest.Response        `json:"-"`
	ID                       *string             `json:"id,omitempty"`
	Name                     *string             `json:"name,omitempty"`
	Type                     *string             `json:"type,omitempty"`
	Location                 *string             `json:"location,omitempty"`
	Tags                     *map[string]*string `json:"tags,omitempty"`
	*RedisReadableProperties `json:"properties,omitempty"`
}

// RedisResourceWithAccessKey is a Redis item in CreateOrUpdate Operation response.
type RedisResourceWithAccessKey struct {
	autorest.Response                     `json:"-"`
	ID                                    *string             `json:"id,omitempty"`
	Name                                  *string             `json:"name,omitempty"`
	Type                                  *string             `json:"type,omitempty"`
	Location                              *string             `json:"location,omitempty"`
	Tags                                  *map[string]*string `json:"tags,omitempty"`
	*RedisReadablePropertiesWithAccessKey `json:"properties,omitempty"`
}

// Resource is
type Resource struct {
	ID       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Type     *string             `json:"type,omitempty"`
	Location *string             `json:"location,omitempty"`
	Tags     *map[string]*string `json:"tags,omitempty"`
}

// Sku is SKU parameters supplied to the create Redis operation.
type Sku struct {
	Name     SkuName   `json:"name,omitempty"`
	Family   SkuFamily `json:"family,omitempty"`
	Capacity *int32    `json:"capacity,omitempty"`
}
