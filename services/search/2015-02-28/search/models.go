package search

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"errors"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
)

// IndexActionType enumerates the values for index action type.
type IndexActionType string

const (
	// Delete specifies the delete state for index action type.
	Delete IndexActionType = "delete"
	// Merge specifies the merge state for index action type.
	Merge IndexActionType = "merge"
	// MergeOrUpload specifies the merge or upload state for index action type.
	MergeOrUpload IndexActionType = "mergeOrUpload"
	// Upload specifies the upload state for index action type.
	Upload IndexActionType = "upload"
)

// IndexerExecutionStatus enumerates the values for indexer execution status.
type IndexerExecutionStatus string

const (
	// InProgress specifies the in progress state for indexer execution status.
	InProgress IndexerExecutionStatus = "inProgress"
	// Reset specifies the reset state for indexer execution status.
	Reset IndexerExecutionStatus = "reset"
	// Success specifies the success state for indexer execution status.
	Success IndexerExecutionStatus = "success"
	// TransientFailure specifies the transient failure state for indexer execution status.
	TransientFailure IndexerExecutionStatus = "transientFailure"
)

// IndexerStatus enumerates the values for indexer status.
type IndexerStatus string

const (
	// Error specifies the error state for indexer status.
	Error IndexerStatus = "error"
	// Running specifies the running state for indexer status.
	Running IndexerStatus = "running"
	// Unknown specifies the unknown state for indexer status.
	Unknown IndexerStatus = "unknown"
)

// Mode enumerates the values for mode.
type Mode string

const (
	// All specifies the all state for mode.
	All Mode = "all"
	// Any specifies the any state for mode.
	Any Mode = "any"
)

// OdataType enumerates the values for odata type.
type OdataType string

const (
	// OdataTypeMicrosoftAzureSearchHighWaterMarkChangeDetectionPolicy specifies the odata type microsoft azure search high
	// water mark change detection policy state for odata type.
	OdataTypeMicrosoftAzureSearchHighWaterMarkChangeDetectionPolicy OdataType = "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy"
	// OdataTypeMicrosoftAzureSearchSQLIntegratedChangeTrackingPolicy specifies the odata type microsoft azure search sql
	// integrated change tracking policy state for odata type.
	OdataTypeMicrosoftAzureSearchSQLIntegratedChangeTrackingPolicy OdataType = "#Microsoft.Azure.Search.SqlIntegratedChangeTrackingPolicy"
)

// OdataType1 enumerates the values for odata type 1.
type OdataType1 string

const (
	// OdataTypeMicrosoftAzureSearchSoftDeleteColumnDeletionDetectionPolicy specifies the odata type microsoft azure search
	// soft delete column deletion detection policy state for odata type 1.
	OdataTypeMicrosoftAzureSearchSoftDeleteColumnDeletionDetectionPolicy OdataType1 = "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy"
)

// QueryType enumerates the values for query type.
type QueryType string

const (
	// Full specifies the full state for query type.
	Full QueryType = "full"
	// Simple specifies the simple state for query type.
	Simple QueryType = "simple"
)

// ScoringFunctionAggregation enumerates the values for scoring function aggregation.
type ScoringFunctionAggregation string

const (
	// Average specifies the average state for scoring function aggregation.
	Average ScoringFunctionAggregation = "average"
	// FirstMatching specifies the first matching state for scoring function aggregation.
	FirstMatching ScoringFunctionAggregation = "firstMatching"
	// Maximum specifies the maximum state for scoring function aggregation.
	Maximum ScoringFunctionAggregation = "maximum"
	// Minimum specifies the minimum state for scoring function aggregation.
	Minimum ScoringFunctionAggregation = "minimum"
	// Sum specifies the sum state for scoring function aggregation.
	Sum ScoringFunctionAggregation = "sum"
)

// ScoringFunctionInterpolation enumerates the values for scoring function interpolation.
type ScoringFunctionInterpolation string

const (
	// Constant specifies the constant state for scoring function interpolation.
	Constant ScoringFunctionInterpolation = "constant"
	// Linear specifies the linear state for scoring function interpolation.
	Linear ScoringFunctionInterpolation = "linear"
	// Logarithmic specifies the logarithmic state for scoring function interpolation.
	Logarithmic ScoringFunctionInterpolation = "logarithmic"
	// Quadratic specifies the quadratic state for scoring function interpolation.
	Quadratic ScoringFunctionInterpolation = "quadratic"
)

// SuggesterSearchMode enumerates the values for suggester search mode.
type SuggesterSearchMode string

const (
	// AnalyzingInfixMatching specifies the analyzing infix matching state for suggester search mode.
	AnalyzingInfixMatching SuggesterSearchMode = "analyzingInfixMatching"
)

// Type enumerates the values for type.
type Type string

const (
	// TypeDistance specifies the type distance state for type.
	TypeDistance Type = "distance"
	// TypeFreshness specifies the type freshness state for type.
	TypeFreshness Type = "freshness"
	// TypeMagnitude specifies the type magnitude state for type.
	TypeMagnitude Type = "magnitude"
	// TypeTag specifies the type tag state for type.
	TypeTag Type = "tag"
)

// CorsOptions is defines options to control Cross-Origin Resource Sharing (CORS) for an index.
type CorsOptions struct {
	AllowedOrigins  *[]string `json:"allowedOrigins,omitempty"`
	MaxAgeInSeconds *int64    `json:"maxAgeInSeconds,omitempty"`
}

// DataChangeDetectionPolicy is abstract base class for data change detection policies.
type DataChangeDetectionPolicy interface {
	AsHighWaterMarkChangeDetectionPolicy() (*HighWaterMarkChangeDetectionPolicy, bool)
	AsSQLIntegratedChangeTrackingPolicy() (*SQLIntegratedChangeTrackingPolicy, bool)
}

func unmarshalDataChangeDetectionPolicy(body []byte) (DataChangeDetectionPolicy, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["@odata.type"] {
	case string(OdataTypeMicrosoftAzureSearchHighWaterMarkChangeDetectionPolicy):
		var hwmcdp HighWaterMarkChangeDetectionPolicy
		err := json.Unmarshal(body, &hwmcdp)
		return hwmcdp, err
	case string(OdataTypeMicrosoftAzureSearchSQLIntegratedChangeTrackingPolicy):
		var sictp SQLIntegratedChangeTrackingPolicy
		err := json.Unmarshal(body, &sictp)
		return sictp, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalDataChangeDetectionPolicyArray(body []byte) ([]DataChangeDetectionPolicy, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	dcdpArray := make([]DataChangeDetectionPolicy, len(rawMessages))

	for index, rawMessage := range rawMessages {
		dcdp, err := unmarshalDataChangeDetectionPolicy(*rawMessage)
		if err != nil {
			return nil, err
		}
		dcdpArray[index] = dcdp
	}
	return dcdpArray, nil
}

// DataContainer is represents information about the entity (such as Azure SQL table or DocumentDb collection) that
// will be indexed.
type DataContainer struct {
	Name  *string `json:"name,omitempty"`
	Query *string `json:"query,omitempty"`
}

// DataDeletionDetectionPolicy is abstract base class for data deletion detection policies.
type DataDeletionDetectionPolicy interface {
	AsSoftDeleteColumnDeletionDetectionPolicy() (*SoftDeleteColumnDeletionDetectionPolicy, bool)
}

func unmarshalDataDeletionDetectionPolicy(body []byte) (DataDeletionDetectionPolicy, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["@odata.type"] {
	case string(OdataTypeMicrosoftAzureSearchSoftDeleteColumnDeletionDetectionPolicy):
		var sdcddp SoftDeleteColumnDeletionDetectionPolicy
		err := json.Unmarshal(body, &sdcddp)
		return sdcddp, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalDataDeletionDetectionPolicyArray(body []byte) ([]DataDeletionDetectionPolicy, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	dddpArray := make([]DataDeletionDetectionPolicy, len(rawMessages))

	for index, rawMessage := range rawMessages {
		dddp, err := unmarshalDataDeletionDetectionPolicy(*rawMessage)
		if err != nil {
			return nil, err
		}
		dddpArray[index] = dddp
	}
	return dddpArray, nil
}

// DataSource is represents a datasource definition in Azure Search, which can be used to configure an indexer.
type DataSource struct {
	autorest.Response           `json:"-"`
	Name                        *string                     `json:"name,omitempty"`
	Description                 *string                     `json:"description,omitempty"`
	Type                        *string                     `json:"type,omitempty"`
	Credentials                 *DataSourceCredentials      `json:"credentials,omitempty"`
	Container                   *DataContainer              `json:"container,omitempty"`
	DataChangeDetectionPolicy   DataChangeDetectionPolicy   `json:"dataChangeDetectionPolicy,omitempty"`
	DataDeletionDetectionPolicy DataDeletionDetectionPolicy `json:"dataDeletionDetectionPolicy,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for DataSource struct.
func (ds *DataSource) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		ds.Name = &name
	}

	v = m["description"]
	if v != nil {
		var description string
		err = json.Unmarshal(*m["description"], &description)
		if err != nil {
			return err
		}
		ds.Description = &description
	}

	v = m["type"]
	if v != nil {
		var typeVar string
		err = json.Unmarshal(*m["type"], &typeVar)
		if err != nil {
			return err
		}
		ds.Type = &typeVar
	}

	v = m["credentials"]
	if v != nil {
		var credentials DataSourceCredentials
		err = json.Unmarshal(*m["credentials"], &credentials)
		if err != nil {
			return err
		}
		ds.Credentials = &credentials
	}

	v = m["container"]
	if v != nil {
		var containerVar DataContainer
		err = json.Unmarshal(*m["container"], &containerVar)
		if err != nil {
			return err
		}
		ds.Container = &containerVar
	}

	v = m["dataChangeDetectionPolicy"]
	if v != nil {
		dataChangeDetectionPolicy, err := unmarshalDataChangeDetectionPolicy(*m["dataChangeDetectionPolicy"])
		if err != nil {
			return err
		}
		ds.DataChangeDetectionPolicy = dataChangeDetectionPolicy
	}

	v = m["dataDeletionDetectionPolicy"]
	if v != nil {
		dataDeletionDetectionPolicy, err := unmarshalDataDeletionDetectionPolicy(*m["dataDeletionDetectionPolicy"])
		if err != nil {
			return err
		}
		ds.DataDeletionDetectionPolicy = dataDeletionDetectionPolicy
	}

	return nil
}

// DataSourceCredentials is represents credentials that can be used to connect to a datasource.
type DataSourceCredentials struct {
	ConnectionString *string `json:"connectionString,omitempty"`
}

// DataSourceListResult is response from a List Datasources request. If successful, it includes the full definitions of
// all datasources.
type DataSourceListResult struct {
	autorest.Response `json:"-"`
	Value             *[]DataSource `json:"value,omitempty"`
}

// DistanceScoringFunction is defines a function that boosts scores based on distance from a geographic location.
type DistanceScoringFunction struct {
	FieldName     *string                      `json:"fieldName,omitempty"`
	Boost         *float64                     `json:"boost,omitempty"`
	Interpolation ScoringFunctionInterpolation `json:"interpolation,omitempty"`
	Type          Type                         `json:"type,omitempty"`
	Distance      *DistanceScoringParameters   `json:"distance,omitempty"`
}

// MarshalJSON is the custom marshaler for DistanceScoringFunction.
func (dsf DistanceScoringFunction) MarshalJSON() ([]byte, error) {
	dsf.Type = TypeDistance
	type Alias DistanceScoringFunction
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(dsf),
	})
}

// AsDistanceScoringFunction is the ScoringFunction implementation for DistanceScoringFunction.
func (dsf DistanceScoringFunction) AsDistanceScoringFunction() (*DistanceScoringFunction, bool) {
	return &dsf, true
}

// AsFreshnessScoringFunction is the ScoringFunction implementation for DistanceScoringFunction.
func (dsf DistanceScoringFunction) AsFreshnessScoringFunction() (*FreshnessScoringFunction, bool) {
	return nil, false
}

// AsMagnitudeScoringFunction is the ScoringFunction implementation for DistanceScoringFunction.
func (dsf DistanceScoringFunction) AsMagnitudeScoringFunction() (*MagnitudeScoringFunction, bool) {
	return nil, false
}

// AsTagScoringFunction is the ScoringFunction implementation for DistanceScoringFunction.
func (dsf DistanceScoringFunction) AsTagScoringFunction() (*TagScoringFunction, bool) {
	return nil, false
}

// DistanceScoringParameters is provides parameter values to a distance scoring function.
type DistanceScoringParameters struct {
	ReferencePointParameter *string  `json:"referencePointParameter,omitempty"`
	BoostingDistance        *float64 `json:"boostingDistance,omitempty"`
}

// DocumentIndexResult is response containing the status of operations for all documents in the indexing request.
type DocumentIndexResult struct {
	Value *[]IndexingResult `json:"value,omitempty"`
}

// Field is represents a field in an index definition in Azure Search, which describes the name, data type, and search
// behavior of a field.
type Field struct {
	Name        *string `json:"name,omitempty"`
	Type        *string `json:"type,omitempty"`
	Analyzer    *string `json:"analyzer,omitempty"`
	Key         *bool   `json:"key,omitempty"`
	Searchable  *bool   `json:"searchable,omitempty"`
	Filterable  *bool   `json:"filterable,omitempty"`
	Sortable    *bool   `json:"sortable,omitempty"`
	Facetable   *bool   `json:"facetable,omitempty"`
	Retrievable *bool   `json:"retrievable,omitempty"`
}

// FreshnessScoringFunction is defines a function that boosts scores based on the value of a date-time field.
type FreshnessScoringFunction struct {
	FieldName     *string                      `json:"fieldName,omitempty"`
	Boost         *float64                     `json:"boost,omitempty"`
	Interpolation ScoringFunctionInterpolation `json:"interpolation,omitempty"`
	Type          Type                         `json:"type,omitempty"`
	Freshness     *FreshnessScoringParameters  `json:"freshness,omitempty"`
}

// MarshalJSON is the custom marshaler for FreshnessScoringFunction.
func (fsf FreshnessScoringFunction) MarshalJSON() ([]byte, error) {
	fsf.Type = TypeFreshness
	type Alias FreshnessScoringFunction
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(fsf),
	})
}

// AsDistanceScoringFunction is the ScoringFunction implementation for FreshnessScoringFunction.
func (fsf FreshnessScoringFunction) AsDistanceScoringFunction() (*DistanceScoringFunction, bool) {
	return nil, false
}

// AsFreshnessScoringFunction is the ScoringFunction implementation for FreshnessScoringFunction.
func (fsf FreshnessScoringFunction) AsFreshnessScoringFunction() (*FreshnessScoringFunction, bool) {
	return &fsf, true
}

// AsMagnitudeScoringFunction is the ScoringFunction implementation for FreshnessScoringFunction.
func (fsf FreshnessScoringFunction) AsMagnitudeScoringFunction() (*MagnitudeScoringFunction, bool) {
	return nil, false
}

// AsTagScoringFunction is the ScoringFunction implementation for FreshnessScoringFunction.
func (fsf FreshnessScoringFunction) AsTagScoringFunction() (*TagScoringFunction, bool) {
	return nil, false
}

// FreshnessScoringParameters is provides parameter values to a freshness scoring function.
type FreshnessScoringParameters struct {
	BoostingDuration *string `json:"boostingDuration,omitempty"`
}

// HighWaterMarkChangeDetectionPolicy is defines a data change detection policy that captures changes based on the
// value of a high water mark column.
type HighWaterMarkChangeDetectionPolicy struct {
	OdataType               OdataType `json:"@odata.type,omitempty"`
	HighWaterMarkColumnName *string   `json:"highWaterMarkColumnName,omitempty"`
}

// MarshalJSON is the custom marshaler for HighWaterMarkChangeDetectionPolicy.
func (hwmcdp HighWaterMarkChangeDetectionPolicy) MarshalJSON() ([]byte, error) {
	hwmcdp.OdataType = OdataTypeMicrosoftAzureSearchHighWaterMarkChangeDetectionPolicy
	type Alias HighWaterMarkChangeDetectionPolicy
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(hwmcdp),
	})
}

// AsHighWaterMarkChangeDetectionPolicy is the DataChangeDetectionPolicy implementation for HighWaterMarkChangeDetectionPolicy.
func (hwmcdp HighWaterMarkChangeDetectionPolicy) AsHighWaterMarkChangeDetectionPolicy() (*HighWaterMarkChangeDetectionPolicy, bool) {
	return &hwmcdp, true
}

// AsSQLIntegratedChangeTrackingPolicy is the DataChangeDetectionPolicy implementation for HighWaterMarkChangeDetectionPolicy.
func (hwmcdp HighWaterMarkChangeDetectionPolicy) AsSQLIntegratedChangeTrackingPolicy() (*SQLIntegratedChangeTrackingPolicy, bool) {
	return nil, false
}

// Index is represents an index definition in Azure Search, which describes the fields and search behavior of an index.
type Index struct {
	autorest.Response     `json:"-"`
	Name                  *string           `json:"name,omitempty"`
	Fields                *[]Field          `json:"fields,omitempty"`
	ScoringProfiles       *[]ScoringProfile `json:"scoringProfiles,omitempty"`
	DefaultScoringProfile *string           `json:"defaultScoringProfile,omitempty"`
	CorsOptions           *CorsOptions      `json:"corsOptions,omitempty"`
	Suggesters            *[]Suggester      `json:"suggesters,omitempty"`
}

// Indexer is represents an Azure Search indexer.
type Indexer struct {
	autorest.Response `json:"-"`
	Name              *string             `json:"name,omitempty"`
	Description       *string             `json:"description,omitempty"`
	DataSourceName    *string             `json:"dataSourceName,omitempty"`
	TargetIndexName   *string             `json:"targetIndexName,omitempty"`
	Schedule          *IndexingSchedule   `json:"schedule,omitempty"`
	Parameters        *IndexingParameters `json:"parameters,omitempty"`
}

// IndexerExecutionInfo is represents the current status and execution history of an indexer.
type IndexerExecutionInfo struct {
	autorest.Response `json:"-"`
	Status            IndexerStatus             `json:"status,omitempty"`
	LastResult        *IndexerExecutionResult   `json:"lastResult,omitempty"`
	ExecutionHistory  *[]IndexerExecutionResult `json:"executionHistory,omitempty"`
}

// IndexerExecutionResult is represents result of an individual indexer execution.
type IndexerExecutionResult struct {
	Status               IndexerExecutionStatus `json:"status,omitempty"`
	ErrorMessage         *string                `json:"errorMessage,omitempty"`
	StartTime            *date.Time             `json:"startTime,omitempty"`
	EndTime              *date.Time             `json:"endTime,omitempty"`
	Errors               *[]ItemError           `json:"errors,omitempty"`
	ItemsProcessed       *int32                 `json:"itemsProcessed,omitempty"`
	ItemsFailed          *int32                 `json:"itemsFailed,omitempty"`
	InitialTrackingState *string                `json:"initialTrackingState,omitempty"`
	FinalTrackingState   *string                `json:"finalTrackingState,omitempty"`
}

// IndexerListResult is response from a List Indexers request. If successful, it includes the full definitions of all
// indexers.
type IndexerListResult struct {
	autorest.Response `json:"-"`
	Value             *[]Indexer `json:"value,omitempty"`
}

// IndexGetStatisticsResult is statistics for a given index. Statistics are collected periodically and are not
// guaranteed to always be up-to-date.
type IndexGetStatisticsResult struct {
	autorest.Response `json:"-"`
	DocumentCount     *int64 `json:"documentCount,omitempty"`
	StorageSize       *int64 `json:"storageSize,omitempty"`
}

// IndexingParameters is represents parameters for indexer execution.
type IndexingParameters struct {
	MaxFailedItems         *int32 `json:"maxFailedItems,omitempty"`
	MaxFailedItemsPerBatch *int32 `json:"maxFailedItemsPerBatch,omitempty"`
	Base64EncodeKeys       *bool  `json:"base64EncodeKeys,omitempty"`
}

// IndexingResult is status of an indexing operation for a single document.
type IndexingResult struct {
	Key          *string `json:"key,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// IndexingSchedule is represents a schedule for indexer execution.
type IndexingSchedule struct {
	Interval  *string    `json:"interval,omitempty"`
	StartTime *date.Time `json:"startTime,omitempty"`
}

// IndexListResult is response from a List Indexes request. If successful, it includes the full definitions of all
// indexes.
type IndexListResult struct {
	autorest.Response `json:"-"`
	Value             *[]Index `json:"value,omitempty"`
}

// Int64 is
type Int64 struct {
	autorest.Response `json:"-"`
	Value             *int64 `json:"value,omitempty"`
}

// ItemError is represents an item- or document-level indexing error.
type ItemError struct {
	Key          *string `json:"key,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// MagnitudeScoringFunction is defines a function that boosts scores based on the magnitude of a numeric field.
type MagnitudeScoringFunction struct {
	FieldName     *string                      `json:"fieldName,omitempty"`
	Boost         *float64                     `json:"boost,omitempty"`
	Interpolation ScoringFunctionInterpolation `json:"interpolation,omitempty"`
	Type          Type                         `json:"type,omitempty"`
	Magnitude     *MagnitudeScoringParameters  `json:"magnitude,omitempty"`
}

// MarshalJSON is the custom marshaler for MagnitudeScoringFunction.
func (msf MagnitudeScoringFunction) MarshalJSON() ([]byte, error) {
	msf.Type = TypeMagnitude
	type Alias MagnitudeScoringFunction
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(msf),
	})
}

// AsDistanceScoringFunction is the ScoringFunction implementation for MagnitudeScoringFunction.
func (msf MagnitudeScoringFunction) AsDistanceScoringFunction() (*DistanceScoringFunction, bool) {
	return nil, false
}

// AsFreshnessScoringFunction is the ScoringFunction implementation for MagnitudeScoringFunction.
func (msf MagnitudeScoringFunction) AsFreshnessScoringFunction() (*FreshnessScoringFunction, bool) {
	return nil, false
}

// AsMagnitudeScoringFunction is the ScoringFunction implementation for MagnitudeScoringFunction.
func (msf MagnitudeScoringFunction) AsMagnitudeScoringFunction() (*MagnitudeScoringFunction, bool) {
	return &msf, true
}

// AsTagScoringFunction is the ScoringFunction implementation for MagnitudeScoringFunction.
func (msf MagnitudeScoringFunction) AsTagScoringFunction() (*TagScoringFunction, bool) {
	return nil, false
}

// MagnitudeScoringParameters is provides parameter values to a magnitude scoring function.
type MagnitudeScoringParameters struct {
	BoostingRangeStart       *float64 `json:"boostingRangeStart,omitempty"`
	BoostingRangeEnd         *float64 `json:"boostingRangeEnd,omitempty"`
	ConstantBoostBeyondRange *bool    `json:"constantBoostBeyondRange,omitempty"`
}

// Parameters is parameters for filtering, sorting, faceting, paging, and other search query behaviors.
type Parameters struct {
	Filter                  *string   `json:"filter,omitempty"`
	HighlightFields         *[]string `json:"highlightFields,omitempty"`
	HighlightPostTag        *string   `json:"highlightPostTag,omitempty"`
	HighlightPreTag         *string   `json:"highlightPreTag,omitempty"`
	IncludeTotalResultCount *bool     `json:"includeTotalResultCount,omitempty"`
	MinimumCoverage         *float64  `json:"minimumCoverage,omitempty"`
	OrderBy                 *[]string `json:"orderBy,omitempty"`
	QueryType               QueryType `json:"queryType,omitempty"`
	ScoringParameters       *[]string `json:"scoringParameters,omitempty"`
	ScoringProfile          *string   `json:"scoringProfile,omitempty"`
	SearchFields            *[]string `json:"searchFields,omitempty"`
	SearchMode              Mode      `json:"searchMode,omitempty"`
	Select                  *[]string `json:"select,omitempty"`
	Skip                    *int32    `json:"skip,omitempty"`
	Top                     *int32    `json:"top,omitempty"`
}

// ScoringFunction is abstract base class for functions that can modify document scores during ranking.
type ScoringFunction interface {
	AsDistanceScoringFunction() (*DistanceScoringFunction, bool)
	AsFreshnessScoringFunction() (*FreshnessScoringFunction, bool)
	AsMagnitudeScoringFunction() (*MagnitudeScoringFunction, bool)
	AsTagScoringFunction() (*TagScoringFunction, bool)
}

func unmarshalScoringFunction(body []byte) (ScoringFunction, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(TypeDistance):
		var dsf DistanceScoringFunction
		err := json.Unmarshal(body, &dsf)
		return dsf, err
	case string(TypeFreshness):
		var fsf FreshnessScoringFunction
		err := json.Unmarshal(body, &fsf)
		return fsf, err
	case string(TypeMagnitude):
		var msf MagnitudeScoringFunction
		err := json.Unmarshal(body, &msf)
		return msf, err
	case string(TypeTag):
		var tsf TagScoringFunction
		err := json.Unmarshal(body, &tsf)
		return tsf, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalScoringFunctionArray(body []byte) ([]ScoringFunction, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	sfArray := make([]ScoringFunction, len(rawMessages))

	for index, rawMessage := range rawMessages {
		sf, err := unmarshalScoringFunction(*rawMessage)
		if err != nil {
			return nil, err
		}
		sfArray[index] = sf
	}
	return sfArray, nil
}

// ScoringProfile is defines parameters for an Azure Search index that influence scoring in search queries.
type ScoringProfile struct {
	Name                *string                    `json:"name,omitempty"`
	Text                *TextWeights               `json:"text,omitempty"`
	Functions           *[]ScoringFunction         `json:"functions,omitempty"`
	FunctionAggregation ScoringFunctionAggregation `json:"functionAggregation,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for ScoringProfile struct.
func (sp *ScoringProfile) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		sp.Name = &name
	}

	v = m["text"]
	if v != nil {
		var textVar TextWeights
		err = json.Unmarshal(*m["text"], &textVar)
		if err != nil {
			return err
		}
		sp.Text = &textVar
	}

	v = m["functions"]
	if v != nil {
		functions, err := unmarshalScoringFunctionArray(*m["functions"])
		if err != nil {
			return err
		}
		sp.Functions = &functions
	}

	v = m["functionAggregation"]
	if v != nil {
		var functionAggregation ScoringFunctionAggregation
		err = json.Unmarshal(*m["functionAggregation"], &functionAggregation)
		if err != nil {
			return err
		}
		sp.FunctionAggregation = functionAggregation
	}

	return nil
}

// SoftDeleteColumnDeletionDetectionPolicy is defines a data deletion detection policy that implements a soft-deletion
// strategy. It determines whether an item should be deleted based on the value of a designated 'soft delete' column.
type SoftDeleteColumnDeletionDetectionPolicy struct {
	OdataType             OdataType1 `json:"@odata.type,omitempty"`
	SoftDeleteColumnName  *string    `json:"softDeleteColumnName,omitempty"`
	SoftDeleteMarkerValue *string    `json:"softDeleteMarkerValue,omitempty"`
}

// MarshalJSON is the custom marshaler for SoftDeleteColumnDeletionDetectionPolicy.
func (sdcddp SoftDeleteColumnDeletionDetectionPolicy) MarshalJSON() ([]byte, error) {
	sdcddp.OdataType = OdataTypeMicrosoftAzureSearchSoftDeleteColumnDeletionDetectionPolicy
	type Alias SoftDeleteColumnDeletionDetectionPolicy
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(sdcddp),
	})
}

// AsSoftDeleteColumnDeletionDetectionPolicy is the DataDeletionDetectionPolicy implementation for SoftDeleteColumnDeletionDetectionPolicy.
func (sdcddp SoftDeleteColumnDeletionDetectionPolicy) AsSoftDeleteColumnDeletionDetectionPolicy() (*SoftDeleteColumnDeletionDetectionPolicy, bool) {
	return &sdcddp, true
}

// SQLIntegratedChangeTrackingPolicy is defines a data change detection policy that captures changes using the
// Integrated Change Tracking feature of Azure SQL Database.
type SQLIntegratedChangeTrackingPolicy struct {
	OdataType OdataType `json:"@odata.type,omitempty"`
}

// MarshalJSON is the custom marshaler for SQLIntegratedChangeTrackingPolicy.
func (sictp SQLIntegratedChangeTrackingPolicy) MarshalJSON() ([]byte, error) {
	sictp.OdataType = OdataTypeMicrosoftAzureSearchSQLIntegratedChangeTrackingPolicy
	type Alias SQLIntegratedChangeTrackingPolicy
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(sictp),
	})
}

// AsHighWaterMarkChangeDetectionPolicy is the DataChangeDetectionPolicy implementation for SQLIntegratedChangeTrackingPolicy.
func (sictp SQLIntegratedChangeTrackingPolicy) AsHighWaterMarkChangeDetectionPolicy() (*HighWaterMarkChangeDetectionPolicy, bool) {
	return nil, false
}

// AsSQLIntegratedChangeTrackingPolicy is the DataChangeDetectionPolicy implementation for SQLIntegratedChangeTrackingPolicy.
func (sictp SQLIntegratedChangeTrackingPolicy) AsSQLIntegratedChangeTrackingPolicy() (*SQLIntegratedChangeTrackingPolicy, bool) {
	return &sictp, true
}

// Suggester is defines how the Suggest API should apply to a group of fields in the index.
type Suggester struct {
	Name         *string   `json:"name,omitempty"`
	SearchMode   *string   `json:"searchMode,omitempty"`
	SourceFields *[]string `json:"sourceFields,omitempty"`
}

// SuggestParameters is parameters for filtering, sorting, fuzzy matching, and other suggestions query behaviors.
type SuggestParameters struct {
	Filter           *string   `json:"filter,omitempty"`
	HighlightPostTag *string   `json:"highlightPostTag,omitempty"`
	HighlightPreTag  *string   `json:"highlightPreTag,omitempty"`
	MinimumCoverage  *float64  `json:"minimumCoverage,omitempty"`
	OrderBy          *[]string `json:"orderBy,omitempty"`
	SearchFields     *[]string `json:"searchFields,omitempty"`
	Select           *[]string `json:"select,omitempty"`
	Top              *int32    `json:"top,omitempty"`
	UseFuzzyMatching *bool     `json:"useFuzzyMatching,omitempty"`
}

// TagScoringFunction is defines a function that boosts scores of documents with string values matching a given list of
// tags.
type TagScoringFunction struct {
	FieldName     *string                      `json:"fieldName,omitempty"`
	Boost         *float64                     `json:"boost,omitempty"`
	Interpolation ScoringFunctionInterpolation `json:"interpolation,omitempty"`
	Type          Type                         `json:"type,omitempty"`
	Tag           *TagScoringParameters        `json:"tag,omitempty"`
}

// MarshalJSON is the custom marshaler for TagScoringFunction.
func (tsf TagScoringFunction) MarshalJSON() ([]byte, error) {
	tsf.Type = TypeTag
	type Alias TagScoringFunction
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(tsf),
	})
}

// AsDistanceScoringFunction is the ScoringFunction implementation for TagScoringFunction.
func (tsf TagScoringFunction) AsDistanceScoringFunction() (*DistanceScoringFunction, bool) {
	return nil, false
}

// AsFreshnessScoringFunction is the ScoringFunction implementation for TagScoringFunction.
func (tsf TagScoringFunction) AsFreshnessScoringFunction() (*FreshnessScoringFunction, bool) {
	return nil, false
}

// AsMagnitudeScoringFunction is the ScoringFunction implementation for TagScoringFunction.
func (tsf TagScoringFunction) AsMagnitudeScoringFunction() (*MagnitudeScoringFunction, bool) {
	return nil, false
}

// AsTagScoringFunction is the ScoringFunction implementation for TagScoringFunction.
func (tsf TagScoringFunction) AsTagScoringFunction() (*TagScoringFunction, bool) {
	return &tsf, true
}

// TagScoringParameters is provides parameter values to a tag scoring function.
type TagScoringParameters struct {
	TagsParameter *string `json:"tagsParameter,omitempty"`
}

// TextWeights is defines weights on index fields for which matches should boost scoring in search queries.
type TextWeights struct {
	Weights *map[string]*float64 `json:"weights,omitempty"`
}
