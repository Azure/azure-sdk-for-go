package servicefabric

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"errors"
	"github.com/Azure/go-autorest/autorest"
)

// AggregatedHealthState enumerates the values for aggregated health state.
type AggregatedHealthState string

const (
	// Error specifies the error state for aggregated health state.
	Error AggregatedHealthState = "Error"
	// Invalid specifies the invalid state for aggregated health state.
	Invalid AggregatedHealthState = "Invalid"
	// Ok specifies the ok state for aggregated health state.
	Ok AggregatedHealthState = "Ok"
	// Unknown specifies the unknown state for aggregated health state.
	Unknown AggregatedHealthState = "Unknown"
	// Warning specifies the warning state for aggregated health state.
	Warning AggregatedHealthState = "Warning"
)

// AggregatedHealthState1 enumerates the values for aggregated health state 1.
type AggregatedHealthState1 string

const (
	// AggregatedHealthState1Error specifies the aggregated health state 1 error state for aggregated health state 1.
	AggregatedHealthState1Error AggregatedHealthState1 = "Error"
	// AggregatedHealthState1Invalid specifies the aggregated health state 1 invalid state for aggregated health state 1.
	AggregatedHealthState1Invalid AggregatedHealthState1 = "Invalid"
	// AggregatedHealthState1Ok specifies the aggregated health state 1 ok state for aggregated health state 1.
	AggregatedHealthState1Ok AggregatedHealthState1 = "Ok"
	// AggregatedHealthState1Unknown specifies the aggregated health state 1 unknown state for aggregated health state 1.
	AggregatedHealthState1Unknown AggregatedHealthState1 = "Unknown"
	// AggregatedHealthState1Warning specifies the aggregated health state 1 warning state for aggregated health state 1.
	AggregatedHealthState1Warning AggregatedHealthState1 = "Warning"
)

// AggregatedHealthState10 enumerates the values for aggregated health state 10.
type AggregatedHealthState10 string

const (
	// AggregatedHealthState10Error specifies the aggregated health state 10 error state for aggregated health state 10.
	AggregatedHealthState10Error AggregatedHealthState10 = "Error"
	// AggregatedHealthState10Invalid specifies the aggregated health state 10 invalid state for aggregated health state
	// 10.
	AggregatedHealthState10Invalid AggregatedHealthState10 = "Invalid"
	// AggregatedHealthState10Ok specifies the aggregated health state 10 ok state for aggregated health state 10.
	AggregatedHealthState10Ok AggregatedHealthState10 = "Ok"
	// AggregatedHealthState10Unknown specifies the aggregated health state 10 unknown state for aggregated health state
	// 10.
	AggregatedHealthState10Unknown AggregatedHealthState10 = "Unknown"
	// AggregatedHealthState10Warning specifies the aggregated health state 10 warning state for aggregated health state
	// 10.
	AggregatedHealthState10Warning AggregatedHealthState10 = "Warning"
)

// AggregatedHealthState11 enumerates the values for aggregated health state 11.
type AggregatedHealthState11 string

const (
	// AggregatedHealthState11Error specifies the aggregated health state 11 error state for aggregated health state 11.
	AggregatedHealthState11Error AggregatedHealthState11 = "Error"
	// AggregatedHealthState11Invalid specifies the aggregated health state 11 invalid state for aggregated health state
	// 11.
	AggregatedHealthState11Invalid AggregatedHealthState11 = "Invalid"
	// AggregatedHealthState11Ok specifies the aggregated health state 11 ok state for aggregated health state 11.
	AggregatedHealthState11Ok AggregatedHealthState11 = "Ok"
	// AggregatedHealthState11Unknown specifies the aggregated health state 11 unknown state for aggregated health state
	// 11.
	AggregatedHealthState11Unknown AggregatedHealthState11 = "Unknown"
	// AggregatedHealthState11Warning specifies the aggregated health state 11 warning state for aggregated health state
	// 11.
	AggregatedHealthState11Warning AggregatedHealthState11 = "Warning"
)

// AggregatedHealthState12 enumerates the values for aggregated health state 12.
type AggregatedHealthState12 string

const (
	// AggregatedHealthState12Error specifies the aggregated health state 12 error state for aggregated health state 12.
	AggregatedHealthState12Error AggregatedHealthState12 = "Error"
	// AggregatedHealthState12Invalid specifies the aggregated health state 12 invalid state for aggregated health state
	// 12.
	AggregatedHealthState12Invalid AggregatedHealthState12 = "Invalid"
	// AggregatedHealthState12Ok specifies the aggregated health state 12 ok state for aggregated health state 12.
	AggregatedHealthState12Ok AggregatedHealthState12 = "Ok"
	// AggregatedHealthState12Unknown specifies the aggregated health state 12 unknown state for aggregated health state
	// 12.
	AggregatedHealthState12Unknown AggregatedHealthState12 = "Unknown"
	// AggregatedHealthState12Warning specifies the aggregated health state 12 warning state for aggregated health state
	// 12.
	AggregatedHealthState12Warning AggregatedHealthState12 = "Warning"
)

// AggregatedHealthState13 enumerates the values for aggregated health state 13.
type AggregatedHealthState13 string

const (
	// AggregatedHealthState13Error specifies the aggregated health state 13 error state for aggregated health state 13.
	AggregatedHealthState13Error AggregatedHealthState13 = "Error"
	// AggregatedHealthState13Invalid specifies the aggregated health state 13 invalid state for aggregated health state
	// 13.
	AggregatedHealthState13Invalid AggregatedHealthState13 = "Invalid"
	// AggregatedHealthState13Ok specifies the aggregated health state 13 ok state for aggregated health state 13.
	AggregatedHealthState13Ok AggregatedHealthState13 = "Ok"
	// AggregatedHealthState13Unknown specifies the aggregated health state 13 unknown state for aggregated health state
	// 13.
	AggregatedHealthState13Unknown AggregatedHealthState13 = "Unknown"
	// AggregatedHealthState13Warning specifies the aggregated health state 13 warning state for aggregated health state
	// 13.
	AggregatedHealthState13Warning AggregatedHealthState13 = "Warning"
)

// AggregatedHealthState14 enumerates the values for aggregated health state 14.
type AggregatedHealthState14 string

const (
	// AggregatedHealthState14Error specifies the aggregated health state 14 error state for aggregated health state 14.
	AggregatedHealthState14Error AggregatedHealthState14 = "Error"
	// AggregatedHealthState14Invalid specifies the aggregated health state 14 invalid state for aggregated health state
	// 14.
	AggregatedHealthState14Invalid AggregatedHealthState14 = "Invalid"
	// AggregatedHealthState14Ok specifies the aggregated health state 14 ok state for aggregated health state 14.
	AggregatedHealthState14Ok AggregatedHealthState14 = "Ok"
	// AggregatedHealthState14Unknown specifies the aggregated health state 14 unknown state for aggregated health state
	// 14.
	AggregatedHealthState14Unknown AggregatedHealthState14 = "Unknown"
	// AggregatedHealthState14Warning specifies the aggregated health state 14 warning state for aggregated health state
	// 14.
	AggregatedHealthState14Warning AggregatedHealthState14 = "Warning"
)

// AggregatedHealthState15 enumerates the values for aggregated health state 15.
type AggregatedHealthState15 string

const (
	// AggregatedHealthState15Error specifies the aggregated health state 15 error state for aggregated health state 15.
	AggregatedHealthState15Error AggregatedHealthState15 = "Error"
	// AggregatedHealthState15Invalid specifies the aggregated health state 15 invalid state for aggregated health state
	// 15.
	AggregatedHealthState15Invalid AggregatedHealthState15 = "Invalid"
	// AggregatedHealthState15Ok specifies the aggregated health state 15 ok state for aggregated health state 15.
	AggregatedHealthState15Ok AggregatedHealthState15 = "Ok"
	// AggregatedHealthState15Unknown specifies the aggregated health state 15 unknown state for aggregated health state
	// 15.
	AggregatedHealthState15Unknown AggregatedHealthState15 = "Unknown"
	// AggregatedHealthState15Warning specifies the aggregated health state 15 warning state for aggregated health state
	// 15.
	AggregatedHealthState15Warning AggregatedHealthState15 = "Warning"
)

// AggregatedHealthState2 enumerates the values for aggregated health state 2.
type AggregatedHealthState2 string

const (
	// AggregatedHealthState2Error specifies the aggregated health state 2 error state for aggregated health state 2.
	AggregatedHealthState2Error AggregatedHealthState2 = "Error"
	// AggregatedHealthState2Invalid specifies the aggregated health state 2 invalid state for aggregated health state 2.
	AggregatedHealthState2Invalid AggregatedHealthState2 = "Invalid"
	// AggregatedHealthState2Ok specifies the aggregated health state 2 ok state for aggregated health state 2.
	AggregatedHealthState2Ok AggregatedHealthState2 = "Ok"
	// AggregatedHealthState2Unknown specifies the aggregated health state 2 unknown state for aggregated health state 2.
	AggregatedHealthState2Unknown AggregatedHealthState2 = "Unknown"
	// AggregatedHealthState2Warning specifies the aggregated health state 2 warning state for aggregated health state 2.
	AggregatedHealthState2Warning AggregatedHealthState2 = "Warning"
)

// AggregatedHealthState3 enumerates the values for aggregated health state 3.
type AggregatedHealthState3 string

const (
	// AggregatedHealthState3Error specifies the aggregated health state 3 error state for aggregated health state 3.
	AggregatedHealthState3Error AggregatedHealthState3 = "Error"
	// AggregatedHealthState3Invalid specifies the aggregated health state 3 invalid state for aggregated health state 3.
	AggregatedHealthState3Invalid AggregatedHealthState3 = "Invalid"
	// AggregatedHealthState3Ok specifies the aggregated health state 3 ok state for aggregated health state 3.
	AggregatedHealthState3Ok AggregatedHealthState3 = "Ok"
	// AggregatedHealthState3Unknown specifies the aggregated health state 3 unknown state for aggregated health state 3.
	AggregatedHealthState3Unknown AggregatedHealthState3 = "Unknown"
	// AggregatedHealthState3Warning specifies the aggregated health state 3 warning state for aggregated health state 3.
	AggregatedHealthState3Warning AggregatedHealthState3 = "Warning"
)

// AggregatedHealthState4 enumerates the values for aggregated health state 4.
type AggregatedHealthState4 string

const (
	// AggregatedHealthState4Error specifies the aggregated health state 4 error state for aggregated health state 4.
	AggregatedHealthState4Error AggregatedHealthState4 = "Error"
	// AggregatedHealthState4Invalid specifies the aggregated health state 4 invalid state for aggregated health state 4.
	AggregatedHealthState4Invalid AggregatedHealthState4 = "Invalid"
	// AggregatedHealthState4Ok specifies the aggregated health state 4 ok state for aggregated health state 4.
	AggregatedHealthState4Ok AggregatedHealthState4 = "Ok"
	// AggregatedHealthState4Unknown specifies the aggregated health state 4 unknown state for aggregated health state 4.
	AggregatedHealthState4Unknown AggregatedHealthState4 = "Unknown"
	// AggregatedHealthState4Warning specifies the aggregated health state 4 warning state for aggregated health state 4.
	AggregatedHealthState4Warning AggregatedHealthState4 = "Warning"
)

// AggregatedHealthState5 enumerates the values for aggregated health state 5.
type AggregatedHealthState5 string

const (
	// AggregatedHealthState5Error specifies the aggregated health state 5 error state for aggregated health state 5.
	AggregatedHealthState5Error AggregatedHealthState5 = "Error"
	// AggregatedHealthState5Invalid specifies the aggregated health state 5 invalid state for aggregated health state 5.
	AggregatedHealthState5Invalid AggregatedHealthState5 = "Invalid"
	// AggregatedHealthState5Ok specifies the aggregated health state 5 ok state for aggregated health state 5.
	AggregatedHealthState5Ok AggregatedHealthState5 = "Ok"
	// AggregatedHealthState5Unknown specifies the aggregated health state 5 unknown state for aggregated health state 5.
	AggregatedHealthState5Unknown AggregatedHealthState5 = "Unknown"
	// AggregatedHealthState5Warning specifies the aggregated health state 5 warning state for aggregated health state 5.
	AggregatedHealthState5Warning AggregatedHealthState5 = "Warning"
)

// AggregatedHealthState6 enumerates the values for aggregated health state 6.
type AggregatedHealthState6 string

const (
	// AggregatedHealthState6Error specifies the aggregated health state 6 error state for aggregated health state 6.
	AggregatedHealthState6Error AggregatedHealthState6 = "Error"
	// AggregatedHealthState6Invalid specifies the aggregated health state 6 invalid state for aggregated health state 6.
	AggregatedHealthState6Invalid AggregatedHealthState6 = "Invalid"
	// AggregatedHealthState6Ok specifies the aggregated health state 6 ok state for aggregated health state 6.
	AggregatedHealthState6Ok AggregatedHealthState6 = "Ok"
	// AggregatedHealthState6Unknown specifies the aggregated health state 6 unknown state for aggregated health state 6.
	AggregatedHealthState6Unknown AggregatedHealthState6 = "Unknown"
	// AggregatedHealthState6Warning specifies the aggregated health state 6 warning state for aggregated health state 6.
	AggregatedHealthState6Warning AggregatedHealthState6 = "Warning"
)

// AggregatedHealthState7 enumerates the values for aggregated health state 7.
type AggregatedHealthState7 string

const (
	// AggregatedHealthState7Error specifies the aggregated health state 7 error state for aggregated health state 7.
	AggregatedHealthState7Error AggregatedHealthState7 = "Error"
	// AggregatedHealthState7Invalid specifies the aggregated health state 7 invalid state for aggregated health state 7.
	AggregatedHealthState7Invalid AggregatedHealthState7 = "Invalid"
	// AggregatedHealthState7Ok specifies the aggregated health state 7 ok state for aggregated health state 7.
	AggregatedHealthState7Ok AggregatedHealthState7 = "Ok"
	// AggregatedHealthState7Unknown specifies the aggregated health state 7 unknown state for aggregated health state 7.
	AggregatedHealthState7Unknown AggregatedHealthState7 = "Unknown"
	// AggregatedHealthState7Warning specifies the aggregated health state 7 warning state for aggregated health state 7.
	AggregatedHealthState7Warning AggregatedHealthState7 = "Warning"
)

// AggregatedHealthState8 enumerates the values for aggregated health state 8.
type AggregatedHealthState8 string

const (
	// AggregatedHealthState8Error specifies the aggregated health state 8 error state for aggregated health state 8.
	AggregatedHealthState8Error AggregatedHealthState8 = "Error"
	// AggregatedHealthState8Invalid specifies the aggregated health state 8 invalid state for aggregated health state 8.
	AggregatedHealthState8Invalid AggregatedHealthState8 = "Invalid"
	// AggregatedHealthState8Ok specifies the aggregated health state 8 ok state for aggregated health state 8.
	AggregatedHealthState8Ok AggregatedHealthState8 = "Ok"
	// AggregatedHealthState8Unknown specifies the aggregated health state 8 unknown state for aggregated health state 8.
	AggregatedHealthState8Unknown AggregatedHealthState8 = "Unknown"
	// AggregatedHealthState8Warning specifies the aggregated health state 8 warning state for aggregated health state 8.
	AggregatedHealthState8Warning AggregatedHealthState8 = "Warning"
)

// AggregatedHealthState9 enumerates the values for aggregated health state 9.
type AggregatedHealthState9 string

const (
	// AggregatedHealthState9Error specifies the aggregated health state 9 error state for aggregated health state 9.
	AggregatedHealthState9Error AggregatedHealthState9 = "Error"
	// AggregatedHealthState9Invalid specifies the aggregated health state 9 invalid state for aggregated health state 9.
	AggregatedHealthState9Invalid AggregatedHealthState9 = "Invalid"
	// AggregatedHealthState9Ok specifies the aggregated health state 9 ok state for aggregated health state 9.
	AggregatedHealthState9Ok AggregatedHealthState9 = "Ok"
	// AggregatedHealthState9Unknown specifies the aggregated health state 9 unknown state for aggregated health state 9.
	AggregatedHealthState9Unknown AggregatedHealthState9 = "Unknown"
	// AggregatedHealthState9Warning specifies the aggregated health state 9 warning state for aggregated health state 9.
	AggregatedHealthState9Warning AggregatedHealthState9 = "Warning"
)

// DeactivationIntent enumerates the values for deactivation intent.
type DeactivationIntent string

const (
	// Pause specifies the pause state for deactivation intent.
	Pause DeactivationIntent = "Pause"
	// RemoveData specifies the remove data state for deactivation intent.
	RemoveData DeactivationIntent = "RemoveData"
	// RemoveNode specifies the remove node state for deactivation intent.
	RemoveNode DeactivationIntent = "RemoveNode"
	// Restart specifies the restart state for deactivation intent.
	Restart DeactivationIntent = "Restart"
)

// DefaultMoveCost enumerates the values for default move cost.
type DefaultMoveCost string

const (
	// High specifies the high state for default move cost.
	High DefaultMoveCost = "High"
	// Low specifies the low state for default move cost.
	Low DefaultMoveCost = "Low"
	// Medium specifies the medium state for default move cost.
	Medium DefaultMoveCost = "Medium"
	// Zero specifies the zero state for default move cost.
	Zero DefaultMoveCost = "Zero"
)

// DefaultMoveCost1 enumerates the values for default move cost 1.
type DefaultMoveCost1 string

const (
	// DefaultMoveCost1High specifies the default move cost 1 high state for default move cost 1.
	DefaultMoveCost1High DefaultMoveCost1 = "High"
	// DefaultMoveCost1Low specifies the default move cost 1 low state for default move cost 1.
	DefaultMoveCost1Low DefaultMoveCost1 = "Low"
	// DefaultMoveCost1Medium specifies the default move cost 1 medium state for default move cost 1.
	DefaultMoveCost1Medium DefaultMoveCost1 = "Medium"
	// DefaultMoveCost1Zero specifies the default move cost 1 zero state for default move cost 1.
	DefaultMoveCost1Zero DefaultMoveCost1 = "Zero"
)

// DefaultMoveCost2 enumerates the values for default move cost 2.
type DefaultMoveCost2 string

const (
	// DefaultMoveCost2High specifies the default move cost 2 high state for default move cost 2.
	DefaultMoveCost2High DefaultMoveCost2 = "High"
	// DefaultMoveCost2Low specifies the default move cost 2 low state for default move cost 2.
	DefaultMoveCost2Low DefaultMoveCost2 = "Low"
	// DefaultMoveCost2Medium specifies the default move cost 2 medium state for default move cost 2.
	DefaultMoveCost2Medium DefaultMoveCost2 = "Medium"
	// DefaultMoveCost2Zero specifies the default move cost 2 zero state for default move cost 2.
	DefaultMoveCost2Zero DefaultMoveCost2 = "Zero"
)

// DefaultMoveCost3 enumerates the values for default move cost 3.
type DefaultMoveCost3 string

const (
	// DefaultMoveCost3High specifies the default move cost 3 high state for default move cost 3.
	DefaultMoveCost3High DefaultMoveCost3 = "High"
	// DefaultMoveCost3Low specifies the default move cost 3 low state for default move cost 3.
	DefaultMoveCost3Low DefaultMoveCost3 = "Low"
	// DefaultMoveCost3Medium specifies the default move cost 3 medium state for default move cost 3.
	DefaultMoveCost3Medium DefaultMoveCost3 = "Medium"
	// DefaultMoveCost3Zero specifies the default move cost 3 zero state for default move cost 3.
	DefaultMoveCost3Zero DefaultMoveCost3 = "Zero"
)

// FailureReason enumerates the values for failure reason.
type FailureReason string

const (
	// FailureReasonHealthCheck specifies the failure reason health check state for failure reason.
	FailureReasonHealthCheck FailureReason = "HealthCheck"
	// FailureReasonInterrupted specifies the failure reason interrupted state for failure reason.
	FailureReasonInterrupted FailureReason = "Interrupted"
	// FailureReasonInvalid specifies the failure reason invalid state for failure reason.
	FailureReasonInvalid FailureReason = "Invalid"
	// FailureReasonOverallUpgradeTimeout specifies the failure reason overall upgrade timeout state for failure reason.
	FailureReasonOverallUpgradeTimeout FailureReason = "OverallUpgradeTimeout"
	// FailureReasonUpgradeDomainTimeout specifies the failure reason upgrade domain timeout state for failure reason.
	FailureReasonUpgradeDomainTimeout FailureReason = "UpgradeDomainTimeout"
)

// FailureReason1 enumerates the values for failure reason 1.
type FailureReason1 string

const (
	// FailureReason1HealthCheck specifies the failure reason 1 health check state for failure reason 1.
	FailureReason1HealthCheck FailureReason1 = "HealthCheck"
	// FailureReason1Interrupted specifies the failure reason 1 interrupted state for failure reason 1.
	FailureReason1Interrupted FailureReason1 = "Interrupted"
	// FailureReason1Invalid specifies the failure reason 1 invalid state for failure reason 1.
	FailureReason1Invalid FailureReason1 = "Invalid"
	// FailureReason1OverallUpgradeTimeout specifies the failure reason 1 overall upgrade timeout state for failure reason
	// 1.
	FailureReason1OverallUpgradeTimeout FailureReason1 = "OverallUpgradeTimeout"
	// FailureReason1UpgradeDomainTimeout specifies the failure reason 1 upgrade domain timeout state for failure reason 1.
	FailureReason1UpgradeDomainTimeout FailureReason1 = "UpgradeDomainTimeout"
)

// HealthState enumerates the values for health state.
type HealthState string

const (
	// HealthStateError specifies the health state error state for health state.
	HealthStateError HealthState = "Error"
	// HealthStateInvalid specifies the health state invalid state for health state.
	HealthStateInvalid HealthState = "Invalid"
	// HealthStateOk specifies the health state ok state for health state.
	HealthStateOk HealthState = "Ok"
	// HealthStateUnknown specifies the health state unknown state for health state.
	HealthStateUnknown HealthState = "Unknown"
	// HealthStateWarning specifies the health state warning state for health state.
	HealthStateWarning HealthState = "Warning"
)

// HealthState1 enumerates the values for health state 1.
type HealthState1 string

const (
	// HealthState1Error specifies the health state 1 error state for health state 1.
	HealthState1Error HealthState1 = "Error"
	// HealthState1Invalid specifies the health state 1 invalid state for health state 1.
	HealthState1Invalid HealthState1 = "Invalid"
	// HealthState1Ok specifies the health state 1 ok state for health state 1.
	HealthState1Ok HealthState1 = "Ok"
	// HealthState1Unknown specifies the health state 1 unknown state for health state 1.
	HealthState1Unknown HealthState1 = "Unknown"
	// HealthState1Warning specifies the health state 1 warning state for health state 1.
	HealthState1Warning HealthState1 = "Warning"
)

// HealthState2 enumerates the values for health state 2.
type HealthState2 string

const (
	// HealthState2Error specifies the health state 2 error state for health state 2.
	HealthState2Error HealthState2 = "Error"
	// HealthState2Invalid specifies the health state 2 invalid state for health state 2.
	HealthState2Invalid HealthState2 = "Invalid"
	// HealthState2Ok specifies the health state 2 ok state for health state 2.
	HealthState2Ok HealthState2 = "Ok"
	// HealthState2Unknown specifies the health state 2 unknown state for health state 2.
	HealthState2Unknown HealthState2 = "Unknown"
	// HealthState2Warning specifies the health state 2 warning state for health state 2.
	HealthState2Warning HealthState2 = "Warning"
)

// HealthState3 enumerates the values for health state 3.
type HealthState3 string

const (
	// HealthState3Error specifies the health state 3 error state for health state 3.
	HealthState3Error HealthState3 = "Error"
	// HealthState3Invalid specifies the health state 3 invalid state for health state 3.
	HealthState3Invalid HealthState3 = "Invalid"
	// HealthState3Ok specifies the health state 3 ok state for health state 3.
	HealthState3Ok HealthState3 = "Ok"
	// HealthState3Unknown specifies the health state 3 unknown state for health state 3.
	HealthState3Unknown HealthState3 = "Unknown"
	// HealthState3Warning specifies the health state 3 warning state for health state 3.
	HealthState3Warning HealthState3 = "Warning"
)

// HealthState4 enumerates the values for health state 4.
type HealthState4 string

const (
	// HealthState4Error specifies the health state 4 error state for health state 4.
	HealthState4Error HealthState4 = "Error"
	// HealthState4Invalid specifies the health state 4 invalid state for health state 4.
	HealthState4Invalid HealthState4 = "Invalid"
	// HealthState4Ok specifies the health state 4 ok state for health state 4.
	HealthState4Ok HealthState4 = "Ok"
	// HealthState4Unknown specifies the health state 4 unknown state for health state 4.
	HealthState4Unknown HealthState4 = "Unknown"
	// HealthState4Warning specifies the health state 4 warning state for health state 4.
	HealthState4Warning HealthState4 = "Warning"
)

// HealthState5 enumerates the values for health state 5.
type HealthState5 string

const (
	// HealthState5Error specifies the health state 5 error state for health state 5.
	HealthState5Error HealthState5 = "Error"
	// HealthState5Invalid specifies the health state 5 invalid state for health state 5.
	HealthState5Invalid HealthState5 = "Invalid"
	// HealthState5Ok specifies the health state 5 ok state for health state 5.
	HealthState5Ok HealthState5 = "Ok"
	// HealthState5Unknown specifies the health state 5 unknown state for health state 5.
	HealthState5Unknown HealthState5 = "Unknown"
	// HealthState5Warning specifies the health state 5 warning state for health state 5.
	HealthState5Warning HealthState5 = "Warning"
)

// HealthState6 enumerates the values for health state 6.
type HealthState6 string

const (
	// HealthState6Error specifies the health state 6 error state for health state 6.
	HealthState6Error HealthState6 = "Error"
	// HealthState6Invalid specifies the health state 6 invalid state for health state 6.
	HealthState6Invalid HealthState6 = "Invalid"
	// HealthState6Ok specifies the health state 6 ok state for health state 6.
	HealthState6Ok HealthState6 = "Ok"
	// HealthState6Unknown specifies the health state 6 unknown state for health state 6.
	HealthState6Unknown HealthState6 = "Unknown"
	// HealthState6Warning specifies the health state 6 warning state for health state 6.
	HealthState6Warning HealthState6 = "Warning"
)

// Kind enumerates the values for kind.
type Kind string

const (
	// KindApplication specifies the kind application state for kind.
	KindApplication Kind = "Application"
	// KindApplications specifies the kind applications state for kind.
	KindApplications Kind = "Applications"
	// KindApplicationType specifies the kind application type state for kind.
	KindApplicationType Kind = "ApplicationType"
	// KindDeltaNodesCheck specifies the kind delta nodes check state for kind.
	KindDeltaNodesCheck Kind = "DeltaNodesCheck"
	// KindDeployedApplication specifies the kind deployed application state for kind.
	KindDeployedApplication Kind = "DeployedApplication"
	// KindDeployedApplications specifies the kind deployed applications state for kind.
	KindDeployedApplications Kind = "DeployedApplications"
	// KindDeployedServicePackage specifies the kind deployed service package state for kind.
	KindDeployedServicePackage Kind = "DeployedServicePackage"
	// KindDeployedServicePackages specifies the kind deployed service packages state for kind.
	KindDeployedServicePackages Kind = "DeployedServicePackages"
	// KindEvent specifies the kind event state for kind.
	KindEvent Kind = "Event"
	// KindNode specifies the kind node state for kind.
	KindNode Kind = "Node"
	// KindNodes specifies the kind nodes state for kind.
	KindNodes Kind = "Nodes"
	// KindPartition specifies the kind partition state for kind.
	KindPartition Kind = "Partition"
	// KindPartitions specifies the kind partitions state for kind.
	KindPartitions Kind = "Partitions"
	// KindReplica specifies the kind replica state for kind.
	KindReplica Kind = "Replica"
	// KindReplicas specifies the kind replicas state for kind.
	KindReplicas Kind = "Replicas"
	// KindService specifies the kind service state for kind.
	KindService Kind = "Service"
	// KindServices specifies the kind services state for kind.
	KindServices Kind = "Services"
	// KindSystemApplication specifies the kind system application state for kind.
	KindSystemApplication Kind = "SystemApplication"
	// KindUpgradeDomainDeltaNodesCheck specifies the kind upgrade domain delta nodes check state for kind.
	KindUpgradeDomainDeltaNodesCheck Kind = "UpgradeDomainDeltaNodesCheck"
	// KindUpgradeDomainDeployedApplications specifies the kind upgrade domain deployed applications state for kind.
	KindUpgradeDomainDeployedApplications Kind = "UpgradeDomainDeployedApplications"
	// KindUpgradeDomainNodes specifies the kind upgrade domain nodes state for kind.
	KindUpgradeDomainNodes Kind = "UpgradeDomainNodes"
)

// NodeDeactivationIntent enumerates the values for node deactivation intent.
type NodeDeactivationIntent string

const (
	// NodeDeactivationIntentInvalid specifies the node deactivation intent invalid state for node deactivation intent.
	NodeDeactivationIntentInvalid NodeDeactivationIntent = "Invalid"
	// NodeDeactivationIntentPause specifies the node deactivation intent pause state for node deactivation intent.
	NodeDeactivationIntentPause NodeDeactivationIntent = "Pause"
	// NodeDeactivationIntentRemoveData specifies the node deactivation intent remove data state for node deactivation
	// intent.
	NodeDeactivationIntentRemoveData NodeDeactivationIntent = "RemoveData"
	// NodeDeactivationIntentRestart specifies the node deactivation intent restart state for node deactivation intent.
	NodeDeactivationIntentRestart NodeDeactivationIntent = "Restart"
)

// NodeDeactivationStatus enumerates the values for node deactivation status.
type NodeDeactivationStatus string

const (
	// NodeDeactivationStatusCompleted specifies the node deactivation status completed state for node deactivation status.
	NodeDeactivationStatusCompleted NodeDeactivationStatus = "Completed"
	// NodeDeactivationStatusInvalid specifies the node deactivation status invalid state for node deactivation status.
	NodeDeactivationStatusInvalid NodeDeactivationStatus = "Invalid"
	// NodeDeactivationStatusSafetyCheckComplete specifies the node deactivation status safety check complete state for
	// node deactivation status.
	NodeDeactivationStatusSafetyCheckComplete NodeDeactivationStatus = "SafetyCheckComplete"
	// NodeDeactivationStatusSafetyCheckInProgress specifies the node deactivation status safety check in progress state
	// for node deactivation status.
	NodeDeactivationStatusSafetyCheckInProgress NodeDeactivationStatus = "SafetyCheckInProgress"
)

// NodeStatus enumerates the values for node status.
type NodeStatus string

const (
	// NodeStatusDisabled specifies the node status disabled state for node status.
	NodeStatusDisabled NodeStatus = "Disabled"
	// NodeStatusDisabling specifies the node status disabling state for node status.
	NodeStatusDisabling NodeStatus = "Disabling"
	// NodeStatusDown specifies the node status down state for node status.
	NodeStatusDown NodeStatus = "Down"
	// NodeStatusEnabling specifies the node status enabling state for node status.
	NodeStatusEnabling NodeStatus = "Enabling"
	// NodeStatusInvalid specifies the node status invalid state for node status.
	NodeStatusInvalid NodeStatus = "Invalid"
	// NodeStatusRemoved specifies the node status removed state for node status.
	NodeStatusRemoved NodeStatus = "Removed"
	// NodeStatusUnknown specifies the node status unknown state for node status.
	NodeStatusUnknown NodeStatus = "Unknown"
	// NodeStatusUp specifies the node status up state for node status.
	NodeStatusUp NodeStatus = "Up"
)

// PartitionScheme enumerates the values for partition scheme.
type PartitionScheme string

const (
	// PartitionSchemeInvalid specifies the partition scheme invalid state for partition scheme.
	PartitionSchemeInvalid PartitionScheme = "Invalid"
	// PartitionSchemeNamed specifies the partition scheme named state for partition scheme.
	PartitionSchemeNamed PartitionScheme = "Named"
	// PartitionSchemeSingleton specifies the partition scheme singleton state for partition scheme.
	PartitionSchemeSingleton PartitionScheme = "Singleton"
	// PartitionSchemeUniformInt64 specifies the partition scheme uniform int 64 state for partition scheme.
	PartitionSchemeUniformInt64 PartitionScheme = "UniformInt64"
)

// PartitionStatus enumerates the values for partition status.
type PartitionStatus string

const (
	// PartitionStatusDeleting specifies the partition status deleting state for partition status.
	PartitionStatusDeleting PartitionStatus = "Deleting"
	// PartitionStatusInQuorumLoss specifies the partition status in quorum loss state for partition status.
	PartitionStatusInQuorumLoss PartitionStatus = "InQuorumLoss"
	// PartitionStatusInvalid specifies the partition status invalid state for partition status.
	PartitionStatusInvalid PartitionStatus = "Invalid"
	// PartitionStatusNotReady specifies the partition status not ready state for partition status.
	PartitionStatusNotReady PartitionStatus = "NotReady"
	// PartitionStatusReady specifies the partition status ready state for partition status.
	PartitionStatusReady PartitionStatus = "Ready"
	// PartitionStatusReconfiguring specifies the partition status reconfiguring state for partition status.
	PartitionStatusReconfiguring PartitionStatus = "Reconfiguring"
)

// ReplicaRole enumerates the values for replica role.
type ReplicaRole string

const (
	// ReplicaRoleActiveSecondary specifies the replica role active secondary state for replica role.
	ReplicaRoleActiveSecondary ReplicaRole = "ActiveSecondary"
	// ReplicaRoleIdleSecondary specifies the replica role idle secondary state for replica role.
	ReplicaRoleIdleSecondary ReplicaRole = "IdleSecondary"
	// ReplicaRoleInvalid specifies the replica role invalid state for replica role.
	ReplicaRoleInvalid ReplicaRole = "Invalid"
	// ReplicaRoleNone specifies the replica role none state for replica role.
	ReplicaRoleNone ReplicaRole = "None"
	// ReplicaRolePrimary specifies the replica role primary state for replica role.
	ReplicaRolePrimary ReplicaRole = "Primary"
)

// ReplicaRole1 enumerates the values for replica role 1.
type ReplicaRole1 string

const (
	// ReplicaRole1ActiveSecondary specifies the replica role 1 active secondary state for replica role 1.
	ReplicaRole1ActiveSecondary ReplicaRole1 = "ActiveSecondary"
	// ReplicaRole1IdleSecondary specifies the replica role 1 idle secondary state for replica role 1.
	ReplicaRole1IdleSecondary ReplicaRole1 = "IdleSecondary"
	// ReplicaRole1Invalid specifies the replica role 1 invalid state for replica role 1.
	ReplicaRole1Invalid ReplicaRole1 = "Invalid"
	// ReplicaRole1None specifies the replica role 1 none state for replica role 1.
	ReplicaRole1None ReplicaRole1 = "None"
	// ReplicaRole1Primary specifies the replica role 1 primary state for replica role 1.
	ReplicaRole1Primary ReplicaRole1 = "Primary"
)

// ReplicaStatus enumerates the values for replica status.
type ReplicaStatus string

const (
	// ReplicaStatusDown specifies the replica status down state for replica status.
	ReplicaStatusDown ReplicaStatus = "Down"
	// ReplicaStatusDropped specifies the replica status dropped state for replica status.
	ReplicaStatusDropped ReplicaStatus = "Dropped"
	// ReplicaStatusInBuild specifies the replica status in build state for replica status.
	ReplicaStatusInBuild ReplicaStatus = "InBuild"
	// ReplicaStatusInvalid specifies the replica status invalid state for replica status.
	ReplicaStatusInvalid ReplicaStatus = "Invalid"
	// ReplicaStatusReady specifies the replica status ready state for replica status.
	ReplicaStatusReady ReplicaStatus = "Ready"
	// ReplicaStatusStandby specifies the replica status standby state for replica status.
	ReplicaStatusStandby ReplicaStatus = "Standby"
)

// ReplicaStatus1 enumerates the values for replica status 1.
type ReplicaStatus1 string

const (
	// ReplicaStatus1Down specifies the replica status 1 down state for replica status 1.
	ReplicaStatus1Down ReplicaStatus1 = "Down"
	// ReplicaStatus1Dropped specifies the replica status 1 dropped state for replica status 1.
	ReplicaStatus1Dropped ReplicaStatus1 = "Dropped"
	// ReplicaStatus1InBuild specifies the replica status 1 in build state for replica status 1.
	ReplicaStatus1InBuild ReplicaStatus1 = "InBuild"
	// ReplicaStatus1Invalid specifies the replica status 1 invalid state for replica status 1.
	ReplicaStatus1Invalid ReplicaStatus1 = "Invalid"
	// ReplicaStatus1Ready specifies the replica status 1 ready state for replica status 1.
	ReplicaStatus1Ready ReplicaStatus1 = "Ready"
	// ReplicaStatus1Standby specifies the replica status 1 standby state for replica status 1.
	ReplicaStatus1Standby ReplicaStatus1 = "Standby"
)

// RollingUpgradeMode enumerates the values for rolling upgrade mode.
type RollingUpgradeMode string

const (
	// RollingUpgradeModeInvalid specifies the rolling upgrade mode invalid state for rolling upgrade mode.
	RollingUpgradeModeInvalid RollingUpgradeMode = "Invalid"
	// RollingUpgradeModeMonitored specifies the rolling upgrade mode monitored state for rolling upgrade mode.
	RollingUpgradeModeMonitored RollingUpgradeMode = "Monitored"
	// RollingUpgradeModeUnmonitoredAuto specifies the rolling upgrade mode unmonitored auto state for rolling upgrade
	// mode.
	RollingUpgradeModeUnmonitoredAuto RollingUpgradeMode = "UnmonitoredAuto"
	// RollingUpgradeModeUnmonitoredManual specifies the rolling upgrade mode unmonitored manual state for rolling upgrade
	// mode.
	RollingUpgradeModeUnmonitoredManual RollingUpgradeMode = "UnmonitoredManual"
)

// RollingUpgradeMode1 enumerates the values for rolling upgrade mode 1.
type RollingUpgradeMode1 string

const (
	// RollingUpgradeMode1Invalid specifies the rolling upgrade mode 1 invalid state for rolling upgrade mode 1.
	RollingUpgradeMode1Invalid RollingUpgradeMode1 = "Invalid"
	// RollingUpgradeMode1Monitored specifies the rolling upgrade mode 1 monitored state for rolling upgrade mode 1.
	RollingUpgradeMode1Monitored RollingUpgradeMode1 = "Monitored"
	// RollingUpgradeMode1UnmonitoredAuto specifies the rolling upgrade mode 1 unmonitored auto state for rolling upgrade
	// mode 1.
	RollingUpgradeMode1UnmonitoredAuto RollingUpgradeMode1 = "UnmonitoredAuto"
	// RollingUpgradeMode1UnmonitoredManual specifies the rolling upgrade mode 1 unmonitored manual state for rolling
	// upgrade mode 1.
	RollingUpgradeMode1UnmonitoredManual RollingUpgradeMode1 = "UnmonitoredManual"
)

// RollingUpgradeMode2 enumerates the values for rolling upgrade mode 2.
type RollingUpgradeMode2 string

const (
	// RollingUpgradeMode2Invalid specifies the rolling upgrade mode 2 invalid state for rolling upgrade mode 2.
	RollingUpgradeMode2Invalid RollingUpgradeMode2 = "Invalid"
	// RollingUpgradeMode2Monitored specifies the rolling upgrade mode 2 monitored state for rolling upgrade mode 2.
	RollingUpgradeMode2Monitored RollingUpgradeMode2 = "Monitored"
	// RollingUpgradeMode2UnmonitoredAuto specifies the rolling upgrade mode 2 unmonitored auto state for rolling upgrade
	// mode 2.
	RollingUpgradeMode2UnmonitoredAuto RollingUpgradeMode2 = "UnmonitoredAuto"
	// RollingUpgradeMode2UnmonitoredManual specifies the rolling upgrade mode 2 unmonitored manual state for rolling
	// upgrade mode 2.
	RollingUpgradeMode2UnmonitoredManual RollingUpgradeMode2 = "UnmonitoredManual"
)

// RollingUpgradeMode3 enumerates the values for rolling upgrade mode 3.
type RollingUpgradeMode3 string

const (
	// RollingUpgradeMode3Invalid specifies the rolling upgrade mode 3 invalid state for rolling upgrade mode 3.
	RollingUpgradeMode3Invalid RollingUpgradeMode3 = "Invalid"
	// RollingUpgradeMode3Monitored specifies the rolling upgrade mode 3 monitored state for rolling upgrade mode 3.
	RollingUpgradeMode3Monitored RollingUpgradeMode3 = "Monitored"
	// RollingUpgradeMode3UnmonitoredAuto specifies the rolling upgrade mode 3 unmonitored auto state for rolling upgrade
	// mode 3.
	RollingUpgradeMode3UnmonitoredAuto RollingUpgradeMode3 = "UnmonitoredAuto"
	// RollingUpgradeMode3UnmonitoredManual specifies the rolling upgrade mode 3 unmonitored manual state for rolling
	// upgrade mode 3.
	RollingUpgradeMode3UnmonitoredManual RollingUpgradeMode3 = "UnmonitoredManual"
)

// RollingUpgradeMode4 enumerates the values for rolling upgrade mode 4.
type RollingUpgradeMode4 string

const (
	// RollingUpgradeMode4Invalid specifies the rolling upgrade mode 4 invalid state for rolling upgrade mode 4.
	RollingUpgradeMode4Invalid RollingUpgradeMode4 = "Invalid"
	// RollingUpgradeMode4Monitored specifies the rolling upgrade mode 4 monitored state for rolling upgrade mode 4.
	RollingUpgradeMode4Monitored RollingUpgradeMode4 = "Monitored"
	// RollingUpgradeMode4UnmonitoredAuto specifies the rolling upgrade mode 4 unmonitored auto state for rolling upgrade
	// mode 4.
	RollingUpgradeMode4UnmonitoredAuto RollingUpgradeMode4 = "UnmonitoredAuto"
	// RollingUpgradeMode4UnmonitoredManual specifies the rolling upgrade mode 4 unmonitored manual state for rolling
	// upgrade mode 4.
	RollingUpgradeMode4UnmonitoredManual RollingUpgradeMode4 = "UnmonitoredManual"
)

// RollingUpgradeMode5 enumerates the values for rolling upgrade mode 5.
type RollingUpgradeMode5 string

const (
	// RollingUpgradeMode5Invalid specifies the rolling upgrade mode 5 invalid state for rolling upgrade mode 5.
	RollingUpgradeMode5Invalid RollingUpgradeMode5 = "Invalid"
	// RollingUpgradeMode5Monitored specifies the rolling upgrade mode 5 monitored state for rolling upgrade mode 5.
	RollingUpgradeMode5Monitored RollingUpgradeMode5 = "Monitored"
	// RollingUpgradeMode5UnmonitoredAuto specifies the rolling upgrade mode 5 unmonitored auto state for rolling upgrade
	// mode 5.
	RollingUpgradeMode5UnmonitoredAuto RollingUpgradeMode5 = "UnmonitoredAuto"
	// RollingUpgradeMode5UnmonitoredManual specifies the rolling upgrade mode 5 unmonitored manual state for rolling
	// upgrade mode 5.
	RollingUpgradeMode5UnmonitoredManual RollingUpgradeMode5 = "UnmonitoredManual"
)

// ServiceCorrelationScheme enumerates the values for service correlation scheme.
type ServiceCorrelationScheme string

const (
	// ServiceCorrelationSchemeAffinity specifies the service correlation scheme affinity state for service correlation
	// scheme.
	ServiceCorrelationSchemeAffinity ServiceCorrelationScheme = "Affinity"
	// ServiceCorrelationSchemeAlignedAffinity specifies the service correlation scheme aligned affinity state for service
	// correlation scheme.
	ServiceCorrelationSchemeAlignedAffinity ServiceCorrelationScheme = "AlignedAffinity"
	// ServiceCorrelationSchemeInvalid specifies the service correlation scheme invalid state for service correlation
	// scheme.
	ServiceCorrelationSchemeInvalid ServiceCorrelationScheme = "Invalid"
	// ServiceCorrelationSchemeNonAlignedAffinity specifies the service correlation scheme non aligned affinity state for
	// service correlation scheme.
	ServiceCorrelationSchemeNonAlignedAffinity ServiceCorrelationScheme = "NonAlignedAffinity"
)

// ServiceKind enumerates the values for service kind.
type ServiceKind string

const (
	// ServiceKindInvalid specifies the service kind invalid state for service kind.
	ServiceKindInvalid ServiceKind = "Invalid"
	// ServiceKindStateful specifies the service kind stateful state for service kind.
	ServiceKindStateful ServiceKind = "Stateful"
	// ServiceKindStateless specifies the service kind stateless state for service kind.
	ServiceKindStateless ServiceKind = "Stateless"
)

// ServiceKind1 enumerates the values for service kind 1.
type ServiceKind1 string

const (
	// ServiceKind1Invalid specifies the service kind 1 invalid state for service kind 1.
	ServiceKind1Invalid ServiceKind1 = "Invalid"
	// ServiceKind1Stateful specifies the service kind 1 stateful state for service kind 1.
	ServiceKind1Stateful ServiceKind1 = "Stateful"
	// ServiceKind1Stateless specifies the service kind 1 stateless state for service kind 1.
	ServiceKind1Stateless ServiceKind1 = "Stateless"
)

// ServiceKind2 enumerates the values for service kind 2.
type ServiceKind2 string

const (
	// ServiceKind2Invalid specifies the service kind 2 invalid state for service kind 2.
	ServiceKind2Invalid ServiceKind2 = "Invalid"
	// ServiceKind2Stateful specifies the service kind 2 stateful state for service kind 2.
	ServiceKind2Stateful ServiceKind2 = "Stateful"
	// ServiceKind2Stateless specifies the service kind 2 stateless state for service kind 2.
	ServiceKind2Stateless ServiceKind2 = "Stateless"
)

// ServiceKind3 enumerates the values for service kind 3.
type ServiceKind3 string

const (
	// ServiceKind3Invalid specifies the service kind 3 invalid state for service kind 3.
	ServiceKind3Invalid ServiceKind3 = "Invalid"
	// ServiceKind3Stateful specifies the service kind 3 stateful state for service kind 3.
	ServiceKind3Stateful ServiceKind3 = "Stateful"
	// ServiceKind3Stateless specifies the service kind 3 stateless state for service kind 3.
	ServiceKind3Stateless ServiceKind3 = "Stateless"
)

// ServiceKind4 enumerates the values for service kind 4.
type ServiceKind4 string

const (
	// ServiceKind4Invalid specifies the service kind 4 invalid state for service kind 4.
	ServiceKind4Invalid ServiceKind4 = "Invalid"
	// ServiceKind4Stateful specifies the service kind 4 stateful state for service kind 4.
	ServiceKind4Stateful ServiceKind4 = "Stateful"
	// ServiceKind4Stateless specifies the service kind 4 stateless state for service kind 4.
	ServiceKind4Stateless ServiceKind4 = "Stateless"
)

// ServiceKind5 enumerates the values for service kind 5.
type ServiceKind5 string

const (
	// ServiceKind5Invalid specifies the service kind 5 invalid state for service kind 5.
	ServiceKind5Invalid ServiceKind5 = "Invalid"
	// ServiceKind5Stateful specifies the service kind 5 stateful state for service kind 5.
	ServiceKind5Stateful ServiceKind5 = "Stateful"
	// ServiceKind5Stateless specifies the service kind 5 stateless state for service kind 5.
	ServiceKind5Stateless ServiceKind5 = "Stateless"
)

// ServiceKind6 enumerates the values for service kind 6.
type ServiceKind6 string

const (
	// ServiceKind6Invalid specifies the service kind 6 invalid state for service kind 6.
	ServiceKind6Invalid ServiceKind6 = "Invalid"
	// ServiceKind6Stateful specifies the service kind 6 stateful state for service kind 6.
	ServiceKind6Stateful ServiceKind6 = "Stateful"
	// ServiceKind6Stateless specifies the service kind 6 stateless state for service kind 6.
	ServiceKind6Stateless ServiceKind6 = "Stateless"
)

// ServiceLoadMetricWeight enumerates the values for service load metric weight.
type ServiceLoadMetricWeight string

const (
	// ServiceLoadMetricWeightHigh specifies the service load metric weight high state for service load metric weight.
	ServiceLoadMetricWeightHigh ServiceLoadMetricWeight = "High"
	// ServiceLoadMetricWeightLow specifies the service load metric weight low state for service load metric weight.
	ServiceLoadMetricWeightLow ServiceLoadMetricWeight = "Low"
	// ServiceLoadMetricWeightMedium specifies the service load metric weight medium state for service load metric weight.
	ServiceLoadMetricWeightMedium ServiceLoadMetricWeight = "Medium"
	// ServiceLoadMetricWeightZero specifies the service load metric weight zero state for service load metric weight.
	ServiceLoadMetricWeightZero ServiceLoadMetricWeight = "Zero"
)

// ServicePartitionKind enumerates the values for service partition kind.
type ServicePartitionKind string

const (
	// ServicePartitionKindInt64Range specifies the service partition kind int 64 range state for service partition kind.
	ServicePartitionKindInt64Range ServicePartitionKind = "Int64Range"
	// ServicePartitionKindInvalid specifies the service partition kind invalid state for service partition kind.
	ServicePartitionKindInvalid ServicePartitionKind = "Invalid"
	// ServicePartitionKindNamed specifies the service partition kind named state for service partition kind.
	ServicePartitionKindNamed ServicePartitionKind = "Named"
	// ServicePartitionKindSingleton specifies the service partition kind singleton state for service partition kind.
	ServicePartitionKindSingleton ServicePartitionKind = "Singleton"
)

// ServiceStatus enumerates the values for service status.
type ServiceStatus string

const (
	// ServiceStatusActive specifies the service status active state for service status.
	ServiceStatusActive ServiceStatus = "Active"
	// ServiceStatusCreating specifies the service status creating state for service status.
	ServiceStatusCreating ServiceStatus = "Creating"
	// ServiceStatusDeleting specifies the service status deleting state for service status.
	ServiceStatusDeleting ServiceStatus = "Deleting"
	// ServiceStatusFaile specifies the service status faile state for service status.
	ServiceStatusFaile ServiceStatus = "Faile"
	// ServiceStatusInvalid specifies the service status invalid state for service status.
	ServiceStatusInvalid ServiceStatus = "Invalid"
	// ServiceStatusUpgrading specifies the service status upgrading state for service status.
	ServiceStatusUpgrading ServiceStatus = "Upgrading"
)

// UpgradeKind enumerates the values for upgrade kind.
type UpgradeKind string

const (
	// UpgradeKindInvalid specifies the upgrade kind invalid state for upgrade kind.
	UpgradeKindInvalid UpgradeKind = "Invalid"
	// UpgradeKindRolling specifies the upgrade kind rolling state for upgrade kind.
	UpgradeKindRolling UpgradeKind = "Rolling"
)

// UpgradeState enumerates the values for upgrade state.
type UpgradeState string

const (
	// UpgradeStateInvalid specifies the upgrade state invalid state for upgrade state.
	UpgradeStateInvalid UpgradeState = "Invalid"
	// UpgradeStateRollingBackCompleted specifies the upgrade state rolling back completed state for upgrade state.
	UpgradeStateRollingBackCompleted UpgradeState = "RollingBackCompleted"
	// UpgradeStateRollingBackInProgress specifies the upgrade state rolling back in progress state for upgrade state.
	UpgradeStateRollingBackInProgress UpgradeState = "RollingBackInProgress"
	// UpgradeStateRollingForwardCompleted specifies the upgrade state rolling forward completed state for upgrade state.
	UpgradeStateRollingForwardCompleted UpgradeState = "RollingForwardCompleted"
	// UpgradeStateRollingForwardInProgress specifies the upgrade state rolling forward in progress state for upgrade
	// state.
	UpgradeStateRollingForwardInProgress UpgradeState = "RollingForwardInProgress"
	// UpgradeStateRollingForwardPending specifies the upgrade state rolling forward pending state for upgrade state.
	UpgradeStateRollingForwardPending UpgradeState = "RollingForwardPending"
)

// UpgradeState1 enumerates the values for upgrade state 1.
type UpgradeState1 string

const (
	// UpgradeState1Invalid specifies the upgrade state 1 invalid state for upgrade state 1.
	UpgradeState1Invalid UpgradeState1 = "Invalid"
	// UpgradeState1RollingBackCompleted specifies the upgrade state 1 rolling back completed state for upgrade state 1.
	UpgradeState1RollingBackCompleted UpgradeState1 = "RollingBackCompleted"
	// UpgradeState1RollingBackInProgress specifies the upgrade state 1 rolling back in progress state for upgrade state 1.
	UpgradeState1RollingBackInProgress UpgradeState1 = "RollingBackInProgress"
	// UpgradeState1RollingForwardCompleted specifies the upgrade state 1 rolling forward completed state for upgrade state
	// 1.
	UpgradeState1RollingForwardCompleted UpgradeState1 = "RollingForwardCompleted"
	// UpgradeState1RollingForwardInProgress specifies the upgrade state 1 rolling forward in progress state for upgrade
	// state 1.
	UpgradeState1RollingForwardInProgress UpgradeState1 = "RollingForwardInProgress"
	// UpgradeState1RollingForwardPending specifies the upgrade state 1 rolling forward pending state for upgrade state 1.
	UpgradeState1RollingForwardPending UpgradeState1 = "RollingForwardPending"
)

// Application is the application
type Application struct {
	autorest.Response `json:"-"`
	ID                *string                      `json:"Id,omitempty"`
	Name              *string                      `json:"Name,omitempty"`
	TypeName          *string                      `json:"TypeName,omitempty"`
	TypeVersion       *string                      `json:"TypeVersion,omitempty"`
	Status            *string                      `json:"Status,omitempty"`
	Parameters        *[]ApplicationParametersItem `json:"Parameters,omitempty"`
	HealthState       HealthState                  `json:"HealthState,omitempty"`
}

// ApplicationParametersItem is the parameters
type ApplicationParametersItem struct {
	Key   *string `json:"Key,omitempty"`
	Value *string `json:"Value,omitempty"`
}

// ApplicationDescription is the description of the application
type ApplicationDescription struct {
	Name          *string                                    `json:"Name,omitempty"`
	TypeName      *string                                    `json:"TypeName,omitempty"`
	TypeVersion   *string                                    `json:"TypeVersion,omitempty"`
	ParameterList *[]ApplicationDescriptionParameterListItem `json:"ParameterList,omitempty"`
}

// ApplicationDescriptionParameterListItem is the list of the parameter
type ApplicationDescriptionParameterListItem struct {
	Key   *string `json:"Key,omitempty"`
	Value *string `json:"Value,omitempty"`
}

// ApplicationHealth is the health of the application
type ApplicationHealth struct {
	autorest.Response               `json:"-"`
	HealthEvents                    *[]HealthEvent                                          `json:"HealthEvents,omitempty"`
	AggregatedHealthState           AggregatedHealthState                                   `json:"AggregatedHealthState,omitempty"`
	UnhealthyEvaluations            *string                                                 `json:"UnhealthyEvaluations,omitempty"`
	Name                            *string                                                 `json:"Name,omitempty"`
	ServiceHealthStates             *[]ApplicationHealthServiceHealthStatesItem             `json:"ServiceHealthStates,omitempty"`
	DeployedApplicationHealthStates *[]ApplicationHealthDeployedApplicationHealthStatesItem `json:"DeployedApplicationHealthStates,omitempty"`
}

// ApplicationHealthDeployedApplicationHealthStatesItem is the states of the deployed application health
type ApplicationHealthDeployedApplicationHealthStatesItem struct {
	ApplicationName       *string               `json:"ApplicationName,omitempty"`
	NodeName              *string               `json:"NodeName,omitempty"`
	AggregatedHealthState AggregatedHealthState `json:"AggregatedHealthState,omitempty"`
}

// ApplicationHealthServiceHealthStatesItem is the states of the service health
type ApplicationHealthServiceHealthStatesItem struct {
	ServiceName           *string               `json:"ServiceName,omitempty"`
	AggregatedHealthState AggregatedHealthState `json:"AggregatedHealthState,omitempty"`
}

// ApplicationHealthEvaluation is the evaluation of the application health
type ApplicationHealthEvaluation struct {
	Description           *string                `json:"Description,omitempty"`
	AggregatedHealthState AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                  Kind                   `json:"Kind,omitempty"`
	ServiceName           *string                `json:"ServiceName,omitempty"`
	UnhealthyEvaluations  *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
}

// MarshalJSON is the custom marshaler for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) MarshalJSON() ([]byte, error) {
	ahe.Kind = KindApplication
	type Alias ApplicationHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ahe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return &ahe, true
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for ApplicationHealthEvaluation.
func (ahe ApplicationHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// ApplicationHealthPolicy is the policy of the application health
type ApplicationHealthPolicy struct {
	ConsiderWarningAsError                  *bool                                                  `json:"ConsiderWarningAsError,omitempty"`
	MaxPercentUnhealthyDeployedApplications *int32                                                 `json:"MaxPercentUnhealthyDeployedApplications,omitempty"`
	DefaultServiceTypeHealthPolicy          *ApplicationHealthPolicyDefaultServiceTypeHealthPolicy `json:"DefaultServiceTypeHealthPolicy,omitempty"`
}

// ApplicationHealthPolicyDefaultServiceTypeHealthPolicy is the policy of the default service type health
type ApplicationHealthPolicyDefaultServiceTypeHealthPolicy struct {
	MaxPercentUnhealthyServices             *int32 `json:"MaxPercentUnhealthyServices,omitempty"`
	MaxPercentUnhealthyPartitionsPerService *int32 `json:"MaxPercentUnhealthyPartitionsPerService,omitempty"`
	MaxPercentUnhealthyReplicasPerPartition *int32 `json:"MaxPercentUnhealthyReplicasPerPartition,omitempty"`
}

// ApplicationHealthPolicyMap is the application health policy of the cluster
type ApplicationHealthPolicyMap struct {
	ConsiderWarningAsError                  *bool  `json:"ConsiderWarningAsError,omitempty"`
	MaxPercentUnhealthyDeployedApplications *int32 `json:"MaxPercentUnhealthyDeployedApplications,omitempty"`
	DefaultServiceTypeHealthPolicy          *int32 `json:"DefaultServiceTypeHealthPolicy,omitempty"`
	MaxPercentUnhealthyServices             *int32 `json:"MaxPercentUnhealthyServices,omitempty"`
	MaxPercentUnhealthyPartitionsPerService *int32 `json:"MaxPercentUnhealthyPartitionsPerService,omitempty"`
	MaxPercentUnhealthyReplicasPerPartition *int32 `json:"MaxPercentUnhealthyReplicasPerPartition,omitempty"`
}

// ApplicationHealthReport is the report of the application health
type ApplicationHealthReport struct {
	SourceID                 *string     `json:"SourceId,omitempty"`
	Property                 *string     `json:"Property,omitempty"`
	HealthState              HealthState `json:"HealthState,omitempty"`
	Description              *string     `json:"Description,omitempty"`
	TimeToLiveInMilliSeconds *string     `json:"TimeToLiveInMilliSeconds,omitempty"`
	SequenceNumber           *string     `json:"SequenceNumber,omitempty"`
	RemoveWhenExpired        *bool       `json:"RemoveWhenExpired,omitempty"`
}

// ApplicationList is the list of the application
type ApplicationList struct {
	autorest.Response `json:"-"`
	ContinuationToken *string        `json:"ContinuationToken,omitempty"`
	Items             *[]Application `json:"Items,omitempty"`
}

// ApplicationManifest is the manifest of the application
type ApplicationManifest struct {
	autorest.Response `json:"-"`
	Manifest          *string `json:"Manifest,omitempty"`
}

// ApplicationsHealthEvaluation is the evaluation of the applications health
type ApplicationsHealthEvaluation struct {
	Description                     *string                `json:"Description,omitempty"`
	AggregatedHealthState           AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                            Kind                   `json:"Kind,omitempty"`
	UnhealthyEvaluations            *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
	TotalCount                      *int32                 `json:"TotalCount,omitempty"`
	MaxPercentUnhealthyApplications *int32                 `json:"MaxPercentUnhealthyApplications,omitempty"`
}

// MarshalJSON is the custom marshaler for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) MarshalJSON() ([]byte, error) {
	ahe.Kind = KindApplications
	type Alias ApplicationsHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ahe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return &ahe, true
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for ApplicationsHealthEvaluation.
func (ahe ApplicationsHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// ApplicationType is the type of the application
type ApplicationType struct {
	Name                 *string                                    `json:"Name,omitempty"`
	Version              *string                                    `json:"Version,omitempty"`
	DefaultParameterList *[]ApplicationTypeDefaultParameterListItem `json:"DefaultParameterList,omitempty"`
}

// ApplicationTypeDefaultParameterListItem is the list of the default parameter
type ApplicationTypeDefaultParameterListItem struct {
	Key   *string `json:"Key,omitempty"`
	Value *string `json:"Value,omitempty"`
}

// ApplicationTypeHealthEvaluation is the evaluation of the application type health
type ApplicationTypeHealthEvaluation struct {
	Description                     *string                `json:"Description,omitempty"`
	AggregatedHealthState           AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                            Kind                   `json:"Kind,omitempty"`
	ApplicationTypeName             *string                `json:"ApplicationTypeName,omitempty"`
	UnhealthyEvaluations            *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
	TotalCount                      *int32                 `json:"TotalCount,omitempty"`
	MaxPercentUnhealthyApplications *int32                 `json:"MaxPercentUnhealthyApplications,omitempty"`
}

// MarshalJSON is the custom marshaler for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) MarshalJSON() ([]byte, error) {
	athe.Kind = KindApplicationType
	type Alias ApplicationTypeHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(athe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for ApplicationTypeHealthEvaluation.
func (athe ApplicationTypeHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return &athe, true
}

// ApplicationUpgrade is the upgrade of the application
type ApplicationUpgrade struct {
	autorest.Response                   `json:"-"`
	Name                                *string                                            `json:"Name,omitempty"`
	TypeName                            *string                                            `json:"TypeName,omitempty"`
	TargetApplicationTypeVersion        *string                                            `json:"TargetApplicationTypeVersion,omitempty"`
	UpgradeDomains                      *string                                            `json:"UpgradeDomains,omitempty"`
	UpgradeState                        UpgradeState                                       `json:"UpgradeState,omitempty"`
	NextUpgradeDomain                   *string                                            `json:"NextUpgradeDomain,omitempty"`
	RollingUpgradeMode                  RollingUpgradeMode                                 `json:"RollingUpgradeMode,omitempty"`
	UpgradeDurationInMilliseconds       *string                                            `json:"UpgradeDurationInMilliseconds,omitempty"`
	UpgradeDomainDurationInMilliseconds *string                                            `json:"UpgradeDomainDurationInMilliseconds,omitempty"`
	UnhealthyEvaluations                *string                                            `json:"UnhealthyEvaluations,omitempty"`
	CurrentUpgradeDomainProgress        *ApplicationUpgradeCurrentUpgradeDomainProgress    `json:"CurrentUpgradeDomainProgress,omitempty"`
	StartTimestampUtc                   *string                                            `json:"StartTimestampUtc,omitempty"`
	FailureTimestampUtc                 *string                                            `json:"FailureTimestampUtc,omitempty"`
	FailureReason                       FailureReason                                      `json:"FailureReason,omitempty"`
	DeployedApplicationHealthStates     *ApplicationUpgradeDeployedApplicationHealthStates `json:"DeployedApplicationHealthStates,omitempty"`
}

// ApplicationUpgradeCurrentUpgradeDomainProgress is the progress of the current upgrade domain
type ApplicationUpgradeCurrentUpgradeDomainProgress struct {
	DomainName              *string `json:"DomainName,omitempty"`
	NodeUpgradeProgressList *string `json:"NodeUpgradeProgressList,omitempty"`
}

// ApplicationUpgradeDeployedApplicationHealthStates is the states of the deployed application health
type ApplicationUpgradeDeployedApplicationHealthStates struct {
	DomainName              *string `json:"DomainName,omitempty"`
	NodeUpgradeProgressList *string `json:"NodeUpgradeProgressList,omitempty"`
}

// ClusterHealth is the health of the cluster
type ClusterHealth struct {
	autorest.Response      `json:"-"`
	HealthEvents           *[]HealthEvent                             `json:"HealthEvents,omitempty"`
	AggregatedHealthState  AggregatedHealthState                      `json:"AggregatedHealthState,omitempty"`
	UnhealthyEvaluations   *[]UnhealthyEvaluation                     `json:"UnhealthyEvaluations,omitempty"`
	NodeHealthStates       *[]ClusterHealthNodeHealthStatesItem       `json:"NodeHealthStates,omitempty"`
	ApplicationHealthState *[]ClusterHealthApplicationHealthStateItem `json:"ApplicationHealthState,omitempty"`
}

// ClusterHealthApplicationHealthStateItem is the state of the application health
type ClusterHealthApplicationHealthStateItem struct {
	Name                  *string               `json:"Name,omitempty"`
	AggregatedHealthState AggregatedHealthState `json:"AggregatedHealthState,omitempty"`
}

// ClusterHealthNodeHealthStatesItem is the states of tehe node health
type ClusterHealthNodeHealthStatesItem struct {
	Name                  *string                              `json:"Name,omitempty"`
	ID                    *ClusterHealthNodeHealthStatesItemID `json:"Id,omitempty"`
	AggregatedHealthState AggregatedHealthState                `json:"AggregatedHealthState,omitempty"`
}

// ClusterHealthNodeHealthStatesItemID is the id
type ClusterHealthNodeHealthStatesItemID struct {
	ID *string `json:"Id,omitempty"`
}

// ClusterHealthPolicy is the policy of the cluster health
type ClusterHealthPolicy struct {
	RollingUpgradeMode                      RollingUpgradeMode `json:"RollingUpgradeMode,omitempty"`
	ForceRestart                            *bool              `json:"ForceRestart,omitempty"`
	FailureAction                           *string            `json:"FailureAction,omitempty"`
	UpgradeReplicaSetCheckTimeoutInSeconds  *int32             `json:"UpgradeReplicaSetCheckTimeoutInSeconds,omitempty"`
	HealthCheckWaitDurationInMilliseconds   *string            `json:"HealthCheckWaitDurationInMilliseconds,omitempty"`
	HealthCheckStableDurationInMilliseconds *string            `json:"HealthCheckStableDurationInMilliseconds,omitempty"`
	HealthCheckRetryTimeoutInMilliseconds   *string            `json:"HealthCheckRetryTimeoutInMilliseconds,omitempty"`
	UpgradeTimeoutInMilliseconds            *string            `json:"UpgradeTimeoutInMilliseconds,omitempty"`
	UpgradeDomainTimeoutInMilliseconds      *string            `json:"UpgradeDomainTimeoutInMilliseconds,omitempty"`
}

// ClusterHealthReport is the report of the cluster health
type ClusterHealthReport struct {
	SourceID                 *string     `json:"SourceId,omitempty"`
	Property                 *string     `json:"Property,omitempty"`
	HealthState              HealthState `json:"HealthState,omitempty"`
	Description              *string     `json:"Description,omitempty"`
	TimeToLiveInMilliSeconds *string     `json:"TimeToLiveInMilliSeconds,omitempty"`
	SequenceNumber           *string     `json:"SequenceNumber,omitempty"`
	RemoveWhenExpired        *bool       `json:"RemoveWhenExpired,omitempty"`
}

// ClusterLoadInformation is the information of the cluster load
type ClusterLoadInformation struct {
	autorest.Response         `json:"-"`
	LastBalancingStartTimeUtc *string                  `json:"LastBalancingStartTimeUtc,omitempty"`
	LastBalancingEndTimeUtc   *string                  `json:"LastBalancingEndTimeUtc,omitempty"`
	LoadMetricInformation     *[]LoadMetricInformation `json:"LoadMetricInformation,omitempty"`
}

// ClusterUpgradeHealthPolicy is the upgrade health policy of the cluster
type ClusterUpgradeHealthPolicy struct {
	MaxPercentDeltaUnhealthyNodes              *int32 `json:"MaxPercentDeltaUnhealthyNodes,omitempty"`
	MaxPercentUpgradeDomainDeltaUnhealthyNodes *int32 `json:"MaxPercentUpgradeDomainDeltaUnhealthyNodes,omitempty"`
}

// ClusterUpgradeProgress is the progress of the cluster upgrade
type ClusterUpgradeProgress struct {
	autorest.Response                   `json:"-"`
	CodeVersion                         *string                                               `json:"CodeVersion,omitempty"`
	ConfigVersion                       *string                                               `json:"ConfigVersion,omitempty"`
	UpgradeDomains                      *[]string                                             `json:"UpgradeDomains,omitempty"`
	UpgradeState                        UpgradeState                                          `json:"UpgradeState,omitempty"`
	NextUpgradeDomain                   *string                                               `json:"NextUpgradeDomain,omitempty"`
	RollingUpgradeMode                  RollingUpgradeMode                                    `json:"RollingUpgradeMode,omitempty"`
	UpgradeDurationInMilliseconds       *string                                               `json:"UpgradeDurationInMilliseconds,omitempty"`
	UpgradeDomainDurationInMilliseconds *string                                               `json:"UpgradeDomainDurationInMilliseconds,omitempty"`
	UnhealthyEvaluations                *[]UnhealthyEvaluation                                `json:"UnhealthyEvaluations,omitempty"`
	CurrentUpgradeDomainProgress        *ClusterUpgradeProgressCurrentUpgradeDomainProgress   `json:"CurrentUpgradeDomainProgress,omitempty"`
	StartTimestampUtc                   *string                                               `json:"StartTimestampUtc,omitempty"`
	FailureTimestampUtc                 *string                                               `json:"FailureTimestampUtc,omitempty"`
	FailureReason                       FailureReason                                         `json:"FailureReason,omitempty"`
	UpgradeDomainProgressAtFailure      *ClusterUpgradeProgressUpgradeDomainProgressAtFailure `json:"UpgradeDomainProgressAtFailure,omitempty"`
}

// ClusterUpgradeProgressCurrentUpgradeDomainProgress is the progress of the current upgrade domain
type ClusterUpgradeProgressCurrentUpgradeDomainProgress struct {
	DomainName              *string `json:"DomainName,omitempty"`
	NodeUpgradeProgressList *string `json:"NodeUpgradeProgressList,omitempty"`
}

// ClusterUpgradeProgressUpgradeDomainProgressAtFailure is the failure of the upgrade domain progress at
type ClusterUpgradeProgressUpgradeDomainProgressAtFailure struct {
	DomainName              *string `json:"DomainName,omitempty"`
	NodeUpgradeProgressList *string `json:"NodeUpgradeProgressList,omitempty"`
}

// CodePackageEntryPointStatistics is the statistics of the code package entry point
type CodePackageEntryPointStatistics struct {
	LastExitCode                     *int32  `json:"LastExitCode,omitempty"`
	LastActivationTime               *string `json:"LastActivationTime,omitempty"`
	LastExitTime                     *string `json:"LastExitTime,omitempty"`
	LastSuccessfulActivationTime     *string `json:"LastSuccessfulActivationTime,omitempty"`
	LastSuccessfulExitTime           *string `json:"LastSuccessfulExitTime,omitempty"`
	ActivationFailureCount           *int32  `json:"ActivationFailureCount,omitempty"`
	ContinuousActivationFailureCount *int32  `json:"ContinuousActivationFailureCount,omitempty"`
	ExitFailureCount                 *int32  `json:"ExitFailureCount,omitempty"`
	ContinuousExitFailureCount       *int32  `json:"ContinuousExitFailureCount,omitempty"`
	ActivationCount                  *int32  `json:"ActivationCount,omitempty"`
	ExitCount                        *int32  `json:"ExitCount,omitempty"`
}

// CreateServiceDescription is the description of the create service
type CreateServiceDescription interface {
	AsStatelessCreateServiceDescription() (*StatelessCreateServiceDescription, bool)
	AsStatefulCreateServiceDescription() (*StatefulCreateServiceDescription, bool)
}

func unmarshalCreateServiceDescription(body []byte) (CreateServiceDescription, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["ServiceKind"] {
	case string(ServiceKindStateless):
		var scsd StatelessCreateServiceDescription
		err := json.Unmarshal(body, &scsd)
		return scsd, err
	case string(ServiceKindStateful):
		var scsd StatefulCreateServiceDescription
		err := json.Unmarshal(body, &scsd)
		return scsd, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalCreateServiceDescriptionArray(body []byte) ([]CreateServiceDescription, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	csdArray := make([]CreateServiceDescription, len(rawMessages))

	for index, rawMessage := range rawMessages {
		csd, err := unmarshalCreateServiceDescription(*rawMessage)
		if err != nil {
			return nil, err
		}
		csdArray[index] = csd
	}
	return csdArray, nil
}

// CreateServiceGroupDescription is the description of the create service group
type CreateServiceGroupDescription interface {
	AsStatelessCreateServiceGroupDescription() (*StatelessCreateServiceGroupDescription, bool)
	AsStatefulCreateServiceGroupDescription() (*StatefulCreateServiceGroupDescription, bool)
}

func unmarshalCreateServiceGroupDescription(body []byte) (CreateServiceGroupDescription, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["ServiceKind"] {
	case string(ServiceKindStateless):
		var scsgd StatelessCreateServiceGroupDescription
		err := json.Unmarshal(body, &scsgd)
		return scsgd, err
	case string(ServiceKindStateful):
		var scsgd StatefulCreateServiceGroupDescription
		err := json.Unmarshal(body, &scsgd)
		return scsgd, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalCreateServiceGroupDescriptionArray(body []byte) ([]CreateServiceGroupDescription, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	csgdArray := make([]CreateServiceGroupDescription, len(rawMessages))

	for index, rawMessage := range rawMessages {
		csgd, err := unmarshalCreateServiceGroupDescription(*rawMessage)
		if err != nil {
			return nil, err
		}
		csgdArray[index] = csgd
	}
	return csgdArray, nil
}

// DeltaNodesCheckHealthEvaluation is the evaluation of the delta nodes check health
type DeltaNodesCheckHealthEvaluation struct {
	Description                   *string                `json:"Description,omitempty"`
	AggregatedHealthState         AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                          Kind                   `json:"Kind,omitempty"`
	UnhealthyEvaluations          *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
	BaselineErrorCount            *int32                 `json:"BaselineErrorCount,omitempty"`
	BaselineTotalCount            *int32                 `json:"BaselineTotalCount,omitempty"`
	TotalCount                    *int32                 `json:"TotalCount,omitempty"`
	MaxPercentDeltaUnhealthyNodes *int32                 `json:"MaxPercentDeltaUnhealthyNodes,omitempty"`
}

// MarshalJSON is the custom marshaler for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) MarshalJSON() ([]byte, error) {
	dnche.Kind = KindDeltaNodesCheck
	type Alias DeltaNodesCheckHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(dnche),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return &dnche, true
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for DeltaNodesCheckHealthEvaluation.
func (dnche DeltaNodesCheckHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// DeployedApplication is the application of the deployed
type DeployedApplication struct {
	autorest.Response `json:"-"`
	ID                *string `json:"Id,omitempty"`
	Name              *string `json:"Name,omitempty"`
	TypeName          *string `json:"TypeName,omitempty"`
	Status            *string `json:"Status,omitempty"`
	WorkDirectory     *string `json:"WorkDirectory,omitempty"`
	LogDirectory      *string `json:"LogDirectory,omitempty"`
	TempDirectory     *string `json:"TempDirectory,omitempty"`
}

// DeployedApplicationHealth is the health of the deployed application
type DeployedApplicationHealth struct {
	autorest.Response                  `json:"-"`
	HealthEvents                       *[]HealthEvent                     `json:"HealthEvents,omitempty"`
	AggregatedHealthState              AggregatedHealthState              `json:"AggregatedHealthState,omitempty"`
	UnhealthyEvaluations               *string                            `json:"UnhealthyEvaluations,omitempty"`
	Name                               *string                            `json:"Name,omitempty"`
	NodeName                           *string                            `json:"NodeName,omitempty"`
	DeployedServicePackageHealthStates *DeployedServicePackageHealthState `json:"DeployedServicePackageHealthStates,omitempty"`
}

// DeployedApplicationHealthEvaluation is the evaluation of the deployed application health
type DeployedApplicationHealthEvaluation struct {
	Description           *string                `json:"Description,omitempty"`
	AggregatedHealthState AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                  Kind                   `json:"Kind,omitempty"`
	ApplicationName       *string                `json:"ApplicationName,omitempty"`
	NodeName              *string                `json:"NodeName,omitempty"`
	UnhealthyEvaluations  *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
}

// MarshalJSON is the custom marshaler for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) MarshalJSON() ([]byte, error) {
	dahe.Kind = KindDeployedApplication
	type Alias DeployedApplicationHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(dahe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return &dahe, true
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationHealthEvaluation.
func (dahe DeployedApplicationHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// DeployedApplicationHealthReport is the report of the deployed application health
type DeployedApplicationHealthReport struct {
	SourceID                 *string     `json:"SourceId,omitempty"`
	Property                 *string     `json:"Property,omitempty"`
	HealthState              HealthState `json:"HealthState,omitempty"`
	Description              *string     `json:"Description,omitempty"`
	TimeToLiveInMilliSeconds *string     `json:"TimeToLiveInMilliSeconds,omitempty"`
	SequenceNumber           *string     `json:"SequenceNumber,omitempty"`
	RemoveWhenExpired        *bool       `json:"RemoveWhenExpired,omitempty"`
}

// DeployedApplicationsHealthEvaluation is the evaluation of the deployed applications health
type DeployedApplicationsHealthEvaluation struct {
	Description                             *string                `json:"Description,omitempty"`
	AggregatedHealthState                   AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                                    Kind                   `json:"Kind,omitempty"`
	UnhealthyEvaluations                    *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
	TotalCount                              *int32                 `json:"TotalCount,omitempty"`
	MaxPercentUnhealthyDeployedApplications *int32                 `json:"MaxPercentUnhealthyDeployedApplications,omitempty"`
}

// MarshalJSON is the custom marshaler for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) MarshalJSON() ([]byte, error) {
	dahe.Kind = KindDeployedApplications
	type Alias DeployedApplicationsHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(dahe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return &dahe, true
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for DeployedApplicationsHealthEvaluation.
func (dahe DeployedApplicationsHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// DeployedCodePackage is the package of the deployed code
type DeployedCodePackage struct {
	Name                 *string     `json:"Name,omitempty"`
	Version              *string     `json:"Version,omitempty"`
	ServiceManifestName  *string     `json:"ServiceManifestName,omitempty"`
	Status               *string     `json:"Status,omitempty"`
	RunFrequencyInterval *string     `json:"RunFrequencyInterval,omitempty"`
	SetupEntryPoint      *EntryPoint `json:"SetupEntryPoint,omitempty"`
	MainEntryPoint       *EntryPoint `json:"MainEntryPoint,omitempty"`
	HasSetupEntryPoint   *bool       `json:"HasSetupEntryPoint,omitempty"`
}

// DeployedReplica is the replica of the deployed
type DeployedReplica struct {
	ServiceKind            ServiceKind   `json:"ServiceKind,omitempty"`
	ServiceName            *string       `json:"ServiceName,omitempty"`
	ServiceTypeName        *string       `json:"ServiceTypeName,omitempty"`
	ServiceManifestVersion *string       `json:"ServiceManifestVersion,omitempty"`
	ServiceManifestName    *string       `json:"ServiceManifestName,omitempty"`
	CodePackageName        *string       `json:"CodePackageName,omitempty"`
	PartitionID            *string       `json:"PartitionId,omitempty"`
	InstanceID             *string       `json:"InstanceId,omitempty"`
	ReplicaID              *string       `json:"ReplicaId,omitempty"`
	ReplicaRole            ReplicaRole   `json:"ReplicaRole,omitempty"`
	ReplicaStatus          ReplicaStatus `json:"ReplicaStatus,omitempty"`
	Address                *string       `json:"Address,omitempty"`
}

// DeployedReplicaDetail is the detail of the deployed replica
type DeployedReplicaDetail struct {
	autorest.Response                   `json:"-"`
	ServiceKind                         ServiceKind                            `json:"ServiceKind,omitempty"`
	ServiceName                         *string                                `json:"ServiceName,omitempty"`
	PartitionID                         *string                                `json:"PartitionId,omitempty"`
	CurrentServiceOperation             *int32                                 `json:"CurrentServiceOperation,omitempty"`
	CurrentReplicatorOperation          *int32                                 `json:"CurrentReplicatorOperation,omitempty"`
	CurrentServiceOperationStartTimeUtc *string                                `json:"CurrentServiceOperationStartTimeUtc,omitempty"`
	InstanceID                          *string                                `json:"InstanceId,omitempty"`
	ReplicaID                           *string                                `json:"ReplicaId,omitempty"`
	ReadStatus                          *int32                                 `json:"ReadStatus,omitempty"`
	WriteStatus                         *int32                                 `json:"WriteStatus,omitempty"`
	ReplicatorStatus                    *DeployedReplicaDetailReplicatorStatus `json:"ReplicatorStatus,omitempty"`
}

// DeployedReplicaDetailReplicatorStatus is the status of the replicator
type DeployedReplicaDetailReplicatorStatus struct {
	Kind                   *int32                                                       `json:"Kind,omitempty"`
	ReplicationQueueStatus *DeployedReplicaDetailReplicatorStatusReplicationQueueStatus `json:"ReplicationQueueStatus,omitempty"`
}

// DeployedReplicaDetailReplicatorStatusReplicationQueueStatus is the status of the replication queue
type DeployedReplicaDetailReplicatorStatusReplicationQueueStatus struct {
	QueueUtilizationPercentage *string `json:"QueueUtilizationPercentage,omitempty"`
	QueueMemorySize            *string `json:"QueueMemorySize,omitempty"`
	FirstSequenceNumber        *string `json:"FirstSequenceNumber,omitempty"`
	CompletedSequenceNumber    *string `json:"CompletedSequenceNumber,omitempty"`
	CommittedSequenceNumber    *string `json:"CommittedSequenceNumber,omitempty"`
	LastSequenceNumber         *string `json:"LastSequenceNumber,omitempty"`
}

// DeployedServiceHealthReport is the report of the deployed service package health
type DeployedServiceHealthReport struct {
	SourceID                 *string     `json:"SourceId,omitempty"`
	Property                 *string     `json:"Property,omitempty"`
	HealthState              HealthState `json:"HealthState,omitempty"`
	Description              *string     `json:"Description,omitempty"`
	TimeToLiveInMilliSeconds *string     `json:"TimeToLiveInMilliSeconds,omitempty"`
	SequenceNumber           *string     `json:"SequenceNumber,omitempty"`
	RemoveWhenExpired        *bool       `json:"RemoveWhenExpired,omitempty"`
}

// DeployedServicePackage is the package of the deployed service
type DeployedServicePackage struct {
	Name    *string `json:"Name,omitempty"`
	Version *string `json:"Version,omitempty"`
	Status  *string `json:"Status,omitempty"`
}

// DeployedServicePackageHealth is the health of the deployed service package
type DeployedServicePackageHealth struct {
	autorest.Response     `json:"-"`
	ApplicationName       *string               `json:"ApplicationName,omitempty"`
	ServiceManifestName   *string               `json:"ServiceManifestName,omitempty"`
	NodeName              *string               `json:"NodeName,omitempty"`
	HealthEvents          *[]HealthEvent        `json:"HealthEvents,omitempty"`
	AggregatedHealthState AggregatedHealthState `json:"AggregatedHealthState,omitempty"`
}

// DeployedServicePackageHealthEvaluation is the evaluation of the deployed service package health
type DeployedServicePackageHealthEvaluation struct {
	Description           *string                `json:"Description,omitempty"`
	AggregatedHealthState AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                  Kind                   `json:"Kind,omitempty"`
	ApplicationName       *string                `json:"ApplicationName,omitempty"`
	NodeName              *string                `json:"NodeName,omitempty"`
	ServiceManifestName   *string                `json:"ServiceManifestName,omitempty"`
	UnhealthyEvaluations  *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
}

// MarshalJSON is the custom marshaler for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) MarshalJSON() ([]byte, error) {
	dsphe.Kind = KindDeployedServicePackage
	type Alias DeployedServicePackageHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(dsphe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return &dsphe, true
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackageHealthEvaluation.
func (dsphe DeployedServicePackageHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// DeployedServicePackageHealthState is the state of the deployed service package health
type DeployedServicePackageHealthState struct {
	ApplicationName       *string               `json:"ApplicationName,omitempty"`
	ServiceManifestName   *string               `json:"ServiceManifestName,omitempty"`
	NodeName              *string               `json:"NodeName,omitempty"`
	AggregatedHealthState AggregatedHealthState `json:"AggregatedHealthState,omitempty"`
}

// DeployedServicePackagesHealthEvaluation is the evaluation of the deployed service packages health
type DeployedServicePackagesHealthEvaluation struct {
	Description           *string                `json:"Description,omitempty"`
	AggregatedHealthState AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                  Kind                   `json:"Kind,omitempty"`
	UnhealthyEvaluations  *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
	TotalCount            *int32                 `json:"TotalCount,omitempty"`
}

// MarshalJSON is the custom marshaler for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) MarshalJSON() ([]byte, error) {
	dsphe.Kind = KindDeployedServicePackages
	type Alias DeployedServicePackagesHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(dsphe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return &dsphe, true
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for DeployedServicePackagesHealthEvaluation.
func (dsphe DeployedServicePackagesHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// DeployedServiceType is the type of the deploye service
type DeployedServiceType struct {
	ServiceTypeName     *string `json:"ServiceTypeName,omitempty"`
	CodePackageName     *string `json:"CodePackageName,omitempty"`
	ServiceManifestName *string `json:"ServiceManifestName,omitempty"`
	Status              *string `json:"Status,omitempty"`
}

// DisableNode is the node
type DisableNode struct {
	DeactivationIntent DeactivationIntent `json:"DeactivationIntent,omitempty"`
}

// EntryPoint is the point of the entry
type EntryPoint struct {
	EntryPointLocation              *int32                           `json:"EntryPointLocation,omitempty"`
	ProcessID                       *int32                           `json:"ProcessId,omitempty"`
	RunAsUserName                   *int32                           `json:"RunAsUserName,omitempty"`
	NextActivationTime              *int32                           `json:"NextActivationTime,omitempty"`
	Status                          *string                          `json:"Status,omitempty"`
	CodePackageEntryPointStatistics *CodePackageEntryPointStatistics `json:"CodePackageEntryPointStatistics,omitempty"`
}

// ErrorModel is the model of the error
type ErrorModel struct {
	Error *ErrorModelError `json:"Error,omitempty"`
}

// ErrorModelError is the error
type ErrorModelError struct {
	Code    *string `json:"Code,omitempty"`
	Message *string `json:"Message,omitempty"`
}

// EventHealthEvaluation is the evaluation of the event health
type EventHealthEvaluation struct {
	Description            *string               `json:"Description,omitempty"`
	AggregatedHealthState  AggregatedHealthState `json:"AggregatedHealthState,omitempty"`
	Kind                   Kind                  `json:"Kind,omitempty"`
	UnhealthyEvent         *HealthEvent          `json:"UnhealthyEvent,omitempty"`
	ConsiderWarningAsError *bool                 `json:"ConsiderWarningAsError,omitempty"`
}

// MarshalJSON is the custom marshaler for EventHealthEvaluation.
func (ehe EventHealthEvaluation) MarshalJSON() ([]byte, error) {
	ehe.Kind = KindEvent
	type Alias EventHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ehe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return &ehe, true
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for EventHealthEvaluation.
func (ehe EventHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// HealthEvaluation is the evauation of the health
type HealthEvaluation interface {
	AsEventHealthEvaluation() (*EventHealthEvaluation, bool)
	AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool)
	AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool)
	AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool)
	AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool)
	AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool)
	AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool)
	AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool)
	AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool)
	AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool)
	AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool)
	AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool)
	AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool)
	AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool)
	AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool)
	AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool)
	AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool)
	AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool)
	AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool)
	AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool)
	AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool)
}

func unmarshalHealthEvaluation(body []byte) (HealthEvaluation, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["Kind"] {
	case string(KindEvent):
		var ehe EventHealthEvaluation
		err := json.Unmarshal(body, &ehe)
		return ehe, err
	case string(KindPartitions):
		var phe PartitionsHealthEvaluation
		err := json.Unmarshal(body, &phe)
		return phe, err
	case string(KindReplicas):
		var rhe ReplicasHealthEvaluation
		err := json.Unmarshal(body, &rhe)
		return rhe, err
	case string(KindDeployedServicePackages):
		var dsphe DeployedServicePackagesHealthEvaluation
		err := json.Unmarshal(body, &dsphe)
		return dsphe, err
	case string(KindDeployedApplications):
		var dahe DeployedApplicationsHealthEvaluation
		err := json.Unmarshal(body, &dahe)
		return dahe, err
	case string(KindServices):
		var she ServicesHealthEvaluation
		err := json.Unmarshal(body, &she)
		return she, err
	case string(KindNodes):
		var nhe NodesHealthEvaluation
		err := json.Unmarshal(body, &nhe)
		return nhe, err
	case string(KindApplications):
		var ahe ApplicationsHealthEvaluation
		err := json.Unmarshal(body, &ahe)
		return ahe, err
	case string(KindUpgradeDomainNodes):
		var udnhe UpgradeDomainNodesHealthEvaluation
		err := json.Unmarshal(body, &udnhe)
		return udnhe, err
	case string(KindUpgradeDomainDeployedApplications):
		var uddahe UpgradeDomainDeployedApplicationsHealthEvaluation
		err := json.Unmarshal(body, &uddahe)
		return uddahe, err
	case string(KindSystemApplication):
		var sahe SystemApplicationHealthEvaluation
		err := json.Unmarshal(body, &sahe)
		return sahe, err
	case string(KindPartition):
		var phe PartitionHealthEvaluation
		err := json.Unmarshal(body, &phe)
		return phe, err
	case string(KindReplica):
		var rhe ReplicaHealthEvaluation
		err := json.Unmarshal(body, &rhe)
		return rhe, err
	case string(KindDeployedServicePackage):
		var dsphe DeployedServicePackageHealthEvaluation
		err := json.Unmarshal(body, &dsphe)
		return dsphe, err
	case string(KindDeployedApplication):
		var dahe DeployedApplicationHealthEvaluation
		err := json.Unmarshal(body, &dahe)
		return dahe, err
	case string(KindService):
		var she ServiceHealthEvaluation
		err := json.Unmarshal(body, &she)
		return she, err
	case string(KindNode):
		var nhe NodeHealthEvaluation
		err := json.Unmarshal(body, &nhe)
		return nhe, err
	case string(KindApplication):
		var ahe ApplicationHealthEvaluation
		err := json.Unmarshal(body, &ahe)
		return ahe, err
	case string(KindDeltaNodesCheck):
		var dnche DeltaNodesCheckHealthEvaluation
		err := json.Unmarshal(body, &dnche)
		return dnche, err
	case string(KindUpgradeDomainDeltaNodesCheck):
		var uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation
		err := json.Unmarshal(body, &uddnche)
		return uddnche, err
	case string(KindApplicationType):
		var athe ApplicationTypeHealthEvaluation
		err := json.Unmarshal(body, &athe)
		return athe, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalHealthEvaluationArray(body []byte) ([]HealthEvaluation, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	heArray := make([]HealthEvaluation, len(rawMessages))

	for index, rawMessage := range rawMessages {
		he, err := unmarshalHealthEvaluation(*rawMessage)
		if err != nil {
			return nil, err
		}
		heArray[index] = he
	}
	return heArray, nil
}

// HealthEvent is the event of the health
type HealthEvent struct {
	SourceID                 *string     `json:"SourceId,omitempty"`
	Property                 *string     `json:"Property,omitempty"`
	HealthState              HealthState `json:"HealthState,omitempty"`
	TimeToLiveInMilliSeconds *string     `json:"TimeToLiveInMilliSeconds,omitempty"`
	Description              *string     `json:"Description,omitempty"`
	SequenceNumber           *string     `json:"SequenceNumber,omitempty"`
	RemoveWhenExpired        *bool       `json:"RemoveWhenExpired,omitempty"`
	SourceUtcTimestamp       *string     `json:"SourceUtcTimestamp,omitempty"`
	LastModifiedUtcTimestamp *string     `json:"LastModifiedUtcTimestamp,omitempty"`
	IsExpired                *bool       `json:"IsExpired,omitempty"`
	LastOkTransitionAt       *string     `json:"LastOkTransitionAt,omitempty"`
	LastWarningTransitionAt  *string     `json:"LastWarningTransitionAt,omitempty"`
	LastErrorTransitionAt    *string     `json:"LastErrorTransitionAt,omitempty"`
}

// HealthReport is the report of the health
type HealthReport struct {
	SourceID                 *string     `json:"SourceId,omitempty"`
	Property                 *string     `json:"Property,omitempty"`
	HealthState              HealthState `json:"HealthState,omitempty"`
	Description              *string     `json:"Description,omitempty"`
	TimeToLiveInMilliSeconds *string     `json:"TimeToLiveInMilliSeconds,omitempty"`
	SequenceNumber           *string     `json:"SequenceNumber,omitempty"`
	RemoveWhenExpired        *bool       `json:"RemoveWhenExpired,omitempty"`
}

// ListApplicationType is
type ListApplicationType struct {
	autorest.Response `json:"-"`
	Value             *[]ApplicationType `json:"value,omitempty"`
}

// ListDeployedApplication is
type ListDeployedApplication struct {
	autorest.Response `json:"-"`
	Value             *[]DeployedApplication `json:"value,omitempty"`
}

// ListDeployedCodePackage is
type ListDeployedCodePackage struct {
	autorest.Response `json:"-"`
	Value             *[]DeployedCodePackage `json:"value,omitempty"`
}

// ListDeployedReplica is
type ListDeployedReplica struct {
	autorest.Response `json:"-"`
	Value             *[]DeployedReplica `json:"value,omitempty"`
}

// ListDeployedServicePackage is
type ListDeployedServicePackage struct {
	autorest.Response `json:"-"`
	Value             *[]DeployedServicePackage `json:"value,omitempty"`
}

// ListDeployedServiceType is
type ListDeployedServiceType struct {
	autorest.Response `json:"-"`
	Value             *[]DeployedServiceType `json:"value,omitempty"`
}

// ListServiceType is
type ListServiceType struct {
	autorest.Response `json:"-"`
	Value             *[]ServiceType `json:"value,omitempty"`
}

// LoadMetricInformation is the information of the load metric
type LoadMetricInformation struct {
	Name                        *string                             `json:"Name,omitempty"`
	IsBalancedBefore            *bool                               `json:"IsBalancedBefore,omitempty"`
	IsBalancedAfter             *bool                               `json:"IsBalancedAfter,omitempty"`
	DeviationBefore             *int32                              `json:"DeviationBefore,omitempty"`
	DeviationAfter              *int32                              `json:"DeviationAfter,omitempty"`
	BalancingThreshold          *int32                              `json:"BalancingThreshold,omitempty"`
	Action                      *string                             `json:"Action,omitempty"`
	ActivityThreshold           *int32                              `json:"ActivityThreshold,omitempty"`
	ClusterCapacity             *string                             `json:"ClusterCapacity,omitempty"`
	ClusterLoad                 *string                             `json:"ClusterLoad,omitempty"`
	RemainingUnbufferedCapacity *string                             `json:"RemainingUnbufferedCapacity,omitempty"`
	NodeBufferPercentage        *int32                              `json:"NodeBufferPercentage,omitempty"`
	BufferedCapacity            *string                             `json:"BufferedCapacity,omitempty"`
	RemainingBufferedCapacity   *string                             `json:"RemainingBufferedCapacity,omitempty"`
	IsClusterCapacityViolation  *bool                               `json:"IsClusterCapacityViolation,omitempty"`
	MinNodeLoadValue            *string                             `json:"MinNodeLoadValue,omitempty"`
	MinNodeLoadID               *LoadMetricInformationMinNodeLoadID `json:"MinNodeLoadId,omitempty"`
	MaxNodeLoadValue            *string                             `json:"MaxNodeLoadValue,omitempty"`
	MaxNodeLoadID               *LoadMetricInformationMaxNodeLoadID `json:"MaxNodeLoadId,omitempty"`
}

// LoadMetricInformationMaxNodeLoadID is the id of the max node load
type LoadMetricInformationMaxNodeLoadID struct {
	ID *string `json:"Id,omitempty"`
}

// LoadMetricInformationMinNodeLoadID is the id of the min node
type LoadMetricInformationMinNodeLoadID struct {
	ID *string `json:"Id,omitempty"`
}

// MonitoringPolicy is the policy of the monitoring
type MonitoringPolicy struct {
	FailureAction                           *string `json:"FailureAction,omitempty"`
	HealthCheckWaitDurationInMilliseconds   *string `json:"HealthCheckWaitDurationInMilliseconds,omitempty"`
	HealthCheckStableDurationInMilliseconds *string `json:"HealthCheckStableDurationInMilliseconds,omitempty"`
	HealthCheckRetryTimeoutInMilliseconds   *string `json:"HealthCheckRetryTimeoutInMilliseconds,omitempty"`
	UpgradeTimeoutInMilliseconds            *string `json:"UpgradeTimeoutInMilliseconds,omitempty"`
	UpgradeDomainTimeoutInMilliseconds      *string `json:"UpgradeDomainTimeoutInMilliseconds,omitempty"`
}

// Node is the node
type Node struct {
	autorest.Response    `json:"-"`
	Name                 *string                   `json:"Name,omitempty"`
	IPAddressOrFQDN      *string                   `json:"IpAddressOrFQDN,omitempty"`
	Type                 *string                   `json:"Type,omitempty"`
	CodeVersion          *string                   `json:"CodeVersion,omitempty"`
	ConfigVersion        *string                   `json:"ConfigVersion,omitempty"`
	NodeStatus           NodeStatus                `json:"NodeStatus,omitempty"`
	NodeUpTimeInSeconds  *string                   `json:"NodeUpTimeInSeconds,omitempty"`
	HealthState          HealthState               `json:"HealthState,omitempty"`
	IsSeedNode           *bool                     `json:"IsSeedNode,omitempty"`
	UpgradeDomain        *string                   `json:"UpgradeDomain,omitempty"`
	FaultDomain          *string                   `json:"FaultDomain,omitempty"`
	ID                   *NodeID                   `json:"Id,omitempty"`
	InstanceID           *string                   `json:"InstanceId,omitempty"`
	NodeDeactivationInfo *NodeNodeDeactivationInfo `json:"NodeDeactivationInfo,omitempty"`
}

// NodeID is the id
type NodeID struct {
	ID *string `json:"Id,omitempty"`
}

// NodeNodeDeactivationInfo is the info of the deactivation info
type NodeNodeDeactivationInfo struct {
	NodeDeactivationIntent NodeDeactivationIntent `json:"NodeDeactivationIntent,omitempty"`
	NodeDeactivationStatus NodeDeactivationStatus `json:"NodeDeactivationStatus,omitempty"`
}

// NodeHealth is the health of the node
type NodeHealth struct {
	autorest.Response     `json:"-"`
	HealthEvents          *[]HealthEvent        `json:"HealthEvents,omitempty"`
	AggregatedHealthState AggregatedHealthState `json:"AggregatedHealthState,omitempty"`
	Name                  *string               `json:"Name,omitempty"`
}

// NodeHealthEvaluation is the evaluation of the node health
type NodeHealthEvaluation struct {
	Description           *string                `json:"Description,omitempty"`
	AggregatedHealthState AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                  Kind                   `json:"Kind,omitempty"`
	NodeName              *string                `json:"NodeName,omitempty"`
	UnhealthyEvaluations  *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
}

// MarshalJSON is the custom marshaler for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) MarshalJSON() ([]byte, error) {
	nhe.Kind = KindNode
	type Alias NodeHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(nhe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return &nhe, true
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for NodeHealthEvaluation.
func (nhe NodeHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// NodeHealthReport is the report of the node health
type NodeHealthReport struct {
	SourceID                 *string     `json:"SourceId,omitempty"`
	Property                 *string     `json:"Property,omitempty"`
	HealthState              HealthState `json:"HealthState,omitempty"`
	Description              *string     `json:"Description,omitempty"`
	TimeToLiveInMilliSeconds *string     `json:"TimeToLiveInMilliSeconds,omitempty"`
	SequenceNumber           *string     `json:"SequenceNumber,omitempty"`
	RemoveWhenExpired        *bool       `json:"RemoveWhenExpired,omitempty"`
}

// NodeList is the list of the node
type NodeList struct {
	autorest.Response `json:"-"`
	ContinuationToken *string `json:"ContinuationToken,omitempty"`
	Items             *[]Node `json:"Items,omitempty"`
}

// NodeLoadInformation is the information of the node load
type NodeLoadInformation struct {
	autorest.Response         `json:"-"`
	NodeName                  *string                    `json:"NodeName,omitempty"`
	NodeLoadMetricInformation *NodeLoadMetricInformation `json:"NodeLoadMetricInformation,omitempty"`
}

// NodeLoadMetricInformation is the information of the node load metric
type NodeLoadMetricInformation struct {
	Name                          *string `json:"Name,omitempty"`
	NodeCapacity                  *string `json:"NodeCapacity,omitempty"`
	NodeLoad                      *string `json:"NodeLoad,omitempty"`
	NodeRemainingCapacity         *string `json:"NodeRemainingCapacity,omitempty"`
	IsCapacityViolation           *bool   `json:"IsCapacityViolation,omitempty"`
	NodeBufferedCapacity          *string `json:"NodeBufferedCapacity,omitempty"`
	NodeRemainingBufferedCapacity *string `json:"NodeRemainingBufferedCapacity,omitempty"`
}

// NodesHealthEvaluation is the evaluation of the nodes health
type NodesHealthEvaluation struct {
	Description              *string                `json:"Description,omitempty"`
	AggregatedHealthState    AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                     Kind                   `json:"Kind,omitempty"`
	UnhealthyEvaluations     *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
	TotalCount               *int32                 `json:"TotalCount,omitempty"`
	MaxPercentUnhealthyNodes *int32                 `json:"MaxPercentUnhealthyNodes,omitempty"`
}

// MarshalJSON is the custom marshaler for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) MarshalJSON() ([]byte, error) {
	nhe.Kind = KindNodes
	type Alias NodesHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(nhe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return &nhe, true
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for NodesHealthEvaluation.
func (nhe NodesHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// Partition is the partition
type Partition struct {
	autorest.Response         `json:"-"`
	ServiceKind               ServiceKind                         `json:"ServiceKind,omitempty"`
	PartitionInformation      *PartitionInformation               `json:"PartitionInformation,omitempty"`
	InstanceCount             *int32                              `json:"InstanceCount,omitempty"`
	TargetReplicaSetSize      *int32                              `json:"TargetReplicaSetSize,omitempty"`
	MinReplicaSetSize         *int32                              `json:"MinReplicaSetSize,omitempty"`
	HealthState               HealthState                         `json:"HealthState,omitempty"`
	PartitionStatus           PartitionStatus                     `json:"PartitionStatus,omitempty"`
	CurrentConfigurationEpoch *PartitionCurrentConfigurationEpoch `json:"CurrentConfigurationEpoch,omitempty"`
}

// PartitionCurrentConfigurationEpoch is the epoch of the current configuration
type PartitionCurrentConfigurationEpoch struct {
	ConfigurationVersion *string `json:"ConfigurationVersion,omitempty"`
	DataLossVersion      *string `json:"DataLossVersion,omitempty"`
}

// PartitionDescription is the description of the partition
type PartitionDescription struct {
	PartitionScheme PartitionScheme `json:"PartitionScheme,omitempty"`
	Count           *int32          `json:"Count,omitempty"`
	Names           *[]string       `json:"Names,omitempty"`
	LowKey          *string         `json:"LowKey,omitempty"`
	HighKey         *string         `json:"HighKey,omitempty"`
}

// PartitionHealth is the health of the partition
type PartitionHealth struct {
	autorest.Response     `json:"-"`
	HealthEvents          *[]HealthEvent                            `json:"HealthEvents,omitempty"`
	AggregatedHealthState AggregatedHealthState                     `json:"AggregatedHealthState,omitempty"`
	PartitionID           *string                                   `json:"PartitionId,omitempty"`
	ReplicaHealthStates   *[]PartitionHealthReplicaHealthStatesItem `json:"ReplicaHealthStates,omitempty"`
}

// PartitionHealthReplicaHealthStatesItem is the states of the replica health
type PartitionHealthReplicaHealthStatesItem struct {
	HealthEvents          *int32                `json:"HealthEvents,omitempty"`
	PartitionID           *string               `json:"PartitionId,omitempty"`
	ReplicaID             *string               `json:"ReplicaId,omitempty"`
	AggregatedHealthState AggregatedHealthState `json:"AggregatedHealthState,omitempty"`
}

// PartitionHealthEvaluation is the evaluation of the partition health
type PartitionHealthEvaluation struct {
	Description           *string                `json:"Description,omitempty"`
	AggregatedHealthState AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                  Kind                   `json:"Kind,omitempty"`
	PartitionID           *string                `json:"PartitionId,omitempty"`
	UnhealthyEvaluations  *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
}

// MarshalJSON is the custom marshaler for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) MarshalJSON() ([]byte, error) {
	phe.Kind = KindPartition
	type Alias PartitionHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(phe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return &phe, true
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for PartitionHealthEvaluation.
func (phe PartitionHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// PartitionHealthReport is the report of the partition health
type PartitionHealthReport struct {
	SourceID                 *string     `json:"SourceId,omitempty"`
	Property                 *string     `json:"Property,omitempty"`
	HealthState              HealthState `json:"HealthState,omitempty"`
	Description              *string     `json:"Description,omitempty"`
	TimeToLiveInMilliSeconds *string     `json:"TimeToLiveInMilliSeconds,omitempty"`
	SequenceNumber           *string     `json:"SequenceNumber,omitempty"`
	RemoveWhenExpired        *bool       `json:"RemoveWhenExpired,omitempty"`
}

// PartitionInformation is the information of the partition
type PartitionInformation struct {
	ServicePartitionKind ServicePartitionKind `json:"ServicePartitionKind,omitempty"`
	ID                   *string              `json:"Id,omitempty"`
	Name                 *[]string            `json:"Name,omitempty"`
	LowKey               *string              `json:"LowKey,omitempty"`
	HighKey              *string              `json:"HighKey,omitempty"`
}

// PartitionList is the list of the partition
type PartitionList struct {
	autorest.Response `json:"-"`
	ContinuationToken *string      `json:"ContinuationToken,omitempty"`
	Items             *[]Partition `json:"Items,omitempty"`
}

// PartitionLoadInformation is the information of the partition load
type PartitionLoadInformation struct {
	autorest.Response          `json:"-"`
	PartitionID                *string   `json:"PartitionId,omitempty"`
	PrimaryLoadMetricReports   *[]string `json:"PrimaryLoadMetricReports,omitempty"`
	SecondaryLoadMetricReports *[]string `json:"SecondaryLoadMetricReports,omitempty"`
}

// PartitionsHealthEvaluation is the evaluation of the partitions health
type PartitionsHealthEvaluation struct {
	Description                             *string                `json:"Description,omitempty"`
	AggregatedHealthState                   AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                                    Kind                   `json:"Kind,omitempty"`
	UnhealthyEvaluations                    *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
	TotalCount                              *int32                 `json:"TotalCount,omitempty"`
	MaxPercentUnhealthyPartitionsPerService *int32                 `json:"MaxPercentUnhealthyPartitionsPerService,omitempty"`
}

// MarshalJSON is the custom marshaler for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) MarshalJSON() ([]byte, error) {
	phe.Kind = KindPartitions
	type Alias PartitionsHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(phe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return &phe, true
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for PartitionsHealthEvaluation.
func (phe PartitionsHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// RegisterApplicationType is the type of the register application
type RegisterApplicationType struct {
	ApplicationTypeBuildPath *string `json:"ApplicationTypeBuildPath,omitempty"`
}

// RegisterClusterPackage is the package of the register cluster
type RegisterClusterPackage struct {
	CodeFilePath            *string `json:"CodeFilePath,omitempty"`
	ClusterManifestFilePath *string `json:"ClusterManifestFilePath,omitempty"`
}

// Replica is the replica
type Replica struct {
	autorest.Response            `json:"-"`
	ServiceKind                  ServiceKind   `json:"ServiceKind,omitempty"`
	InstanceID                   *string       `json:"InstanceId,omitempty"`
	ReplicaID                    *string       `json:"ReplicaId,omitempty"`
	ReplicaRole                  ReplicaRole   `json:"ReplicaRole,omitempty"`
	ReplicaStatus                ReplicaStatus `json:"ReplicaStatus,omitempty"`
	HealthState                  HealthState   `json:"HealthState,omitempty"`
	Address                      *string       `json:"Address,omitempty"`
	NodeName                     *string       `json:"NodeName,omitempty"`
	LastInBuildDurationInSeconds *string       `json:"LastInBuildDurationInSeconds,omitempty"`
}

// ReplicaHealth is the health of the replica
type ReplicaHealth struct {
	autorest.Response     `json:"-"`
	ServiceKind           ServiceKind           `json:"ServiceKind,omitempty"`
	PartitionID           *string               `json:"PartitionId,omitempty"`
	ReplicaID             *string               `json:"ReplicaId,omitempty"`
	HealthEvents          *[]HealthEvent        `json:"HealthEvents,omitempty"`
	AggregatedHealthState AggregatedHealthState `json:"AggregatedHealthState,omitempty"`
}

// ReplicaHealthEvaluation is the evaluation of the replica health
type ReplicaHealthEvaluation struct {
	Description           *string                `json:"Description,omitempty"`
	AggregatedHealthState AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                  Kind                   `json:"Kind,omitempty"`
	PartitionID           *string                `json:"PartitionId,omitempty"`
	ReplicaOrInstanceID   *string                `json:"ReplicaOrInstanceId,omitempty"`
	UnhealthyEvaluations  *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
}

// MarshalJSON is the custom marshaler for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) MarshalJSON() ([]byte, error) {
	rhe.Kind = KindReplica
	type Alias ReplicaHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(rhe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return &rhe, true
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for ReplicaHealthEvaluation.
func (rhe ReplicaHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// ReplicaHealthReport is the report of the replica health
type ReplicaHealthReport struct {
	SourceID                 *string     `json:"SourceId,omitempty"`
	Property                 *string     `json:"Property,omitempty"`
	HealthState              HealthState `json:"HealthState,omitempty"`
	Description              *string     `json:"Description,omitempty"`
	TimeToLiveInMilliSeconds *string     `json:"TimeToLiveInMilliSeconds,omitempty"`
	SequenceNumber           *string     `json:"SequenceNumber,omitempty"`
	RemoveWhenExpired        *bool       `json:"RemoveWhenExpired,omitempty"`
}

// ReplicaList is the list of the replica
type ReplicaList struct {
	autorest.Response `json:"-"`
	ContinuationToken *string    `json:"ContinuationToken,omitempty"`
	Items             *[]Replica `json:"Items,omitempty"`
}

// ReplicaLoadInformation is the information of the replica load
type ReplicaLoadInformation struct {
	autorest.Response   `json:"-"`
	PartitionID         *string   `json:"PartitionId,omitempty"`
	ReplicaOrInstanceID *string   `json:"ReplicaOrInstanceId,omitempty"`
	ReportedLoad        *[]string `json:"ReportedLoad,omitempty"`
}

// ReplicasHealthEvaluation is the evaluation of the replicas health
type ReplicasHealthEvaluation struct {
	Description                             *string                `json:"Description,omitempty"`
	AggregatedHealthState                   AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                                    Kind                   `json:"Kind,omitempty"`
	UnhealthyEvaluations                    *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
	TotalCount                              *int32                 `json:"TotalCount,omitempty"`
	MaxPercentUnhealthyPartitionsPerService *int32                 `json:"MaxPercentUnhealthyPartitionsPerService,omitempty"`
}

// MarshalJSON is the custom marshaler for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) MarshalJSON() ([]byte, error) {
	rhe.Kind = KindReplicas
	type Alias ReplicasHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(rhe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return &rhe, true
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for ReplicasHealthEvaluation.
func (rhe ReplicasHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// ResolvedServicePartition is the partition of the resolved service
type ResolvedServicePartition struct {
	autorest.Response    `json:"-"`
	Name                 *string                                  `json:"Name,omitempty"`
	PartitionInformation *PartitionInformation                    `json:"PartitionInformation,omitempty"`
	Endpoints            *[]ResolvedServicePartitionEndpointsItem `json:"Endpoints,omitempty"`
	Version              *string                                  `json:"Version,omitempty"`
}

// ResolvedServicePartitionEndpointsItem is the endpoints
type ResolvedServicePartitionEndpointsItem struct {
	Kind    *int32  `json:"Kind,omitempty"`
	Address *string `json:"Address,omitempty"`
}

// ResumeApplicationUpgrade is the upgrade of the resume application
type ResumeApplicationUpgrade struct {
	UpgradeDomainName *string `json:"UpgradeDomainName,omitempty"`
}

// ResumeClusterUpgrade is the upgrade of the resume cluster
type ResumeClusterUpgrade struct {
	UpgradeDomain *string `json:"UpgradeDomain,omitempty"`
}

// Service is the service
type Service struct {
	autorest.Response `json:"-"`
	ID                *string       `json:"Id,omitempty"`
	ServiceKind       ServiceKind   `json:"ServiceKind,omitempty"`
	Name              *string       `json:"Name,omitempty"`
	TypeName          *string       `json:"TypeName,omitempty"`
	ManifestVersion   *string       `json:"ManifestVersion,omitempty"`
	HasPersistedState *bool         `json:"HasPersistedState,omitempty"`
	HealthState       HealthState   `json:"HealthState,omitempty"`
	ServiceStatus     ServiceStatus `json:"ServiceStatus,omitempty"`
	IsServiceGroup    *bool         `json:"IsServiceGroup,omitempty"`
}

// ServiceCorrelationDescription is the description of the service correlation
type ServiceCorrelationDescription struct {
	ServiceName              *string                  `json:"ServiceName,omitempty"`
	ServiceCorrelationScheme ServiceCorrelationScheme `json:"ServiceCorrelationScheme,omitempty"`
}

// ServiceDescription is the description of the service
type ServiceDescription interface {
	AsStatelessServiceDescription() (*StatelessServiceDescription, bool)
	AsStatefulServiceDescription() (*StatefulServiceDescription, bool)
}

func unmarshalServiceDescription(body []byte) (ServiceDescription, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["ServiceKind"] {
	case string(ServiceKindStateless):
		var ssd StatelessServiceDescription
		err := json.Unmarshal(body, &ssd)
		return ssd, err
	case string(ServiceKindStateful):
		var ssd StatefulServiceDescription
		err := json.Unmarshal(body, &ssd)
		return ssd, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalServiceDescriptionArray(body []byte) ([]ServiceDescription, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	sdArray := make([]ServiceDescription, len(rawMessages))

	for index, rawMessage := range rawMessages {
		sd, err := unmarshalServiceDescription(*rawMessage)
		if err != nil {
			return nil, err
		}
		sdArray[index] = sd
	}
	return sdArray, nil
}

// ServiceDescriptionModel is
type ServiceDescriptionModel struct {
	autorest.Response `json:"-"`
	Value             ServiceDescription `json:"value,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for ServiceDescriptionModel struct.
func (sdm *ServiceDescriptionModel) UnmarshalJSON(body []byte) error {
	sd, err := unmarshalServiceDescription(body)
	if err != nil {
		return err
	}
	sdm.Value = sd

	return nil
}

// ServiceDescriptionTemplate is the template of the service description
type ServiceDescriptionTemplate struct {
	ServiceName     *string `json:"ServiceName,omitempty"`
	ServiceTypeName *string `json:"ServiceTypeName,omitempty"`
}

// ServiceGroupDescription is the description of the service group
type ServiceGroupDescription interface {
	AsStatelessServiceGroupDescription() (*StatelessServiceGroupDescription, bool)
	AsStatefulServiceGroupDescription() (*StatefulServiceGroupDescription, bool)
}

func unmarshalServiceGroupDescription(body []byte) (ServiceGroupDescription, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["ServiceKind"] {
	case string(ServiceKindStateless):
		var ssgd StatelessServiceGroupDescription
		err := json.Unmarshal(body, &ssgd)
		return ssgd, err
	case string(ServiceKindStateful):
		var ssgd StatefulServiceGroupDescription
		err := json.Unmarshal(body, &ssgd)
		return ssgd, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalServiceGroupDescriptionArray(body []byte) ([]ServiceGroupDescription, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	sgdArray := make([]ServiceGroupDescription, len(rawMessages))

	for index, rawMessage := range rawMessages {
		sgd, err := unmarshalServiceGroupDescription(*rawMessage)
		if err != nil {
			return nil, err
		}
		sgdArray[index] = sgd
	}
	return sgdArray, nil
}

// ServiceGroupDescriptionModel is
type ServiceGroupDescriptionModel struct {
	autorest.Response `json:"-"`
	Value             ServiceGroupDescription `json:"value,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for ServiceGroupDescriptionModel struct.
func (sgdm *ServiceGroupDescriptionModel) UnmarshalJSON(body []byte) error {
	sgd, err := unmarshalServiceGroupDescription(body)
	if err != nil {
		return err
	}
	sgdm.Value = sgd

	return nil
}

// ServiceGroupMember is the member of the service group
type ServiceGroupMember struct {
	autorest.Response             `json:"-"`
	Name                          *string                          `json:"Name,omitempty"`
	ServiceGroupMemberDescription *[]ServiceGroupMemberDescription `json:"ServiceGroupMemberDescription,omitempty"`
}

// ServiceGroupMemberDescription is the description of the service group member
type ServiceGroupMemberDescription struct {
	ServiceName     *string     `json:"ServiceName,omitempty"`
	ServiceTypeName *string     `json:"ServiceTypeName,omitempty"`
	ServiceKind     ServiceKind `json:"ServiceKind,omitempty"`
}

// ServiceHealth is the health of the service
type ServiceHealth struct {
	autorest.Response     `json:"-"`
	HealthEvents          *[]HealthEvent                            `json:"HealthEvents,omitempty"`
	AggregatedHealthState AggregatedHealthState                     `json:"AggregatedHealthState,omitempty"`
	Name                  *string                                   `json:"Name,omitempty"`
	PartitionHealthStates *[]ServiceHealthPartitionHealthStatesItem `json:"PartitionHealthStates,omitempty"`
}

// ServiceHealthPartitionHealthStatesItem is the states of the partition health
type ServiceHealthPartitionHealthStatesItem struct {
	PartitionID           *string               `json:"PartitionId,omitempty"`
	AggregatedHealthState AggregatedHealthState `json:"AggregatedHealthState,omitempty"`
}

// ServiceHealthEvaluation is the evaluation of the service health
type ServiceHealthEvaluation struct {
	Description           *string                `json:"Description,omitempty"`
	AggregatedHealthState AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                  Kind                   `json:"Kind,omitempty"`
	ServiceName           *string                `json:"ServiceName,omitempty"`
	UnhealthyEvaluations  *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
}

// MarshalJSON is the custom marshaler for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) MarshalJSON() ([]byte, error) {
	she.Kind = KindService
	type Alias ServiceHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(she),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return &she, true
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for ServiceHealthEvaluation.
func (she ServiceHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// ServiceHealthReport is the report of the service health
type ServiceHealthReport struct {
	SourceID                 *string     `json:"SourceId,omitempty"`
	Property                 *string     `json:"Property,omitempty"`
	HealthState              HealthState `json:"HealthState,omitempty"`
	Description              *string     `json:"Description,omitempty"`
	TimeToLiveInMilliSeconds *string     `json:"TimeToLiveInMilliSeconds,omitempty"`
	SequenceNumber           *string     `json:"SequenceNumber,omitempty"`
	RemoveWhenExpired        *bool       `json:"RemoveWhenExpired,omitempty"`
}

// ServiceList is the list of the service
type ServiceList struct {
	autorest.Response `json:"-"`
	ContinuationToken *string    `json:"ContinuationToken,omitempty"`
	Items             *[]Service `json:"Items,omitempty"`
}

// ServiceLoadMetricDescription is the description of the service load metric
type ServiceLoadMetricDescription struct {
	Name                    *string                 `json:"Name,omitempty"`
	ServiceLoadMetricWeight ServiceLoadMetricWeight `json:"ServiceLoadMetricWeight,omitempty"`
	PrimaryDefaultLoad      *int32                  `json:"PrimaryDefaultLoad,omitempty"`
	SecondaryDefaultLoad    *int32                  `json:"SecondaryDefaultLoad,omitempty"`
}

// ServiceManifest is the manifest of the service
type ServiceManifest struct {
	autorest.Response `json:"-"`
	Manifest          *string `json:"Manifest,omitempty"`
}

// ServicePlacementPolicyDescription is the description of the service placement policy
type ServicePlacementPolicyDescription struct {
	Type *string `json:"Type,omitempty"`
}

// ServicesHealthEvaluation is the evaluation of the services health
type ServicesHealthEvaluation struct {
	Description                 *string                `json:"Description,omitempty"`
	AggregatedHealthState       AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                        Kind                   `json:"Kind,omitempty"`
	ServiceTypeName             *string                `json:"ServiceTypeName,omitempty"`
	UnhealthyEvaluations        *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
	TotalCount                  *int32                 `json:"TotalCount,omitempty"`
	MaxPercentUnhealthyServices *int32                 `json:"MaxPercentUnhealthyServices,omitempty"`
}

// MarshalJSON is the custom marshaler for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) MarshalJSON() ([]byte, error) {
	she.Kind = KindServices
	type Alias ServicesHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(she),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return &she, true
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for ServicesHealthEvaluation.
func (she ServicesHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// ServiceType is the type of the service
type ServiceType struct {
	ServiceTypeDescription *ServiceTypeServiceTypeDescription `json:"ServiceTypeDescription,omitempty"`
	ServiceManifestVersion *string                            `json:"ServiceManifestVersion,omitempty"`
	ServiceManifestName    *string                            `json:"ServiceManifestName,omitempty"`
	IsServiceGroup         *bool                              `json:"IsServiceGroup,omitempty"`
}

// ServiceTypeServiceTypeDescription is the description of the service type
type ServiceTypeServiceTypeDescription struct {
	IsStateful           *bool   `json:"IsStateful,omitempty"`
	ServiceTypeName      *string `json:"ServiceTypeName,omitempty"`
	PlacementConstraints *string `json:"PlacementConstraints,omitempty"`
	HasPersistedState    *bool   `json:"HasPersistedState,omitempty"`
}

// StartApplicationUpgrade is the description of the start application upgrade
type StartApplicationUpgrade struct {
	Name                                   *string                                  `json:"Name,omitempty"`
	TargetApplicationTypeVersion           *string                                  `json:"TargetApplicationTypeVersion,omitempty"`
	Parameters                             *[]StartApplicationUpgradeParametersItem `json:"Parameters,omitempty"`
	UpgradeKind                            UpgradeKind                              `json:"UpgradeKind,omitempty"`
	RollingUpgradeMode                     RollingUpgradeMode                       `json:"RollingUpgradeMode,omitempty"`
	UpgradeReplicaSetCheckTimeoutInSeconds *int32                                   `json:"UpgradeReplicaSetCheckTimeoutInSeconds,omitempty"`
	ForceRestart                           *bool                                    `json:"ForceRestart,omitempty"`
	MonitoringPolicy                       *MonitoringPolicy                        `json:"MonitoringPolicy,omitempty"`
	ApplicationHealthPolicy                *ApplicationHealthPolicy                 `json:"ApplicationHealthPolicy,omitempty"`
}

// StartApplicationUpgradeParametersItem is the parameters
type StartApplicationUpgradeParametersItem struct {
	Key   *string `json:"Key,omitempty"`
	Value *string `json:"Value,omitempty"`
}

// StartClusterUpgrade is the description of the start cluster upgrade
type StartClusterUpgrade struct {
	ConfigVersion                          *string                     `json:"ConfigVersion,omitempty"`
	CodeVersion                            *string                     `json:"CodeVersion,omitempty"`
	UpgradeKind                            *string                     `json:"UpgradeKind,omitempty"`
	RollingUpgradeMode                     RollingUpgradeMode          `json:"RollingUpgradeMode,omitempty"`
	UpgradeReplicaSetCheckTimeoutInSeconds *int32                      `json:"UpgradeReplicaSetCheckTimeoutInSeconds,omitempty"`
	ForceRestart                           *bool                       `json:"ForceRestart,omitempty"`
	EnableDeltaHealthEvaluation            *bool                       `json:"EnableDeltaHealthEvaluation,omitempty"`
	MonitoringPolicy                       *map[string]interface{}     `json:"MonitoringPolicy,omitempty"`
	ClusterUpgradeHealthPolicy             *ClusterUpgradeHealthPolicy `json:"ClusterUpgradeHealthPolicy,omitempty"`
	ApplicationHealthPolicyMap             *ApplicationHealthPolicyMap `json:"ApplicationHealthPolicyMap,omitempty"`
}

// StatefulCreateServiceDescription is the description of the stateful create service
type StatefulCreateServiceDescription struct {
	ApplicationName                   *string                        `json:"ApplicationName,omitempty"`
	ServiceName                       *string                        `json:"ServiceName,omitempty"`
	ServiceTypeName                   *string                        `json:"ServiceTypeName,omitempty"`
	PartitionDescription              *PartitionDescription          `json:"PartitionDescription,omitempty"`
	PlacementConstraints              *string                        `json:"PlacementConstraints,omitempty"`
	CorrelationScheme                 *ServiceCorrelationDescription `json:"CorrelationScheme,omitempty"`
	ServiceLoadMetrics                *ServiceCorrelationDescription `json:"ServiceLoadMetrics,omitempty"`
	ServicePlacementPolicies          *ServiceCorrelationDescription `json:"ServicePlacementPolicies,omitempty"`
	Flags                             *int32                         `json:"Flags,omitempty"`
	ServiceKind                       ServiceKind                    `json:"ServiceKind,omitempty"`
	TargetReplicaSetSize              *int32                         `json:"TargetReplicaSetSize,omitempty"`
	MinReplicaSetSize                 *int32                         `json:"MinReplicaSetSize,omitempty"`
	HasPersistedState                 *bool                          `json:"HasPersistedState,omitempty"`
	ReplicaRestartWaitDurationSeconds *int32                         `json:"ReplicaRestartWaitDurationSeconds,omitempty"`
	QuorumLossWaitDurationSeconds     *int32                         `json:"QuorumLossWaitDurationSeconds,omitempty"`
	StandByReplicaKeepDurationSeconds *int32                         `json:"StandByReplicaKeepDurationSeconds,omitempty"`
	DefaultMoveCost                   DefaultMoveCost                `json:"DefaultMoveCost,omitempty"`
	IsDefaultMoveCostSpecified        *bool                          `json:"IsDefaultMoveCostSpecified,omitempty"`
}

// MarshalJSON is the custom marshaler for StatefulCreateServiceDescription.
func (scsd StatefulCreateServiceDescription) MarshalJSON() ([]byte, error) {
	scsd.ServiceKind = ServiceKindStateful
	type Alias StatefulCreateServiceDescription
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(scsd),
	})
}

// AsStatelessCreateServiceDescription is the CreateServiceDescription implementation for StatefulCreateServiceDescription.
func (scsd StatefulCreateServiceDescription) AsStatelessCreateServiceDescription() (*StatelessCreateServiceDescription, bool) {
	return nil, false
}

// AsStatefulCreateServiceDescription is the CreateServiceDescription implementation for StatefulCreateServiceDescription.
func (scsd StatefulCreateServiceDescription) AsStatefulCreateServiceDescription() (*StatefulCreateServiceDescription, bool) {
	return &scsd, true
}

// StatefulCreateServiceGroupDescription is the description of the stateful create service group
type StatefulCreateServiceGroupDescription struct {
	ApplicationName                   *string                          `json:"ApplicationName,omitempty"`
	ServiceName                       *string                          `json:"ServiceName,omitempty"`
	ServiceTypeName                   *string                          `json:"ServiceTypeName,omitempty"`
	PartitionDescription              *PartitionDescription            `json:"PartitionDescription,omitempty"`
	PlacementConstraints              *string                          `json:"PlacementConstraints,omitempty"`
	CorrelationScheme                 *ServiceCorrelationDescription   `json:"CorrelationScheme,omitempty"`
	ServiceLoadMetrics                *ServiceCorrelationDescription   `json:"ServiceLoadMetrics,omitempty"`
	ServicePlacementPolicies          *ServiceCorrelationDescription   `json:"ServicePlacementPolicies,omitempty"`
	Flags                             *int32                           `json:"Flags,omitempty"`
	ServiceGroupMemberDescription     *[]ServiceGroupMemberDescription `json:"ServiceGroupMemberDescription,omitempty"`
	ServiceKind                       ServiceKind                      `json:"ServiceKind,omitempty"`
	TargetReplicaSetSize              *int32                           `json:"TargetReplicaSetSize,omitempty"`
	MinReplicaSetSize                 *int32                           `json:"MinReplicaSetSize,omitempty"`
	HasPersistedState                 *bool                            `json:"HasPersistedState,omitempty"`
	ReplicaRestartWaitDurationSeconds *int32                           `json:"ReplicaRestartWaitDurationSeconds,omitempty"`
	QuorumLossWaitDurationSeconds     *int32                           `json:"QuorumLossWaitDurationSeconds,omitempty"`
	StandByReplicaKeepDurationSeconds *int32                           `json:"StandByReplicaKeepDurationSeconds,omitempty"`
	DefaultMoveCost                   DefaultMoveCost                  `json:"DefaultMoveCost,omitempty"`
	IsDefaultMoveCostSpecified        *bool                            `json:"IsDefaultMoveCostSpecified,omitempty"`
}

// MarshalJSON is the custom marshaler for StatefulCreateServiceGroupDescription.
func (scsgd StatefulCreateServiceGroupDescription) MarshalJSON() ([]byte, error) {
	scsgd.ServiceKind = ServiceKindStateful
	type Alias StatefulCreateServiceGroupDescription
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(scsgd),
	})
}

// AsStatelessCreateServiceGroupDescription is the CreateServiceGroupDescription implementation for StatefulCreateServiceGroupDescription.
func (scsgd StatefulCreateServiceGroupDescription) AsStatelessCreateServiceGroupDescription() (*StatelessCreateServiceGroupDescription, bool) {
	return nil, false
}

// AsStatefulCreateServiceGroupDescription is the CreateServiceGroupDescription implementation for StatefulCreateServiceGroupDescription.
func (scsgd StatefulCreateServiceGroupDescription) AsStatefulCreateServiceGroupDescription() (*StatefulCreateServiceGroupDescription, bool) {
	return &scsgd, true
}

// StatefulServiceDescription is the description of the stateful service
type StatefulServiceDescription struct {
	ApplicationName                   *string                        `json:"ApplicationName,omitempty"`
	ServiceName                       *string                        `json:"ServiceName,omitempty"`
	ServiceTypeName                   *string                        `json:"ServiceTypeName,omitempty"`
	PartitionDescription              *PartitionDescription          `json:"PartitionDescription,omitempty"`
	PlacementConstraints              *string                        `json:"PlacementConstraints,omitempty"`
	CorrelationScheme                 *ServiceCorrelationDescription `json:"CorrelationScheme,omitempty"`
	ServiceLoadMetrics                *ServiceCorrelationDescription `json:"ServiceLoadMetrics,omitempty"`
	ServicePlacementPolicies          *ServiceCorrelationDescription `json:"ServicePlacementPolicies,omitempty"`
	Flags                             *int32                         `json:"Flags,omitempty"`
	ServiceKind                       ServiceKind                    `json:"ServiceKind,omitempty"`
	TargetReplicaSetSize              *int32                         `json:"TargetReplicaSetSize,omitempty"`
	MinReplicaSetSize                 *int32                         `json:"MinReplicaSetSize,omitempty"`
	HasPersistedState                 *bool                          `json:"HasPersistedState,omitempty"`
	ReplicaRestartWaitDurationSeconds *int32                         `json:"ReplicaRestartWaitDurationSeconds,omitempty"`
	QuorumLossWaitDurationSeconds     *int32                         `json:"QuorumLossWaitDurationSeconds,omitempty"`
	StandByReplicaKeepDurationSeconds *int32                         `json:"StandByReplicaKeepDurationSeconds,omitempty"`
	DefaultMoveCost                   DefaultMoveCost                `json:"DefaultMoveCost,omitempty"`
	IsDefaultMoveCostSpecified        *bool                          `json:"IsDefaultMoveCostSpecified,omitempty"`
}

// MarshalJSON is the custom marshaler for StatefulServiceDescription.
func (ssd StatefulServiceDescription) MarshalJSON() ([]byte, error) {
	ssd.ServiceKind = ServiceKindStateful
	type Alias StatefulServiceDescription
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ssd),
	})
}

// AsStatelessServiceDescription is the ServiceDescription implementation for StatefulServiceDescription.
func (ssd StatefulServiceDescription) AsStatelessServiceDescription() (*StatelessServiceDescription, bool) {
	return nil, false
}

// AsStatefulServiceDescription is the ServiceDescription implementation for StatefulServiceDescription.
func (ssd StatefulServiceDescription) AsStatefulServiceDescription() (*StatefulServiceDescription, bool) {
	return &ssd, true
}

// StatefulServiceGroupDescription is the description of the stateful service group
type StatefulServiceGroupDescription struct {
	ApplicationName                   *string                          `json:"ApplicationName,omitempty"`
	ServiceName                       *string                          `json:"ServiceName,omitempty"`
	ServiceTypeName                   *string                          `json:"ServiceTypeName,omitempty"`
	PartitionDescription              *PartitionDescription            `json:"PartitionDescription,omitempty"`
	PlacementConstraints              *string                          `json:"PlacementConstraints,omitempty"`
	CorrelationScheme                 *ServiceCorrelationDescription   `json:"CorrelationScheme,omitempty"`
	ServiceLoadMetrics                *ServiceCorrelationDescription   `json:"ServiceLoadMetrics,omitempty"`
	ServicePlacementPolicies          *ServiceCorrelationDescription   `json:"ServicePlacementPolicies,omitempty"`
	Flags                             *int32                           `json:"Flags,omitempty"`
	ServiceGroupMemberDescription     *[]ServiceGroupMemberDescription `json:"ServiceGroupMemberDescription,omitempty"`
	ServiceKind                       ServiceKind                      `json:"ServiceKind,omitempty"`
	TargetReplicaSetSize              *int32                           `json:"TargetReplicaSetSize,omitempty"`
	MinReplicaSetSize                 *int32                           `json:"MinReplicaSetSize,omitempty"`
	HasPersistedState                 *bool                            `json:"HasPersistedState,omitempty"`
	ReplicaRestartWaitDurationSeconds *int32                           `json:"ReplicaRestartWaitDurationSeconds,omitempty"`
	QuorumLossWaitDurationSeconds     *int32                           `json:"QuorumLossWaitDurationSeconds,omitempty"`
	StandByReplicaKeepDurationSeconds *int32                           `json:"StandByReplicaKeepDurationSeconds,omitempty"`
	DefaultMoveCost                   DefaultMoveCost                  `json:"DefaultMoveCost,omitempty"`
	IsDefaultMoveCostSpecified        *bool                            `json:"IsDefaultMoveCostSpecified,omitempty"`
}

// MarshalJSON is the custom marshaler for StatefulServiceGroupDescription.
func (ssgd StatefulServiceGroupDescription) MarshalJSON() ([]byte, error) {
	ssgd.ServiceKind = ServiceKindStateful
	type Alias StatefulServiceGroupDescription
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ssgd),
	})
}

// AsStatelessServiceGroupDescription is the ServiceGroupDescription implementation for StatefulServiceGroupDescription.
func (ssgd StatefulServiceGroupDescription) AsStatelessServiceGroupDescription() (*StatelessServiceGroupDescription, bool) {
	return nil, false
}

// AsStatefulServiceGroupDescription is the ServiceGroupDescription implementation for StatefulServiceGroupDescription.
func (ssgd StatefulServiceGroupDescription) AsStatefulServiceGroupDescription() (*StatefulServiceGroupDescription, bool) {
	return &ssgd, true
}

// StatefulUpdateServiceDescription is the description of the stateful update service
type StatefulUpdateServiceDescription struct {
	Flags                                    *int32      `json:"Flags,omitempty"`
	ServiceKind                              ServiceKind `json:"ServiceKind,omitempty"`
	TargetReplicaSetSize                     *int32      `json:"TargetReplicaSetSize,omitempty"`
	MinReplicaSetSize                        *int32      `json:"MinReplicaSetSize,omitempty"`
	ReplicaRestartWaitDurationInMilliseconds *int32      `json:"ReplicaRestartWaitDurationInMilliseconds,omitempty"`
	QuorumLossWaitDurationInMilliseconds     *int32      `json:"QuorumLossWaitDurationInMilliseconds,omitempty"`
	StandByReplicaKeepDurationInMilliseconds *int32      `json:"StandByReplicaKeepDurationInMilliseconds,omitempty"`
}

// MarshalJSON is the custom marshaler for StatefulUpdateServiceDescription.
func (susd StatefulUpdateServiceDescription) MarshalJSON() ([]byte, error) {
	susd.ServiceKind = ServiceKindStateful
	type Alias StatefulUpdateServiceDescription
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(susd),
	})
}

// AsStatelessUpdateServiceDescription is the UpdateServiceDescription implementation for StatefulUpdateServiceDescription.
func (susd StatefulUpdateServiceDescription) AsStatelessUpdateServiceDescription() (*StatelessUpdateServiceDescription, bool) {
	return nil, false
}

// AsStatefulUpdateServiceDescription is the UpdateServiceDescription implementation for StatefulUpdateServiceDescription.
func (susd StatefulUpdateServiceDescription) AsStatefulUpdateServiceDescription() (*StatefulUpdateServiceDescription, bool) {
	return &susd, true
}

// StatefulUpdateServiceGroupDescription is the description of the stateful update service group
type StatefulUpdateServiceGroupDescription struct {
	Flags                                    *int32      `json:"Flags,omitempty"`
	ServiceKind                              ServiceKind `json:"ServiceKind,omitempty"`
	TargetReplicaSetSize                     *int32      `json:"TargetReplicaSetSize,omitempty"`
	MinReplicaSetSize                        *int32      `json:"MinReplicaSetSize,omitempty"`
	ReplicaRestartWaitDurationInMilliseconds *int32      `json:"ReplicaRestartWaitDurationInMilliseconds,omitempty"`
	QuorumLossWaitDurationInMilliseconds     *int32      `json:"QuorumLossWaitDurationInMilliseconds,omitempty"`
	StandByReplicaKeepDurationInMilliseconds *int32      `json:"StandByReplicaKeepDurationInMilliseconds,omitempty"`
}

// MarshalJSON is the custom marshaler for StatefulUpdateServiceGroupDescription.
func (susgd StatefulUpdateServiceGroupDescription) MarshalJSON() ([]byte, error) {
	susgd.ServiceKind = ServiceKindStateful
	type Alias StatefulUpdateServiceGroupDescription
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(susgd),
	})
}

// AsStatelessUpdateServiceGroupDescription is the UpdateServiceGroupDescription implementation for StatefulUpdateServiceGroupDescription.
func (susgd StatefulUpdateServiceGroupDescription) AsStatelessUpdateServiceGroupDescription() (*StatelessUpdateServiceGroupDescription, bool) {
	return nil, false
}

// AsStatefulUpdateServiceGroupDescription is the UpdateServiceGroupDescription implementation for StatefulUpdateServiceGroupDescription.
func (susgd StatefulUpdateServiceGroupDescription) AsStatefulUpdateServiceGroupDescription() (*StatefulUpdateServiceGroupDescription, bool) {
	return &susgd, true
}

// StatelessCreateServiceDescription is the description of the stateless create service
type StatelessCreateServiceDescription struct {
	ApplicationName          *string                        `json:"ApplicationName,omitempty"`
	ServiceName              *string                        `json:"ServiceName,omitempty"`
	ServiceTypeName          *string                        `json:"ServiceTypeName,omitempty"`
	PartitionDescription     *PartitionDescription          `json:"PartitionDescription,omitempty"`
	PlacementConstraints     *string                        `json:"PlacementConstraints,omitempty"`
	CorrelationScheme        *ServiceCorrelationDescription `json:"CorrelationScheme,omitempty"`
	ServiceLoadMetrics       *ServiceCorrelationDescription `json:"ServiceLoadMetrics,omitempty"`
	ServicePlacementPolicies *ServiceCorrelationDescription `json:"ServicePlacementPolicies,omitempty"`
	Flags                    *int32                         `json:"Flags,omitempty"`
	ServiceKind              ServiceKind                    `json:"ServiceKind,omitempty"`
	InstanceCount            *int32                         `json:"InstanceCount,omitempty"`
}

// MarshalJSON is the custom marshaler for StatelessCreateServiceDescription.
func (scsd StatelessCreateServiceDescription) MarshalJSON() ([]byte, error) {
	scsd.ServiceKind = ServiceKindStateless
	type Alias StatelessCreateServiceDescription
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(scsd),
	})
}

// AsStatelessCreateServiceDescription is the CreateServiceDescription implementation for StatelessCreateServiceDescription.
func (scsd StatelessCreateServiceDescription) AsStatelessCreateServiceDescription() (*StatelessCreateServiceDescription, bool) {
	return &scsd, true
}

// AsStatefulCreateServiceDescription is the CreateServiceDescription implementation for StatelessCreateServiceDescription.
func (scsd StatelessCreateServiceDescription) AsStatefulCreateServiceDescription() (*StatefulCreateServiceDescription, bool) {
	return nil, false
}

// StatelessCreateServiceGroupDescription is the description of the stateless create service group
type StatelessCreateServiceGroupDescription struct {
	ApplicationName               *string                          `json:"ApplicationName,omitempty"`
	ServiceName                   *string                          `json:"ServiceName,omitempty"`
	ServiceTypeName               *string                          `json:"ServiceTypeName,omitempty"`
	PartitionDescription          *PartitionDescription            `json:"PartitionDescription,omitempty"`
	PlacementConstraints          *string                          `json:"PlacementConstraints,omitempty"`
	CorrelationScheme             *ServiceCorrelationDescription   `json:"CorrelationScheme,omitempty"`
	ServiceLoadMetrics            *ServiceCorrelationDescription   `json:"ServiceLoadMetrics,omitempty"`
	ServicePlacementPolicies      *ServiceCorrelationDescription   `json:"ServicePlacementPolicies,omitempty"`
	Flags                         *int32                           `json:"Flags,omitempty"`
	ServiceGroupMemberDescription *[]ServiceGroupMemberDescription `json:"ServiceGroupMemberDescription,omitempty"`
	ServiceKind                   ServiceKind                      `json:"ServiceKind,omitempty"`
	InstanceCount                 *int32                           `json:"InstanceCount,omitempty"`
}

// MarshalJSON is the custom marshaler for StatelessCreateServiceGroupDescription.
func (scsgd StatelessCreateServiceGroupDescription) MarshalJSON() ([]byte, error) {
	scsgd.ServiceKind = ServiceKindStateless
	type Alias StatelessCreateServiceGroupDescription
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(scsgd),
	})
}

// AsStatelessCreateServiceGroupDescription is the CreateServiceGroupDescription implementation for StatelessCreateServiceGroupDescription.
func (scsgd StatelessCreateServiceGroupDescription) AsStatelessCreateServiceGroupDescription() (*StatelessCreateServiceGroupDescription, bool) {
	return &scsgd, true
}

// AsStatefulCreateServiceGroupDescription is the CreateServiceGroupDescription implementation for StatelessCreateServiceGroupDescription.
func (scsgd StatelessCreateServiceGroupDescription) AsStatefulCreateServiceGroupDescription() (*StatefulCreateServiceGroupDescription, bool) {
	return nil, false
}

// StatelessServiceDescription is the description of the stateless service
type StatelessServiceDescription struct {
	ApplicationName          *string                        `json:"ApplicationName,omitempty"`
	ServiceName              *string                        `json:"ServiceName,omitempty"`
	ServiceTypeName          *string                        `json:"ServiceTypeName,omitempty"`
	PartitionDescription     *PartitionDescription          `json:"PartitionDescription,omitempty"`
	PlacementConstraints     *string                        `json:"PlacementConstraints,omitempty"`
	CorrelationScheme        *ServiceCorrelationDescription `json:"CorrelationScheme,omitempty"`
	ServiceLoadMetrics       *ServiceCorrelationDescription `json:"ServiceLoadMetrics,omitempty"`
	ServicePlacementPolicies *ServiceCorrelationDescription `json:"ServicePlacementPolicies,omitempty"`
	Flags                    *int32                         `json:"Flags,omitempty"`
	ServiceKind              ServiceKind                    `json:"ServiceKind,omitempty"`
	InstanceCount            *int32                         `json:"InstanceCount,omitempty"`
}

// MarshalJSON is the custom marshaler for StatelessServiceDescription.
func (ssd StatelessServiceDescription) MarshalJSON() ([]byte, error) {
	ssd.ServiceKind = ServiceKindStateless
	type Alias StatelessServiceDescription
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ssd),
	})
}

// AsStatelessServiceDescription is the ServiceDescription implementation for StatelessServiceDescription.
func (ssd StatelessServiceDescription) AsStatelessServiceDescription() (*StatelessServiceDescription, bool) {
	return &ssd, true
}

// AsStatefulServiceDescription is the ServiceDescription implementation for StatelessServiceDescription.
func (ssd StatelessServiceDescription) AsStatefulServiceDescription() (*StatefulServiceDescription, bool) {
	return nil, false
}

// StatelessServiceGroupDescription is the description of the stateless service group
type StatelessServiceGroupDescription struct {
	ApplicationName               *string                          `json:"ApplicationName,omitempty"`
	ServiceName                   *string                          `json:"ServiceName,omitempty"`
	ServiceTypeName               *string                          `json:"ServiceTypeName,omitempty"`
	PartitionDescription          *PartitionDescription            `json:"PartitionDescription,omitempty"`
	PlacementConstraints          *string                          `json:"PlacementConstraints,omitempty"`
	CorrelationScheme             *ServiceCorrelationDescription   `json:"CorrelationScheme,omitempty"`
	ServiceLoadMetrics            *ServiceCorrelationDescription   `json:"ServiceLoadMetrics,omitempty"`
	ServicePlacementPolicies      *ServiceCorrelationDescription   `json:"ServicePlacementPolicies,omitempty"`
	Flags                         *int32                           `json:"Flags,omitempty"`
	ServiceGroupMemberDescription *[]ServiceGroupMemberDescription `json:"ServiceGroupMemberDescription,omitempty"`
	ServiceKind                   ServiceKind                      `json:"ServiceKind,omitempty"`
	InstanceCount                 *int32                           `json:"InstanceCount,omitempty"`
}

// MarshalJSON is the custom marshaler for StatelessServiceGroupDescription.
func (ssgd StatelessServiceGroupDescription) MarshalJSON() ([]byte, error) {
	ssgd.ServiceKind = ServiceKindStateless
	type Alias StatelessServiceGroupDescription
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ssgd),
	})
}

// AsStatelessServiceGroupDescription is the ServiceGroupDescription implementation for StatelessServiceGroupDescription.
func (ssgd StatelessServiceGroupDescription) AsStatelessServiceGroupDescription() (*StatelessServiceGroupDescription, bool) {
	return &ssgd, true
}

// AsStatefulServiceGroupDescription is the ServiceGroupDescription implementation for StatelessServiceGroupDescription.
func (ssgd StatelessServiceGroupDescription) AsStatefulServiceGroupDescription() (*StatefulServiceGroupDescription, bool) {
	return nil, false
}

// StatelessUpdateServiceDescription is the description of the stateless update service
type StatelessUpdateServiceDescription struct {
	Flags         *int32      `json:"Flags,omitempty"`
	ServiceKind   ServiceKind `json:"ServiceKind,omitempty"`
	InstanceCount *int32      `json:"InstanceCount,omitempty"`
}

// MarshalJSON is the custom marshaler for StatelessUpdateServiceDescription.
func (susd StatelessUpdateServiceDescription) MarshalJSON() ([]byte, error) {
	susd.ServiceKind = ServiceKindStateless
	type Alias StatelessUpdateServiceDescription
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(susd),
	})
}

// AsStatelessUpdateServiceDescription is the UpdateServiceDescription implementation for StatelessUpdateServiceDescription.
func (susd StatelessUpdateServiceDescription) AsStatelessUpdateServiceDescription() (*StatelessUpdateServiceDescription, bool) {
	return &susd, true
}

// AsStatefulUpdateServiceDescription is the UpdateServiceDescription implementation for StatelessUpdateServiceDescription.
func (susd StatelessUpdateServiceDescription) AsStatefulUpdateServiceDescription() (*StatefulUpdateServiceDescription, bool) {
	return nil, false
}

// StatelessUpdateServiceGroupDescription is the description of the stateless update service group
type StatelessUpdateServiceGroupDescription struct {
	Flags         *int32      `json:"Flags,omitempty"`
	ServiceKind   ServiceKind `json:"ServiceKind,omitempty"`
	InstanceCount *int32      `json:"InstanceCount,omitempty"`
}

// MarshalJSON is the custom marshaler for StatelessUpdateServiceGroupDescription.
func (susgd StatelessUpdateServiceGroupDescription) MarshalJSON() ([]byte, error) {
	susgd.ServiceKind = ServiceKindStateless
	type Alias StatelessUpdateServiceGroupDescription
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(susgd),
	})
}

// AsStatelessUpdateServiceGroupDescription is the UpdateServiceGroupDescription implementation for StatelessUpdateServiceGroupDescription.
func (susgd StatelessUpdateServiceGroupDescription) AsStatelessUpdateServiceGroupDescription() (*StatelessUpdateServiceGroupDescription, bool) {
	return &susgd, true
}

// AsStatefulUpdateServiceGroupDescription is the UpdateServiceGroupDescription implementation for StatelessUpdateServiceGroupDescription.
func (susgd StatelessUpdateServiceGroupDescription) AsStatefulUpdateServiceGroupDescription() (*StatefulUpdateServiceGroupDescription, bool) {
	return nil, false
}

// String is
type String struct {
	autorest.Response `json:"-"`
	Value             *string `json:"value,omitempty"`
}

// SystemApplicationHealthEvaluation is the evaluation of the system application health
type SystemApplicationHealthEvaluation struct {
	Description           *string                `json:"Description,omitempty"`
	AggregatedHealthState AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                  Kind                   `json:"Kind,omitempty"`
	UnhealthyEvaluations  *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
}

// MarshalJSON is the custom marshaler for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) MarshalJSON() ([]byte, error) {
	sahe.Kind = KindSystemApplication
	type Alias SystemApplicationHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(sahe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return &sahe, true
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for SystemApplicationHealthEvaluation.
func (sahe SystemApplicationHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// UnhealthyEvaluation is the evaluation of the unhealthy
type UnhealthyEvaluation struct {
	HealthEvaluation HealthEvaluation `json:"HealthEvaluation,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for UnhealthyEvaluation struct.
func (ue *UnhealthyEvaluation) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["HealthEvaluation"]
	if v != nil {
		healthEvaluation, err := unmarshalHealthEvaluation(*m["HealthEvaluation"])
		if err != nil {
			return err
		}
		ue.HealthEvaluation = healthEvaluation
	}

	return nil
}

// UnregisterApplicationType is the type of the unregister application
type UnregisterApplicationType struct {
	ApplicationTypeVersion *string `json:"ApplicationTypeVersion,omitempty"`
}

// UnregisterClusterPackage is the package of the unregister cluster
type UnregisterClusterPackage struct {
	CodeVersion   *string `json:"CodeVersion,omitempty"`
	ConfigVersion *string `json:"ConfigVersion,omitempty"`
}

// UpdateApplicationUpgrade is the description of the update application upgrade
type UpdateApplicationUpgrade struct {
	Name                    *string                  `json:"Name,omitempty"`
	UpgradeKind             *string                  `json:"UpgradeKind,omitempty"`
	UpdateDescription       *UpdateDescription       `json:"UpdateDescription,omitempty"`
	ApplicationHealthPolicy *ApplicationHealthPolicy `json:"ApplicationHealthPolicy,omitempty"`
}

// UpdateClusterUpgrade is the description of the update cluster upgrade
type UpdateClusterUpgrade struct {
	UpgradeKind                  *string              `json:"UpgradeKind,omitempty"`
	UpdateDescription            *UpdateDescription   `json:"UpdateDescription,omitempty"`
	ClusterHealthPolicy          *ClusterHealthPolicy `json:"ClusterHealthPolicy,omitempty"`
	EnableDeltaHealthEvaluations *bool                `json:"EnableDeltaHealthEvaluations,omitempty"`
}

// UpdateDescription is the description of the update
type UpdateDescription struct {
	RollingUpgradeMode                      RollingUpgradeMode `json:"RollingUpgradeMode,omitempty"`
	ForceRestart                            *bool              `json:"ForceRestart,omitempty"`
	FailureAction                           *string            `json:"FailureAction,omitempty"`
	UpgradeReplicaSetCheckTimeoutInSeconds  *int32             `json:"UpgradeReplicaSetCheckTimeoutInSeconds,omitempty"`
	HealthCheckWaitDurationInMilliseconds   *string            `json:"HealthCheckWaitDurationInMilliseconds,omitempty"`
	HealthCheckStableDurationInMilliseconds *string            `json:"HealthCheckStableDurationInMilliseconds,omitempty"`
	HealthCheckRetryTimeoutInMilliseconds   *string            `json:"HealthCheckRetryTimeoutInMilliseconds,omitempty"`
	UpgradeTimeoutInMilliseconds            *string            `json:"UpgradeTimeoutInMilliseconds,omitempty"`
	UpgradeDomainTimeoutInMilliseconds      *string            `json:"UpgradeDomainTimeoutInMilliseconds,omitempty"`
}

// UpdateServiceDescription is the description of the update service
type UpdateServiceDescription interface {
	AsStatelessUpdateServiceDescription() (*StatelessUpdateServiceDescription, bool)
	AsStatefulUpdateServiceDescription() (*StatefulUpdateServiceDescription, bool)
}

func unmarshalUpdateServiceDescription(body []byte) (UpdateServiceDescription, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["ServiceKind"] {
	case string(ServiceKindStateless):
		var susd StatelessUpdateServiceDescription
		err := json.Unmarshal(body, &susd)
		return susd, err
	case string(ServiceKindStateful):
		var susd StatefulUpdateServiceDescription
		err := json.Unmarshal(body, &susd)
		return susd, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalUpdateServiceDescriptionArray(body []byte) ([]UpdateServiceDescription, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	usdArray := make([]UpdateServiceDescription, len(rawMessages))

	for index, rawMessage := range rawMessages {
		usd, err := unmarshalUpdateServiceDescription(*rawMessage)
		if err != nil {
			return nil, err
		}
		usdArray[index] = usd
	}
	return usdArray, nil
}

// UpdateServiceGroupDescription is the description of the update service group
type UpdateServiceGroupDescription interface {
	AsStatelessUpdateServiceGroupDescription() (*StatelessUpdateServiceGroupDescription, bool)
	AsStatefulUpdateServiceGroupDescription() (*StatefulUpdateServiceGroupDescription, bool)
}

func unmarshalUpdateServiceGroupDescription(body []byte) (UpdateServiceGroupDescription, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["ServiceKind"] {
	case string(ServiceKindStateless):
		var susgd StatelessUpdateServiceGroupDescription
		err := json.Unmarshal(body, &susgd)
		return susgd, err
	case string(ServiceKindStateful):
		var susgd StatefulUpdateServiceGroupDescription
		err := json.Unmarshal(body, &susgd)
		return susgd, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalUpdateServiceGroupDescriptionArray(body []byte) ([]UpdateServiceGroupDescription, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	usgdArray := make([]UpdateServiceGroupDescription, len(rawMessages))

	for index, rawMessage := range rawMessages {
		usgd, err := unmarshalUpdateServiceGroupDescription(*rawMessage)
		if err != nil {
			return nil, err
		}
		usgdArray[index] = usgd
	}
	return usgdArray, nil
}

// UpgradeDomainDeltaNodesCheckHealthEvaluation is the evaluation of the upgrade domain delta nodes check health
type UpgradeDomainDeltaNodesCheckHealthEvaluation struct {
	Description                                *string                `json:"Description,omitempty"`
	AggregatedHealthState                      AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                                       Kind                   `json:"Kind,omitempty"`
	UpgradeDomainName                          *string                `json:"UpgradeDomainName,omitempty"`
	UnhealthyEvaluations                       *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
	BaselineErrorCount                         *int32                 `json:"BaselineErrorCount,omitempty"`
	BaselineTotalCount                         *int32                 `json:"BaselineTotalCount,omitempty"`
	TotalCount                                 *int32                 `json:"TotalCount,omitempty"`
	MaxPercentUpgradeDomainDeltaUnhealthyNodes *int32                 `json:"MaxPercentUpgradeDomainDeltaUnhealthyNodes,omitempty"`
}

// MarshalJSON is the custom marshaler for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) MarshalJSON() ([]byte, error) {
	uddnche.Kind = KindUpgradeDomainDeltaNodesCheck
	type Alias UpgradeDomainDeltaNodesCheckHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(uddnche),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return &uddnche, true
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeltaNodesCheckHealthEvaluation.
func (uddnche UpgradeDomainDeltaNodesCheckHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// UpgradeDomainDeployedApplicationsHealthEvaluation is the evaluation of the upgrade domain deployed applications
// health
type UpgradeDomainDeployedApplicationsHealthEvaluation struct {
	Description                             *string                `json:"Description,omitempty"`
	AggregatedHealthState                   AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                                    Kind                   `json:"Kind,omitempty"`
	UpgradeDomainName                       *string                `json:"UpgradeDomainName,omitempty"`
	UnhealthyEvaluations                    *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
	TotalCount                              *int32                 `json:"TotalCount,omitempty"`
	MaxPercentUnhealthyDeployedApplications *int32                 `json:"MaxPercentUnhealthyDeployedApplications,omitempty"`
}

// MarshalJSON is the custom marshaler for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) MarshalJSON() ([]byte, error) {
	uddahe.Kind = KindUpgradeDomainDeployedApplications
	type Alias UpgradeDomainDeployedApplicationsHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(uddahe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return &uddahe, true
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainDeployedApplicationsHealthEvaluation.
func (uddahe UpgradeDomainDeployedApplicationsHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}

// UpgradeDomainNodesHealthEvaluation is the evaluation of the upgrade domain nodes health
type UpgradeDomainNodesHealthEvaluation struct {
	Description              *string                `json:"Description,omitempty"`
	AggregatedHealthState    AggregatedHealthState  `json:"AggregatedHealthState,omitempty"`
	Kind                     Kind                   `json:"Kind,omitempty"`
	UpgradeDomainName        *string                `json:"UpgradeDomainName,omitempty"`
	UnhealthyEvaluations     *[]UnhealthyEvaluation `json:"UnhealthyEvaluations,omitempty"`
	TotalCount               *int32                 `json:"TotalCount,omitempty"`
	MaxPercentUnhealthyNodes *int32                 `json:"MaxPercentUnhealthyNodes,omitempty"`
}

// MarshalJSON is the custom marshaler for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) MarshalJSON() ([]byte, error) {
	udnhe.Kind = KindUpgradeDomainNodes
	type Alias UpgradeDomainNodesHealthEvaluation
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(udnhe),
	})
}

// AsEventHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsEventHealthEvaluation() (*EventHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionsHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsPartitionsHealthEvaluation() (*PartitionsHealthEvaluation, bool) {
	return nil, false
}

// AsReplicasHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsReplicasHealthEvaluation() (*ReplicasHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackagesHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsDeployedServicePackagesHealthEvaluation() (*DeployedServicePackagesHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsDeployedApplicationsHealthEvaluation() (*DeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsServicesHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsServicesHealthEvaluation() (*ServicesHealthEvaluation, bool) {
	return nil, false
}

// AsNodesHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsNodesHealthEvaluation() (*NodesHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationsHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsApplicationsHealthEvaluation() (*ApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainNodesHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsUpgradeDomainNodesHealthEvaluation() (*UpgradeDomainNodesHealthEvaluation, bool) {
	return &udnhe, true
}

// AsUpgradeDomainDeployedApplicationsHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsUpgradeDomainDeployedApplicationsHealthEvaluation() (*UpgradeDomainDeployedApplicationsHealthEvaluation, bool) {
	return nil, false
}

// AsSystemApplicationHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsSystemApplicationHealthEvaluation() (*SystemApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsPartitionHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsPartitionHealthEvaluation() (*PartitionHealthEvaluation, bool) {
	return nil, false
}

// AsReplicaHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsReplicaHealthEvaluation() (*ReplicaHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedServicePackageHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsDeployedServicePackageHealthEvaluation() (*DeployedServicePackageHealthEvaluation, bool) {
	return nil, false
}

// AsDeployedApplicationHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsDeployedApplicationHealthEvaluation() (*DeployedApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsServiceHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsServiceHealthEvaluation() (*ServiceHealthEvaluation, bool) {
	return nil, false
}

// AsNodeHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsNodeHealthEvaluation() (*NodeHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsApplicationHealthEvaluation() (*ApplicationHealthEvaluation, bool) {
	return nil, false
}

// AsDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsDeltaNodesCheckHealthEvaluation() (*DeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsUpgradeDomainDeltaNodesCheckHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsUpgradeDomainDeltaNodesCheckHealthEvaluation() (*UpgradeDomainDeltaNodesCheckHealthEvaluation, bool) {
	return nil, false
}

// AsApplicationTypeHealthEvaluation is the HealthEvaluation implementation for UpgradeDomainNodesHealthEvaluation.
func (udnhe UpgradeDomainNodesHealthEvaluation) AsApplicationTypeHealthEvaluation() (*ApplicationTypeHealthEvaluation, bool) {
	return nil, false
}
