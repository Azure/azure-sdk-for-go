package web

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// AppServicePlanRestrictions enumerates the values for app service plan restrictions.
type AppServicePlanRestrictions string

const (
	// AppServicePlanRestrictionsBasic ...
	AppServicePlanRestrictionsBasic AppServicePlanRestrictions = "Basic"
	// AppServicePlanRestrictionsFree ...
	AppServicePlanRestrictionsFree AppServicePlanRestrictions = "Free"
	// AppServicePlanRestrictionsNone ...
	AppServicePlanRestrictionsNone AppServicePlanRestrictions = "None"
	// AppServicePlanRestrictionsPremium ...
	AppServicePlanRestrictionsPremium AppServicePlanRestrictions = "Premium"
	// AppServicePlanRestrictionsShared ...
	AppServicePlanRestrictionsShared AppServicePlanRestrictions = "Shared"
	// AppServicePlanRestrictionsStandard ...
	AppServicePlanRestrictionsStandard AppServicePlanRestrictions = "Standard"
)

// PossibleAppServicePlanRestrictionsValues returns an array of possible values for the AppServicePlanRestrictions const type.
func PossibleAppServicePlanRestrictionsValues() []AppServicePlanRestrictions {
	return []AppServicePlanRestrictions{AppServicePlanRestrictionsBasic, AppServicePlanRestrictionsFree, AppServicePlanRestrictionsNone, AppServicePlanRestrictionsPremium, AppServicePlanRestrictionsShared, AppServicePlanRestrictionsStandard}
}

// AutoHealActionType enumerates the values for auto heal action type.
type AutoHealActionType string

const (
	// AutoHealActionTypeCustomAction ...
	AutoHealActionTypeCustomAction AutoHealActionType = "CustomAction"
	// AutoHealActionTypeLogEvent ...
	AutoHealActionTypeLogEvent AutoHealActionType = "LogEvent"
	// AutoHealActionTypeRecycle ...
	AutoHealActionTypeRecycle AutoHealActionType = "Recycle"
)

// PossibleAutoHealActionTypeValues returns an array of possible values for the AutoHealActionType const type.
func PossibleAutoHealActionTypeValues() []AutoHealActionType {
	return []AutoHealActionType{AutoHealActionTypeCustomAction, AutoHealActionTypeLogEvent, AutoHealActionTypeRecycle}
}

// AzureResourceType enumerates the values for azure resource type.
type AzureResourceType string

const (
	// AzureResourceTypeTrafficManager ...
	AzureResourceTypeTrafficManager AzureResourceType = "TrafficManager"
	// AzureResourceTypeWebsite ...
	AzureResourceTypeWebsite AzureResourceType = "Website"
)

// PossibleAzureResourceTypeValues returns an array of possible values for the AzureResourceType const type.
func PossibleAzureResourceTypeValues() []AzureResourceType {
	return []AzureResourceType{AzureResourceTypeTrafficManager, AzureResourceTypeWebsite}
}

// AzureStorageState enumerates the values for azure storage state.
type AzureStorageState string

const (
	// AzureStorageStateInvalidCredentials ...
	AzureStorageStateInvalidCredentials AzureStorageState = "InvalidCredentials"
	// AzureStorageStateInvalidShare ...
	AzureStorageStateInvalidShare AzureStorageState = "InvalidShare"
	// AzureStorageStateNotValidated ...
	AzureStorageStateNotValidated AzureStorageState = "NotValidated"
	// AzureStorageStateOk ...
	AzureStorageStateOk AzureStorageState = "Ok"
)

// PossibleAzureStorageStateValues returns an array of possible values for the AzureStorageState const type.
func PossibleAzureStorageStateValues() []AzureStorageState {
	return []AzureStorageState{AzureStorageStateInvalidCredentials, AzureStorageStateInvalidShare, AzureStorageStateNotValidated, AzureStorageStateOk}
}

// AzureStorageType enumerates the values for azure storage type.
type AzureStorageType string

const (
	// AzureStorageTypeAzureBlob ...
	AzureStorageTypeAzureBlob AzureStorageType = "AzureBlob"
	// AzureStorageTypeAzureFiles ...
	AzureStorageTypeAzureFiles AzureStorageType = "AzureFiles"
)

// PossibleAzureStorageTypeValues returns an array of possible values for the AzureStorageType const type.
func PossibleAzureStorageTypeValues() []AzureStorageType {
	return []AzureStorageType{AzureStorageTypeAzureBlob, AzureStorageTypeAzureFiles}
}

// BackupItemStatus enumerates the values for backup item status.
type BackupItemStatus string

const (
	// BackupItemStatusCreated ...
	BackupItemStatusCreated BackupItemStatus = "Created"
	// BackupItemStatusDeleted ...
	BackupItemStatusDeleted BackupItemStatus = "Deleted"
	// BackupItemStatusDeleteFailed ...
	BackupItemStatusDeleteFailed BackupItemStatus = "DeleteFailed"
	// BackupItemStatusDeleteInProgress ...
	BackupItemStatusDeleteInProgress BackupItemStatus = "DeleteInProgress"
	// BackupItemStatusFailed ...
	BackupItemStatusFailed BackupItemStatus = "Failed"
	// BackupItemStatusInProgress ...
	BackupItemStatusInProgress BackupItemStatus = "InProgress"
	// BackupItemStatusPartiallySucceeded ...
	BackupItemStatusPartiallySucceeded BackupItemStatus = "PartiallySucceeded"
	// BackupItemStatusSkipped ...
	BackupItemStatusSkipped BackupItemStatus = "Skipped"
	// BackupItemStatusSucceeded ...
	BackupItemStatusSucceeded BackupItemStatus = "Succeeded"
	// BackupItemStatusTimedOut ...
	BackupItemStatusTimedOut BackupItemStatus = "TimedOut"
)

// PossibleBackupItemStatusValues returns an array of possible values for the BackupItemStatus const type.
func PossibleBackupItemStatusValues() []BackupItemStatus {
	return []BackupItemStatus{BackupItemStatusCreated, BackupItemStatusDeleted, BackupItemStatusDeleteFailed, BackupItemStatusDeleteInProgress, BackupItemStatusFailed, BackupItemStatusInProgress, BackupItemStatusPartiallySucceeded, BackupItemStatusSkipped, BackupItemStatusSucceeded, BackupItemStatusTimedOut}
}

// BackupRestoreOperationType enumerates the values for backup restore operation type.
type BackupRestoreOperationType string

const (
	// BackupRestoreOperationTypeClone ...
	BackupRestoreOperationTypeClone BackupRestoreOperationType = "Clone"
	// BackupRestoreOperationTypeCloudFS ...
	BackupRestoreOperationTypeCloudFS BackupRestoreOperationType = "CloudFS"
	// BackupRestoreOperationTypeDefault ...
	BackupRestoreOperationTypeDefault BackupRestoreOperationType = "Default"
	// BackupRestoreOperationTypeRelocation ...
	BackupRestoreOperationTypeRelocation BackupRestoreOperationType = "Relocation"
	// BackupRestoreOperationTypeSnapshot ...
	BackupRestoreOperationTypeSnapshot BackupRestoreOperationType = "Snapshot"
)

// PossibleBackupRestoreOperationTypeValues returns an array of possible values for the BackupRestoreOperationType const type.
func PossibleBackupRestoreOperationTypeValues() []BackupRestoreOperationType {
	return []BackupRestoreOperationType{BackupRestoreOperationTypeClone, BackupRestoreOperationTypeCloudFS, BackupRestoreOperationTypeDefault, BackupRestoreOperationTypeRelocation, BackupRestoreOperationTypeSnapshot}
}

// BuildStatus enumerates the values for build status.
type BuildStatus string

const (
	// BuildStatusDeleting ...
	BuildStatusDeleting BuildStatus = "Deleting"
	// BuildStatusDeploying ...
	BuildStatusDeploying BuildStatus = "Deploying"
	// BuildStatusDetached ...
	BuildStatusDetached BuildStatus = "Detached"
	// BuildStatusFailed ...
	BuildStatusFailed BuildStatus = "Failed"
	// BuildStatusReady ...
	BuildStatusReady BuildStatus = "Ready"
	// BuildStatusUploading ...
	BuildStatusUploading BuildStatus = "Uploading"
	// BuildStatusWaitingForDeployment ...
	BuildStatusWaitingForDeployment BuildStatus = "WaitingForDeployment"
)

// PossibleBuildStatusValues returns an array of possible values for the BuildStatus const type.
func PossibleBuildStatusValues() []BuildStatus {
	return []BuildStatus{BuildStatusDeleting, BuildStatusDeploying, BuildStatusDetached, BuildStatusFailed, BuildStatusReady, BuildStatusUploading, BuildStatusWaitingForDeployment}
}

// BuiltInAuthenticationProvider enumerates the values for built in authentication provider.
type BuiltInAuthenticationProvider string

const (
	// BuiltInAuthenticationProviderAzureActiveDirectory ...
	BuiltInAuthenticationProviderAzureActiveDirectory BuiltInAuthenticationProvider = "AzureActiveDirectory"
	// BuiltInAuthenticationProviderFacebook ...
	BuiltInAuthenticationProviderFacebook BuiltInAuthenticationProvider = "Facebook"
	// BuiltInAuthenticationProviderGithub ...
	BuiltInAuthenticationProviderGithub BuiltInAuthenticationProvider = "Github"
	// BuiltInAuthenticationProviderGoogle ...
	BuiltInAuthenticationProviderGoogle BuiltInAuthenticationProvider = "Google"
	// BuiltInAuthenticationProviderMicrosoftAccount ...
	BuiltInAuthenticationProviderMicrosoftAccount BuiltInAuthenticationProvider = "MicrosoftAccount"
	// BuiltInAuthenticationProviderTwitter ...
	BuiltInAuthenticationProviderTwitter BuiltInAuthenticationProvider = "Twitter"
)

// PossibleBuiltInAuthenticationProviderValues returns an array of possible values for the BuiltInAuthenticationProvider const type.
func PossibleBuiltInAuthenticationProviderValues() []BuiltInAuthenticationProvider {
	return []BuiltInAuthenticationProvider{BuiltInAuthenticationProviderAzureActiveDirectory, BuiltInAuthenticationProviderFacebook, BuiltInAuthenticationProviderGithub, BuiltInAuthenticationProviderGoogle, BuiltInAuthenticationProviderMicrosoftAccount, BuiltInAuthenticationProviderTwitter}
}

// CertificateOrderActionType enumerates the values for certificate order action type.
type CertificateOrderActionType string

const (
	// CertificateOrderActionTypeCertificateExpirationWarning ...
	CertificateOrderActionTypeCertificateExpirationWarning CertificateOrderActionType = "CertificateExpirationWarning"
	// CertificateOrderActionTypeCertificateExpired ...
	CertificateOrderActionTypeCertificateExpired CertificateOrderActionType = "CertificateExpired"
	// CertificateOrderActionTypeCertificateIssued ...
	CertificateOrderActionTypeCertificateIssued CertificateOrderActionType = "CertificateIssued"
	// CertificateOrderActionTypeCertificateOrderCanceled ...
	CertificateOrderActionTypeCertificateOrderCanceled CertificateOrderActionType = "CertificateOrderCanceled"
	// CertificateOrderActionTypeCertificateOrderCreated ...
	CertificateOrderActionTypeCertificateOrderCreated CertificateOrderActionType = "CertificateOrderCreated"
	// CertificateOrderActionTypeCertificateRevoked ...
	CertificateOrderActionTypeCertificateRevoked CertificateOrderActionType = "CertificateRevoked"
	// CertificateOrderActionTypeDomainValidationComplete ...
	CertificateOrderActionTypeDomainValidationComplete CertificateOrderActionType = "DomainValidationComplete"
	// CertificateOrderActionTypeFraudCleared ...
	CertificateOrderActionTypeFraudCleared CertificateOrderActionType = "FraudCleared"
	// CertificateOrderActionTypeFraudDetected ...
	CertificateOrderActionTypeFraudDetected CertificateOrderActionType = "FraudDetected"
	// CertificateOrderActionTypeFraudDocumentationRequired ...
	CertificateOrderActionTypeFraudDocumentationRequired CertificateOrderActionType = "FraudDocumentationRequired"
	// CertificateOrderActionTypeOrgNameChange ...
	CertificateOrderActionTypeOrgNameChange CertificateOrderActionType = "OrgNameChange"
	// CertificateOrderActionTypeOrgValidationComplete ...
	CertificateOrderActionTypeOrgValidationComplete CertificateOrderActionType = "OrgValidationComplete"
	// CertificateOrderActionTypeSanDrop ...
	CertificateOrderActionTypeSanDrop CertificateOrderActionType = "SanDrop"
	// CertificateOrderActionTypeUnknown ...
	CertificateOrderActionTypeUnknown CertificateOrderActionType = "Unknown"
)

// PossibleCertificateOrderActionTypeValues returns an array of possible values for the CertificateOrderActionType const type.
func PossibleCertificateOrderActionTypeValues() []CertificateOrderActionType {
	return []CertificateOrderActionType{CertificateOrderActionTypeCertificateExpirationWarning, CertificateOrderActionTypeCertificateExpired, CertificateOrderActionTypeCertificateIssued, CertificateOrderActionTypeCertificateOrderCanceled, CertificateOrderActionTypeCertificateOrderCreated, CertificateOrderActionTypeCertificateRevoked, CertificateOrderActionTypeDomainValidationComplete, CertificateOrderActionTypeFraudCleared, CertificateOrderActionTypeFraudDetected, CertificateOrderActionTypeFraudDocumentationRequired, CertificateOrderActionTypeOrgNameChange, CertificateOrderActionTypeOrgValidationComplete, CertificateOrderActionTypeSanDrop, CertificateOrderActionTypeUnknown}
}

// CertificateOrderStatus enumerates the values for certificate order status.
type CertificateOrderStatus string

const (
	// CertificateOrderStatusCanceled ...
	CertificateOrderStatusCanceled CertificateOrderStatus = "Canceled"
	// CertificateOrderStatusDenied ...
	CertificateOrderStatusDenied CertificateOrderStatus = "Denied"
	// CertificateOrderStatusExpired ...
	CertificateOrderStatusExpired CertificateOrderStatus = "Expired"
	// CertificateOrderStatusIssued ...
	CertificateOrderStatusIssued CertificateOrderStatus = "Issued"
	// CertificateOrderStatusNotSubmitted ...
	CertificateOrderStatusNotSubmitted CertificateOrderStatus = "NotSubmitted"
	// CertificateOrderStatusPendingissuance ...
	CertificateOrderStatusPendingissuance CertificateOrderStatus = "Pendingissuance"
	// CertificateOrderStatusPendingRekey ...
	CertificateOrderStatusPendingRekey CertificateOrderStatus = "PendingRekey"
	// CertificateOrderStatusPendingrevocation ...
	CertificateOrderStatusPendingrevocation CertificateOrderStatus = "Pendingrevocation"
	// CertificateOrderStatusRevoked ...
	CertificateOrderStatusRevoked CertificateOrderStatus = "Revoked"
	// CertificateOrderStatusUnused ...
	CertificateOrderStatusUnused CertificateOrderStatus = "Unused"
)

// PossibleCertificateOrderStatusValues returns an array of possible values for the CertificateOrderStatus const type.
func PossibleCertificateOrderStatusValues() []CertificateOrderStatus {
	return []CertificateOrderStatus{CertificateOrderStatusCanceled, CertificateOrderStatusDenied, CertificateOrderStatusExpired, CertificateOrderStatusIssued, CertificateOrderStatusNotSubmitted, CertificateOrderStatusPendingissuance, CertificateOrderStatusPendingRekey, CertificateOrderStatusPendingrevocation, CertificateOrderStatusRevoked, CertificateOrderStatusUnused}
}

// CertificateProductType enumerates the values for certificate product type.
type CertificateProductType string

const (
	// CertificateProductTypeStandardDomainValidatedSsl ...
	CertificateProductTypeStandardDomainValidatedSsl CertificateProductType = "StandardDomainValidatedSsl"
	// CertificateProductTypeStandardDomainValidatedWildCardSsl ...
	CertificateProductTypeStandardDomainValidatedWildCardSsl CertificateProductType = "StandardDomainValidatedWildCardSsl"
)

// PossibleCertificateProductTypeValues returns an array of possible values for the CertificateProductType const type.
func PossibleCertificateProductTypeValues() []CertificateProductType {
	return []CertificateProductType{CertificateProductTypeStandardDomainValidatedSsl, CertificateProductTypeStandardDomainValidatedWildCardSsl}
}

// Channels enumerates the values for channels.
type Channels string

const (
	// ChannelsAll ...
	ChannelsAll Channels = "All"
	// ChannelsAPI ...
	ChannelsAPI Channels = "Api"
	// ChannelsEmail ...
	ChannelsEmail Channels = "Email"
	// ChannelsNotification ...
	ChannelsNotification Channels = "Notification"
	// ChannelsWebhook ...
	ChannelsWebhook Channels = "Webhook"
)

// PossibleChannelsValues returns an array of possible values for the Channels const type.
func PossibleChannelsValues() []Channels {
	return []Channels{ChannelsAll, ChannelsAPI, ChannelsEmail, ChannelsNotification, ChannelsWebhook}
}

// CheckNameResourceTypes enumerates the values for check name resource types.
type CheckNameResourceTypes string

const (
	// CheckNameResourceTypesHostingEnvironment ...
	CheckNameResourceTypesHostingEnvironment CheckNameResourceTypes = "HostingEnvironment"
	// CheckNameResourceTypesMicrosoftWebhostingEnvironments ...
	CheckNameResourceTypesMicrosoftWebhostingEnvironments CheckNameResourceTypes = "Microsoft.Web/hostingEnvironments"
	// CheckNameResourceTypesMicrosoftWebpublishingUsers ...
	CheckNameResourceTypesMicrosoftWebpublishingUsers CheckNameResourceTypes = "Microsoft.Web/publishingUsers"
	// CheckNameResourceTypesMicrosoftWebsites ...
	CheckNameResourceTypesMicrosoftWebsites CheckNameResourceTypes = "Microsoft.Web/sites"
	// CheckNameResourceTypesMicrosoftWebsitesslots ...
	CheckNameResourceTypesMicrosoftWebsitesslots CheckNameResourceTypes = "Microsoft.Web/sites/slots"
	// CheckNameResourceTypesPublishingUser ...
	CheckNameResourceTypesPublishingUser CheckNameResourceTypes = "PublishingUser"
	// CheckNameResourceTypesSite ...
	CheckNameResourceTypesSite CheckNameResourceTypes = "Site"
	// CheckNameResourceTypesSlot ...
	CheckNameResourceTypesSlot CheckNameResourceTypes = "Slot"
)

// PossibleCheckNameResourceTypesValues returns an array of possible values for the CheckNameResourceTypes const type.
func PossibleCheckNameResourceTypesValues() []CheckNameResourceTypes {
	return []CheckNameResourceTypes{CheckNameResourceTypesHostingEnvironment, CheckNameResourceTypesMicrosoftWebhostingEnvironments, CheckNameResourceTypesMicrosoftWebpublishingUsers, CheckNameResourceTypesMicrosoftWebsites, CheckNameResourceTypesMicrosoftWebsitesslots, CheckNameResourceTypesPublishingUser, CheckNameResourceTypesSite, CheckNameResourceTypesSlot}
}

// ClientCertMode enumerates the values for client cert mode.
type ClientCertMode string

const (
	// ClientCertModeOptional ...
	ClientCertModeOptional ClientCertMode = "Optional"
	// ClientCertModeOptionalInteractiveUser ...
	ClientCertModeOptionalInteractiveUser ClientCertMode = "OptionalInteractiveUser"
	// ClientCertModeRequired ...
	ClientCertModeRequired ClientCertMode = "Required"
)

// PossibleClientCertModeValues returns an array of possible values for the ClientCertMode const type.
func PossibleClientCertModeValues() []ClientCertMode {
	return []ClientCertMode{ClientCertModeOptional, ClientCertModeOptionalInteractiveUser, ClientCertModeRequired}
}

// ClientCredentialMethod enumerates the values for client credential method.
type ClientCredentialMethod string

const (
	// ClientCredentialMethodClientSecretPost ...
	ClientCredentialMethodClientSecretPost ClientCredentialMethod = "ClientSecretPost"
)

// PossibleClientCredentialMethodValues returns an array of possible values for the ClientCredentialMethod const type.
func PossibleClientCredentialMethodValues() []ClientCredentialMethod {
	return []ClientCredentialMethod{ClientCredentialMethodClientSecretPost}
}

// CloneAbilityResult enumerates the values for clone ability result.
type CloneAbilityResult string

const (
	// CloneAbilityResultCloneable ...
	CloneAbilityResultCloneable CloneAbilityResult = "Cloneable"
	// CloneAbilityResultNotCloneable ...
	CloneAbilityResultNotCloneable CloneAbilityResult = "NotCloneable"
	// CloneAbilityResultPartiallyCloneable ...
	CloneAbilityResultPartiallyCloneable CloneAbilityResult = "PartiallyCloneable"
)

// PossibleCloneAbilityResultValues returns an array of possible values for the CloneAbilityResult const type.
func PossibleCloneAbilityResultValues() []CloneAbilityResult {
	return []CloneAbilityResult{CloneAbilityResultCloneable, CloneAbilityResultNotCloneable, CloneAbilityResultPartiallyCloneable}
}

// ComputeModeOptions enumerates the values for compute mode options.
type ComputeModeOptions string

const (
	// ComputeModeOptionsDedicated ...
	ComputeModeOptionsDedicated ComputeModeOptions = "Dedicated"
	// ComputeModeOptionsDynamic ...
	ComputeModeOptionsDynamic ComputeModeOptions = "Dynamic"
	// ComputeModeOptionsShared ...
	ComputeModeOptionsShared ComputeModeOptions = "Shared"
)

// PossibleComputeModeOptionsValues returns an array of possible values for the ComputeModeOptions const type.
func PossibleComputeModeOptionsValues() []ComputeModeOptions {
	return []ComputeModeOptions{ComputeModeOptionsDedicated, ComputeModeOptionsDynamic, ComputeModeOptionsShared}
}

// ConfigReferenceSource enumerates the values for config reference source.
type ConfigReferenceSource string

const (
	// ConfigReferenceSourceKeyVault ...
	ConfigReferenceSourceKeyVault ConfigReferenceSource = "KeyVault"
)

// PossibleConfigReferenceSourceValues returns an array of possible values for the ConfigReferenceSource const type.
func PossibleConfigReferenceSourceValues() []ConfigReferenceSource {
	return []ConfigReferenceSource{ConfigReferenceSourceKeyVault}
}

// ConnectionStringType enumerates the values for connection string type.
type ConnectionStringType string

const (
	// ConnectionStringTypeAPIHub ...
	ConnectionStringTypeAPIHub ConnectionStringType = "ApiHub"
	// ConnectionStringTypeCustom ...
	ConnectionStringTypeCustom ConnectionStringType = "Custom"
	// ConnectionStringTypeDocDb ...
	ConnectionStringTypeDocDb ConnectionStringType = "DocDb"
	// ConnectionStringTypeEventHub ...
	ConnectionStringTypeEventHub ConnectionStringType = "EventHub"
	// ConnectionStringTypeMySQL ...
	ConnectionStringTypeMySQL ConnectionStringType = "MySql"
	// ConnectionStringTypeNotificationHub ...
	ConnectionStringTypeNotificationHub ConnectionStringType = "NotificationHub"
	// ConnectionStringTypePostgreSQL ...
	ConnectionStringTypePostgreSQL ConnectionStringType = "PostgreSQL"
	// ConnectionStringTypeRedisCache ...
	ConnectionStringTypeRedisCache ConnectionStringType = "RedisCache"
	// ConnectionStringTypeServiceBus ...
	ConnectionStringTypeServiceBus ConnectionStringType = "ServiceBus"
	// ConnectionStringTypeSQLAzure ...
	ConnectionStringTypeSQLAzure ConnectionStringType = "SQLAzure"
	// ConnectionStringTypeSQLServer ...
	ConnectionStringTypeSQLServer ConnectionStringType = "SQLServer"
)

// PossibleConnectionStringTypeValues returns an array of possible values for the ConnectionStringType const type.
func PossibleConnectionStringTypeValues() []ConnectionStringType {
	return []ConnectionStringType{ConnectionStringTypeAPIHub, ConnectionStringTypeCustom, ConnectionStringTypeDocDb, ConnectionStringTypeEventHub, ConnectionStringTypeMySQL, ConnectionStringTypeNotificationHub, ConnectionStringTypePostgreSQL, ConnectionStringTypeRedisCache, ConnectionStringTypeServiceBus, ConnectionStringTypeSQLAzure, ConnectionStringTypeSQLServer}
}

// ContinuousWebJobStatus enumerates the values for continuous web job status.
type ContinuousWebJobStatus string

const (
	// ContinuousWebJobStatusInitializing ...
	ContinuousWebJobStatusInitializing ContinuousWebJobStatus = "Initializing"
	// ContinuousWebJobStatusPendingRestart ...
	ContinuousWebJobStatusPendingRestart ContinuousWebJobStatus = "PendingRestart"
	// ContinuousWebJobStatusRunning ...
	ContinuousWebJobStatusRunning ContinuousWebJobStatus = "Running"
	// ContinuousWebJobStatusStarting ...
	ContinuousWebJobStatusStarting ContinuousWebJobStatus = "Starting"
	// ContinuousWebJobStatusStopped ...
	ContinuousWebJobStatusStopped ContinuousWebJobStatus = "Stopped"
)

// PossibleContinuousWebJobStatusValues returns an array of possible values for the ContinuousWebJobStatus const type.
func PossibleContinuousWebJobStatusValues() []ContinuousWebJobStatus {
	return []ContinuousWebJobStatus{ContinuousWebJobStatusInitializing, ContinuousWebJobStatusPendingRestart, ContinuousWebJobStatusRunning, ContinuousWebJobStatusStarting, ContinuousWebJobStatusStopped}
}

// CookieExpirationConvention enumerates the values for cookie expiration convention.
type CookieExpirationConvention string

const (
	// CookieExpirationConventionFixedTime ...
	CookieExpirationConventionFixedTime CookieExpirationConvention = "FixedTime"
	// CookieExpirationConventionIdentityProviderDerived ...
	CookieExpirationConventionIdentityProviderDerived CookieExpirationConvention = "IdentityProviderDerived"
)

// PossibleCookieExpirationConventionValues returns an array of possible values for the CookieExpirationConvention const type.
func PossibleCookieExpirationConventionValues() []CookieExpirationConvention {
	return []CookieExpirationConvention{CookieExpirationConventionFixedTime, CookieExpirationConventionIdentityProviderDerived}
}

// CustomDomainStatus enumerates the values for custom domain status.
type CustomDomainStatus string

const (
	// CustomDomainStatusAdding ...
	CustomDomainStatusAdding CustomDomainStatus = "Adding"
	// CustomDomainStatusDeleting ...
	CustomDomainStatusDeleting CustomDomainStatus = "Deleting"
	// CustomDomainStatusFailed ...
	CustomDomainStatusFailed CustomDomainStatus = "Failed"
	// CustomDomainStatusReady ...
	CustomDomainStatusReady CustomDomainStatus = "Ready"
	// CustomDomainStatusRetrievingValidationToken ...
	CustomDomainStatusRetrievingValidationToken CustomDomainStatus = "RetrievingValidationToken"
	// CustomDomainStatusValidating ...
	CustomDomainStatusValidating CustomDomainStatus = "Validating"
)

// PossibleCustomDomainStatusValues returns an array of possible values for the CustomDomainStatus const type.
func PossibleCustomDomainStatusValues() []CustomDomainStatus {
	return []CustomDomainStatus{CustomDomainStatusAdding, CustomDomainStatusDeleting, CustomDomainStatusFailed, CustomDomainStatusReady, CustomDomainStatusRetrievingValidationToken, CustomDomainStatusValidating}
}

// CustomHostNameDNSRecordType enumerates the values for custom host name dns record type.
type CustomHostNameDNSRecordType string

const (
	// CustomHostNameDNSRecordTypeA ...
	CustomHostNameDNSRecordTypeA CustomHostNameDNSRecordType = "A"
	// CustomHostNameDNSRecordTypeCName ...
	CustomHostNameDNSRecordTypeCName CustomHostNameDNSRecordType = "CName"
)

// PossibleCustomHostNameDNSRecordTypeValues returns an array of possible values for the CustomHostNameDNSRecordType const type.
func PossibleCustomHostNameDNSRecordTypeValues() []CustomHostNameDNSRecordType {
	return []CustomHostNameDNSRecordType{CustomHostNameDNSRecordTypeA, CustomHostNameDNSRecordTypeCName}
}

// DatabaseType enumerates the values for database type.
type DatabaseType string

const (
	// DatabaseTypeLocalMySQL ...
	DatabaseTypeLocalMySQL DatabaseType = "LocalMySql"
	// DatabaseTypeMySQL ...
	DatabaseTypeMySQL DatabaseType = "MySql"
	// DatabaseTypePostgreSQL ...
	DatabaseTypePostgreSQL DatabaseType = "PostgreSql"
	// DatabaseTypeSQLAzure ...
	DatabaseTypeSQLAzure DatabaseType = "SqlAzure"
)

// PossibleDatabaseTypeValues returns an array of possible values for the DatabaseType const type.
func PossibleDatabaseTypeValues() []DatabaseType {
	return []DatabaseType{DatabaseTypeLocalMySQL, DatabaseTypeMySQL, DatabaseTypePostgreSQL, DatabaseTypeSQLAzure}
}

// DetectorType enumerates the values for detector type.
type DetectorType string

const (
	// DetectorTypeAnalysis ...
	DetectorTypeAnalysis DetectorType = "Analysis"
	// DetectorTypeCategoryOverview ...
	DetectorTypeCategoryOverview DetectorType = "CategoryOverview"
	// DetectorTypeDetector ...
	DetectorTypeDetector DetectorType = "Detector"
)

// PossibleDetectorTypeValues returns an array of possible values for the DetectorType const type.
func PossibleDetectorTypeValues() []DetectorType {
	return []DetectorType{DetectorTypeAnalysis, DetectorTypeCategoryOverview, DetectorTypeDetector}
}

// DNSType enumerates the values for dns type.
type DNSType string

const (
	// DNSTypeAzureDNS ...
	DNSTypeAzureDNS DNSType = "AzureDns"
	// DNSTypeDefaultDomainRegistrarDNS ...
	DNSTypeDefaultDomainRegistrarDNS DNSType = "DefaultDomainRegistrarDns"
)

// PossibleDNSTypeValues returns an array of possible values for the DNSType const type.
func PossibleDNSTypeValues() []DNSType {
	return []DNSType{DNSTypeAzureDNS, DNSTypeDefaultDomainRegistrarDNS}
}

// DNSVerificationTestResult enumerates the values for dns verification test result.
type DNSVerificationTestResult string

const (
	// DNSVerificationTestResultFailed ...
	DNSVerificationTestResultFailed DNSVerificationTestResult = "Failed"
	// DNSVerificationTestResultPassed ...
	DNSVerificationTestResultPassed DNSVerificationTestResult = "Passed"
	// DNSVerificationTestResultSkipped ...
	DNSVerificationTestResultSkipped DNSVerificationTestResult = "Skipped"
)

// PossibleDNSVerificationTestResultValues returns an array of possible values for the DNSVerificationTestResult const type.
func PossibleDNSVerificationTestResultValues() []DNSVerificationTestResult {
	return []DNSVerificationTestResult{DNSVerificationTestResultFailed, DNSVerificationTestResultPassed, DNSVerificationTestResultSkipped}
}

// DomainStatus enumerates the values for domain status.
type DomainStatus string

const (
	// DomainStatusActive ...
	DomainStatusActive DomainStatus = "Active"
	// DomainStatusAwaiting ...
	DomainStatusAwaiting DomainStatus = "Awaiting"
	// DomainStatusCancelled ...
	DomainStatusCancelled DomainStatus = "Cancelled"
	// DomainStatusConfiscated ...
	DomainStatusConfiscated DomainStatus = "Confiscated"
	// DomainStatusDisabled ...
	DomainStatusDisabled DomainStatus = "Disabled"
	// DomainStatusExcluded ...
	DomainStatusExcluded DomainStatus = "Excluded"
	// DomainStatusExpired ...
	DomainStatusExpired DomainStatus = "Expired"
	// DomainStatusFailed ...
	DomainStatusFailed DomainStatus = "Failed"
	// DomainStatusHeld ...
	DomainStatusHeld DomainStatus = "Held"
	// DomainStatusJSONConverterFailed ...
	DomainStatusJSONConverterFailed DomainStatus = "JsonConverterFailed"
	// DomainStatusLocked ...
	DomainStatusLocked DomainStatus = "Locked"
	// DomainStatusParked ...
	DomainStatusParked DomainStatus = "Parked"
	// DomainStatusPending ...
	DomainStatusPending DomainStatus = "Pending"
	// DomainStatusReserved ...
	DomainStatusReserved DomainStatus = "Reserved"
	// DomainStatusReverted ...
	DomainStatusReverted DomainStatus = "Reverted"
	// DomainStatusSuspended ...
	DomainStatusSuspended DomainStatus = "Suspended"
	// DomainStatusTransferred ...
	DomainStatusTransferred DomainStatus = "Transferred"
	// DomainStatusUnknown ...
	DomainStatusUnknown DomainStatus = "Unknown"
	// DomainStatusUnlocked ...
	DomainStatusUnlocked DomainStatus = "Unlocked"
	// DomainStatusUnparked ...
	DomainStatusUnparked DomainStatus = "Unparked"
	// DomainStatusUpdated ...
	DomainStatusUpdated DomainStatus = "Updated"
)

// PossibleDomainStatusValues returns an array of possible values for the DomainStatus const type.
func PossibleDomainStatusValues() []DomainStatus {
	return []DomainStatus{DomainStatusActive, DomainStatusAwaiting, DomainStatusCancelled, DomainStatusConfiscated, DomainStatusDisabled, DomainStatusExcluded, DomainStatusExpired, DomainStatusFailed, DomainStatusHeld, DomainStatusJSONConverterFailed, DomainStatusLocked, DomainStatusParked, DomainStatusPending, DomainStatusReserved, DomainStatusReverted, DomainStatusSuspended, DomainStatusTransferred, DomainStatusUnknown, DomainStatusUnlocked, DomainStatusUnparked, DomainStatusUpdated}
}

// DomainType enumerates the values for domain type.
type DomainType string

const (
	// DomainTypeRegular ...
	DomainTypeRegular DomainType = "Regular"
	// DomainTypeSoftDeleted ...
	DomainTypeSoftDeleted DomainType = "SoftDeleted"
)

// PossibleDomainTypeValues returns an array of possible values for the DomainType const type.
func PossibleDomainTypeValues() []DomainType {
	return []DomainType{DomainTypeRegular, DomainTypeSoftDeleted}
}

// ForwardProxyConvention enumerates the values for forward proxy convention.
type ForwardProxyConvention string

const (
	// ForwardProxyConventionCustom ...
	ForwardProxyConventionCustom ForwardProxyConvention = "Custom"
	// ForwardProxyConventionNoProxy ...
	ForwardProxyConventionNoProxy ForwardProxyConvention = "NoProxy"
	// ForwardProxyConventionStandard ...
	ForwardProxyConventionStandard ForwardProxyConvention = "Standard"
)

// PossibleForwardProxyConventionValues returns an array of possible values for the ForwardProxyConvention const type.
func PossibleForwardProxyConventionValues() []ForwardProxyConvention {
	return []ForwardProxyConvention{ForwardProxyConventionCustom, ForwardProxyConventionNoProxy, ForwardProxyConventionStandard}
}

// FrequencyUnit enumerates the values for frequency unit.
type FrequencyUnit string

const (
	// FrequencyUnitDay ...
	FrequencyUnitDay FrequencyUnit = "Day"
	// FrequencyUnitHour ...
	FrequencyUnitHour FrequencyUnit = "Hour"
)

// PossibleFrequencyUnitValues returns an array of possible values for the FrequencyUnit const type.
func PossibleFrequencyUnitValues() []FrequencyUnit {
	return []FrequencyUnit{FrequencyUnitDay, FrequencyUnitHour}
}

// FrontEndServiceType enumerates the values for front end service type.
type FrontEndServiceType string

const (
	// FrontEndServiceTypeLoadBalancer ...
	FrontEndServiceTypeLoadBalancer FrontEndServiceType = "LoadBalancer"
	// FrontEndServiceTypeNodePort ...
	FrontEndServiceTypeNodePort FrontEndServiceType = "NodePort"
)

// PossibleFrontEndServiceTypeValues returns an array of possible values for the FrontEndServiceType const type.
func PossibleFrontEndServiceTypeValues() []FrontEndServiceType {
	return []FrontEndServiceType{FrontEndServiceTypeLoadBalancer, FrontEndServiceTypeNodePort}
}

// FtpsState enumerates the values for ftps state.
type FtpsState string

const (
	// FtpsStateAllAllowed ...
	FtpsStateAllAllowed FtpsState = "AllAllowed"
	// FtpsStateDisabled ...
	FtpsStateDisabled FtpsState = "Disabled"
	// FtpsStateFtpsOnly ...
	FtpsStateFtpsOnly FtpsState = "FtpsOnly"
)

// PossibleFtpsStateValues returns an array of possible values for the FtpsState const type.
func PossibleFtpsStateValues() []FtpsState {
	return []FtpsState{FtpsStateAllAllowed, FtpsStateDisabled, FtpsStateFtpsOnly}
}

// HostingEnvironmentStatus enumerates the values for hosting environment status.
type HostingEnvironmentStatus string

const (
	// HostingEnvironmentStatusDeleting ...
	HostingEnvironmentStatusDeleting HostingEnvironmentStatus = "Deleting"
	// HostingEnvironmentStatusPreparing ...
	HostingEnvironmentStatusPreparing HostingEnvironmentStatus = "Preparing"
	// HostingEnvironmentStatusReady ...
	HostingEnvironmentStatusReady HostingEnvironmentStatus = "Ready"
	// HostingEnvironmentStatusScaling ...
	HostingEnvironmentStatusScaling HostingEnvironmentStatus = "Scaling"
)

// PossibleHostingEnvironmentStatusValues returns an array of possible values for the HostingEnvironmentStatus const type.
func PossibleHostingEnvironmentStatusValues() []HostingEnvironmentStatus {
	return []HostingEnvironmentStatus{HostingEnvironmentStatusDeleting, HostingEnvironmentStatusPreparing, HostingEnvironmentStatusReady, HostingEnvironmentStatusScaling}
}

// HostNameType enumerates the values for host name type.
type HostNameType string

const (
	// HostNameTypeManaged ...
	HostNameTypeManaged HostNameType = "Managed"
	// HostNameTypeVerified ...
	HostNameTypeVerified HostNameType = "Verified"
)

// PossibleHostNameTypeValues returns an array of possible values for the HostNameType const type.
func PossibleHostNameTypeValues() []HostNameType {
	return []HostNameType{HostNameTypeManaged, HostNameTypeVerified}
}

// HostType enumerates the values for host type.
type HostType string

const (
	// HostTypeRepository ...
	HostTypeRepository HostType = "Repository"
	// HostTypeStandard ...
	HostTypeStandard HostType = "Standard"
)

// PossibleHostTypeValues returns an array of possible values for the HostType const type.
func PossibleHostTypeValues() []HostType {
	return []HostType{HostTypeRepository, HostTypeStandard}
}

// InAvailabilityReasonType enumerates the values for in availability reason type.
type InAvailabilityReasonType string

const (
	// InAvailabilityReasonTypeAlreadyExists ...
	InAvailabilityReasonTypeAlreadyExists InAvailabilityReasonType = "AlreadyExists"
	// InAvailabilityReasonTypeInvalid ...
	InAvailabilityReasonTypeInvalid InAvailabilityReasonType = "Invalid"
)

// PossibleInAvailabilityReasonTypeValues returns an array of possible values for the InAvailabilityReasonType const type.
func PossibleInAvailabilityReasonTypeValues() []InAvailabilityReasonType {
	return []InAvailabilityReasonType{InAvailabilityReasonTypeAlreadyExists, InAvailabilityReasonTypeInvalid}
}

// InsightStatus enumerates the values for insight status.
type InsightStatus string

const (
	// InsightStatusCritical ...
	InsightStatusCritical InsightStatus = "Critical"
	// InsightStatusInfo ...
	InsightStatusInfo InsightStatus = "Info"
	// InsightStatusNone ...
	InsightStatusNone InsightStatus = "None"
	// InsightStatusSuccess ...
	InsightStatusSuccess InsightStatus = "Success"
	// InsightStatusWarning ...
	InsightStatusWarning InsightStatus = "Warning"
)

// PossibleInsightStatusValues returns an array of possible values for the InsightStatus const type.
func PossibleInsightStatusValues() []InsightStatus {
	return []InsightStatus{InsightStatusCritical, InsightStatusInfo, InsightStatusNone, InsightStatusSuccess, InsightStatusWarning}
}

// IPFilterTag enumerates the values for ip filter tag.
type IPFilterTag string

const (
	// IPFilterTagDefault ...
	IPFilterTagDefault IPFilterTag = "Default"
	// IPFilterTagServiceTag ...
	IPFilterTagServiceTag IPFilterTag = "ServiceTag"
	// IPFilterTagXffProxy ...
	IPFilterTagXffProxy IPFilterTag = "XffProxy"
)

// PossibleIPFilterTagValues returns an array of possible values for the IPFilterTag const type.
func PossibleIPFilterTagValues() []IPFilterTag {
	return []IPFilterTag{IPFilterTagDefault, IPFilterTagServiceTag, IPFilterTagXffProxy}
}

// IssueType enumerates the values for issue type.
type IssueType string

const (
	// IssueTypeAppCrash ...
	IssueTypeAppCrash IssueType = "AppCrash"
	// IssueTypeAppDeployment ...
	IssueTypeAppDeployment IssueType = "AppDeployment"
	// IssueTypeAseDeployment ...
	IssueTypeAseDeployment IssueType = "AseDeployment"
	// IssueTypeOther ...
	IssueTypeOther IssueType = "Other"
	// IssueTypePlatformIssue ...
	IssueTypePlatformIssue IssueType = "PlatformIssue"
	// IssueTypeRuntimeIssueDetected ...
	IssueTypeRuntimeIssueDetected IssueType = "RuntimeIssueDetected"
	// IssueTypeServiceIncident ...
	IssueTypeServiceIncident IssueType = "ServiceIncident"
	// IssueTypeUserIssue ...
	IssueTypeUserIssue IssueType = "UserIssue"
)

// PossibleIssueTypeValues returns an array of possible values for the IssueType const type.
func PossibleIssueTypeValues() []IssueType {
	return []IssueType{IssueTypeAppCrash, IssueTypeAppDeployment, IssueTypeAseDeployment, IssueTypeOther, IssueTypePlatformIssue, IssueTypeRuntimeIssueDetected, IssueTypeServiceIncident, IssueTypeUserIssue}
}

// JobType enumerates the values for job type.
type JobType string

const (
	// JobTypeContinuous ...
	JobTypeContinuous JobType = "Continuous"
	// JobTypeTriggered ...
	JobTypeTriggered JobType = "Triggered"
)

// PossibleJobTypeValues returns an array of possible values for the JobType const type.
func PossibleJobTypeValues() []JobType {
	return []JobType{JobTypeContinuous, JobTypeTriggered}
}

// KeyVaultSecretStatus enumerates the values for key vault secret status.
type KeyVaultSecretStatus string

const (
	// KeyVaultSecretStatusAzureServiceUnauthorizedToAccessKeyVault ...
	KeyVaultSecretStatusAzureServiceUnauthorizedToAccessKeyVault KeyVaultSecretStatus = "AzureServiceUnauthorizedToAccessKeyVault"
	// KeyVaultSecretStatusCertificateOrderFailed ...
	KeyVaultSecretStatusCertificateOrderFailed KeyVaultSecretStatus = "CertificateOrderFailed"
	// KeyVaultSecretStatusExternalPrivateKey ...
	KeyVaultSecretStatusExternalPrivateKey KeyVaultSecretStatus = "ExternalPrivateKey"
	// KeyVaultSecretStatusInitialized ...
	KeyVaultSecretStatusInitialized KeyVaultSecretStatus = "Initialized"
	// KeyVaultSecretStatusKeyVaultDoesNotExist ...
	KeyVaultSecretStatusKeyVaultDoesNotExist KeyVaultSecretStatus = "KeyVaultDoesNotExist"
	// KeyVaultSecretStatusKeyVaultSecretDoesNotExist ...
	KeyVaultSecretStatusKeyVaultSecretDoesNotExist KeyVaultSecretStatus = "KeyVaultSecretDoesNotExist"
	// KeyVaultSecretStatusOperationNotPermittedOnKeyVault ...
	KeyVaultSecretStatusOperationNotPermittedOnKeyVault KeyVaultSecretStatus = "OperationNotPermittedOnKeyVault"
	// KeyVaultSecretStatusSucceeded ...
	KeyVaultSecretStatusSucceeded KeyVaultSecretStatus = "Succeeded"
	// KeyVaultSecretStatusUnknown ...
	KeyVaultSecretStatusUnknown KeyVaultSecretStatus = "Unknown"
	// KeyVaultSecretStatusUnknownError ...
	KeyVaultSecretStatusUnknownError KeyVaultSecretStatus = "UnknownError"
	// KeyVaultSecretStatusWaitingOnCertificateOrder ...
	KeyVaultSecretStatusWaitingOnCertificateOrder KeyVaultSecretStatus = "WaitingOnCertificateOrder"
)

// PossibleKeyVaultSecretStatusValues returns an array of possible values for the KeyVaultSecretStatus const type.
func PossibleKeyVaultSecretStatusValues() []KeyVaultSecretStatus {
	return []KeyVaultSecretStatus{KeyVaultSecretStatusAzureServiceUnauthorizedToAccessKeyVault, KeyVaultSecretStatusCertificateOrderFailed, KeyVaultSecretStatusExternalPrivateKey, KeyVaultSecretStatusInitialized, KeyVaultSecretStatusKeyVaultDoesNotExist, KeyVaultSecretStatusKeyVaultSecretDoesNotExist, KeyVaultSecretStatusOperationNotPermittedOnKeyVault, KeyVaultSecretStatusSucceeded, KeyVaultSecretStatusUnknown, KeyVaultSecretStatusUnknownError, KeyVaultSecretStatusWaitingOnCertificateOrder}
}

// KubeEnvironmentProvisioningState enumerates the values for kube environment provisioning state.
type KubeEnvironmentProvisioningState string

const (
	// KubeEnvironmentProvisioningStateCanceled ...
	KubeEnvironmentProvisioningStateCanceled KubeEnvironmentProvisioningState = "Canceled"
	// KubeEnvironmentProvisioningStateFailed ...
	KubeEnvironmentProvisioningStateFailed KubeEnvironmentProvisioningState = "Failed"
	// KubeEnvironmentProvisioningStateInfrastructureSetupComplete ...
	KubeEnvironmentProvisioningStateInfrastructureSetupComplete KubeEnvironmentProvisioningState = "InfrastructureSetupComplete"
	// KubeEnvironmentProvisioningStateInfrastructureSetupInProgress ...
	KubeEnvironmentProvisioningStateInfrastructureSetupInProgress KubeEnvironmentProvisioningState = "InfrastructureSetupInProgress"
	// KubeEnvironmentProvisioningStateInitializationInProgress ...
	KubeEnvironmentProvisioningStateInitializationInProgress KubeEnvironmentProvisioningState = "InitializationInProgress"
	// KubeEnvironmentProvisioningStateScheduledForDelete ...
	KubeEnvironmentProvisioningStateScheduledForDelete KubeEnvironmentProvisioningState = "ScheduledForDelete"
	// KubeEnvironmentProvisioningStateSucceeded ...
	KubeEnvironmentProvisioningStateSucceeded KubeEnvironmentProvisioningState = "Succeeded"
	// KubeEnvironmentProvisioningStateUpgradeFailed ...
	KubeEnvironmentProvisioningStateUpgradeFailed KubeEnvironmentProvisioningState = "UpgradeFailed"
	// KubeEnvironmentProvisioningStateUpgradeRequested ...
	KubeEnvironmentProvisioningStateUpgradeRequested KubeEnvironmentProvisioningState = "UpgradeRequested"
	// KubeEnvironmentProvisioningStateWaiting ...
	KubeEnvironmentProvisioningStateWaiting KubeEnvironmentProvisioningState = "Waiting"
)

// PossibleKubeEnvironmentProvisioningStateValues returns an array of possible values for the KubeEnvironmentProvisioningState const type.
func PossibleKubeEnvironmentProvisioningStateValues() []KubeEnvironmentProvisioningState {
	return []KubeEnvironmentProvisioningState{KubeEnvironmentProvisioningStateCanceled, KubeEnvironmentProvisioningStateFailed, KubeEnvironmentProvisioningStateInfrastructureSetupComplete, KubeEnvironmentProvisioningStateInfrastructureSetupInProgress, KubeEnvironmentProvisioningStateInitializationInProgress, KubeEnvironmentProvisioningStateScheduledForDelete, KubeEnvironmentProvisioningStateSucceeded, KubeEnvironmentProvisioningStateUpgradeFailed, KubeEnvironmentProvisioningStateUpgradeRequested, KubeEnvironmentProvisioningStateWaiting}
}

// LoadBalancingMode enumerates the values for load balancing mode.
type LoadBalancingMode string

const (
	// LoadBalancingModeNone ...
	LoadBalancingModeNone LoadBalancingMode = "None"
	// LoadBalancingModePublishing ...
	LoadBalancingModePublishing LoadBalancingMode = "Publishing"
	// LoadBalancingModeWeb ...
	LoadBalancingModeWeb LoadBalancingMode = "Web"
	// LoadBalancingModeWebPublishing ...
	LoadBalancingModeWebPublishing LoadBalancingMode = "Web, Publishing"
)

// PossibleLoadBalancingModeValues returns an array of possible values for the LoadBalancingMode const type.
func PossibleLoadBalancingModeValues() []LoadBalancingMode {
	return []LoadBalancingMode{LoadBalancingModeNone, LoadBalancingModePublishing, LoadBalancingModeWeb, LoadBalancingModeWebPublishing}
}

// LogLevel enumerates the values for log level.
type LogLevel string

const (
	// LogLevelError ...
	LogLevelError LogLevel = "Error"
	// LogLevelInformation ...
	LogLevelInformation LogLevel = "Information"
	// LogLevelOff ...
	LogLevelOff LogLevel = "Off"
	// LogLevelVerbose ...
	LogLevelVerbose LogLevel = "Verbose"
	// LogLevelWarning ...
	LogLevelWarning LogLevel = "Warning"
)

// PossibleLogLevelValues returns an array of possible values for the LogLevel const type.
func PossibleLogLevelValues() []LogLevel {
	return []LogLevel{LogLevelError, LogLevelInformation, LogLevelOff, LogLevelVerbose, LogLevelWarning}
}

// ManagedPipelineMode enumerates the values for managed pipeline mode.
type ManagedPipelineMode string

const (
	// ManagedPipelineModeClassic ...
	ManagedPipelineModeClassic ManagedPipelineMode = "Classic"
	// ManagedPipelineModeIntegrated ...
	ManagedPipelineModeIntegrated ManagedPipelineMode = "Integrated"
)

// PossibleManagedPipelineModeValues returns an array of possible values for the ManagedPipelineMode const type.
func PossibleManagedPipelineModeValues() []ManagedPipelineMode {
	return []ManagedPipelineMode{ManagedPipelineModeClassic, ManagedPipelineModeIntegrated}
}

// ManagedServiceIdentityType enumerates the values for managed service identity type.
type ManagedServiceIdentityType string

const (
	// ManagedServiceIdentityTypeNone ...
	ManagedServiceIdentityTypeNone ManagedServiceIdentityType = "None"
	// ManagedServiceIdentityTypeSystemAssigned ...
	ManagedServiceIdentityTypeSystemAssigned ManagedServiceIdentityType = "SystemAssigned"
	// ManagedServiceIdentityTypeSystemAssignedUserAssigned ...
	ManagedServiceIdentityTypeSystemAssignedUserAssigned ManagedServiceIdentityType = "SystemAssigned, UserAssigned"
	// ManagedServiceIdentityTypeUserAssigned ...
	ManagedServiceIdentityTypeUserAssigned ManagedServiceIdentityType = "UserAssigned"
)

// PossibleManagedServiceIdentityTypeValues returns an array of possible values for the ManagedServiceIdentityType const type.
func PossibleManagedServiceIdentityTypeValues() []ManagedServiceIdentityType {
	return []ManagedServiceIdentityType{ManagedServiceIdentityTypeNone, ManagedServiceIdentityTypeSystemAssigned, ManagedServiceIdentityTypeSystemAssignedUserAssigned, ManagedServiceIdentityTypeUserAssigned}
}

// MSDeployLogEntryType enumerates the values for ms deploy log entry type.
type MSDeployLogEntryType string

const (
	// MSDeployLogEntryTypeError ...
	MSDeployLogEntryTypeError MSDeployLogEntryType = "Error"
	// MSDeployLogEntryTypeMessage ...
	MSDeployLogEntryTypeMessage MSDeployLogEntryType = "Message"
	// MSDeployLogEntryTypeWarning ...
	MSDeployLogEntryTypeWarning MSDeployLogEntryType = "Warning"
)

// PossibleMSDeployLogEntryTypeValues returns an array of possible values for the MSDeployLogEntryType const type.
func PossibleMSDeployLogEntryTypeValues() []MSDeployLogEntryType {
	return []MSDeployLogEntryType{MSDeployLogEntryTypeError, MSDeployLogEntryTypeMessage, MSDeployLogEntryTypeWarning}
}

// MSDeployProvisioningState enumerates the values for ms deploy provisioning state.
type MSDeployProvisioningState string

const (
	// MSDeployProvisioningStateAccepted ...
	MSDeployProvisioningStateAccepted MSDeployProvisioningState = "accepted"
	// MSDeployProvisioningStateCanceled ...
	MSDeployProvisioningStateCanceled MSDeployProvisioningState = "canceled"
	// MSDeployProvisioningStateFailed ...
	MSDeployProvisioningStateFailed MSDeployProvisioningState = "failed"
	// MSDeployProvisioningStateRunning ...
	MSDeployProvisioningStateRunning MSDeployProvisioningState = "running"
	// MSDeployProvisioningStateSucceeded ...
	MSDeployProvisioningStateSucceeded MSDeployProvisioningState = "succeeded"
)

// PossibleMSDeployProvisioningStateValues returns an array of possible values for the MSDeployProvisioningState const type.
func PossibleMSDeployProvisioningStateValues() []MSDeployProvisioningState {
	return []MSDeployProvisioningState{MSDeployProvisioningStateAccepted, MSDeployProvisioningStateCanceled, MSDeployProvisioningStateFailed, MSDeployProvisioningStateRunning, MSDeployProvisioningStateSucceeded}
}

// MySQLMigrationType enumerates the values for my sql migration type.
type MySQLMigrationType string

const (
	// MySQLMigrationTypeLocalToRemote ...
	MySQLMigrationTypeLocalToRemote MySQLMigrationType = "LocalToRemote"
	// MySQLMigrationTypeRemoteToLocal ...
	MySQLMigrationTypeRemoteToLocal MySQLMigrationType = "RemoteToLocal"
)

// PossibleMySQLMigrationTypeValues returns an array of possible values for the MySQLMigrationType const type.
func PossibleMySQLMigrationTypeValues() []MySQLMigrationType {
	return []MySQLMigrationType{MySQLMigrationTypeLocalToRemote, MySQLMigrationTypeRemoteToLocal}
}

// NotificationLevel enumerates the values for notification level.
type NotificationLevel string

const (
	// NotificationLevelCritical ...
	NotificationLevelCritical NotificationLevel = "Critical"
	// NotificationLevelInformation ...
	NotificationLevelInformation NotificationLevel = "Information"
	// NotificationLevelNonUrgentSuggestion ...
	NotificationLevelNonUrgentSuggestion NotificationLevel = "NonUrgentSuggestion"
	// NotificationLevelWarning ...
	NotificationLevelWarning NotificationLevel = "Warning"
)

// PossibleNotificationLevelValues returns an array of possible values for the NotificationLevel const type.
func PossibleNotificationLevelValues() []NotificationLevel {
	return []NotificationLevel{NotificationLevelCritical, NotificationLevelInformation, NotificationLevelNonUrgentSuggestion, NotificationLevelWarning}
}

// OperationStatus enumerates the values for operation status.
type OperationStatus string

const (
	// OperationStatusCreated ...
	OperationStatusCreated OperationStatus = "Created"
	// OperationStatusFailed ...
	OperationStatusFailed OperationStatus = "Failed"
	// OperationStatusInProgress ...
	OperationStatusInProgress OperationStatus = "InProgress"
	// OperationStatusSucceeded ...
	OperationStatusSucceeded OperationStatus = "Succeeded"
	// OperationStatusTimedOut ...
	OperationStatusTimedOut OperationStatus = "TimedOut"
)

// PossibleOperationStatusValues returns an array of possible values for the OperationStatus const type.
func PossibleOperationStatusValues() []OperationStatus {
	return []OperationStatus{OperationStatusCreated, OperationStatusFailed, OperationStatusInProgress, OperationStatusSucceeded, OperationStatusTimedOut}
}

// ProvisioningState enumerates the values for provisioning state.
type ProvisioningState string

const (
	// ProvisioningStateCanceled ...
	ProvisioningStateCanceled ProvisioningState = "Canceled"
	// ProvisioningStateDeleting ...
	ProvisioningStateDeleting ProvisioningState = "Deleting"
	// ProvisioningStateFailed ...
	ProvisioningStateFailed ProvisioningState = "Failed"
	// ProvisioningStateInProgress ...
	ProvisioningStateInProgress ProvisioningState = "InProgress"
	// ProvisioningStateSucceeded ...
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
)

// PossibleProvisioningStateValues returns an array of possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{ProvisioningStateCanceled, ProvisioningStateDeleting, ProvisioningStateFailed, ProvisioningStateInProgress, ProvisioningStateSucceeded}
}

// PublicCertificateLocation enumerates the values for public certificate location.
type PublicCertificateLocation string

const (
	// PublicCertificateLocationCurrentUserMy ...
	PublicCertificateLocationCurrentUserMy PublicCertificateLocation = "CurrentUserMy"
	// PublicCertificateLocationLocalMachineMy ...
	PublicCertificateLocationLocalMachineMy PublicCertificateLocation = "LocalMachineMy"
	// PublicCertificateLocationUnknown ...
	PublicCertificateLocationUnknown PublicCertificateLocation = "Unknown"
)

// PossiblePublicCertificateLocationValues returns an array of possible values for the PublicCertificateLocation const type.
func PossiblePublicCertificateLocationValues() []PublicCertificateLocation {
	return []PublicCertificateLocation{PublicCertificateLocationCurrentUserMy, PublicCertificateLocationLocalMachineMy, PublicCertificateLocationUnknown}
}

// PublishingProfileFormat enumerates the values for publishing profile format.
type PublishingProfileFormat string

const (
	// PublishingProfileFormatFileZilla3 ...
	PublishingProfileFormatFileZilla3 PublishingProfileFormat = "FileZilla3"
	// PublishingProfileFormatFtp ...
	PublishingProfileFormatFtp PublishingProfileFormat = "Ftp"
	// PublishingProfileFormatWebDeploy ...
	PublishingProfileFormatWebDeploy PublishingProfileFormat = "WebDeploy"
)

// PossiblePublishingProfileFormatValues returns an array of possible values for the PublishingProfileFormat const type.
func PossiblePublishingProfileFormatValues() []PublishingProfileFormat {
	return []PublishingProfileFormat{PublishingProfileFormatFileZilla3, PublishingProfileFormatFtp, PublishingProfileFormatWebDeploy}
}

// RedundancyMode enumerates the values for redundancy mode.
type RedundancyMode string

const (
	// RedundancyModeActiveActive ...
	RedundancyModeActiveActive RedundancyMode = "ActiveActive"
	// RedundancyModeFailover ...
	RedundancyModeFailover RedundancyMode = "Failover"
	// RedundancyModeGeoRedundant ...
	RedundancyModeGeoRedundant RedundancyMode = "GeoRedundant"
	// RedundancyModeManual ...
	RedundancyModeManual RedundancyMode = "Manual"
	// RedundancyModeNone ...
	RedundancyModeNone RedundancyMode = "None"
)

// PossibleRedundancyModeValues returns an array of possible values for the RedundancyMode const type.
func PossibleRedundancyModeValues() []RedundancyMode {
	return []RedundancyMode{RedundancyModeActiveActive, RedundancyModeFailover, RedundancyModeGeoRedundant, RedundancyModeManual, RedundancyModeNone}
}

// RenderingType enumerates the values for rendering type.
type RenderingType string

const (
	// RenderingTypeAppInsight ...
	RenderingTypeAppInsight RenderingType = "AppInsight"
	// RenderingTypeAppInsightEnablement ...
	RenderingTypeAppInsightEnablement RenderingType = "AppInsightEnablement"
	// RenderingTypeCard ...
	RenderingTypeCard RenderingType = "Card"
	// RenderingTypeChangeAnalysisOnboarding ...
	RenderingTypeChangeAnalysisOnboarding RenderingType = "ChangeAnalysisOnboarding"
	// RenderingTypeChangeSets ...
	RenderingTypeChangeSets RenderingType = "ChangeSets"
	// RenderingTypeChangesView ...
	RenderingTypeChangesView RenderingType = "ChangesView"
	// RenderingTypeDataSummary ...
	RenderingTypeDataSummary RenderingType = "DataSummary"
	// RenderingTypeDependencyGraph ...
	RenderingTypeDependencyGraph RenderingType = "DependencyGraph"
	// RenderingTypeDetector ...
	RenderingTypeDetector RenderingType = "Detector"
	// RenderingTypeDownTime ...
	RenderingTypeDownTime RenderingType = "DownTime"
	// RenderingTypeDropDown ...
	RenderingTypeDropDown RenderingType = "DropDown"
	// RenderingTypeDynamicInsight ...
	RenderingTypeDynamicInsight RenderingType = "DynamicInsight"
	// RenderingTypeEmail ...
	RenderingTypeEmail RenderingType = "Email"
	// RenderingTypeForm ...
	RenderingTypeForm RenderingType = "Form"
	// RenderingTypeGuage ...
	RenderingTypeGuage RenderingType = "Guage"
	// RenderingTypeInsights ...
	RenderingTypeInsights RenderingType = "Insights"
	// RenderingTypeMarkdown ...
	RenderingTypeMarkdown RenderingType = "Markdown"
	// RenderingTypeNoGraph ...
	RenderingTypeNoGraph RenderingType = "NoGraph"
	// RenderingTypePieChart ...
	RenderingTypePieChart RenderingType = "PieChart"
	// RenderingTypeSearchComponent ...
	RenderingTypeSearchComponent RenderingType = "SearchComponent"
	// RenderingTypeSolution ...
	RenderingTypeSolution RenderingType = "Solution"
	// RenderingTypeSummaryCard ...
	RenderingTypeSummaryCard RenderingType = "SummaryCard"
	// RenderingTypeTable ...
	RenderingTypeTable RenderingType = "Table"
	// RenderingTypeTimeSeries ...
	RenderingTypeTimeSeries RenderingType = "TimeSeries"
	// RenderingTypeTimeSeriesPerInstance ...
	RenderingTypeTimeSeriesPerInstance RenderingType = "TimeSeriesPerInstance"
)

// PossibleRenderingTypeValues returns an array of possible values for the RenderingType const type.
func PossibleRenderingTypeValues() []RenderingType {
	return []RenderingType{RenderingTypeAppInsight, RenderingTypeAppInsightEnablement, RenderingTypeCard, RenderingTypeChangeAnalysisOnboarding, RenderingTypeChangeSets, RenderingTypeChangesView, RenderingTypeDataSummary, RenderingTypeDependencyGraph, RenderingTypeDetector, RenderingTypeDownTime, RenderingTypeDropDown, RenderingTypeDynamicInsight, RenderingTypeEmail, RenderingTypeForm, RenderingTypeGuage, RenderingTypeInsights, RenderingTypeMarkdown, RenderingTypeNoGraph, RenderingTypePieChart, RenderingTypeSearchComponent, RenderingTypeSolution, RenderingTypeSummaryCard, RenderingTypeTable, RenderingTypeTimeSeries, RenderingTypeTimeSeriesPerInstance}
}

// ResolveStatus enumerates the values for resolve status.
type ResolveStatus string

const (
	// ResolveStatusAccessToKeyVaultDenied ...
	ResolveStatusAccessToKeyVaultDenied ResolveStatus = "AccessToKeyVaultDenied"
	// ResolveStatusFetchTimedOut ...
	ResolveStatusFetchTimedOut ResolveStatus = "FetchTimedOut"
	// ResolveStatusInitialized ...
	ResolveStatusInitialized ResolveStatus = "Initialized"
	// ResolveStatusInvalidSyntax ...
	ResolveStatusInvalidSyntax ResolveStatus = "InvalidSyntax"
	// ResolveStatusMSINotEnabled ...
	ResolveStatusMSINotEnabled ResolveStatus = "MSINotEnabled"
	// ResolveStatusOtherReasons ...
	ResolveStatusOtherReasons ResolveStatus = "OtherReasons"
	// ResolveStatusResolved ...
	ResolveStatusResolved ResolveStatus = "Resolved"
	// ResolveStatusSecretNotFound ...
	ResolveStatusSecretNotFound ResolveStatus = "SecretNotFound"
	// ResolveStatusSecretVersionNotFound ...
	ResolveStatusSecretVersionNotFound ResolveStatus = "SecretVersionNotFound"
	// ResolveStatusUnauthorizedClient ...
	ResolveStatusUnauthorizedClient ResolveStatus = "UnauthorizedClient"
	// ResolveStatusVaultNotFound ...
	ResolveStatusVaultNotFound ResolveStatus = "VaultNotFound"
)

// PossibleResolveStatusValues returns an array of possible values for the ResolveStatus const type.
func PossibleResolveStatusValues() []ResolveStatus {
	return []ResolveStatus{ResolveStatusAccessToKeyVaultDenied, ResolveStatusFetchTimedOut, ResolveStatusInitialized, ResolveStatusInvalidSyntax, ResolveStatusMSINotEnabled, ResolveStatusOtherReasons, ResolveStatusResolved, ResolveStatusSecretNotFound, ResolveStatusSecretVersionNotFound, ResolveStatusUnauthorizedClient, ResolveStatusVaultNotFound}
}

// ResourceScopeType enumerates the values for resource scope type.
type ResourceScopeType string

const (
	// ResourceScopeTypeServerFarm ...
	ResourceScopeTypeServerFarm ResourceScopeType = "ServerFarm"
	// ResourceScopeTypeSubscription ...
	ResourceScopeTypeSubscription ResourceScopeType = "Subscription"
	// ResourceScopeTypeWebSite ...
	ResourceScopeTypeWebSite ResourceScopeType = "WebSite"
)

// PossibleResourceScopeTypeValues returns an array of possible values for the ResourceScopeType const type.
func PossibleResourceScopeTypeValues() []ResourceScopeType {
	return []ResourceScopeType{ResourceScopeTypeServerFarm, ResourceScopeTypeSubscription, ResourceScopeTypeWebSite}
}

// RouteType enumerates the values for route type.
type RouteType string

const (
	// RouteTypeDEFAULT ...
	RouteTypeDEFAULT RouteType = "DEFAULT"
	// RouteTypeINHERITED ...
	RouteTypeINHERITED RouteType = "INHERITED"
	// RouteTypeSTATIC ...
	RouteTypeSTATIC RouteType = "STATIC"
)

// PossibleRouteTypeValues returns an array of possible values for the RouteType const type.
func PossibleRouteTypeValues() []RouteType {
	return []RouteType{RouteTypeDEFAULT, RouteTypeINHERITED, RouteTypeSTATIC}
}

// ScmType enumerates the values for scm type.
type ScmType string

const (
	// ScmTypeBitbucketGit ...
	ScmTypeBitbucketGit ScmType = "BitbucketGit"
	// ScmTypeBitbucketHg ...
	ScmTypeBitbucketHg ScmType = "BitbucketHg"
	// ScmTypeCodePlexGit ...
	ScmTypeCodePlexGit ScmType = "CodePlexGit"
	// ScmTypeCodePlexHg ...
	ScmTypeCodePlexHg ScmType = "CodePlexHg"
	// ScmTypeDropbox ...
	ScmTypeDropbox ScmType = "Dropbox"
	// ScmTypeExternalGit ...
	ScmTypeExternalGit ScmType = "ExternalGit"
	// ScmTypeExternalHg ...
	ScmTypeExternalHg ScmType = "ExternalHg"
	// ScmTypeGitHub ...
	ScmTypeGitHub ScmType = "GitHub"
	// ScmTypeLocalGit ...
	ScmTypeLocalGit ScmType = "LocalGit"
	// ScmTypeNone ...
	ScmTypeNone ScmType = "None"
	// ScmTypeOneDrive ...
	ScmTypeOneDrive ScmType = "OneDrive"
	// ScmTypeTfs ...
	ScmTypeTfs ScmType = "Tfs"
	// ScmTypeVSO ...
	ScmTypeVSO ScmType = "VSO"
	// ScmTypeVSTSRM ...
	ScmTypeVSTSRM ScmType = "VSTSRM"
)

// PossibleScmTypeValues returns an array of possible values for the ScmType const type.
func PossibleScmTypeValues() []ScmType {
	return []ScmType{ScmTypeBitbucketGit, ScmTypeBitbucketHg, ScmTypeCodePlexGit, ScmTypeCodePlexHg, ScmTypeDropbox, ScmTypeExternalGit, ScmTypeExternalHg, ScmTypeGitHub, ScmTypeLocalGit, ScmTypeNone, ScmTypeOneDrive, ScmTypeTfs, ScmTypeVSO, ScmTypeVSTSRM}
}

// SiteAvailabilityState enumerates the values for site availability state.
type SiteAvailabilityState string

const (
	// SiteAvailabilityStateDisasterRecoveryMode ...
	SiteAvailabilityStateDisasterRecoveryMode SiteAvailabilityState = "DisasterRecoveryMode"
	// SiteAvailabilityStateLimited ...
	SiteAvailabilityStateLimited SiteAvailabilityState = "Limited"
	// SiteAvailabilityStateNormal ...
	SiteAvailabilityStateNormal SiteAvailabilityState = "Normal"
)

// PossibleSiteAvailabilityStateValues returns an array of possible values for the SiteAvailabilityState const type.
func PossibleSiteAvailabilityStateValues() []SiteAvailabilityState {
	return []SiteAvailabilityState{SiteAvailabilityStateDisasterRecoveryMode, SiteAvailabilityStateLimited, SiteAvailabilityStateNormal}
}

// SiteExtensionType enumerates the values for site extension type.
type SiteExtensionType string

const (
	// SiteExtensionTypeGallery ...
	SiteExtensionTypeGallery SiteExtensionType = "Gallery"
	// SiteExtensionTypeWebRoot ...
	SiteExtensionTypeWebRoot SiteExtensionType = "WebRoot"
)

// PossibleSiteExtensionTypeValues returns an array of possible values for the SiteExtensionType const type.
func PossibleSiteExtensionTypeValues() []SiteExtensionType {
	return []SiteExtensionType{SiteExtensionTypeGallery, SiteExtensionTypeWebRoot}
}

// SiteLoadBalancing enumerates the values for site load balancing.
type SiteLoadBalancing string

const (
	// SiteLoadBalancingLeastRequests ...
	SiteLoadBalancingLeastRequests SiteLoadBalancing = "LeastRequests"
	// SiteLoadBalancingLeastResponseTime ...
	SiteLoadBalancingLeastResponseTime SiteLoadBalancing = "LeastResponseTime"
	// SiteLoadBalancingPerSiteRoundRobin ...
	SiteLoadBalancingPerSiteRoundRobin SiteLoadBalancing = "PerSiteRoundRobin"
	// SiteLoadBalancingRequestHash ...
	SiteLoadBalancingRequestHash SiteLoadBalancing = "RequestHash"
	// SiteLoadBalancingWeightedRoundRobin ...
	SiteLoadBalancingWeightedRoundRobin SiteLoadBalancing = "WeightedRoundRobin"
	// SiteLoadBalancingWeightedTotalTraffic ...
	SiteLoadBalancingWeightedTotalTraffic SiteLoadBalancing = "WeightedTotalTraffic"
)

// PossibleSiteLoadBalancingValues returns an array of possible values for the SiteLoadBalancing const type.
func PossibleSiteLoadBalancingValues() []SiteLoadBalancing {
	return []SiteLoadBalancing{SiteLoadBalancingLeastRequests, SiteLoadBalancingLeastResponseTime, SiteLoadBalancingPerSiteRoundRobin, SiteLoadBalancingRequestHash, SiteLoadBalancingWeightedRoundRobin, SiteLoadBalancingWeightedTotalTraffic}
}

// SiteRuntimeState enumerates the values for site runtime state.
type SiteRuntimeState string

const (
	// SiteRuntimeStateREADY ...
	SiteRuntimeStateREADY SiteRuntimeState = "READY"
	// SiteRuntimeStateSTOPPED ...
	SiteRuntimeStateSTOPPED SiteRuntimeState = "STOPPED"
	// SiteRuntimeStateUNKNOWN ...
	SiteRuntimeStateUNKNOWN SiteRuntimeState = "UNKNOWN"
)

// PossibleSiteRuntimeStateValues returns an array of possible values for the SiteRuntimeState const type.
func PossibleSiteRuntimeStateValues() []SiteRuntimeState {
	return []SiteRuntimeState{SiteRuntimeStateREADY, SiteRuntimeStateSTOPPED, SiteRuntimeStateUNKNOWN}
}

// SkuName enumerates the values for sku name.
type SkuName string

const (
	// SkuNameBasic ...
	SkuNameBasic SkuName = "Basic"
	// SkuNameDynamic ...
	SkuNameDynamic SkuName = "Dynamic"
	// SkuNameElasticIsolated ...
	SkuNameElasticIsolated SkuName = "ElasticIsolated"
	// SkuNameElasticPremium ...
	SkuNameElasticPremium SkuName = "ElasticPremium"
	// SkuNameFree ...
	SkuNameFree SkuName = "Free"
	// SkuNameIsolated ...
	SkuNameIsolated SkuName = "Isolated"
	// SkuNameIsolatedV2 ...
	SkuNameIsolatedV2 SkuName = "IsolatedV2"
	// SkuNamePremium ...
	SkuNamePremium SkuName = "Premium"
	// SkuNamePremiumContainer ...
	SkuNamePremiumContainer SkuName = "PremiumContainer"
	// SkuNamePremiumV2 ...
	SkuNamePremiumV2 SkuName = "PremiumV2"
	// SkuNamePremiumV3 ...
	SkuNamePremiumV3 SkuName = "PremiumV3"
	// SkuNameShared ...
	SkuNameShared SkuName = "Shared"
	// SkuNameStandard ...
	SkuNameStandard SkuName = "Standard"
)

// PossibleSkuNameValues returns an array of possible values for the SkuName const type.
func PossibleSkuNameValues() []SkuName {
	return []SkuName{SkuNameBasic, SkuNameDynamic, SkuNameElasticIsolated, SkuNameElasticPremium, SkuNameFree, SkuNameIsolated, SkuNameIsolatedV2, SkuNamePremium, SkuNamePremiumContainer, SkuNamePremiumV2, SkuNamePremiumV3, SkuNameShared, SkuNameStandard}
}

// SolutionType enumerates the values for solution type.
type SolutionType string

const (
	// SolutionTypeBestPractices ...
	SolutionTypeBestPractices SolutionType = "BestPractices"
	// SolutionTypeDeepInvestigation ...
	SolutionTypeDeepInvestigation SolutionType = "DeepInvestigation"
	// SolutionTypeQuickSolution ...
	SolutionTypeQuickSolution SolutionType = "QuickSolution"
)

// PossibleSolutionTypeValues returns an array of possible values for the SolutionType const type.
func PossibleSolutionTypeValues() []SolutionType {
	return []SolutionType{SolutionTypeBestPractices, SolutionTypeDeepInvestigation, SolutionTypeQuickSolution}
}

// SslState enumerates the values for ssl state.
type SslState string

const (
	// SslStateDisabled ...
	SslStateDisabled SslState = "Disabled"
	// SslStateIPBasedEnabled ...
	SslStateIPBasedEnabled SslState = "IpBasedEnabled"
	// SslStateSniEnabled ...
	SslStateSniEnabled SslState = "SniEnabled"
)

// PossibleSslStateValues returns an array of possible values for the SslState const type.
func PossibleSslStateValues() []SslState {
	return []SslState{SslStateDisabled, SslStateIPBasedEnabled, SslStateSniEnabled}
}

// StackPreferredOs enumerates the values for stack preferred os.
type StackPreferredOs string

const (
	// StackPreferredOsLinux ...
	StackPreferredOsLinux StackPreferredOs = "Linux"
	// StackPreferredOsWindows ...
	StackPreferredOsWindows StackPreferredOs = "Windows"
)

// PossibleStackPreferredOsValues returns an array of possible values for the StackPreferredOs const type.
func PossibleStackPreferredOsValues() []StackPreferredOs {
	return []StackPreferredOs{StackPreferredOsLinux, StackPreferredOsWindows}
}

// StagingEnvironmentPolicy enumerates the values for staging environment policy.
type StagingEnvironmentPolicy string

const (
	// StagingEnvironmentPolicyDisabled ...
	StagingEnvironmentPolicyDisabled StagingEnvironmentPolicy = "Disabled"
	// StagingEnvironmentPolicyEnabled ...
	StagingEnvironmentPolicyEnabled StagingEnvironmentPolicy = "Enabled"
)

// PossibleStagingEnvironmentPolicyValues returns an array of possible values for the StagingEnvironmentPolicy const type.
func PossibleStagingEnvironmentPolicyValues() []StagingEnvironmentPolicy {
	return []StagingEnvironmentPolicy{StagingEnvironmentPolicyDisabled, StagingEnvironmentPolicyEnabled}
}

// StatusOptions enumerates the values for status options.
type StatusOptions string

const (
	// StatusOptionsCreating ...
	StatusOptionsCreating StatusOptions = "Creating"
	// StatusOptionsPending ...
	StatusOptionsPending StatusOptions = "Pending"
	// StatusOptionsReady ...
	StatusOptionsReady StatusOptions = "Ready"
)

// PossibleStatusOptionsValues returns an array of possible values for the StatusOptions const type.
func PossibleStatusOptionsValues() []StatusOptions {
	return []StatusOptions{StatusOptionsCreating, StatusOptionsPending, StatusOptionsReady}
}

// StorageType enumerates the values for storage type.
type StorageType string

const (
	// StorageTypeLocalNode ...
	StorageTypeLocalNode StorageType = "LocalNode"
	// StorageTypeNetworkFileSystem ...
	StorageTypeNetworkFileSystem StorageType = "NetworkFileSystem"
)

// PossibleStorageTypeValues returns an array of possible values for the StorageType const type.
func PossibleStorageTypeValues() []StorageType {
	return []StorageType{StorageTypeLocalNode, StorageTypeNetworkFileSystem}
}

// SupportedTLSVersions enumerates the values for supported tls versions.
type SupportedTLSVersions string

const (
	// SupportedTLSVersionsOneFullStopOne ...
	SupportedTLSVersionsOneFullStopOne SupportedTLSVersions = "1.1"
	// SupportedTLSVersionsOneFullStopTwo ...
	SupportedTLSVersionsOneFullStopTwo SupportedTLSVersions = "1.2"
	// SupportedTLSVersionsOneFullStopZero ...
	SupportedTLSVersionsOneFullStopZero SupportedTLSVersions = "1.0"
)

// PossibleSupportedTLSVersionsValues returns an array of possible values for the SupportedTLSVersions const type.
func PossibleSupportedTLSVersionsValues() []SupportedTLSVersions {
	return []SupportedTLSVersions{SupportedTLSVersionsOneFullStopOne, SupportedTLSVersionsOneFullStopTwo, SupportedTLSVersionsOneFullStopZero}
}

// TriggeredWebJobStatus enumerates the values for triggered web job status.
type TriggeredWebJobStatus string

const (
	// TriggeredWebJobStatusError ...
	TriggeredWebJobStatusError TriggeredWebJobStatus = "Error"
	// TriggeredWebJobStatusFailed ...
	TriggeredWebJobStatusFailed TriggeredWebJobStatus = "Failed"
	// TriggeredWebJobStatusSuccess ...
	TriggeredWebJobStatusSuccess TriggeredWebJobStatus = "Success"
)

// PossibleTriggeredWebJobStatusValues returns an array of possible values for the TriggeredWebJobStatus const type.
func PossibleTriggeredWebJobStatusValues() []TriggeredWebJobStatus {
	return []TriggeredWebJobStatus{TriggeredWebJobStatusError, TriggeredWebJobStatusFailed, TriggeredWebJobStatusSuccess}
}

// TriggerTypes enumerates the values for trigger types.
type TriggerTypes string

const (
	// TriggerTypesHTTPTrigger ...
	TriggerTypesHTTPTrigger TriggerTypes = "HttpTrigger"
	// TriggerTypesUnknown ...
	TriggerTypesUnknown TriggerTypes = "Unknown"
)

// PossibleTriggerTypesValues returns an array of possible values for the TriggerTypes const type.
func PossibleTriggerTypesValues() []TriggerTypes {
	return []TriggerTypes{TriggerTypesHTTPTrigger, TriggerTypesUnknown}
}

// UnauthenticatedClientAction enumerates the values for unauthenticated client action.
type UnauthenticatedClientAction string

const (
	// UnauthenticatedClientActionAllowAnonymous ...
	UnauthenticatedClientActionAllowAnonymous UnauthenticatedClientAction = "AllowAnonymous"
	// UnauthenticatedClientActionRedirectToLoginPage ...
	UnauthenticatedClientActionRedirectToLoginPage UnauthenticatedClientAction = "RedirectToLoginPage"
)

// PossibleUnauthenticatedClientActionValues returns an array of possible values for the UnauthenticatedClientAction const type.
func PossibleUnauthenticatedClientActionValues() []UnauthenticatedClientAction {
	return []UnauthenticatedClientAction{UnauthenticatedClientActionAllowAnonymous, UnauthenticatedClientActionRedirectToLoginPage}
}

// UnauthenticatedClientActionV2 enumerates the values for unauthenticated client action v2.
type UnauthenticatedClientActionV2 string

const (
	// UnauthenticatedClientActionV2AllowAnonymous ...
	UnauthenticatedClientActionV2AllowAnonymous UnauthenticatedClientActionV2 = "AllowAnonymous"
	// UnauthenticatedClientActionV2RedirectToLoginPage ...
	UnauthenticatedClientActionV2RedirectToLoginPage UnauthenticatedClientActionV2 = "RedirectToLoginPage"
	// UnauthenticatedClientActionV2Return401 ...
	UnauthenticatedClientActionV2Return401 UnauthenticatedClientActionV2 = "Return401"
	// UnauthenticatedClientActionV2Return403 ...
	UnauthenticatedClientActionV2Return403 UnauthenticatedClientActionV2 = "Return403"
)

// PossibleUnauthenticatedClientActionV2Values returns an array of possible values for the UnauthenticatedClientActionV2 const type.
func PossibleUnauthenticatedClientActionV2Values() []UnauthenticatedClientActionV2 {
	return []UnauthenticatedClientActionV2{UnauthenticatedClientActionV2AllowAnonymous, UnauthenticatedClientActionV2RedirectToLoginPage, UnauthenticatedClientActionV2Return401, UnauthenticatedClientActionV2Return403}
}

// UsageState enumerates the values for usage state.
type UsageState string

const (
	// UsageStateExceeded ...
	UsageStateExceeded UsageState = "Exceeded"
	// UsageStateNormal ...
	UsageStateNormal UsageState = "Normal"
)

// PossibleUsageStateValues returns an array of possible values for the UsageState const type.
func PossibleUsageStateValues() []UsageState {
	return []UsageState{UsageStateExceeded, UsageStateNormal}
}

// ValidateResourceTypes enumerates the values for validate resource types.
type ValidateResourceTypes string

const (
	// ValidateResourceTypesMicrosoftWebhostingEnvironments ...
	ValidateResourceTypesMicrosoftWebhostingEnvironments ValidateResourceTypes = "Microsoft.Web/hostingEnvironments"
	// ValidateResourceTypesServerFarm ...
	ValidateResourceTypesServerFarm ValidateResourceTypes = "ServerFarm"
	// ValidateResourceTypesSite ...
	ValidateResourceTypesSite ValidateResourceTypes = "Site"
)

// PossibleValidateResourceTypesValues returns an array of possible values for the ValidateResourceTypes const type.
func PossibleValidateResourceTypesValues() []ValidateResourceTypes {
	return []ValidateResourceTypes{ValidateResourceTypesMicrosoftWebhostingEnvironments, ValidateResourceTypesServerFarm, ValidateResourceTypesSite}
}

// WorkerSizeOptions enumerates the values for worker size options.
type WorkerSizeOptions string

const (
	// WorkerSizeOptionsD1 ...
	WorkerSizeOptionsD1 WorkerSizeOptions = "D1"
	// WorkerSizeOptionsD2 ...
	WorkerSizeOptionsD2 WorkerSizeOptions = "D2"
	// WorkerSizeOptionsD3 ...
	WorkerSizeOptionsD3 WorkerSizeOptions = "D3"
	// WorkerSizeOptionsDefault ...
	WorkerSizeOptionsDefault WorkerSizeOptions = "Default"
	// WorkerSizeOptionsLarge ...
	WorkerSizeOptionsLarge WorkerSizeOptions = "Large"
	// WorkerSizeOptionsLargeV3 ...
	WorkerSizeOptionsLargeV3 WorkerSizeOptions = "LargeV3"
	// WorkerSizeOptionsMedium ...
	WorkerSizeOptionsMedium WorkerSizeOptions = "Medium"
	// WorkerSizeOptionsMediumV3 ...
	WorkerSizeOptionsMediumV3 WorkerSizeOptions = "MediumV3"
	// WorkerSizeOptionsNestedSmall ...
	WorkerSizeOptionsNestedSmall WorkerSizeOptions = "NestedSmall"
	// WorkerSizeOptionsNestedSmallLinux ...
	WorkerSizeOptionsNestedSmallLinux WorkerSizeOptions = "NestedSmallLinux"
	// WorkerSizeOptionsSmall ...
	WorkerSizeOptionsSmall WorkerSizeOptions = "Small"
	// WorkerSizeOptionsSmallV3 ...
	WorkerSizeOptionsSmallV3 WorkerSizeOptions = "SmallV3"
)

// PossibleWorkerSizeOptionsValues returns an array of possible values for the WorkerSizeOptions const type.
func PossibleWorkerSizeOptionsValues() []WorkerSizeOptions {
	return []WorkerSizeOptions{WorkerSizeOptionsD1, WorkerSizeOptionsD2, WorkerSizeOptionsD3, WorkerSizeOptionsDefault, WorkerSizeOptionsLarge, WorkerSizeOptionsLargeV3, WorkerSizeOptionsMedium, WorkerSizeOptionsMediumV3, WorkerSizeOptionsNestedSmall, WorkerSizeOptionsNestedSmallLinux, WorkerSizeOptionsSmall, WorkerSizeOptionsSmallV3}
}
